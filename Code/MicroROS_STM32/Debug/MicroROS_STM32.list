
MicroROS_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b854  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001090  0801bb08  0801bb08  0001cb08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801cb98  0801cb98  0001db98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0801cba0  0801cba0  0001dba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801cbac  0801cbac  0001dbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000510  24000000  0801cbb0  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000dcd8  24000510  0801d0c0  0001e510  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2400e1e8  0801d0c0  0001f1e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001e510  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026ea7  00000000  00000000  0001e53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dfa  00000000  00000000  000453e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b18  00000000  00000000  0004a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014e7  00000000  00000000  0004bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000377d8  00000000  00000000  0004d1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025ba0  00000000  00000000  000849b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bd50  00000000  00000000  000aa557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000069  00000000  00000000  002062a7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f70  00000000  00000000  00206310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  0020e280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000510 	.word	0x24000510
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801baec 	.word	0x0801baec

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000514 	.word	0x24000514
 80002ec:	0801baec 	.word	0x0801baec

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_ldivmod>:
 80003c0:	b97b      	cbnz	r3, 80003e2 <__aeabi_ldivmod+0x22>
 80003c2:	b972      	cbnz	r2, 80003e2 <__aeabi_ldivmod+0x22>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bfbe      	ittt	lt
 80003c8:	2000      	movlt	r0, #0
 80003ca:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003ce:	e006      	blt.n	80003de <__aeabi_ldivmod+0x1e>
 80003d0:	bf08      	it	eq
 80003d2:	2800      	cmpeq	r0, #0
 80003d4:	bf1c      	itt	ne
 80003d6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003da:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003de:	f000 b9d3 	b.w	8000788 <__aeabi_idiv0>
 80003e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ea:	2900      	cmp	r1, #0
 80003ec:	db09      	blt.n	8000402 <__aeabi_ldivmod+0x42>
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	db1a      	blt.n	8000428 <__aeabi_ldivmod+0x68>
 80003f2:	f000 f84d 	bl	8000490 <__udivmoddi4>
 80003f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fe:	b004      	add	sp, #16
 8000400:	4770      	bx	lr
 8000402:	4240      	negs	r0, r0
 8000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	db1b      	blt.n	8000444 <__aeabi_ldivmod+0x84>
 800040c:	f000 f840 	bl	8000490 <__udivmoddi4>
 8000410:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000418:	b004      	add	sp, #16
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	4252      	negs	r2, r2
 8000422:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000426:	4770      	bx	lr
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	f000 f82f 	bl	8000490 <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4240      	negs	r0, r0
 800043e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000442:	4770      	bx	lr
 8000444:	4252      	negs	r2, r2
 8000446:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044a:	f000 f821 	bl	8000490 <__udivmoddi4>
 800044e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000456:	b004      	add	sp, #16
 8000458:	4252      	negs	r2, r2
 800045a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800045e:	4770      	bx	lr

08000460 <__aeabi_uldivmod>:
 8000460:	b953      	cbnz	r3, 8000478 <__aeabi_uldivmod+0x18>
 8000462:	b94a      	cbnz	r2, 8000478 <__aeabi_uldivmod+0x18>
 8000464:	2900      	cmp	r1, #0
 8000466:	bf08      	it	eq
 8000468:	2800      	cmpeq	r0, #0
 800046a:	bf1c      	itt	ne
 800046c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000470:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000474:	f000 b988 	b.w	8000788 <__aeabi_idiv0>
 8000478:	f1ad 0c08 	sub.w	ip, sp, #8
 800047c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000480:	f000 f806 	bl	8000490 <__udivmoddi4>
 8000484:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800048c:	b004      	add	sp, #16
 800048e:	4770      	bx	lr

08000490 <__udivmoddi4>:
 8000490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000494:	9d08      	ldr	r5, [sp, #32]
 8000496:	468e      	mov	lr, r1
 8000498:	4604      	mov	r4, r0
 800049a:	4688      	mov	r8, r1
 800049c:	2b00      	cmp	r3, #0
 800049e:	d14a      	bne.n	8000536 <__udivmoddi4+0xa6>
 80004a0:	428a      	cmp	r2, r1
 80004a2:	4617      	mov	r7, r2
 80004a4:	d962      	bls.n	800056c <__udivmoddi4+0xdc>
 80004a6:	fab2 f682 	clz	r6, r2
 80004aa:	b14e      	cbz	r6, 80004c0 <__udivmoddi4+0x30>
 80004ac:	f1c6 0320 	rsb	r3, r6, #32
 80004b0:	fa01 f806 	lsl.w	r8, r1, r6
 80004b4:	fa20 f303 	lsr.w	r3, r0, r3
 80004b8:	40b7      	lsls	r7, r6
 80004ba:	ea43 0808 	orr.w	r8, r3, r8
 80004be:	40b4      	lsls	r4, r6
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	fa1f fc87 	uxth.w	ip, r7
 80004c8:	fbb8 f1fe 	udiv	r1, r8, lr
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	fb0e 8811 	mls	r8, lr, r1, r8
 80004d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004d6:	fb01 f20c 	mul.w	r2, r1, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d909      	bls.n	80004f2 <__udivmoddi4+0x62>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80004e4:	f080 80ea 	bcs.w	80006bc <__udivmoddi4+0x22c>
 80004e8:	429a      	cmp	r2, r3
 80004ea:	f240 80e7 	bls.w	80006bc <__udivmoddi4+0x22c>
 80004ee:	3902      	subs	r1, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	1a9a      	subs	r2, r3, r2
 80004f4:	b2a3      	uxth	r3, r4
 80004f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80004fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80004fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000502:	fb00 fc0c 	mul.w	ip, r0, ip
 8000506:	459c      	cmp	ip, r3
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x8e>
 800050a:	18fb      	adds	r3, r7, r3
 800050c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000510:	f080 80d6 	bcs.w	80006c0 <__udivmoddi4+0x230>
 8000514:	459c      	cmp	ip, r3
 8000516:	f240 80d3 	bls.w	80006c0 <__udivmoddi4+0x230>
 800051a:	443b      	add	r3, r7
 800051c:	3802      	subs	r0, #2
 800051e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000522:	eba3 030c 	sub.w	r3, r3, ip
 8000526:	2100      	movs	r1, #0
 8000528:	b11d      	cbz	r5, 8000532 <__udivmoddi4+0xa2>
 800052a:	40f3      	lsrs	r3, r6
 800052c:	2200      	movs	r2, #0
 800052e:	e9c5 3200 	strd	r3, r2, [r5]
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	428b      	cmp	r3, r1
 8000538:	d905      	bls.n	8000546 <__udivmoddi4+0xb6>
 800053a:	b10d      	cbz	r5, 8000540 <__udivmoddi4+0xb0>
 800053c:	e9c5 0100 	strd	r0, r1, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	4608      	mov	r0, r1
 8000544:	e7f5      	b.n	8000532 <__udivmoddi4+0xa2>
 8000546:	fab3 f183 	clz	r1, r3
 800054a:	2900      	cmp	r1, #0
 800054c:	d146      	bne.n	80005dc <__udivmoddi4+0x14c>
 800054e:	4573      	cmp	r3, lr
 8000550:	d302      	bcc.n	8000558 <__udivmoddi4+0xc8>
 8000552:	4282      	cmp	r2, r0
 8000554:	f200 8105 	bhi.w	8000762 <__udivmoddi4+0x2d2>
 8000558:	1a84      	subs	r4, r0, r2
 800055a:	eb6e 0203 	sbc.w	r2, lr, r3
 800055e:	2001      	movs	r0, #1
 8000560:	4690      	mov	r8, r2
 8000562:	2d00      	cmp	r5, #0
 8000564:	d0e5      	beq.n	8000532 <__udivmoddi4+0xa2>
 8000566:	e9c5 4800 	strd	r4, r8, [r5]
 800056a:	e7e2      	b.n	8000532 <__udivmoddi4+0xa2>
 800056c:	2a00      	cmp	r2, #0
 800056e:	f000 8090 	beq.w	8000692 <__udivmoddi4+0x202>
 8000572:	fab2 f682 	clz	r6, r2
 8000576:	2e00      	cmp	r6, #0
 8000578:	f040 80a4 	bne.w	80006c4 <__udivmoddi4+0x234>
 800057c:	1a8a      	subs	r2, r1, r2
 800057e:	0c03      	lsrs	r3, r0, #16
 8000580:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000584:	b280      	uxth	r0, r0
 8000586:	b2bc      	uxth	r4, r7
 8000588:	2101      	movs	r1, #1
 800058a:	fbb2 fcfe 	udiv	ip, r2, lr
 800058e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000596:	fb04 f20c 	mul.w	r2, r4, ip
 800059a:	429a      	cmp	r2, r3
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x11e>
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80005a4:	d202      	bcs.n	80005ac <__udivmoddi4+0x11c>
 80005a6:	429a      	cmp	r2, r3
 80005a8:	f200 80e0 	bhi.w	800076c <__udivmoddi4+0x2dc>
 80005ac:	46c4      	mov	ip, r8
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	fbb3 f2fe 	udiv	r2, r3, lr
 80005b4:	fb0e 3312 	mls	r3, lr, r2, r3
 80005b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80005bc:	fb02 f404 	mul.w	r4, r2, r4
 80005c0:	429c      	cmp	r4, r3
 80005c2:	d907      	bls.n	80005d4 <__udivmoddi4+0x144>
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80005ca:	d202      	bcs.n	80005d2 <__udivmoddi4+0x142>
 80005cc:	429c      	cmp	r4, r3
 80005ce:	f200 80ca 	bhi.w	8000766 <__udivmoddi4+0x2d6>
 80005d2:	4602      	mov	r2, r0
 80005d4:	1b1b      	subs	r3, r3, r4
 80005d6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80005da:	e7a5      	b.n	8000528 <__udivmoddi4+0x98>
 80005dc:	f1c1 0620 	rsb	r6, r1, #32
 80005e0:	408b      	lsls	r3, r1
 80005e2:	fa22 f706 	lsr.w	r7, r2, r6
 80005e6:	431f      	orrs	r7, r3
 80005e8:	fa0e f401 	lsl.w	r4, lr, r1
 80005ec:	fa20 f306 	lsr.w	r3, r0, r6
 80005f0:	fa2e fe06 	lsr.w	lr, lr, r6
 80005f4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80005f8:	4323      	orrs	r3, r4
 80005fa:	fa00 f801 	lsl.w	r8, r0, r1
 80005fe:	fa1f fc87 	uxth.w	ip, r7
 8000602:	fbbe f0f9 	udiv	r0, lr, r9
 8000606:	0c1c      	lsrs	r4, r3, #16
 8000608:	fb09 ee10 	mls	lr, r9, r0, lr
 800060c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000610:	fb00 fe0c 	mul.w	lr, r0, ip
 8000614:	45a6      	cmp	lr, r4
 8000616:	fa02 f201 	lsl.w	r2, r2, r1
 800061a:	d909      	bls.n	8000630 <__udivmoddi4+0x1a0>
 800061c:	193c      	adds	r4, r7, r4
 800061e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000622:	f080 809c 	bcs.w	800075e <__udivmoddi4+0x2ce>
 8000626:	45a6      	cmp	lr, r4
 8000628:	f240 8099 	bls.w	800075e <__udivmoddi4+0x2ce>
 800062c:	3802      	subs	r0, #2
 800062e:	443c      	add	r4, r7
 8000630:	eba4 040e 	sub.w	r4, r4, lr
 8000634:	fa1f fe83 	uxth.w	lr, r3
 8000638:	fbb4 f3f9 	udiv	r3, r4, r9
 800063c:	fb09 4413 	mls	r4, r9, r3, r4
 8000640:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000644:	fb03 fc0c 	mul.w	ip, r3, ip
 8000648:	45a4      	cmp	ip, r4
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x1ce>
 800064c:	193c      	adds	r4, r7, r4
 800064e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000652:	f080 8082 	bcs.w	800075a <__udivmoddi4+0x2ca>
 8000656:	45a4      	cmp	ip, r4
 8000658:	d97f      	bls.n	800075a <__udivmoddi4+0x2ca>
 800065a:	3b02      	subs	r3, #2
 800065c:	443c      	add	r4, r7
 800065e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000662:	eba4 040c 	sub.w	r4, r4, ip
 8000666:	fba0 ec02 	umull	lr, ip, r0, r2
 800066a:	4564      	cmp	r4, ip
 800066c:	4673      	mov	r3, lr
 800066e:	46e1      	mov	r9, ip
 8000670:	d362      	bcc.n	8000738 <__udivmoddi4+0x2a8>
 8000672:	d05f      	beq.n	8000734 <__udivmoddi4+0x2a4>
 8000674:	b15d      	cbz	r5, 800068e <__udivmoddi4+0x1fe>
 8000676:	ebb8 0203 	subs.w	r2, r8, r3
 800067a:	eb64 0409 	sbc.w	r4, r4, r9
 800067e:	fa04 f606 	lsl.w	r6, r4, r6
 8000682:	fa22 f301 	lsr.w	r3, r2, r1
 8000686:	431e      	orrs	r6, r3
 8000688:	40cc      	lsrs	r4, r1
 800068a:	e9c5 6400 	strd	r6, r4, [r5]
 800068e:	2100      	movs	r1, #0
 8000690:	e74f      	b.n	8000532 <__udivmoddi4+0xa2>
 8000692:	fbb1 fcf2 	udiv	ip, r1, r2
 8000696:	0c01      	lsrs	r1, r0, #16
 8000698:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800069c:	b280      	uxth	r0, r0
 800069e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80006a2:	463b      	mov	r3, r7
 80006a4:	4638      	mov	r0, r7
 80006a6:	463c      	mov	r4, r7
 80006a8:	46b8      	mov	r8, r7
 80006aa:	46be      	mov	lr, r7
 80006ac:	2620      	movs	r6, #32
 80006ae:	fbb1 f1f7 	udiv	r1, r1, r7
 80006b2:	eba2 0208 	sub.w	r2, r2, r8
 80006b6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80006ba:	e766      	b.n	800058a <__udivmoddi4+0xfa>
 80006bc:	4601      	mov	r1, r0
 80006be:	e718      	b.n	80004f2 <__udivmoddi4+0x62>
 80006c0:	4610      	mov	r0, r2
 80006c2:	e72c      	b.n	800051e <__udivmoddi4+0x8e>
 80006c4:	f1c6 0220 	rsb	r2, r6, #32
 80006c8:	fa2e f302 	lsr.w	r3, lr, r2
 80006cc:	40b7      	lsls	r7, r6
 80006ce:	40b1      	lsls	r1, r6
 80006d0:	fa20 f202 	lsr.w	r2, r0, r2
 80006d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006d8:	430a      	orrs	r2, r1
 80006da:	fbb3 f8fe 	udiv	r8, r3, lr
 80006de:	b2bc      	uxth	r4, r7
 80006e0:	fb0e 3318 	mls	r3, lr, r8, r3
 80006e4:	0c11      	lsrs	r1, r2, #16
 80006e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ea:	fb08 f904 	mul.w	r9, r8, r4
 80006ee:	40b0      	lsls	r0, r6
 80006f0:	4589      	cmp	r9, r1
 80006f2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80006f6:	b280      	uxth	r0, r0
 80006f8:	d93e      	bls.n	8000778 <__udivmoddi4+0x2e8>
 80006fa:	1879      	adds	r1, r7, r1
 80006fc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000700:	d201      	bcs.n	8000706 <__udivmoddi4+0x276>
 8000702:	4589      	cmp	r9, r1
 8000704:	d81f      	bhi.n	8000746 <__udivmoddi4+0x2b6>
 8000706:	eba1 0109 	sub.w	r1, r1, r9
 800070a:	fbb1 f9fe 	udiv	r9, r1, lr
 800070e:	fb09 f804 	mul.w	r8, r9, r4
 8000712:	fb0e 1119 	mls	r1, lr, r9, r1
 8000716:	b292      	uxth	r2, r2
 8000718:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800071c:	4542      	cmp	r2, r8
 800071e:	d229      	bcs.n	8000774 <__udivmoddi4+0x2e4>
 8000720:	18ba      	adds	r2, r7, r2
 8000722:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000726:	d2c4      	bcs.n	80006b2 <__udivmoddi4+0x222>
 8000728:	4542      	cmp	r2, r8
 800072a:	d2c2      	bcs.n	80006b2 <__udivmoddi4+0x222>
 800072c:	f1a9 0102 	sub.w	r1, r9, #2
 8000730:	443a      	add	r2, r7
 8000732:	e7be      	b.n	80006b2 <__udivmoddi4+0x222>
 8000734:	45f0      	cmp	r8, lr
 8000736:	d29d      	bcs.n	8000674 <__udivmoddi4+0x1e4>
 8000738:	ebbe 0302 	subs.w	r3, lr, r2
 800073c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000740:	3801      	subs	r0, #1
 8000742:	46e1      	mov	r9, ip
 8000744:	e796      	b.n	8000674 <__udivmoddi4+0x1e4>
 8000746:	eba7 0909 	sub.w	r9, r7, r9
 800074a:	4449      	add	r1, r9
 800074c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000750:	fbb1 f9fe 	udiv	r9, r1, lr
 8000754:	fb09 f804 	mul.w	r8, r9, r4
 8000758:	e7db      	b.n	8000712 <__udivmoddi4+0x282>
 800075a:	4673      	mov	r3, lr
 800075c:	e77f      	b.n	800065e <__udivmoddi4+0x1ce>
 800075e:	4650      	mov	r0, sl
 8000760:	e766      	b.n	8000630 <__udivmoddi4+0x1a0>
 8000762:	4608      	mov	r0, r1
 8000764:	e6fd      	b.n	8000562 <__udivmoddi4+0xd2>
 8000766:	443b      	add	r3, r7
 8000768:	3a02      	subs	r2, #2
 800076a:	e733      	b.n	80005d4 <__udivmoddi4+0x144>
 800076c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000770:	443b      	add	r3, r7
 8000772:	e71c      	b.n	80005ae <__udivmoddi4+0x11e>
 8000774:	4649      	mov	r1, r9
 8000776:	e79c      	b.n	80006b2 <__udivmoddi4+0x222>
 8000778:	eba1 0109 	sub.w	r1, r1, r9
 800077c:	46c4      	mov	ip, r8
 800077e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000782:	fb09 f804 	mul.w	r8, r9, r4
 8000786:	e7c4      	b.n	8000712 <__udivmoddi4+0x282>

08000788 <__aeabi_idiv0>:
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop

0800078c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000798:	f00b fb06 	bl	800bda8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800079c:	4b5a      	ldr	r3, [pc, #360]	@ (8000908 <pvPortMallocMicroROS+0x17c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80007a4:	f000 f986 	bl	8000ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80007a8:	4b58      	ldr	r3, [pc, #352]	@ (800090c <pvPortMallocMicroROS+0x180>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4013      	ands	r3, r2
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f040 8090 	bne.w	80008d6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d01e      	beq.n	80007fa <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80007bc:	2208      	movs	r2, #8
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d015      	beq.n	80007fa <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f023 0307 	bic.w	r3, r3, #7
 80007d4:	3308      	adds	r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00b      	beq.n	80007fa <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80007e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007e6:	f383 8811 	msr	BASEPRI, r3
 80007ea:	f3bf 8f6f 	isb	sy
 80007ee:	f3bf 8f4f 	dsb	sy
 80007f2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	e7fd      	b.n	80007f6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d06a      	beq.n	80008d6 <pvPortMallocMicroROS+0x14a>
 8000800:	4b43      	ldr	r3, [pc, #268]	@ (8000910 <pvPortMallocMicroROS+0x184>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d865      	bhi.n	80008d6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800080a:	4b42      	ldr	r3, [pc, #264]	@ (8000914 <pvPortMallocMicroROS+0x188>)
 800080c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800080e:	4b41      	ldr	r3, [pc, #260]	@ (8000914 <pvPortMallocMicroROS+0x188>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000814:	e004      	b.n	8000820 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	d903      	bls.n	8000832 <pvPortMallocMicroROS+0xa6>
 800082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f1      	bne.n	8000816 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000832:	4b35      	ldr	r3, [pc, #212]	@ (8000908 <pvPortMallocMicroROS+0x17c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000838:	429a      	cmp	r2, r3
 800083a:	d04c      	beq.n	80008d6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2208      	movs	r2, #8
 8000842:	4413      	add	r3, r2
 8000844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1ad2      	subs	r2, r2, r3
 8000856:	2308      	movs	r3, #8
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	429a      	cmp	r2, r3
 800085c:	d920      	bls.n	80008a0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800085e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00b      	beq.n	8000888 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	613b      	str	r3, [r7, #16]
}
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800089a:	69b8      	ldr	r0, [r7, #24]
 800089c:	f000 f96c 	bl	8000b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <pvPortMallocMicroROS+0x184>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	4a19      	ldr	r2, [pc, #100]	@ (8000910 <pvPortMallocMicroROS+0x184>)
 80008ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80008ae:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <pvPortMallocMicroROS+0x184>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <pvPortMallocMicroROS+0x18c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d203      	bcs.n	80008c2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <pvPortMallocMicroROS+0x184>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a16      	ldr	r2, [pc, #88]	@ (8000918 <pvPortMallocMicroROS+0x18c>)
 80008c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80008c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <pvPortMallocMicroROS+0x180>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	431a      	orrs	r2, r3
 80008cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80008d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008d6:	f00b fa75 	bl	800bdc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00b      	beq.n	80008fc <pvPortMallocMicroROS+0x170>
	__asm volatile
 80008e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	60fb      	str	r3, [r7, #12]
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80008fc:	69fb      	ldr	r3, [r7, #28]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3728      	adds	r7, #40	@ 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	24004134 	.word	0x24004134
 800090c:	24004140 	.word	0x24004140
 8000910:	24004138 	.word	0x24004138
 8000914:	2400412c 	.word	0x2400412c
 8000918:	2400413c 	.word	0x2400413c

0800091c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d04a      	beq.n	80009c4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800092e:	2308      	movs	r3, #8
 8000930:	425b      	negs	r3, r3
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	4413      	add	r3, r2
 8000936:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	4b22      	ldr	r3, [pc, #136]	@ (80009cc <vPortFreeMicroROS+0xb0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4013      	ands	r3, r2
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10b      	bne.n	8000962 <vPortFreeMicroROS+0x46>
	__asm volatile
 800094a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800094e:	f383 8811 	msr	BASEPRI, r3
 8000952:	f3bf 8f6f 	isb	sy
 8000956:	f3bf 8f4f 	dsb	sy
 800095a:	60fb      	str	r3, [r7, #12]
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	e7fd      	b.n	800095e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00b      	beq.n	8000982 <vPortFreeMicroROS+0x66>
	__asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	60bb      	str	r3, [r7, #8]
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	e7fd      	b.n	800097e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <vPortFreeMicroROS+0xb0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4013      	ands	r3, r2
 800098c:	2b00      	cmp	r3, #0
 800098e:	d019      	beq.n	80009c4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d115      	bne.n	80009c4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <vPortFreeMicroROS+0xb0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	401a      	ands	r2, r3
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80009a8:	f00b f9fe 	bl	800bda8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <vPortFreeMicroROS+0xb4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a06      	ldr	r2, [pc, #24]	@ (80009d0 <vPortFreeMicroROS+0xb4>)
 80009b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80009ba:	6938      	ldr	r0, [r7, #16]
 80009bc:	f000 f8dc 	bl	8000b78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80009c0:	f00b fa00 	bl	800bdc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	24004140 	.word	0x24004140
 80009d0:	24004138 	.word	0x24004138

080009d4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80009e0:	2308      	movs	r3, #8
 80009e2:	425b      	negs	r3, r3
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	4413      	add	r3, r2
 80009e8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <getBlockSize+0x38>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	43db      	mvns	r3, r3
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]

	return count;
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	371c      	adds	r7, #28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	24004140 	.word	0x24004140

08000a10 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a1a:	f00b f9c5 	bl	800bda8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000a1e:	6838      	ldr	r0, [r7, #0]
 8000a20:	f7ff feb4 	bl	800078c <pvPortMallocMicroROS>
 8000a24:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d017      	beq.n	8000a5c <pvPortReallocMicroROS+0x4c>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d014      	beq.n	8000a5c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffce 	bl	80009d4 <getBlockSize>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	1a9b      	subs	r3, r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d201      	bcs.n	8000a4c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f01a fa0c 	bl	801ae6e <memcpy>

		vPortFreeMicroROS(pv);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff ff60 	bl	800091c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000a5c:	f00b f9b2 	bl	800bdc4 <xTaskResumeAll>

	return newmem;
 8000a60:	68bb      	ldr	r3, [r7, #8]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000a74:	f00b f998 	bl	800bda8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff fe82 	bl	800078c <pvPortMallocMicroROS>
 8000a88:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a8e:	e004      	b.n	8000a9a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	613a      	str	r2, [r7, #16]
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	617a      	str	r2, [r7, #20]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1f5      	bne.n	8000a90 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000aa4:	f00b f98e 	bl	800bdc4 <xTaskResumeAll>
  	return mem;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000aba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <prvHeapInit+0xac>)
 8000ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00c      	beq.n	8000ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3307      	adds	r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f023 0307 	bic.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b60 <prvHeapInit+0xac>)
 8000ae4:	4413      	add	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000aec:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <prvHeapInit+0xb0>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <prvHeapInit+0xb0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	4413      	add	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000b00:	2208      	movs	r2, #8
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	1a9b      	subs	r3, r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f023 0307 	bic.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <prvHeapInit+0xb4>)
 8000b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <prvHeapInit+0xb4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <prvHeapInit+0xb4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	1ad2      	subs	r2, r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <prvHeapInit+0xb4>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <prvHeapInit+0xb8>)
 8000b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4a09      	ldr	r2, [pc, #36]	@ (8000b70 <prvHeapInit+0xbc>)
 8000b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <prvHeapInit+0xc0>)
 8000b4e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	2400052c 	.word	0x2400052c
 8000b64:	2400412c 	.word	0x2400412c
 8000b68:	24004134 	.word	0x24004134
 8000b6c:	2400413c 	.word	0x2400413c
 8000b70:	24004138 	.word	0x24004138
 8000b74:	24004140 	.word	0x24004140

08000b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b80:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <prvInsertBlockIntoFreeList+0xac>)
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e002      	b.n	8000b8c <prvInsertBlockIntoFreeList+0x14>
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d8f7      	bhi.n	8000b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d108      	bne.n	8000bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d118      	bne.n	8000c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <prvInsertBlockIntoFreeList+0xb0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d00d      	beq.n	8000bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	441a      	add	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	e008      	b.n	8000c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <prvInsertBlockIntoFreeList+0xb0>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e003      	b.n	8000c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d002      	beq.n	8000c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2400412c 	.word	0x2400412c
 8000c28:	24004134 	.word	0x24004134

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_DMA_Init+0x4c>)
 8000c34:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c38:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <MX_DMA_Init+0x4c>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_DMA_Init+0x4c>)
 8000c44:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2105      	movs	r1, #5
 8000c54:	200b      	movs	r0, #11
 8000c56:	f001 fa5d 	bl	8002114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c5a:	200b      	movs	r0, #11
 8000c5c:	f001 fa74 	bl	8002148 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2105      	movs	r1, #5
 8000c64:	200c      	movs	r0, #12
 8000c66:	f001 fa55 	bl	8002114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c6a:	200c      	movs	r0, #12
 8000c6c:	f001 fa6c 	bl	8002148 <HAL_NVIC_EnableIRQ>

}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	58024400 	.word	0x58024400

08000c7c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c8a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000c8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c90:	4904      	ldr	r1, [pc, #16]	@ (8000ca4 <cubemx_transport_open+0x28>)
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f007 fdf2 	bl	800887c <HAL_UART_Receive_DMA>
    return true;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	24004144 	.word	0x24004144

08000ca8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cb6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f007 fe2b 	bl	8008914 <HAL_UART_DMAStop>
    return true;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000cdc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce4:	2b20      	cmp	r3, #32
 8000ce6:	d11b      	bne.n	8000d20 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	6978      	ldr	r0, [r7, #20]
 8000cf2:	f007 fd43 	bl	800877c <HAL_UART_Transmit_DMA>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000cfa:	e002      	b.n	8000d02 <cubemx_transport_write+0x3a>
            osDelay(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f009 fff1 	bl	800ace4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000d02:	7cfb      	ldrb	r3, [r7, #19]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d104      	bne.n	8000d12 <cubemx_transport_write+0x4a>
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0e:	2b20      	cmp	r3, #32
 8000d10:	d1f4      	bne.n	8000cfc <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000d12:	7cfb      	ldrb	r3, [r7, #19]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <cubemx_transport_write+0x54>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	e002      	b.n	8000d22 <cubemx_transport_write+0x5a>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e000      	b.n	8000d22 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000d20:	2300      	movs	r3, #0
    }
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d40:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d46:	b672      	cpsid	i
}
 8000d48:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a5a      	ldr	r2, [pc, #360]	@ (8000ebc <cubemx_transport_read+0x190>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d068      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a57      	ldr	r2, [pc, #348]	@ (8000ec0 <cubemx_transport_read+0x194>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d061      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a55      	ldr	r2, [pc, #340]	@ (8000ec4 <cubemx_transport_read+0x198>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d05a      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a52      	ldr	r2, [pc, #328]	@ (8000ec8 <cubemx_transport_read+0x19c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d053      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a50      	ldr	r2, [pc, #320]	@ (8000ecc <cubemx_transport_read+0x1a0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d04c      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a4d      	ldr	r2, [pc, #308]	@ (8000ed0 <cubemx_transport_read+0x1a4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d045      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a4b      	ldr	r2, [pc, #300]	@ (8000ed4 <cubemx_transport_read+0x1a8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d03e      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a48      	ldr	r2, [pc, #288]	@ (8000ed8 <cubemx_transport_read+0x1ac>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d037      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a46      	ldr	r2, [pc, #280]	@ (8000edc <cubemx_transport_read+0x1b0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d030      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a43      	ldr	r2, [pc, #268]	@ (8000ee0 <cubemx_transport_read+0x1b4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d029      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a41      	ldr	r2, [pc, #260]	@ (8000ee4 <cubemx_transport_read+0x1b8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d022      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee8 <cubemx_transport_read+0x1bc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01b      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8000eec <cubemx_transport_read+0x1c0>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d014      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a39      	ldr	r2, [pc, #228]	@ (8000ef0 <cubemx_transport_read+0x1c4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a37      	ldr	r2, [pc, #220]	@ (8000ef4 <cubemx_transport_read+0x1c8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d006      	beq.n	8000e2a <cubemx_transport_read+0xfe>
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a34      	ldr	r2, [pc, #208]	@ (8000ef8 <cubemx_transport_read+0x1cc>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d107      	bne.n	8000e3a <cubemx_transport_read+0x10e>
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e38:	e006      	b.n	8000e48 <cubemx_transport_read+0x11c>
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e48:	4a2c      	ldr	r2, [pc, #176]	@ (8000efc <cubemx_transport_read+0x1d0>)
 8000e4a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e4c:	b662      	cpsie	i
}
 8000e4e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	3301      	adds	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f009 ff44 	bl	800ace4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <cubemx_transport_read+0x1d4>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <cubemx_transport_read+0x1d0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d104      	bne.n	8000e72 <cubemx_transport_read+0x146>
 8000e68:	69fa      	ldr	r2, [r7, #28]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f6ff af6a 	blt.w	8000d46 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e76:	e011      	b.n	8000e9c <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 8000e78:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <cubemx_transport_read+0x1d4>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	440b      	add	r3, r1
 8000e82:	4920      	ldr	r1, [pc, #128]	@ (8000f04 <cubemx_transport_read+0x1d8>)
 8000e84:	5c8a      	ldrb	r2, [r1, r2]
 8000e86:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <cubemx_transport_read+0x1d4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e92:	4a1b      	ldr	r2, [pc, #108]	@ (8000f00 <cubemx_transport_read+0x1d4>)
 8000e94:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <cubemx_transport_read+0x1d4>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <cubemx_transport_read+0x1d0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d003      	beq.n	8000eb0 <cubemx_transport_read+0x184>
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3e3      	bcc.n	8000e78 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40020010 	.word	0x40020010
 8000ec0:	40020028 	.word	0x40020028
 8000ec4:	40020040 	.word	0x40020040
 8000ec8:	40020058 	.word	0x40020058
 8000ecc:	40020070 	.word	0x40020070
 8000ed0:	40020088 	.word	0x40020088
 8000ed4:	400200a0 	.word	0x400200a0
 8000ed8:	400200b8 	.word	0x400200b8
 8000edc:	40020410 	.word	0x40020410
 8000ee0:	40020428 	.word	0x40020428
 8000ee4:	40020440 	.word	0x40020440
 8000ee8:	40020458 	.word	0x40020458
 8000eec:	40020470 	.word	0x40020470
 8000ef0:	40020488 	.word	0x40020488
 8000ef4:	400204a0 	.word	0x400204a0
 8000ef8:	400204b8 	.word	0x400204b8
 8000efc:	24004948 	.word	0x24004948
 8000f00:	24004944 	.word	0x24004944
 8000f04:	24004144 	.word	0x24004144

08000f08 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f0c:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <MX_FREERTOS_Init+0x18>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_FREERTOS_Init+0x1c>)
 8000f12:	f009 fe55 	bl	800abc0 <osThreadNew>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a03      	ldr	r2, [pc, #12]	@ (8000f28 <MX_FREERTOS_Init+0x20>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	0801bb98 	.word	0x0801bb98
 8000f24:	08001309 	.word	0x08001309
 8000f28:	2400494c 	.word	0x2400494c

08000f2c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	@ 0x38
 8000f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f42:	4b86      	ldr	r3, [pc, #536]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f48:	4a84      	ldr	r2, [pc, #528]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f52:	4b82      	ldr	r3, [pc, #520]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	623b      	str	r3, [r7, #32]
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	4b7e      	ldr	r3, [pc, #504]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f66:	4a7d      	ldr	r2, [pc, #500]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f70:	4b7a      	ldr	r3, [pc, #488]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b77      	ldr	r3, [pc, #476]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f84:	4a75      	ldr	r2, [pc, #468]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f86:	f043 0320 	orr.w	r3, r3, #32
 8000f8a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f8e:	4b73      	ldr	r3, [pc, #460]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f94:	f003 0320 	and.w	r3, r3, #32
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9c:	4b6f      	ldr	r3, [pc, #444]	@ (800115c <MX_GPIO_Init+0x230>)
 8000f9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa2:	4a6e      	ldr	r2, [pc, #440]	@ (800115c <MX_GPIO_Init+0x230>)
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fac:	4b6b      	ldr	r3, [pc, #428]	@ (800115c <MX_GPIO_Init+0x230>)
 8000fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b68      	ldr	r3, [pc, #416]	@ (800115c <MX_GPIO_Init+0x230>)
 8000fbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fc0:	4a66      	ldr	r2, [pc, #408]	@ (800115c <MX_GPIO_Init+0x230>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fca:	4b64      	ldr	r3, [pc, #400]	@ (800115c <MX_GPIO_Init+0x230>)
 8000fcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b60      	ldr	r3, [pc, #384]	@ (800115c <MX_GPIO_Init+0x230>)
 8000fda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fde:	4a5f      	ldr	r2, [pc, #380]	@ (800115c <MX_GPIO_Init+0x230>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800115c <MX_GPIO_Init+0x230>)
 8000fea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b59      	ldr	r3, [pc, #356]	@ (800115c <MX_GPIO_Init+0x230>)
 8000ff8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ffc:	4a57      	ldr	r2, [pc, #348]	@ (800115c <MX_GPIO_Init+0x230>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001006:	4b55      	ldr	r3, [pc, #340]	@ (800115c <MX_GPIO_Init+0x230>)
 8001008:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001014:	4b51      	ldr	r3, [pc, #324]	@ (800115c <MX_GPIO_Init+0x230>)
 8001016:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800101a:	4a50      	ldr	r2, [pc, #320]	@ (800115c <MX_GPIO_Init+0x230>)
 800101c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001020:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001024:	4b4d      	ldr	r3, [pc, #308]	@ (800115c <MX_GPIO_Init+0x230>)
 8001026:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800102a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001038:	4849      	ldr	r0, [pc, #292]	@ (8001160 <MX_GPIO_Init+0x234>)
 800103a:	f004 f9a5 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4848      	ldr	r0, [pc, #288]	@ (8001164 <MX_GPIO_Init+0x238>)
 8001044:	f004 f9a0 	bl	8005388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001048:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	4841      	ldr	r0, [pc, #260]	@ (8001164 <MX_GPIO_Init+0x238>)
 800105e:	f003 ffe3 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001062:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	483c      	ldr	r0, [pc, #240]	@ (8001168 <MX_GPIO_Init+0x23c>)
 8001078:	f003 ffd6 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 PF11 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800107c:	f64c 73c0 	movw	r3, #53184	@ 0xcfc0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4836      	ldr	r0, [pc, #216]	@ (800116c <MX_GPIO_Init+0x240>)
 8001092:	f003 ffc9 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001096:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109c:	2303      	movs	r3, #3
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	482f      	ldr	r0, [pc, #188]	@ (8001168 <MX_GPIO_Init+0x23c>)
 80010ac:	f003 ffbc 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010b0:	f649 73ff 	movw	r3, #40959	@ 0x9fff
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	482a      	ldr	r0, [pc, #168]	@ (8001170 <MX_GPIO_Init+0x244>)
 80010c6:	f003 ffaf 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80010ca:	f244 0301 	movw	r3, #16385	@ 0x4001
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	481f      	ldr	r0, [pc, #124]	@ (8001160 <MX_GPIO_Init+0x234>)
 80010e4:	f003 ffa0 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80010e8:	f64b 73f6 	movw	r3, #49142	@ 0xbff6
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4818      	ldr	r0, [pc, #96]	@ (8001160 <MX_GPIO_Init+0x234>)
 80010fe:	f003 ff93 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001102:	f64f 43ff 	movw	r3, #64767	@ 0xfcff
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4817      	ldr	r0, [pc, #92]	@ (8001174 <MX_GPIO_Init+0x248>)
 8001118:	f003 ff86 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG8 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800111c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4811      	ldr	r0, [pc, #68]	@ (8001178 <MX_GPIO_Init+0x24c>)
 8001132:	f003 ff79 	bl	8005028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001136:	2302      	movs	r3, #2
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_GPIO_Init+0x238>)
 800114e:	f003 ff6b 	bl	8005028 <HAL_GPIO_Init>

}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	@ 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	58024400 	.word	0x58024400
 8001160:	58020400 	.word	0x58020400
 8001164:	58021000 	.word	0x58021000
 8001168:	58020800 	.word	0x58020800
 800116c:	58021400 	.word	0x58021400
 8001170:	58020000 	.word	0x58020000
 8001174:	58020c00 	.word	0x58020c00
 8001178:	58021800 	.word	0x58021800

0800117c <_write>:
  * @param  ptr   Pointer to the data buffer.
  * @param  len   Number of bytes to write.
  * @retval len   Number of bytes written.
  */
int _write(int file, char *ptr, int len)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  // We only want to handle standard output.
  if (file == STDOUT_FILENO)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d107      	bne.n	800119e <_write+0x22>
  {
    // Transmit the data using the HAL library for USART3.
    // This is a blocking call, suitable for debugging.
    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	b29a      	uxth	r2, r3
 8001192:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <_write+0x2c>)
 800119a:	f007 fa61 	bl	8008660 <HAL_UART_Transmit>
  }
  // Return the number of characters written.
  return len;
 800119e:	687b      	ldr	r3, [r7, #4]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240049b4 	.word	0x240049b4

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80011b0:	f000 f98e 	bl	80014d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b4:	f000 fe9a 	bl	8001eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b8:	f000 f80e 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011bc:	f7ff feb6 	bl	8000f2c <MX_GPIO_Init>
  MX_DMA_Init();
 80011c0:	f7ff fd34 	bl	8000c2c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011c4:	f000 fd42 	bl	8001c4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80011c8:	f009 fcb0 	bl	800ab2c <osKernelInitialize>
  MX_FREERTOS_Init();
 80011cc:	f7ff fe9c 	bl	8000f08 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011d0:	f009 fcd0 	bl	800ab74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <main+0x28>

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09c      	sub	sp, #112	@ 0x70
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e2:	224c      	movs	r2, #76	@ 0x4c
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f019 fd08 	bl	801abfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2220      	movs	r2, #32
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f019 fd02 	bl	801abfc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xE003FFFF;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <SystemClock_Config+0xe0>)
 80011fa:	4a30      	ldr	r2, [pc, #192]	@ (80012bc <SystemClock_Config+0xe4>)
 80011fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001200:	2004      	movs	r0, #4
 8001202:	f004 f8db 	bl	80053bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b2d      	ldr	r3, [pc, #180]	@ (80012c0 <SystemClock_Config+0xe8>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a2c      	ldr	r2, [pc, #176]	@ (80012c0 <SystemClock_Config+0xe8>)
 8001210:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <SystemClock_Config+0xe8>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001222:	bf00      	nop
 8001224:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <SystemClock_Config+0xe8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800122c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001230:	d1f8      	bne.n	8001224 <SystemClock_Config+0x4c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001232:	2302      	movs	r3, #2
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001236:	2301      	movs	r3, #1
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800123a:	2340      	movs	r3, #64	@ 0x40
 800123c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001242:	2300      	movs	r3, #0
 8001244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001246:	2304      	movs	r3, #4
 8001248:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800124a:	2323      	movs	r3, #35	@ 0x23
 800124c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001252:	2304      	movs	r3, #4
 8001254:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001256:	2302      	movs	r3, #2
 8001258:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800125a:	230c      	movs	r3, #12
 800125c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800125e:	2300      	movs	r3, #0
 8001260:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800126a:	4618      	mov	r0, r3
 800126c:	f004 f900 	bl	8005470 <HAL_RCC_OscConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001276:	f000 f969 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127a:	233f      	movs	r3, #63	@ 0x3f
 800127c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127e:	2303      	movs	r3, #3
 8001280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800128a:	2340      	movs	r3, #64	@ 0x40
 800128c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800128e:	2340      	movs	r3, #64	@ 0x40
 8001290:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001296:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001298:	2340      	movs	r3, #64	@ 0x40
 800129a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2106      	movs	r1, #6
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 fd17 	bl	8005cd4 <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80012ac:	f000 f94e 	bl	800154c <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3770      	adds	r7, #112	@ 0x70
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	58024400 	.word	0x58024400
 80012bc:	e003ffff 	.word	0xe003ffff
 80012c0:	58024800 	.word	0x58024800

080012c4 <timer_callback>:
rcl_publisher_t publisher;
std_msgs__msg__Int32 msg;

// Timer callback function to publish a message
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	e9c7 2300 	strd	r2, r3, [r7]
  (void) last_call_time; // Unused parameter
  if (timer != NULL) {
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <timer_callback+0x2e>
    // Publish the message
#if DEBUG_MSG
	    printf("Publishing data: %ld\r\n", (long)msg.data); // Add this line
#endif
    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80012d6:	2200      	movs	r2, #0
 80012d8:	4908      	ldr	r1, [pc, #32]	@ (80012fc <timer_callback+0x38>)
 80012da:	4809      	ldr	r0, [pc, #36]	@ (8001300 <timer_callback+0x3c>)
 80012dc:	f00c fad4 	bl	800d888 <rcl_publish>
 80012e0:	6178      	str	r0, [r7, #20]
    if (ret == RCL_RET_OK) {
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d104      	bne.n	80012f2 <timer_callback+0x2e>
        // Increment the message data for the next publication
        msg.data++;
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <timer_callback+0x38>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a03      	ldr	r2, [pc, #12]	@ (80012fc <timer_callback+0x38>)
 80012f0:	6013      	str	r3, [r2, #0]
    }
  }
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24004954 	.word	0x24004954
 8001300:	24004950 	.word	0x24004950
 8001304:	00000000 	.word	0x00000000

08001308 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void * argument)
{
 8001308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800130c:	b0c8      	sub	sp, #288	@ 0x120
 800130e:	af02      	add	r7, sp, #8
 8001310:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001318:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

  // --- micro-ROS Configuration ---
  rmw_uros_set_custom_transport(
 800131a:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <StartDefaultTask+0x188>)
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	4b5d      	ldr	r3, [pc, #372]	@ (8001494 <StartDefaultTask+0x18c>)
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4b5d      	ldr	r3, [pc, #372]	@ (8001498 <StartDefaultTask+0x190>)
 8001324:	4a5d      	ldr	r2, [pc, #372]	@ (800149c <StartDefaultTask+0x194>)
 8001326:	495e      	ldr	r1, [pc, #376]	@ (80014a0 <StartDefaultTask+0x198>)
 8001328:	2001      	movs	r0, #1
 800132a:	f00d fa7d 	bl	800e828 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800132e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001332:	4618      	mov	r0, r3
 8001334:	f00d f9a8 	bl	800e688 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001338:	4b5a      	ldr	r3, [pc, #360]	@ (80014a4 <StartDefaultTask+0x19c>)
 800133a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  freeRTOS_allocator.deallocate = microros_deallocate;
 800133e:	4b5a      	ldr	r3, [pc, #360]	@ (80014a8 <StartDefaultTask+0x1a0>)
 8001340:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001344:	4b59      	ldr	r3, [pc, #356]	@ (80014ac <StartDefaultTask+0x1a4>)
 8001346:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 800134a:	4b59      	ldr	r3, [pc, #356]	@ (80014b0 <StartDefaultTask+0x1a8>)
 800134c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001350:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001354:	4618      	mov	r0, r3
 8001356:	f00d f9b3 	bl	800e6c0 <rcutils_set_default_allocator>
 800135a:	4603      	mov	r3, r0
 800135c:	f083 0301 	eor.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <StartDefaultTask+0x68>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8001366:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800136a:	4852      	ldr	r0, [pc, #328]	@ (80014b4 <StartDefaultTask+0x1ac>)
 800136c:	f019 fac0 	bl	801a8f0 <iprintf>
  }

  // --- micro-ROS App Initialization ---
  rclc_support_t support;
  rcl_allocator_t allocator = rcl_get_default_allocator();
 8001370:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001374:	4618      	mov	r0, r3
 8001376:	f00d f995 	bl	800e6a4 <rcutils_get_default_allocator>

#if DEBUG_MSG
  printf("--- micro-ROS STM32 Booting ---\r\n");
#endif
  // Initialize micro-ROS support
  rclc_support_init(&support, 0, NULL, &allocator);
 800137a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800137e:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	f00d f87f 	bl	800e488 <rclc_support_init>
#if DEBUG_MSG
  printf("Support initialized.\r\n");
#endif

  // Create a ROS 2 node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 800138a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800138e:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8001392:	4a49      	ldr	r2, [pc, #292]	@ (80014b8 <StartDefaultTask+0x1b0>)
 8001394:	4949      	ldr	r1, [pc, #292]	@ (80014bc <StartDefaultTask+0x1b4>)
 8001396:	f00d f8c1 	bl	800e51c <rclc_node_init_default>
#if DEBUG_MSG
  printf("Node created.\r\n");
#endif  // Create a publisher
  rclc_publisher_init_default(
 800139a:	f00d ff7f 	bl	800f29c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800139e:	4602      	mov	r2, r0
 80013a0:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 80013a4:	4b46      	ldr	r3, [pc, #280]	@ (80014c0 <StartDefaultTask+0x1b8>)
 80013a6:	4847      	ldr	r0, [pc, #284]	@ (80014c4 <StartDefaultTask+0x1bc>)
 80013a8:	f00d f8fa 	bl	800e5a0 <rclc_publisher_init_default>
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "cubemx_publisher");

  // Create a timer to trigger the publisher every 100ms
  const unsigned int timer_period = 100; // milliseconds
 80013ac:	2364      	movs	r3, #100	@ 0x64
 80013ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rclc_timer_init_default2(
    &timer,
    &support,
    RCL_MS_TO_NS(timer_period),
 80013b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013b6:	2200      	movs	r2, #0
 80013b8:	469a      	mov	sl, r3
 80013ba:	4693      	mov	fp, r2
 80013bc:	4652      	mov	r2, sl
 80013be:	465b      	mov	r3, fp
 80013c0:	f04f 0000 	mov.w	r0, #0
 80013c4:	f04f 0100 	mov.w	r1, #0
 80013c8:	0159      	lsls	r1, r3, #5
 80013ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ce:	0150      	lsls	r0, r2, #5
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	ebb2 040a 	subs.w	r4, r2, sl
 80013d8:	eb63 050b 	sbc.w	r5, r3, fp
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	026b      	lsls	r3, r5, #9
 80013e6:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80013ea:	0262      	lsls	r2, r4, #9
 80013ec:	4614      	mov	r4, r2
 80013ee:	461d      	mov	r5, r3
 80013f0:	eb14 080a 	adds.w	r8, r4, sl
 80013f4:	eb45 090b 	adc.w	r9, r5, fp
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001404:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001408:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800140c:	ebb2 0108 	subs.w	r1, r2, r8
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	eb63 0309 	sbc.w	r3, r3, r9
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	e9d7 1200 	ldrd	r1, r2, [r7]
 800141c:	460b      	mov	r3, r1
 800141e:	eb13 030a 	adds.w	r3, r3, sl
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4613      	mov	r3, r2
 8001426:	eb43 030b 	adc.w	r3, r3, fp
 800142a:	60fb      	str	r3, [r7, #12]
  rclc_timer_init_default2(
 800142c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001430:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8001434:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8001438:	2401      	movs	r4, #1
 800143a:	9401      	str	r4, [sp, #4]
 800143c:	4c22      	ldr	r4, [pc, #136]	@ (80014c8 <StartDefaultTask+0x1c0>)
 800143e:	9400      	str	r4, [sp, #0]
 8001440:	f00d f8e8 	bl	800e614 <rclc_timer_init_default2>
    timer_callback,
	true);

  // Create an executor to handle the timer
  // The '1' indicates the executor will handle 1 item (our timer)
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001444:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001448:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 800144c:	f107 0018 	add.w	r0, r7, #24
 8001450:	2201      	movs	r2, #1
 8001452:	f00c fdb9 	bl	800dfc8 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &timer);
 8001456:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f00c fe29 	bl	800e0b8 <rclc_executor_add_timer>

  // Initialize the message data
  msg.data = 0;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <StartDefaultTask+0x1c4>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
  // This loop will "spin" the executor, which checks for and executes ready tasks
  // like our timer callback.
  for(;;)
  {
    // Let the executor check for timers and subscriptions
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 800146c:	f107 0118 	add.w	r1, r7, #24
 8001470:	a305      	add	r3, pc, #20	@ (adr r3, 8001488 <StartDefaultTask+0x180>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	4608      	mov	r0, r1
 8001478:	f00c fe9a 	bl	800e1b0 <rclc_executor_spin_some>
    osDelay(10); // Small delay to yield CPU time
 800147c:	200a      	movs	r0, #10
 800147e:	f009 fc31 	bl	800ace4 <osDelay>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001482:	bf00      	nop
 8001484:	e7f2      	b.n	800146c <StartDefaultTask+0x164>
 8001486:	bf00      	nop
 8001488:	05f5e100 	.word	0x05f5e100
 800148c:	00000000 	.word	0x00000000
 8001490:	08000d2d 	.word	0x08000d2d
 8001494:	08000cc9 	.word	0x08000cc9
 8001498:	08000ca9 	.word	0x08000ca9
 800149c:	08000c7d 	.word	0x08000c7d
 80014a0:	240049b4 	.word	0x240049b4
 80014a4:	08001559 	.word	0x08001559
 80014a8:	0800159d 	.word	0x0800159d
 80014ac:	080015d5 	.word	0x080015d5
 80014b0:	08001641 	.word	0x08001641
 80014b4:	0801bb14 	.word	0x0801bb14
 80014b8:	0801bb3c 	.word	0x0801bb3c
 80014bc:	0801bb40 	.word	0x0801bb40
 80014c0:	0801bb4c 	.word	0x0801bb4c
 80014c4:	24004950 	.word	0x24004950
 80014c8:	080012c5 	.word	0x080012c5
 80014cc:	24004954 	.word	0x24004954

080014d0 <MPU_Config>:
  /* USER CODE END 5 */
}
 /* MPU Configuration */

void MPU_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014e2:	f000 fe3f 	bl	8002164 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80014f2:	231f      	movs	r3, #31
 80014f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80014f6:	2387      	movs	r3, #135	@ 0x87
 80014f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014fe:	2300      	movs	r3, #0
 8001500:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001502:	2301      	movs	r3, #1
 8001504:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001506:	2301      	movs	r3, #1
 8001508:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001512:	463b      	mov	r3, r7
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fe5d 	bl	80021d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800151a:	2004      	movs	r0, #4
 800151c:	f000 fe3a 	bl	8002194 <HAL_MPU_Enable>

}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800153a:	f000 fd13 	bl	8001f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40010000 	.word	0x40010000

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <microros_allocate+0x3c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	461a      	mov	r2, r3
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <microros_allocate+0x3c>)
 8001570:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <microros_allocate+0x40>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4413      	add	r3, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <microros_allocate+0x40>)
 8001580:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff f902 	bl	800078c <pvPortMallocMicroROS>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	24004958 	.word	0x24004958
 8001598:	2400495c 	.word	0x2400495c

0800159c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00c      	beq.n	80015c6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fa11 	bl	80009d4 <getBlockSize>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <microros_deallocate+0x34>)
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <microros_deallocate+0x34>)
 80015be:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff f9ab 	bl	800091c <vPortFreeMicroROS>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2400495c 	.word	0x2400495c

080015d4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <microros_reallocate+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4413      	add	r3, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <microros_reallocate+0x64>)
 80015ee:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <microros_reallocate+0x68>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <microros_reallocate+0x68>)
 80015fe:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d104      	bne.n	8001610 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001606:	68b8      	ldr	r0, [r7, #8]
 8001608:	f7ff f8c0 	bl	800078c <pvPortMallocMicroROS>
 800160c:	4603      	mov	r3, r0
 800160e:	e00e      	b.n	800162e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff f9df 	bl	80009d4 <getBlockSize>
 8001616:	4603      	mov	r3, r0
 8001618:	4a08      	ldr	r2, [pc, #32]	@ (800163c <microros_reallocate+0x68>)
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	461a      	mov	r2, r3
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <microros_reallocate+0x68>)
 8001622:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f7ff f9f2 	bl	8000a10 <pvPortReallocMicroROS>
 800162c:	4603      	mov	r3, r0
  }
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24004958 	.word	0x24004958
 800163c:	2400495c 	.word	0x2400495c

08001640 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	4a0c      	ldr	r2, [pc, #48]	@ (8001688 <microros_zero_allocate+0x48>)
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4413      	add	r3, r2
 800165a:	461a      	mov	r2, r3
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <microros_zero_allocate+0x48>)
 800165e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	4a08      	ldr	r2, [pc, #32]	@ (800168c <microros_zero_allocate+0x4c>)
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	4413      	add	r3, r2
 800166e:	461a      	mov	r2, r3
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <microros_zero_allocate+0x4c>)
 8001672:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff f9f7 	bl	8000a6a <pvPortCallocMicroROS>
 800167c:	4603      	mov	r3, r0
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	24004958 	.word	0x24004958
 800168c:	2400495c 	.word	0x2400495c

08001690 <UTILS_NanosecondsToTimespec>:
}


void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80016a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016a6:	a320      	add	r3, pc, #128	@ (adr r3, 8001728 <UTILS_NanosecondsToTimespec+0x98>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe fe88 	bl	80003c0 <__aeabi_ldivmod>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80016ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016be:	a31a      	add	r3, pc, #104	@ (adr r3, 8001728 <UTILS_NanosecondsToTimespec+0x98>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fe7c 	bl	80003c0 <__aeabi_ldivmod>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da20      	bge.n	8001716 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	4a11      	ldr	r2, [pc, #68]	@ (8001720 <UTILS_NanosecondsToTimespec+0x90>)
 80016da:	fb82 1203 	smull	r1, r2, r2, r3
 80016de:	1712      	asrs	r2, r2, #28
 80016e0:	17db      	asrs	r3, r3, #31
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	6979      	ldr	r1, [r7, #20]
 80016f0:	17c8      	asrs	r0, r1, #31
 80016f2:	460c      	mov	r4, r1
 80016f4:	4605      	mov	r5, r0
 80016f6:	ebb2 0804 	subs.w	r8, r2, r4
 80016fa:	eb63 0905 	sbc.w	r9, r3, r5
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	4906      	ldr	r1, [pc, #24]	@ (8001724 <UTILS_NanosecondsToTimespec+0x94>)
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	441a      	add	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	609a      	str	r2, [r3, #8]
    }
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001720:	44b82fa1 	.word	0x44b82fa1
 8001724:	3b9aca00 	.word	0x3b9aca00
 8001728:	3b9aca00 	.word	0x3b9aca00
 800172c:	00000000 	.word	0x00000000

08001730 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001734:	b08e      	sub	sp, #56	@ 0x38
 8001736:	af00      	add	r7, sp, #0
 8001738:	6278      	str	r0, [r7, #36]	@ 0x24
 800173a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800173c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001740:	2300      	movs	r3, #0
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001756:	4618      	mov	r0, r3
 8001758:	f00a fdb8 	bl	800c2cc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175e:	17da      	asrs	r2, r3, #31
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	61fa      	str	r2, [r7, #28]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	69b9      	ldr	r1, [r7, #24]
 800176e:	000b      	movs	r3, r1
 8001770:	2200      	movs	r2, #0
 8001772:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001778:	2200      	movs	r2, #0
 800177a:	461c      	mov	r4, r3
 800177c:	4615      	mov	r5, r2
 800177e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001782:	1911      	adds	r1, r2, r4
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	416b      	adcs	r3, r5
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800178e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001792:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	f04f 0400 	mov.w	r4, #0
 800179e:	f04f 0500 	mov.w	r5, #0
 80017a2:	015d      	lsls	r5, r3, #5
 80017a4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80017a8:	0154      	lsls	r4, r2, #5
 80017aa:	4622      	mov	r2, r4
 80017ac:	462b      	mov	r3, r5
 80017ae:	ebb2 0800 	subs.w	r8, r2, r0
 80017b2:	eb63 0901 	sbc.w	r9, r3, r1
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80017c2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80017c6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80017ca:	4690      	mov	r8, r2
 80017cc:	4699      	mov	r9, r3
 80017ce:	eb18 0a00 	adds.w	sl, r8, r0
 80017d2:	eb49 0b01 	adc.w	fp, r9, r1
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017ea:	ebb2 040a 	subs.w	r4, r2, sl
 80017ee:	603c      	str	r4, [r7, #0]
 80017f0:	eb63 030b 	sbc.w	r3, r3, fp
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017fa:	4623      	mov	r3, r4
 80017fc:	181b      	adds	r3, r3, r0
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	462b      	mov	r3, r5
 8001802:	eb41 0303 	adc.w	r3, r1, r3
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	6a3a      	ldr	r2, [r7, #32]
 800180a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800180e:	f7ff ff3f 	bl	8001690 <UTILS_NanosecondsToTimespec>

    return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3738      	adds	r7, #56	@ 0x38
 8001818:	46bd      	mov	sp, r7
 800181a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <HAL_MspInit+0x38>)
 8001828:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800182c:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <HAL_MspInit+0x38>)
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <HAL_MspInit+0x38>)
 8001838:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	210f      	movs	r1, #15
 8001848:	f06f 0001 	mvn.w	r0, #1
 800184c:	f000 fc62 	bl	8002114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	58024400 	.word	0x58024400

0800185c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	@ 0x38
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	d844      	bhi.n	80018f4 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800186a:	2200      	movs	r2, #0
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	2019      	movs	r0, #25
 8001870:	f000 fc50 	bl	8002114 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001874:	2019      	movs	r0, #25
 8001876:	f000 fc67 	bl	8002148 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800187a:	4a24      	ldr	r2, [pc, #144]	@ (800190c <HAL_InitTick+0xb0>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001880:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <HAL_InitTick+0xb4>)
 8001882:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001886:	4a22      	ldr	r2, [pc, #136]	@ (8001910 <HAL_InitTick+0xb4>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <HAL_InitTick+0xb4>)
 8001892:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 fd9f 	bl	80063ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80018ae:	f004 fd87 	bl	80063c0 <HAL_RCC_GetPCLK2Freq>
 80018b2:	4603      	mov	r3, r0
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ba:	4a16      	ldr	r2, [pc, #88]	@ (8001914 <HAL_InitTick+0xb8>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	3b01      	subs	r3, #1
 80018c4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018c6:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <HAL_InitTick+0xbc>)
 80018c8:	4a14      	ldr	r2, [pc, #80]	@ (800191c <HAL_InitTick+0xc0>)
 80018ca:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_InitTick+0xbc>)
 80018ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018d2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018d4:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <HAL_InitTick+0xbc>)
 80018d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <HAL_InitTick+0xbc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_InitTick+0xbc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018e6:	480c      	ldr	r0, [pc, #48]	@ (8001918 <HAL_InitTick+0xbc>)
 80018e8:	f006 fba2 	bl	8008030 <HAL_TIM_Base_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d107      	bne.n	8001902 <HAL_InitTick+0xa6>
 80018f2:	e001      	b.n	80018f8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e005      	b.n	8001904 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018f8:	4807      	ldr	r0, [pc, #28]	@ (8001918 <HAL_InitTick+0xbc>)
 80018fa:	f006 fbfb 	bl	80080f4 <HAL_TIM_Base_Start_IT>
 80018fe:	4603      	mov	r3, r0
 8001900:	e000      	b.n	8001904 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	3738      	adds	r7, #56	@ 0x38
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2400000c 	.word	0x2400000c
 8001910:	58024400 	.word	0x58024400
 8001914:	431bde83 	.word	0x431bde83
 8001918:	24004960 	.word	0x24004960
 800191c:	40010000 	.word	0x40010000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <NMI_Handler+0x4>

08001928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <MemManage_Handler+0x4>

08001938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <UsageFault_Handler+0x4>

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <DMA1_Stream0_IRQHandler+0x10>)
 800195e:	f001 ffd5 	bl	800390c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	24004a48 	.word	0x24004a48

0800196c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <DMA1_Stream1_IRQHandler+0x10>)
 8001972:	f001 ffcb 	bl	800390c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	24004ac0 	.word	0x24004ac0

08001980 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TIM1_UP_IRQHandler+0x10>)
 8001986:	f006 fc2d 	bl	80081e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24004960 	.word	0x24004960

08001994 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <USART3_IRQHandler+0x10>)
 800199a:	f007 f851 	bl	8008a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	240049b4 	.word	0x240049b4

080019a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_kill>:

int _kill(int pid, int sig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c2:	f019 fa1f 	bl	801ae04 <__errno>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2216      	movs	r2, #22
 80019ca:	601a      	str	r2, [r3, #0]
  return -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_exit>:

void _exit (int status)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ffe7 	bl	80019b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ea:	bf00      	nop
 80019ec:	e7fd      	b.n	80019ea <_exit+0x12>

080019ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e00a      	b.n	8001a16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a00:	f3af 8000 	nop.w
 8001a04:	4601      	mov	r1, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	60ba      	str	r2, [r7, #8]
 8001a0c:	b2ca      	uxtb	r2, r1
 8001a0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dbf0      	blt.n	8001a00 <_read+0x12>
  }

  return len;
 8001a1e:	687b      	ldr	r3, [r7, #4]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a50:	605a      	str	r2, [r3, #4]
  return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_isatty>:

int _isatty(int file)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	@ (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	@ (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac0:	f019 f9a0 	bl	801ae04 <__errno>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ace:	e009      	b.n	8001ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <_sbrk+0x64>)
 8001ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	24100000 	.word	0x24100000
 8001af0:	00000400 	.word	0x00000400
 8001af4:	240049b0 	.word	0x240049b0
 8001af8:	2400e1e8 	.word	0x2400e1e8

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b00:	4b3e      	ldr	r3, [pc, #248]	@ (8001bfc <SystemInit+0x100>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b06:	4a3d      	ldr	r2, [pc, #244]	@ (8001bfc <SystemInit+0x100>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b10:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <SystemInit+0x104>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d807      	bhi.n	8001b2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b1c:	4b38      	ldr	r3, [pc, #224]	@ (8001c00 <SystemInit+0x104>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 030f 	bic.w	r3, r3, #15
 8001b24:	4a36      	ldr	r2, [pc, #216]	@ (8001c00 <SystemInit+0x104>)
 8001b26:	f043 0303 	orr.w	r3, r3, #3
 8001b2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b2c:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <SystemInit+0x108>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a34      	ldr	r2, [pc, #208]	@ (8001c04 <SystemInit+0x108>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b38:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <SystemInit+0x108>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b3e:	4b31      	ldr	r3, [pc, #196]	@ (8001c04 <SystemInit+0x108>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4930      	ldr	r1, [pc, #192]	@ (8001c04 <SystemInit+0x108>)
 8001b44:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <SystemInit+0x10c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c00 <SystemInit+0x104>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b56:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <SystemInit+0x104>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 030f 	bic.w	r3, r3, #15
 8001b5e:	4a28      	ldr	r2, [pc, #160]	@ (8001c00 <SystemInit+0x104>)
 8001b60:	f043 0303 	orr.w	r3, r3, #3
 8001b64:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001b66:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <SystemInit+0x108>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <SystemInit+0x108>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001b72:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <SystemInit+0x108>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b78:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <SystemInit+0x108>)
 8001b7a:	4a24      	ldr	r2, [pc, #144]	@ (8001c0c <SystemInit+0x110>)
 8001b7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <SystemInit+0x108>)
 8001b80:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <SystemInit+0x114>)
 8001b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <SystemInit+0x108>)
 8001b86:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <SystemInit+0x118>)
 8001b88:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <SystemInit+0x108>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <SystemInit+0x108>)
 8001b92:	4a20      	ldr	r2, [pc, #128]	@ (8001c14 <SystemInit+0x118>)
 8001b94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <SystemInit+0x108>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <SystemInit+0x108>)
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c14 <SystemInit+0x118>)
 8001ba0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <SystemInit+0x108>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <SystemInit+0x108>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <SystemInit+0x108>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <SystemInit+0x108>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <SystemInit+0x108>)
 8001bbc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d113      	bne.n	8001bf0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <SystemInit+0x108>)
 8001bca:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001bce:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <SystemInit+0x108>)
 8001bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bd4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <SystemInit+0x11c>)
 8001bda:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bde:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <SystemInit+0x108>)
 8001be2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001be6:	4a07      	ldr	r2, [pc, #28]	@ (8001c04 <SystemInit+0x108>)
 8001be8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bec:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00
 8001c00:	52002000 	.word	0x52002000
 8001c04:	58024400 	.word	0x58024400
 8001c08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c0c:	02020200 	.word	0x02020200
 8001c10:	01ff0000 	.word	0x01ff0000
 8001c14:	01010280 	.word	0x01010280
 8001c18:	52004000 	.word	0x52004000

08001c1c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <ExitRun0Mode+0x2c>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <ExitRun0Mode+0x2c>)
 8001c26:	f023 0302 	bic.w	r3, r3, #2
 8001c2a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001c2c:	bf00      	nop
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <ExitRun0Mode+0x2c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f9      	beq.n	8001c2e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	58024800 	.word	0x58024800

08001c4c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c50:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c52:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <MX_USART3_UART_Init+0x94>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c94:	4811      	ldr	r0, [pc, #68]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c96:	f006 fc93 	bl	80085c0 <HAL_UART_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ca0:	f7ff fc54 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001ca8:	f008 fe32 	bl	800a910 <HAL_UARTEx_SetTxFifoThreshold>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001cb2:	f7ff fc4b 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001cba:	f008 fe67 	bl	800a98c <HAL_UARTEx_SetRxFifoThreshold>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f7ff fc42 	bl	800154c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001cca:	f008 fde8 	bl	800a89e <HAL_UARTEx_DisableFifoMode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd4:	f7ff fc3a 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	240049b4 	.word	0x240049b4
 8001ce0:	40004800 	.word	0x40004800

08001ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	22c0      	movs	r2, #192	@ 0xc0
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f018 ff79 	bl	801abfc <memset>
  if(uartHandle->Instance==USART3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001e78 <HAL_UART_MspInit+0x194>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f040 80ad 	bne.w	8001e70 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d16:	f04f 0202 	mov.w	r2, #2
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fb9f 	bl	8006470 <HAL_RCCEx_PeriphCLKConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001d38:	f7ff fc08 	bl	800154c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e7c <HAL_UART_MspInit+0x198>)
 8001d3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d42:	4a4e      	ldr	r2, [pc, #312]	@ (8001e7c <HAL_UART_MspInit+0x198>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d48:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e7c <HAL_UART_MspInit+0x198>)
 8001d4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	4b48      	ldr	r3, [pc, #288]	@ (8001e7c <HAL_UART_MspInit+0x198>)
 8001d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d60:	4a46      	ldr	r2, [pc, #280]	@ (8001e7c <HAL_UART_MspInit+0x198>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001d6a:	4b44      	ldr	r3, [pc, #272]	@ (8001e7c <HAL_UART_MspInit+0x198>)
 8001d6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d92:	2307      	movs	r3, #7
 8001d94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4838      	ldr	r0, [pc, #224]	@ (8001e80 <HAL_UART_MspInit+0x19c>)
 8001da0:	f003 f942 	bl	8005028 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001da4:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001da6:	4a38      	ldr	r2, [pc, #224]	@ (8001e88 <HAL_UART_MspInit+0x1a4>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001daa:	4b36      	ldr	r3, [pc, #216]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001dac:	222d      	movs	r2, #45	@ 0x2d
 8001dae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db0:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db6:	4b33      	ldr	r3, [pc, #204]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbc:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001dbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dca:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001dda:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dde:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de0:	4b28      	ldr	r3, [pc, #160]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001de6:	4827      	ldr	r0, [pc, #156]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001de8:	f000 fa34 	bl	8002254 <HAL_DMA_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001df2:	f7ff fbab 	bl	800154c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a22      	ldr	r2, [pc, #136]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001dfe:	4a21      	ldr	r2, [pc, #132]	@ (8001e84 <HAL_UART_MspInit+0x1a0>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001e04:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e06:	4a22      	ldr	r2, [pc, #136]	@ (8001e90 <HAL_UART_MspInit+0x1ac>)
 8001e08:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001e0a:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e0c:	222e      	movs	r2, #46	@ 0x2e
 8001e0e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e12:	2240      	movs	r2, #64	@ 0x40
 8001e14:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e22:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e24:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e38:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e3c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e44:	4811      	ldr	r0, [pc, #68]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e46:	f000 fa05 	bl	8002254 <HAL_DMA_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8001e50:	f7ff fb7c 	bl	800154c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e58:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <HAL_UART_MspInit+0x1a8>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2105      	movs	r1, #5
 8001e64:	2027      	movs	r0, #39	@ 0x27
 8001e66:	f000 f955 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e6a:	2027      	movs	r0, #39	@ 0x27
 8001e6c:	f000 f96c 	bl	8002148 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e70:	bf00      	nop
 8001e72:	37e8      	adds	r7, #232	@ 0xe8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40004800 	.word	0x40004800
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	58020c00 	.word	0x58020c00
 8001e84:	24004a48 	.word	0x24004a48
 8001e88:	40020010 	.word	0x40020010
 8001e8c:	24004ac0 	.word	0x24004ac0
 8001e90:	40020028 	.word	0x40020028

08001e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e94:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ed0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e98:	f7ff fec0 	bl	8001c1c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e9c:	f7ff fe2e 	bl	8001afc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea0:	480c      	ldr	r0, [pc, #48]	@ (8001ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ea2:	490d      	ldr	r1, [pc, #52]	@ (8001ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f018 ffa3 	bl	801ae10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7ff f96f 	bl	80011ac <main>
  bx  lr
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001ed4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ed8:	24000510 	.word	0x24000510
  ldr r2, =_sidata
 8001edc:	0801cbb0 	.word	0x0801cbb0
  ldr r2, =_sbss
 8001ee0:	24000510 	.word	0x24000510
  ldr r4, =_ebss
 8001ee4:	2400e1e8 	.word	0x2400e1e8

08001ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC_IRQHandler>
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f000 f903 	bl	80020fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ef8:	f004 f8a2 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_Init+0x68>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	4913      	ldr	r1, [pc, #76]	@ (8001f58 <HAL_Init+0x6c>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_Init+0x68>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <HAL_Init+0x6c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f5c <HAL_Init+0x70>)
 8001f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f30:	4a0b      	ldr	r2, [pc, #44]	@ (8001f60 <HAL_Init+0x74>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f36:	200f      	movs	r0, #15
 8001f38:	f7ff fc90 	bl	800185c <HAL_InitTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e002      	b.n	8001f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f46:	f7ff fc6b 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58024400 	.word	0x58024400
 8001f58:	0801bbbc 	.word	0x0801bbbc
 8001f5c:	24000008 	.word	0x24000008
 8001f60:	24000004 	.word	0x24000004

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	@ (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	24000010 	.word	0x24000010
 8001f88:	24004b38 	.word	0x24004b38

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	24004b38 	.word	0x24004b38

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00
 8001fe8:	05fa0000 	.word	0x05fa0000

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	@ (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	@ (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	@ (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff4c 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002122:	f7ff ff63 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002126:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f7ff ffb3 	bl	8002098 <NVIC_EncodePriority>
 8002132:	4602      	mov	r2, r0
 8002134:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff82 	bl	8002044 <__NVIC_SetPriority>
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff56 	bl	8002008 <__NVIC_EnableIRQ>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002168:	f3bf 8f5f 	dmb	sy
}
 800216c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800216e:	4b07      	ldr	r3, [pc, #28]	@ (800218c <HAL_MPU_Disable+0x28>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	4a06      	ldr	r2, [pc, #24]	@ (800218c <HAL_MPU_Disable+0x28>)
 8002174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002178:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_MPU_Disable+0x2c>)
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00
 8002190:	e000ed90 	.word	0xe000ed90

08002194 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800219c:	4a0b      	ldr	r2, [pc, #44]	@ (80021cc <HAL_MPU_Enable+0x38>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_MPU_Enable+0x3c>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	4a09      	ldr	r2, [pc, #36]	@ (80021d0 <HAL_MPU_Enable+0x3c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021b2:	f3bf 8f4f 	dsb	sy
}
 80021b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021b8:	f3bf 8f6f 	isb	sy
}
 80021bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed90 	.word	0xe000ed90
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	785a      	ldrb	r2, [r3, #1]
 80021e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
 80021e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4a19      	ldr	r2, [pc, #100]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80021f0:	4a17      	ldr	r2, [pc, #92]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7b1b      	ldrb	r3, [r3, #12]
 80021fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7adb      	ldrb	r3, [r3, #11]
 8002202:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002204:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7a9b      	ldrb	r3, [r3, #10]
 800220a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800220c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7b5b      	ldrb	r3, [r3, #13]
 8002212:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002214:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7b9b      	ldrb	r3, [r3, #14]
 800221a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800221c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7bdb      	ldrb	r3, [r3, #15]
 8002222:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002224:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7a5b      	ldrb	r3, [r3, #9]
 800222a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800222c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7a1b      	ldrb	r3, [r3, #8]
 8002232:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002234:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800223c:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800223e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002240:	6113      	str	r3, [r2, #16]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed90 	.word	0xe000ed90

08002254 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff fe96 	bl	8001f8c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e37d      	b.n	8002968 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a66      	ldr	r2, [pc, #408]	@ (800240c <HAL_DMA_Init+0x1b8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04a      	beq.n	800230c <HAL_DMA_Init+0xb8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a65      	ldr	r2, [pc, #404]	@ (8002410 <HAL_DMA_Init+0x1bc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d045      	beq.n	800230c <HAL_DMA_Init+0xb8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a63      	ldr	r2, [pc, #396]	@ (8002414 <HAL_DMA_Init+0x1c0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_DMA_Init+0xb8>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a62      	ldr	r2, [pc, #392]	@ (8002418 <HAL_DMA_Init+0x1c4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d03b      	beq.n	800230c <HAL_DMA_Init+0xb8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a60      	ldr	r2, [pc, #384]	@ (800241c <HAL_DMA_Init+0x1c8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d036      	beq.n	800230c <HAL_DMA_Init+0xb8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002420 <HAL_DMA_Init+0x1cc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d031      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002424 <HAL_DMA_Init+0x1d0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02c      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002428 <HAL_DMA_Init+0x1d4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d027      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a5a      	ldr	r2, [pc, #360]	@ (800242c <HAL_DMA_Init+0x1d8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d022      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a59      	ldr	r2, [pc, #356]	@ (8002430 <HAL_DMA_Init+0x1dc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01d      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a57      	ldr	r2, [pc, #348]	@ (8002434 <HAL_DMA_Init+0x1e0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d018      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a56      	ldr	r2, [pc, #344]	@ (8002438 <HAL_DMA_Init+0x1e4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a54      	ldr	r2, [pc, #336]	@ (800243c <HAL_DMA_Init+0x1e8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a53      	ldr	r2, [pc, #332]	@ (8002440 <HAL_DMA_Init+0x1ec>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_DMA_Init+0xb8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a51      	ldr	r2, [pc, #324]	@ (8002444 <HAL_DMA_Init+0x1f0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_DMA_Init+0xb8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a50      	ldr	r2, [pc, #320]	@ (8002448 <HAL_DMA_Init+0x1f4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_DMA_Init+0xbc>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_DMA_Init+0xbe>
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 813c 	beq.w	8002590 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a37      	ldr	r2, [pc, #220]	@ (800240c <HAL_DMA_Init+0x1b8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d04a      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a36      	ldr	r2, [pc, #216]	@ (8002410 <HAL_DMA_Init+0x1bc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d045      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a34      	ldr	r2, [pc, #208]	@ (8002414 <HAL_DMA_Init+0x1c0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d040      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a33      	ldr	r2, [pc, #204]	@ (8002418 <HAL_DMA_Init+0x1c4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d03b      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a31      	ldr	r2, [pc, #196]	@ (800241c <HAL_DMA_Init+0x1c8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d036      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a30      	ldr	r2, [pc, #192]	@ (8002420 <HAL_DMA_Init+0x1cc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d031      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a2e      	ldr	r2, [pc, #184]	@ (8002424 <HAL_DMA_Init+0x1d0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02c      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a2d      	ldr	r2, [pc, #180]	@ (8002428 <HAL_DMA_Init+0x1d4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d027      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2b      	ldr	r2, [pc, #172]	@ (800242c <HAL_DMA_Init+0x1d8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d022      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2a      	ldr	r2, [pc, #168]	@ (8002430 <HAL_DMA_Init+0x1dc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d01d      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a28      	ldr	r2, [pc, #160]	@ (8002434 <HAL_DMA_Init+0x1e0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d018      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a27      	ldr	r2, [pc, #156]	@ (8002438 <HAL_DMA_Init+0x1e4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a25      	ldr	r2, [pc, #148]	@ (800243c <HAL_DMA_Init+0x1e8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00e      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a24      	ldr	r2, [pc, #144]	@ (8002440 <HAL_DMA_Init+0x1ec>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d009      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a22      	ldr	r2, [pc, #136]	@ (8002444 <HAL_DMA_Init+0x1f0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d004      	beq.n	80023c8 <HAL_DMA_Init+0x174>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a21      	ldr	r2, [pc, #132]	@ (8002448 <HAL_DMA_Init+0x1f4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d108      	bne.n	80023da <HAL_DMA_Init+0x186>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	e007      	b.n	80023ea <HAL_DMA_Init+0x196>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023ea:	e02f      	b.n	800244c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ec:	f7ff fdce 	bl	8001f8c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d928      	bls.n	800244c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2203      	movs	r2, #3
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e2ad      	b.n	8002968 <HAL_DMA_Init+0x714>
 800240c:	40020010 	.word	0x40020010
 8002410:	40020028 	.word	0x40020028
 8002414:	40020040 	.word	0x40020040
 8002418:	40020058 	.word	0x40020058
 800241c:	40020070 	.word	0x40020070
 8002420:	40020088 	.word	0x40020088
 8002424:	400200a0 	.word	0x400200a0
 8002428:	400200b8 	.word	0x400200b8
 800242c:	40020410 	.word	0x40020410
 8002430:	40020428 	.word	0x40020428
 8002434:	40020440 	.word	0x40020440
 8002438:	40020458 	.word	0x40020458
 800243c:	40020470 	.word	0x40020470
 8002440:	40020488 	.word	0x40020488
 8002444:	400204a0 	.word	0x400204a0
 8002448:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1c8      	bne.n	80023ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4b73      	ldr	r3, [pc, #460]	@ (8002634 <HAL_DMA_Init+0x3e0>)
 8002466:	4013      	ands	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002472:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	2b04      	cmp	r3, #4
 800249e:	d107      	bne.n	80024b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	4313      	orrs	r3, r2
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b28      	cmp	r3, #40	@ 0x28
 80024b6:	d903      	bls.n	80024c0 <HAL_DMA_Init+0x26c>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80024be:	d91f      	bls.n	8002500 <HAL_DMA_Init+0x2ac>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80024c6:	d903      	bls.n	80024d0 <HAL_DMA_Init+0x27c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b42      	cmp	r3, #66	@ 0x42
 80024ce:	d917      	bls.n	8002500 <HAL_DMA_Init+0x2ac>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b46      	cmp	r3, #70	@ 0x46
 80024d6:	d903      	bls.n	80024e0 <HAL_DMA_Init+0x28c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b48      	cmp	r3, #72	@ 0x48
 80024de:	d90f      	bls.n	8002500 <HAL_DMA_Init+0x2ac>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80024e6:	d903      	bls.n	80024f0 <HAL_DMA_Init+0x29c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b52      	cmp	r3, #82	@ 0x52
 80024ee:	d907      	bls.n	8002500 <HAL_DMA_Init+0x2ac>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b73      	cmp	r3, #115	@ 0x73
 80024f6:	d905      	bls.n	8002504 <HAL_DMA_Init+0x2b0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b77      	cmp	r3, #119	@ 0x77
 80024fe:	d801      	bhi.n	8002504 <HAL_DMA_Init+0x2b0>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_DMA_Init+0x2b2>
 8002504:	2300      	movs	r3, #0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002510:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 0307 	bic.w	r3, r3, #7
 8002528:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	2b04      	cmp	r3, #4
 800253a:	d117      	bne.n	800256c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00e      	beq.n	800256c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f002 fbe0 	bl	8004d14 <DMA_CheckFifoParam>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2240      	movs	r2, #64	@ 0x40
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e1fd      	b.n	8002968 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f002 fb1b 	bl	8004bb0 <DMA_CalcBaseAndBitshift>
 800257a:	4603      	mov	r3, r0
 800257c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	223f      	movs	r2, #63	@ 0x3f
 8002588:	409a      	lsls	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	e0fd      	b.n	800278c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a28      	ldr	r2, [pc, #160]	@ (8002638 <HAL_DMA_Init+0x3e4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d04a      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a27      	ldr	r2, [pc, #156]	@ (800263c <HAL_DMA_Init+0x3e8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d045      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a25      	ldr	r2, [pc, #148]	@ (8002640 <HAL_DMA_Init+0x3ec>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d040      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a24      	ldr	r2, [pc, #144]	@ (8002644 <HAL_DMA_Init+0x3f0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d03b      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a22      	ldr	r2, [pc, #136]	@ (8002648 <HAL_DMA_Init+0x3f4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d036      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a21      	ldr	r2, [pc, #132]	@ (800264c <HAL_DMA_Init+0x3f8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d031      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002650 <HAL_DMA_Init+0x3fc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d02c      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1e      	ldr	r2, [pc, #120]	@ (8002654 <HAL_DMA_Init+0x400>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d027      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_DMA_Init+0x404>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d022      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <HAL_DMA_Init+0x408>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d01d      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a19      	ldr	r2, [pc, #100]	@ (8002660 <HAL_DMA_Init+0x40c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d018      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a18      	ldr	r2, [pc, #96]	@ (8002664 <HAL_DMA_Init+0x410>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a16      	ldr	r2, [pc, #88]	@ (8002668 <HAL_DMA_Init+0x414>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00e      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a15      	ldr	r2, [pc, #84]	@ (800266c <HAL_DMA_Init+0x418>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d009      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a13      	ldr	r2, [pc, #76]	@ (8002670 <HAL_DMA_Init+0x41c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_DMA_Init+0x3dc>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <HAL_DMA_Init+0x420>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d123      	bne.n	8002678 <HAL_DMA_Init+0x424>
 8002630:	2301      	movs	r3, #1
 8002632:	e022      	b.n	800267a <HAL_DMA_Init+0x426>
 8002634:	fe10803f 	.word	0xfe10803f
 8002638:	48022c08 	.word	0x48022c08
 800263c:	48022c1c 	.word	0x48022c1c
 8002640:	48022c30 	.word	0x48022c30
 8002644:	48022c44 	.word	0x48022c44
 8002648:	48022c58 	.word	0x48022c58
 800264c:	48022c6c 	.word	0x48022c6c
 8002650:	48022c80 	.word	0x48022c80
 8002654:	48022c94 	.word	0x48022c94
 8002658:	58025408 	.word	0x58025408
 800265c:	5802541c 	.word	0x5802541c
 8002660:	58025430 	.word	0x58025430
 8002664:	58025444 	.word	0x58025444
 8002668:	58025458 	.word	0x58025458
 800266c:	5802546c 	.word	0x5802546c
 8002670:	58025480 	.word	0x58025480
 8002674:	58025494 	.word	0x58025494
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d07d      	beq.n	800277a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7f      	ldr	r2, [pc, #508]	@ (8002880 <HAL_DMA_Init+0x62c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d021      	beq.n	80026cc <HAL_DMA_Init+0x478>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a7d      	ldr	r2, [pc, #500]	@ (8002884 <HAL_DMA_Init+0x630>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01c      	beq.n	80026cc <HAL_DMA_Init+0x478>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7c      	ldr	r2, [pc, #496]	@ (8002888 <HAL_DMA_Init+0x634>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d017      	beq.n	80026cc <HAL_DMA_Init+0x478>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7a      	ldr	r2, [pc, #488]	@ (800288c <HAL_DMA_Init+0x638>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d012      	beq.n	80026cc <HAL_DMA_Init+0x478>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a79      	ldr	r2, [pc, #484]	@ (8002890 <HAL_DMA_Init+0x63c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00d      	beq.n	80026cc <HAL_DMA_Init+0x478>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a77      	ldr	r2, [pc, #476]	@ (8002894 <HAL_DMA_Init+0x640>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d008      	beq.n	80026cc <HAL_DMA_Init+0x478>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a76      	ldr	r2, [pc, #472]	@ (8002898 <HAL_DMA_Init+0x644>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d003      	beq.n	80026cc <HAL_DMA_Init+0x478>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a74      	ldr	r2, [pc, #464]	@ (800289c <HAL_DMA_Init+0x648>)
 80026ca:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4b6e      	ldr	r3, [pc, #440]	@ (80028a0 <HAL_DMA_Init+0x64c>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b40      	cmp	r3, #64	@ 0x40
 80026f2:	d008      	beq.n	8002706 <HAL_DMA_Init+0x4b2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b80      	cmp	r3, #128	@ 0x80
 80026fa:	d102      	bne.n	8002702 <HAL_DMA_Init+0x4ae>
 80026fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002700:	e002      	b.n	8002708 <HAL_DMA_Init+0x4b4>
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_DMA_Init+0x4b4>
 8002706:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68d2      	ldr	r2, [r2, #12]
 800270c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800270e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002716:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800271e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002726:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800272e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002736:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b55      	ldr	r3, [pc, #340]	@ (80028a4 <HAL_DMA_Init+0x650>)
 800274e:	4413      	add	r3, r2
 8002750:	4a55      	ldr	r2, [pc, #340]	@ (80028a8 <HAL_DMA_Init+0x654>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	009a      	lsls	r2, r3, #2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f002 fa26 	bl	8004bb0 <DMA_CalcBaseAndBitshift>
 8002764:	4603      	mov	r3, r0
 8002766:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2201      	movs	r2, #1
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	e008      	b.n	800278c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2240      	movs	r2, #64	@ 0x40
 800277e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2203      	movs	r2, #3
 8002784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0ed      	b.n	8002968 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a46      	ldr	r2, [pc, #280]	@ (80028ac <HAL_DMA_Init+0x658>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d072      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a45      	ldr	r2, [pc, #276]	@ (80028b0 <HAL_DMA_Init+0x65c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d06d      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a43      	ldr	r2, [pc, #268]	@ (80028b4 <HAL_DMA_Init+0x660>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d068      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a42      	ldr	r2, [pc, #264]	@ (80028b8 <HAL_DMA_Init+0x664>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d063      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a40      	ldr	r2, [pc, #256]	@ (80028bc <HAL_DMA_Init+0x668>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d05e      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a3f      	ldr	r2, [pc, #252]	@ (80028c0 <HAL_DMA_Init+0x66c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d059      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a3d      	ldr	r2, [pc, #244]	@ (80028c4 <HAL_DMA_Init+0x670>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d054      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a3c      	ldr	r2, [pc, #240]	@ (80028c8 <HAL_DMA_Init+0x674>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04f      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a3a      	ldr	r2, [pc, #232]	@ (80028cc <HAL_DMA_Init+0x678>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04a      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a39      	ldr	r2, [pc, #228]	@ (80028d0 <HAL_DMA_Init+0x67c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d045      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a37      	ldr	r2, [pc, #220]	@ (80028d4 <HAL_DMA_Init+0x680>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d040      	beq.n	800287c <HAL_DMA_Init+0x628>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a36      	ldr	r2, [pc, #216]	@ (80028d8 <HAL_DMA_Init+0x684>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d03b      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a34      	ldr	r2, [pc, #208]	@ (80028dc <HAL_DMA_Init+0x688>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d036      	beq.n	800287c <HAL_DMA_Init+0x628>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a33      	ldr	r2, [pc, #204]	@ (80028e0 <HAL_DMA_Init+0x68c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d031      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a31      	ldr	r2, [pc, #196]	@ (80028e4 <HAL_DMA_Init+0x690>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02c      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a30      	ldr	r2, [pc, #192]	@ (80028e8 <HAL_DMA_Init+0x694>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d027      	beq.n	800287c <HAL_DMA_Init+0x628>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <HAL_DMA_Init+0x62c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d022      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <HAL_DMA_Init+0x630>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d01d      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <HAL_DMA_Init+0x634>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_DMA_Init+0x628>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a0f      	ldr	r2, [pc, #60]	@ (800288c <HAL_DMA_Init+0x638>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0d      	ldr	r2, [pc, #52]	@ (8002890 <HAL_DMA_Init+0x63c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_DMA_Init+0x628>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <HAL_DMA_Init+0x640>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <HAL_DMA_Init+0x644>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_DMA_Init+0x628>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a09      	ldr	r2, [pc, #36]	@ (800289c <HAL_DMA_Init+0x648>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d137      	bne.n	80028ec <HAL_DMA_Init+0x698>
 800287c:	2301      	movs	r3, #1
 800287e:	e036      	b.n	80028ee <HAL_DMA_Init+0x69a>
 8002880:	58025408 	.word	0x58025408
 8002884:	5802541c 	.word	0x5802541c
 8002888:	58025430 	.word	0x58025430
 800288c:	58025444 	.word	0x58025444
 8002890:	58025458 	.word	0x58025458
 8002894:	5802546c 	.word	0x5802546c
 8002898:	58025480 	.word	0x58025480
 800289c:	58025494 	.word	0x58025494
 80028a0:	fffe000f 	.word	0xfffe000f
 80028a4:	a7fdabf8 	.word	0xa7fdabf8
 80028a8:	cccccccd 	.word	0xcccccccd
 80028ac:	40020010 	.word	0x40020010
 80028b0:	40020028 	.word	0x40020028
 80028b4:	40020040 	.word	0x40020040
 80028b8:	40020058 	.word	0x40020058
 80028bc:	40020070 	.word	0x40020070
 80028c0:	40020088 	.word	0x40020088
 80028c4:	400200a0 	.word	0x400200a0
 80028c8:	400200b8 	.word	0x400200b8
 80028cc:	40020410 	.word	0x40020410
 80028d0:	40020428 	.word	0x40020428
 80028d4:	40020440 	.word	0x40020440
 80028d8:	40020458 	.word	0x40020458
 80028dc:	40020470 	.word	0x40020470
 80028e0:	40020488 	.word	0x40020488
 80028e4:	400204a0 	.word	0x400204a0
 80028e8:	400204b8 	.word	0x400204b8
 80028ec:	2300      	movs	r3, #0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d032      	beq.n	8002958 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f002 fa8a 	bl	8004e0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b80      	cmp	r3, #128	@ 0x80
 80028fe:	d102      	bne.n	8002906 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800291a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d010      	beq.n	8002946 <HAL_DMA_Init+0x6f2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d80c      	bhi.n	8002946 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f002 fb07 	bl	8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	e008      	b.n	8002958 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e226      	b.n	8002dda <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_DMA_Start_IT+0x2a>
 8002996:	2302      	movs	r3, #2
 8002998:	e21f      	b.n	8002dda <HAL_DMA_Start_IT+0x46a>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	f040 820a 	bne.w	8002dc4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a68      	ldr	r2, [pc, #416]	@ (8002b64 <HAL_DMA_Start_IT+0x1f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d04a      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a66      	ldr	r2, [pc, #408]	@ (8002b68 <HAL_DMA_Start_IT+0x1f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d045      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a65      	ldr	r2, [pc, #404]	@ (8002b6c <HAL_DMA_Start_IT+0x1fc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d040      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a63      	ldr	r2, [pc, #396]	@ (8002b70 <HAL_DMA_Start_IT+0x200>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d03b      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a62      	ldr	r2, [pc, #392]	@ (8002b74 <HAL_DMA_Start_IT+0x204>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d036      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a60      	ldr	r2, [pc, #384]	@ (8002b78 <HAL_DMA_Start_IT+0x208>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5f      	ldr	r2, [pc, #380]	@ (8002b7c <HAL_DMA_Start_IT+0x20c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d02c      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5d      	ldr	r2, [pc, #372]	@ (8002b80 <HAL_DMA_Start_IT+0x210>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d027      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5c      	ldr	r2, [pc, #368]	@ (8002b84 <HAL_DMA_Start_IT+0x214>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5a      	ldr	r2, [pc, #360]	@ (8002b88 <HAL_DMA_Start_IT+0x218>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a59      	ldr	r2, [pc, #356]	@ (8002b8c <HAL_DMA_Start_IT+0x21c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a57      	ldr	r2, [pc, #348]	@ (8002b90 <HAL_DMA_Start_IT+0x220>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a56      	ldr	r2, [pc, #344]	@ (8002b94 <HAL_DMA_Start_IT+0x224>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a54      	ldr	r2, [pc, #336]	@ (8002b98 <HAL_DMA_Start_IT+0x228>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a53      	ldr	r2, [pc, #332]	@ (8002b9c <HAL_DMA_Start_IT+0x22c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Start_IT+0xee>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a51      	ldr	r2, [pc, #324]	@ (8002ba0 <HAL_DMA_Start_IT+0x230>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <HAL_DMA_Start_IT+0x100>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e007      	b.n	8002a80 <HAL_DMA_Start_IT+0x110>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f001 feae 	bl	80047e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a34      	ldr	r2, [pc, #208]	@ (8002b64 <HAL_DMA_Start_IT+0x1f4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d04a      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a33      	ldr	r2, [pc, #204]	@ (8002b68 <HAL_DMA_Start_IT+0x1f8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d045      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a31      	ldr	r2, [pc, #196]	@ (8002b6c <HAL_DMA_Start_IT+0x1fc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d040      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a30      	ldr	r2, [pc, #192]	@ (8002b70 <HAL_DMA_Start_IT+0x200>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d03b      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8002b74 <HAL_DMA_Start_IT+0x204>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d036      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b78 <HAL_DMA_Start_IT+0x208>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a2b      	ldr	r2, [pc, #172]	@ (8002b7c <HAL_DMA_Start_IT+0x20c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02c      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b80 <HAL_DMA_Start_IT+0x210>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d027      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a28      	ldr	r2, [pc, #160]	@ (8002b84 <HAL_DMA_Start_IT+0x214>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d022      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <HAL_DMA_Start_IT+0x218>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d01d      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a25      	ldr	r2, [pc, #148]	@ (8002b8c <HAL_DMA_Start_IT+0x21c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a24      	ldr	r2, [pc, #144]	@ (8002b90 <HAL_DMA_Start_IT+0x220>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <HAL_DMA_Start_IT+0x224>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <HAL_DMA_Start_IT+0x228>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <HAL_DMA_Start_IT+0x22c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_DMA_Start_IT+0x1bc>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba0 <HAL_DMA_Start_IT+0x230>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d101      	bne.n	8002b30 <HAL_DMA_Start_IT+0x1c0>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_DMA_Start_IT+0x1c2>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d036      	beq.n	8002ba4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 021e 	bic.w	r2, r3, #30
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0216 	orr.w	r2, r2, #22
 8002b48:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d03e      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0208 	orr.w	r2, r2, #8
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e035      	b.n	8002bd0 <HAL_DMA_Start_IT+0x260>
 8002b64:	40020010 	.word	0x40020010
 8002b68:	40020028 	.word	0x40020028
 8002b6c:	40020040 	.word	0x40020040
 8002b70:	40020058 	.word	0x40020058
 8002b74:	40020070 	.word	0x40020070
 8002b78:	40020088 	.word	0x40020088
 8002b7c:	400200a0 	.word	0x400200a0
 8002b80:	400200b8 	.word	0x400200b8
 8002b84:	40020410 	.word	0x40020410
 8002b88:	40020428 	.word	0x40020428
 8002b8c:	40020440 	.word	0x40020440
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40020470 	.word	0x40020470
 8002b98:	40020488 	.word	0x40020488
 8002b9c:	400204a0 	.word	0x400204a0
 8002ba0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 020e 	bic.w	r2, r3, #14
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 020a 	orr.w	r2, r2, #10
 8002bb6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0204 	orr.w	r2, r2, #4
 8002bce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a83      	ldr	r2, [pc, #524]	@ (8002de4 <HAL_DMA_Start_IT+0x474>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d072      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a82      	ldr	r2, [pc, #520]	@ (8002de8 <HAL_DMA_Start_IT+0x478>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d06d      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a80      	ldr	r2, [pc, #512]	@ (8002dec <HAL_DMA_Start_IT+0x47c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d068      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7f      	ldr	r2, [pc, #508]	@ (8002df0 <HAL_DMA_Start_IT+0x480>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d063      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a7d      	ldr	r2, [pc, #500]	@ (8002df4 <HAL_DMA_Start_IT+0x484>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d05e      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7c      	ldr	r2, [pc, #496]	@ (8002df8 <HAL_DMA_Start_IT+0x488>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d059      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7a      	ldr	r2, [pc, #488]	@ (8002dfc <HAL_DMA_Start_IT+0x48c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d054      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a79      	ldr	r2, [pc, #484]	@ (8002e00 <HAL_DMA_Start_IT+0x490>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04f      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a77      	ldr	r2, [pc, #476]	@ (8002e04 <HAL_DMA_Start_IT+0x494>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d04a      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a76      	ldr	r2, [pc, #472]	@ (8002e08 <HAL_DMA_Start_IT+0x498>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d045      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a74      	ldr	r2, [pc, #464]	@ (8002e0c <HAL_DMA_Start_IT+0x49c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d040      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a73      	ldr	r2, [pc, #460]	@ (8002e10 <HAL_DMA_Start_IT+0x4a0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d03b      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a71      	ldr	r2, [pc, #452]	@ (8002e14 <HAL_DMA_Start_IT+0x4a4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d036      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a70      	ldr	r2, [pc, #448]	@ (8002e18 <HAL_DMA_Start_IT+0x4a8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d031      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6e      	ldr	r2, [pc, #440]	@ (8002e1c <HAL_DMA_Start_IT+0x4ac>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02c      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6d      	ldr	r2, [pc, #436]	@ (8002e20 <HAL_DMA_Start_IT+0x4b0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d027      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6b      	ldr	r2, [pc, #428]	@ (8002e24 <HAL_DMA_Start_IT+0x4b4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d022      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6a      	ldr	r2, [pc, #424]	@ (8002e28 <HAL_DMA_Start_IT+0x4b8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d01d      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a68      	ldr	r2, [pc, #416]	@ (8002e2c <HAL_DMA_Start_IT+0x4bc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d018      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a67      	ldr	r2, [pc, #412]	@ (8002e30 <HAL_DMA_Start_IT+0x4c0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d013      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a65      	ldr	r2, [pc, #404]	@ (8002e34 <HAL_DMA_Start_IT+0x4c4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00e      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a64      	ldr	r2, [pc, #400]	@ (8002e38 <HAL_DMA_Start_IT+0x4c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a62      	ldr	r2, [pc, #392]	@ (8002e3c <HAL_DMA_Start_IT+0x4cc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DMA_Start_IT+0x350>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a61      	ldr	r2, [pc, #388]	@ (8002e40 <HAL_DMA_Start_IT+0x4d0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DMA_Start_IT+0x354>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMA_Start_IT+0x356>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01a      	beq.n	8002d00 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a37      	ldr	r2, [pc, #220]	@ (8002de4 <HAL_DMA_Start_IT+0x474>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d04a      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a36      	ldr	r2, [pc, #216]	@ (8002de8 <HAL_DMA_Start_IT+0x478>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d045      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a34      	ldr	r2, [pc, #208]	@ (8002dec <HAL_DMA_Start_IT+0x47c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d040      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a33      	ldr	r2, [pc, #204]	@ (8002df0 <HAL_DMA_Start_IT+0x480>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d03b      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a31      	ldr	r2, [pc, #196]	@ (8002df4 <HAL_DMA_Start_IT+0x484>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d036      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_DMA_Start_IT+0x488>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d031      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2e      	ldr	r2, [pc, #184]	@ (8002dfc <HAL_DMA_Start_IT+0x48c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02c      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e00 <HAL_DMA_Start_IT+0x490>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d027      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2b      	ldr	r2, [pc, #172]	@ (8002e04 <HAL_DMA_Start_IT+0x494>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d022      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002e08 <HAL_DMA_Start_IT+0x498>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d01d      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a28      	ldr	r2, [pc, #160]	@ (8002e0c <HAL_DMA_Start_IT+0x49c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d018      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a27      	ldr	r2, [pc, #156]	@ (8002e10 <HAL_DMA_Start_IT+0x4a0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a25      	ldr	r2, [pc, #148]	@ (8002e14 <HAL_DMA_Start_IT+0x4a4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a24      	ldr	r2, [pc, #144]	@ (8002e18 <HAL_DMA_Start_IT+0x4a8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a22      	ldr	r2, [pc, #136]	@ (8002e1c <HAL_DMA_Start_IT+0x4ac>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Start_IT+0x430>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a21      	ldr	r2, [pc, #132]	@ (8002e20 <HAL_DMA_Start_IT+0x4b0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d108      	bne.n	8002db2 <HAL_DMA_Start_IT+0x442>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e012      	b.n	8002dd8 <HAL_DMA_Start_IT+0x468>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e009      	b.n	8002dd8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40020010 	.word	0x40020010
 8002de8:	40020028 	.word	0x40020028
 8002dec:	40020040 	.word	0x40020040
 8002df0:	40020058 	.word	0x40020058
 8002df4:	40020070 	.word	0x40020070
 8002df8:	40020088 	.word	0x40020088
 8002dfc:	400200a0 	.word	0x400200a0
 8002e00:	400200b8 	.word	0x400200b8
 8002e04:	40020410 	.word	0x40020410
 8002e08:	40020428 	.word	0x40020428
 8002e0c:	40020440 	.word	0x40020440
 8002e10:	40020458 	.word	0x40020458
 8002e14:	40020470 	.word	0x40020470
 8002e18:	40020488 	.word	0x40020488
 8002e1c:	400204a0 	.word	0x400204a0
 8002e20:	400204b8 	.word	0x400204b8
 8002e24:	58025408 	.word	0x58025408
 8002e28:	5802541c 	.word	0x5802541c
 8002e2c:	58025430 	.word	0x58025430
 8002e30:	58025444 	.word	0x58025444
 8002e34:	58025458 	.word	0x58025458
 8002e38:	5802546c 	.word	0x5802546c
 8002e3c:	58025480 	.word	0x58025480
 8002e40:	58025494 	.word	0x58025494

08002e44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7ff f89e 	bl	8001f8c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e2dc      	b.n	8003416 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d008      	beq.n	8002e7a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e2cd      	b.n	8003416 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a76      	ldr	r2, [pc, #472]	@ (8003058 <HAL_DMA_Abort+0x214>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d04a      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a74      	ldr	r2, [pc, #464]	@ (800305c <HAL_DMA_Abort+0x218>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d045      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a73      	ldr	r2, [pc, #460]	@ (8003060 <HAL_DMA_Abort+0x21c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d040      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a71      	ldr	r2, [pc, #452]	@ (8003064 <HAL_DMA_Abort+0x220>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d03b      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a70      	ldr	r2, [pc, #448]	@ (8003068 <HAL_DMA_Abort+0x224>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d036      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800306c <HAL_DMA_Abort+0x228>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d031      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6d      	ldr	r2, [pc, #436]	@ (8003070 <HAL_DMA_Abort+0x22c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d02c      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8003074 <HAL_DMA_Abort+0x230>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d027      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6a      	ldr	r2, [pc, #424]	@ (8003078 <HAL_DMA_Abort+0x234>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a68      	ldr	r2, [pc, #416]	@ (800307c <HAL_DMA_Abort+0x238>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01d      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a67      	ldr	r2, [pc, #412]	@ (8003080 <HAL_DMA_Abort+0x23c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d018      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a65      	ldr	r2, [pc, #404]	@ (8003084 <HAL_DMA_Abort+0x240>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a64      	ldr	r2, [pc, #400]	@ (8003088 <HAL_DMA_Abort+0x244>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a62      	ldr	r2, [pc, #392]	@ (800308c <HAL_DMA_Abort+0x248>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a61      	ldr	r2, [pc, #388]	@ (8003090 <HAL_DMA_Abort+0x24c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_DMA_Abort+0xd6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5f      	ldr	r2, [pc, #380]	@ (8003094 <HAL_DMA_Abort+0x250>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_DMA_Abort+0xda>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_DMA_Abort+0xdc>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 021e 	bic.w	r2, r2, #30
 8002f32:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f42:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e00a      	b.n	8002f62 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 020e 	bic.w	r2, r2, #14
 8002f5a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a3c      	ldr	r2, [pc, #240]	@ (8003058 <HAL_DMA_Abort+0x214>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d072      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3a      	ldr	r2, [pc, #232]	@ (800305c <HAL_DMA_Abort+0x218>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d06d      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a39      	ldr	r2, [pc, #228]	@ (8003060 <HAL_DMA_Abort+0x21c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d068      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a37      	ldr	r2, [pc, #220]	@ (8003064 <HAL_DMA_Abort+0x220>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d063      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a36      	ldr	r2, [pc, #216]	@ (8003068 <HAL_DMA_Abort+0x224>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d05e      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a34      	ldr	r2, [pc, #208]	@ (800306c <HAL_DMA_Abort+0x228>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d059      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a33      	ldr	r2, [pc, #204]	@ (8003070 <HAL_DMA_Abort+0x22c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d054      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a31      	ldr	r2, [pc, #196]	@ (8003074 <HAL_DMA_Abort+0x230>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d04f      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a30      	ldr	r2, [pc, #192]	@ (8003078 <HAL_DMA_Abort+0x234>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d04a      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <HAL_DMA_Abort+0x238>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d045      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2d      	ldr	r2, [pc, #180]	@ (8003080 <HAL_DMA_Abort+0x23c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d040      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <HAL_DMA_Abort+0x240>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d03b      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2a      	ldr	r2, [pc, #168]	@ (8003088 <HAL_DMA_Abort+0x244>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d036      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a28      	ldr	r2, [pc, #160]	@ (800308c <HAL_DMA_Abort+0x248>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d031      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a27      	ldr	r2, [pc, #156]	@ (8003090 <HAL_DMA_Abort+0x24c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d02c      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <HAL_DMA_Abort+0x250>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d027      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <HAL_DMA_Abort+0x254>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d022      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_DMA_Abort+0x258>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01d      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a21      	ldr	r2, [pc, #132]	@ (80030a0 <HAL_DMA_Abort+0x25c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d018      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <HAL_DMA_Abort+0x260>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <HAL_DMA_Abort+0x264>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00e      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <HAL_DMA_Abort+0x268>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d009      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1b      	ldr	r2, [pc, #108]	@ (80030b0 <HAL_DMA_Abort+0x26c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <HAL_DMA_Abort+0x20e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	@ (80030b4 <HAL_DMA_Abort+0x270>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d132      	bne.n	80030b8 <HAL_DMA_Abort+0x274>
 8003052:	2301      	movs	r3, #1
 8003054:	e031      	b.n	80030ba <HAL_DMA_Abort+0x276>
 8003056:	bf00      	nop
 8003058:	40020010 	.word	0x40020010
 800305c:	40020028 	.word	0x40020028
 8003060:	40020040 	.word	0x40020040
 8003064:	40020058 	.word	0x40020058
 8003068:	40020070 	.word	0x40020070
 800306c:	40020088 	.word	0x40020088
 8003070:	400200a0 	.word	0x400200a0
 8003074:	400200b8 	.word	0x400200b8
 8003078:	40020410 	.word	0x40020410
 800307c:	40020428 	.word	0x40020428
 8003080:	40020440 	.word	0x40020440
 8003084:	40020458 	.word	0x40020458
 8003088:	40020470 	.word	0x40020470
 800308c:	40020488 	.word	0x40020488
 8003090:	400204a0 	.word	0x400204a0
 8003094:	400204b8 	.word	0x400204b8
 8003098:	58025408 	.word	0x58025408
 800309c:	5802541c 	.word	0x5802541c
 80030a0:	58025430 	.word	0x58025430
 80030a4:	58025444 	.word	0x58025444
 80030a8:	58025458 	.word	0x58025458
 80030ac:	5802546c 	.word	0x5802546c
 80030b0:	58025480 	.word	0x58025480
 80030b4:	58025494 	.word	0x58025494
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003288 <HAL_DMA_Abort+0x444>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d04a      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6b      	ldr	r2, [pc, #428]	@ (800328c <HAL_DMA_Abort+0x448>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d045      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003290 <HAL_DMA_Abort+0x44c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d040      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a68      	ldr	r2, [pc, #416]	@ (8003294 <HAL_DMA_Abort+0x450>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d03b      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a67      	ldr	r2, [pc, #412]	@ (8003298 <HAL_DMA_Abort+0x454>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d036      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a65      	ldr	r2, [pc, #404]	@ (800329c <HAL_DMA_Abort+0x458>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d031      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a64      	ldr	r2, [pc, #400]	@ (80032a0 <HAL_DMA_Abort+0x45c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d02c      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a62      	ldr	r2, [pc, #392]	@ (80032a4 <HAL_DMA_Abort+0x460>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d027      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a61      	ldr	r2, [pc, #388]	@ (80032a8 <HAL_DMA_Abort+0x464>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a5f      	ldr	r2, [pc, #380]	@ (80032ac <HAL_DMA_Abort+0x468>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01d      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a5e      	ldr	r2, [pc, #376]	@ (80032b0 <HAL_DMA_Abort+0x46c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d018      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a5c      	ldr	r2, [pc, #368]	@ (80032b4 <HAL_DMA_Abort+0x470>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a5b      	ldr	r2, [pc, #364]	@ (80032b8 <HAL_DMA_Abort+0x474>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a59      	ldr	r2, [pc, #356]	@ (80032bc <HAL_DMA_Abort+0x478>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a58      	ldr	r2, [pc, #352]	@ (80032c0 <HAL_DMA_Abort+0x47c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_DMA_Abort+0x32a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a56      	ldr	r2, [pc, #344]	@ (80032c4 <HAL_DMA_Abort+0x480>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d108      	bne.n	8003180 <HAL_DMA_Abort+0x33c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e007      	b.n	8003190 <HAL_DMA_Abort+0x34c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003190:	e013      	b.n	80031ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003192:	f7fe fefb 	bl	8001f8c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b05      	cmp	r3, #5
 800319e:	d90c      	bls.n	80031ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2203      	movs	r2, #3
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e12d      	b.n	8003416 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e5      	bne.n	8003192 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003288 <HAL_DMA_Abort+0x444>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d04a      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2d      	ldr	r2, [pc, #180]	@ (800328c <HAL_DMA_Abort+0x448>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d045      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2c      	ldr	r2, [pc, #176]	@ (8003290 <HAL_DMA_Abort+0x44c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d040      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003294 <HAL_DMA_Abort+0x450>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d03b      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a29      	ldr	r2, [pc, #164]	@ (8003298 <HAL_DMA_Abort+0x454>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d036      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a27      	ldr	r2, [pc, #156]	@ (800329c <HAL_DMA_Abort+0x458>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d031      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a26      	ldr	r2, [pc, #152]	@ (80032a0 <HAL_DMA_Abort+0x45c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d02c      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a24      	ldr	r2, [pc, #144]	@ (80032a4 <HAL_DMA_Abort+0x460>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d027      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a23      	ldr	r2, [pc, #140]	@ (80032a8 <HAL_DMA_Abort+0x464>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a21      	ldr	r2, [pc, #132]	@ (80032ac <HAL_DMA_Abort+0x468>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01d      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a20      	ldr	r2, [pc, #128]	@ (80032b0 <HAL_DMA_Abort+0x46c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d018      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1e      	ldr	r2, [pc, #120]	@ (80032b4 <HAL_DMA_Abort+0x470>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1d      	ldr	r2, [pc, #116]	@ (80032b8 <HAL_DMA_Abort+0x474>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1b      	ldr	r2, [pc, #108]	@ (80032bc <HAL_DMA_Abort+0x478>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1a      	ldr	r2, [pc, #104]	@ (80032c0 <HAL_DMA_Abort+0x47c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_DMA_Abort+0x422>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <HAL_DMA_Abort+0x480>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d101      	bne.n	800326a <HAL_DMA_Abort+0x426>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_DMA_Abort+0x428>
 800326a:	2300      	movs	r3, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02b      	beq.n	80032c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	223f      	movs	r2, #63	@ 0x3f
 8003280:	409a      	lsls	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	e02a      	b.n	80032de <HAL_DMA_Abort+0x49a>
 8003288:	40020010 	.word	0x40020010
 800328c:	40020028 	.word	0x40020028
 8003290:	40020040 	.word	0x40020040
 8003294:	40020058 	.word	0x40020058
 8003298:	40020070 	.word	0x40020070
 800329c:	40020088 	.word	0x40020088
 80032a0:	400200a0 	.word	0x400200a0
 80032a4:	400200b8 	.word	0x400200b8
 80032a8:	40020410 	.word	0x40020410
 80032ac:	40020428 	.word	0x40020428
 80032b0:	40020440 	.word	0x40020440
 80032b4:	40020458 	.word	0x40020458
 80032b8:	40020470 	.word	0x40020470
 80032bc:	40020488 	.word	0x40020488
 80032c0:	400204a0 	.word	0x400204a0
 80032c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2201      	movs	r2, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003420 <HAL_DMA_Abort+0x5dc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d072      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003424 <HAL_DMA_Abort+0x5e0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d06d      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003428 <HAL_DMA_Abort+0x5e4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d068      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4a      	ldr	r2, [pc, #296]	@ (800342c <HAL_DMA_Abort+0x5e8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d063      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a49      	ldr	r2, [pc, #292]	@ (8003430 <HAL_DMA_Abort+0x5ec>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d05e      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a47      	ldr	r2, [pc, #284]	@ (8003434 <HAL_DMA_Abort+0x5f0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d059      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a46      	ldr	r2, [pc, #280]	@ (8003438 <HAL_DMA_Abort+0x5f4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d054      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a44      	ldr	r2, [pc, #272]	@ (800343c <HAL_DMA_Abort+0x5f8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d04f      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a43      	ldr	r2, [pc, #268]	@ (8003440 <HAL_DMA_Abort+0x5fc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04a      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a41      	ldr	r2, [pc, #260]	@ (8003444 <HAL_DMA_Abort+0x600>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d045      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a40      	ldr	r2, [pc, #256]	@ (8003448 <HAL_DMA_Abort+0x604>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d040      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3e      	ldr	r2, [pc, #248]	@ (800344c <HAL_DMA_Abort+0x608>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d03b      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a3d      	ldr	r2, [pc, #244]	@ (8003450 <HAL_DMA_Abort+0x60c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d036      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3b      	ldr	r2, [pc, #236]	@ (8003454 <HAL_DMA_Abort+0x610>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3a      	ldr	r2, [pc, #232]	@ (8003458 <HAL_DMA_Abort+0x614>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d02c      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a38      	ldr	r2, [pc, #224]	@ (800345c <HAL_DMA_Abort+0x618>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d027      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a37      	ldr	r2, [pc, #220]	@ (8003460 <HAL_DMA_Abort+0x61c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a35      	ldr	r2, [pc, #212]	@ (8003464 <HAL_DMA_Abort+0x620>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01d      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a34      	ldr	r2, [pc, #208]	@ (8003468 <HAL_DMA_Abort+0x624>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a32      	ldr	r2, [pc, #200]	@ (800346c <HAL_DMA_Abort+0x628>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a31      	ldr	r2, [pc, #196]	@ (8003470 <HAL_DMA_Abort+0x62c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003474 <HAL_DMA_Abort+0x630>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2e      	ldr	r2, [pc, #184]	@ (8003478 <HAL_DMA_Abort+0x634>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_DMA_Abort+0x58a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2c      	ldr	r2, [pc, #176]	@ (800347c <HAL_DMA_Abort+0x638>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_DMA_Abort+0x58e>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_DMA_Abort+0x590>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00c      	beq.n	8003404 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003402:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40020010 	.word	0x40020010
 8003424:	40020028 	.word	0x40020028
 8003428:	40020040 	.word	0x40020040
 800342c:	40020058 	.word	0x40020058
 8003430:	40020070 	.word	0x40020070
 8003434:	40020088 	.word	0x40020088
 8003438:	400200a0 	.word	0x400200a0
 800343c:	400200b8 	.word	0x400200b8
 8003440:	40020410 	.word	0x40020410
 8003444:	40020428 	.word	0x40020428
 8003448:	40020440 	.word	0x40020440
 800344c:	40020458 	.word	0x40020458
 8003450:	40020470 	.word	0x40020470
 8003454:	40020488 	.word	0x40020488
 8003458:	400204a0 	.word	0x400204a0
 800345c:	400204b8 	.word	0x400204b8
 8003460:	58025408 	.word	0x58025408
 8003464:	5802541c 	.word	0x5802541c
 8003468:	58025430 	.word	0x58025430
 800346c:	58025444 	.word	0x58025444
 8003470:	58025458 	.word	0x58025458
 8003474:	5802546c 	.word	0x5802546c
 8003478:	58025480 	.word	0x58025480
 800347c:	58025494 	.word	0x58025494

08003480 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e237      	b.n	8003902 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d004      	beq.n	80034a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2280      	movs	r2, #128	@ 0x80
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e22c      	b.n	8003902 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5c      	ldr	r2, [pc, #368]	@ (8003620 <HAL_DMA_Abort_IT+0x1a0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d04a      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003624 <HAL_DMA_Abort_IT+0x1a4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d045      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a59      	ldr	r2, [pc, #356]	@ (8003628 <HAL_DMA_Abort_IT+0x1a8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d040      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a58      	ldr	r2, [pc, #352]	@ (800362c <HAL_DMA_Abort_IT+0x1ac>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d03b      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a56      	ldr	r2, [pc, #344]	@ (8003630 <HAL_DMA_Abort_IT+0x1b0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d036      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a55      	ldr	r2, [pc, #340]	@ (8003634 <HAL_DMA_Abort_IT+0x1b4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d031      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a53      	ldr	r2, [pc, #332]	@ (8003638 <HAL_DMA_Abort_IT+0x1b8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02c      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a52      	ldr	r2, [pc, #328]	@ (800363c <HAL_DMA_Abort_IT+0x1bc>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d027      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a50      	ldr	r2, [pc, #320]	@ (8003640 <HAL_DMA_Abort_IT+0x1c0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d022      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a4f      	ldr	r2, [pc, #316]	@ (8003644 <HAL_DMA_Abort_IT+0x1c4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d01d      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a4d      	ldr	r2, [pc, #308]	@ (8003648 <HAL_DMA_Abort_IT+0x1c8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d018      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4c      	ldr	r2, [pc, #304]	@ (800364c <HAL_DMA_Abort_IT+0x1cc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d013      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a4a      	ldr	r2, [pc, #296]	@ (8003650 <HAL_DMA_Abort_IT+0x1d0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00e      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a49      	ldr	r2, [pc, #292]	@ (8003654 <HAL_DMA_Abort_IT+0x1d4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d009      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a47      	ldr	r2, [pc, #284]	@ (8003658 <HAL_DMA_Abort_IT+0x1d8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_DMA_Abort_IT+0xc8>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a46      	ldr	r2, [pc, #280]	@ (800365c <HAL_DMA_Abort_IT+0x1dc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_DMA_Abort_IT+0xcc>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_DMA_Abort_IT+0xce>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8086 	beq.w	8003660 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2204      	movs	r2, #4
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2f      	ldr	r2, [pc, #188]	@ (8003620 <HAL_DMA_Abort_IT+0x1a0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d04a      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2e      	ldr	r2, [pc, #184]	@ (8003624 <HAL_DMA_Abort_IT+0x1a4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d045      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2c      	ldr	r2, [pc, #176]	@ (8003628 <HAL_DMA_Abort_IT+0x1a8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d040      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2b      	ldr	r2, [pc, #172]	@ (800362c <HAL_DMA_Abort_IT+0x1ac>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d03b      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a29      	ldr	r2, [pc, #164]	@ (8003630 <HAL_DMA_Abort_IT+0x1b0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d036      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a28      	ldr	r2, [pc, #160]	@ (8003634 <HAL_DMA_Abort_IT+0x1b4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d031      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a26      	ldr	r2, [pc, #152]	@ (8003638 <HAL_DMA_Abort_IT+0x1b8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d02c      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a25      	ldr	r2, [pc, #148]	@ (800363c <HAL_DMA_Abort_IT+0x1bc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d027      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a23      	ldr	r2, [pc, #140]	@ (8003640 <HAL_DMA_Abort_IT+0x1c0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d022      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a22      	ldr	r2, [pc, #136]	@ (8003644 <HAL_DMA_Abort_IT+0x1c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d01d      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a20      	ldr	r2, [pc, #128]	@ (8003648 <HAL_DMA_Abort_IT+0x1c8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d018      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1f      	ldr	r2, [pc, #124]	@ (800364c <HAL_DMA_Abort_IT+0x1cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d013      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_DMA_Abort_IT+0x1d0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00e      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003654 <HAL_DMA_Abort_IT+0x1d4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003658 <HAL_DMA_Abort_IT+0x1d8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d004      	beq.n	80035fc <HAL_DMA_Abort_IT+0x17c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a19      	ldr	r2, [pc, #100]	@ (800365c <HAL_DMA_Abort_IT+0x1dc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d108      	bne.n	800360e <HAL_DMA_Abort_IT+0x18e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e178      	b.n	8003900 <HAL_DMA_Abort_IT+0x480>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e16f      	b.n	8003900 <HAL_DMA_Abort_IT+0x480>
 8003620:	40020010 	.word	0x40020010
 8003624:	40020028 	.word	0x40020028
 8003628:	40020040 	.word	0x40020040
 800362c:	40020058 	.word	0x40020058
 8003630:	40020070 	.word	0x40020070
 8003634:	40020088 	.word	0x40020088
 8003638:	400200a0 	.word	0x400200a0
 800363c:	400200b8 	.word	0x400200b8
 8003640:	40020410 	.word	0x40020410
 8003644:	40020428 	.word	0x40020428
 8003648:	40020440 	.word	0x40020440
 800364c:	40020458 	.word	0x40020458
 8003650:	40020470 	.word	0x40020470
 8003654:	40020488 	.word	0x40020488
 8003658:	400204a0 	.word	0x400204a0
 800365c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 020e 	bic.w	r2, r2, #14
 800366e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a6c      	ldr	r2, [pc, #432]	@ (8003828 <HAL_DMA_Abort_IT+0x3a8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d04a      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6b      	ldr	r2, [pc, #428]	@ (800382c <HAL_DMA_Abort_IT+0x3ac>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d045      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a69      	ldr	r2, [pc, #420]	@ (8003830 <HAL_DMA_Abort_IT+0x3b0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d040      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a68      	ldr	r2, [pc, #416]	@ (8003834 <HAL_DMA_Abort_IT+0x3b4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d03b      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a66      	ldr	r2, [pc, #408]	@ (8003838 <HAL_DMA_Abort_IT+0x3b8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d036      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a65      	ldr	r2, [pc, #404]	@ (800383c <HAL_DMA_Abort_IT+0x3bc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d031      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a63      	ldr	r2, [pc, #396]	@ (8003840 <HAL_DMA_Abort_IT+0x3c0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d02c      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a62      	ldr	r2, [pc, #392]	@ (8003844 <HAL_DMA_Abort_IT+0x3c4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d027      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a60      	ldr	r2, [pc, #384]	@ (8003848 <HAL_DMA_Abort_IT+0x3c8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d022      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5f      	ldr	r2, [pc, #380]	@ (800384c <HAL_DMA_Abort_IT+0x3cc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01d      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003850 <HAL_DMA_Abort_IT+0x3d0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d018      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5c      	ldr	r2, [pc, #368]	@ (8003854 <HAL_DMA_Abort_IT+0x3d4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003858 <HAL_DMA_Abort_IT+0x3d8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a59      	ldr	r2, [pc, #356]	@ (800385c <HAL_DMA_Abort_IT+0x3dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a57      	ldr	r2, [pc, #348]	@ (8003860 <HAL_DMA_Abort_IT+0x3e0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_DMA_Abort_IT+0x290>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a56      	ldr	r2, [pc, #344]	@ (8003864 <HAL_DMA_Abort_IT+0x3e4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d108      	bne.n	8003722 <HAL_DMA_Abort_IT+0x2a2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e007      	b.n	8003732 <HAL_DMA_Abort_IT+0x2b2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3c      	ldr	r2, [pc, #240]	@ (8003828 <HAL_DMA_Abort_IT+0x3a8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d072      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a3a      	ldr	r2, [pc, #232]	@ (800382c <HAL_DMA_Abort_IT+0x3ac>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d06d      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a39      	ldr	r2, [pc, #228]	@ (8003830 <HAL_DMA_Abort_IT+0x3b0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d068      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a37      	ldr	r2, [pc, #220]	@ (8003834 <HAL_DMA_Abort_IT+0x3b4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d063      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a36      	ldr	r2, [pc, #216]	@ (8003838 <HAL_DMA_Abort_IT+0x3b8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d05e      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a34      	ldr	r2, [pc, #208]	@ (800383c <HAL_DMA_Abort_IT+0x3bc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d059      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a33      	ldr	r2, [pc, #204]	@ (8003840 <HAL_DMA_Abort_IT+0x3c0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d054      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a31      	ldr	r2, [pc, #196]	@ (8003844 <HAL_DMA_Abort_IT+0x3c4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d04f      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a30      	ldr	r2, [pc, #192]	@ (8003848 <HAL_DMA_Abort_IT+0x3c8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d04a      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a2e      	ldr	r2, [pc, #184]	@ (800384c <HAL_DMA_Abort_IT+0x3cc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d045      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2d      	ldr	r2, [pc, #180]	@ (8003850 <HAL_DMA_Abort_IT+0x3d0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d040      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003854 <HAL_DMA_Abort_IT+0x3d4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d03b      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003858 <HAL_DMA_Abort_IT+0x3d8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d036      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a28      	ldr	r2, [pc, #160]	@ (800385c <HAL_DMA_Abort_IT+0x3dc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d031      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a27      	ldr	r2, [pc, #156]	@ (8003860 <HAL_DMA_Abort_IT+0x3e0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d02c      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a25      	ldr	r2, [pc, #148]	@ (8003864 <HAL_DMA_Abort_IT+0x3e4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d027      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a24      	ldr	r2, [pc, #144]	@ (8003868 <HAL_DMA_Abort_IT+0x3e8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a22      	ldr	r2, [pc, #136]	@ (800386c <HAL_DMA_Abort_IT+0x3ec>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01d      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a21      	ldr	r2, [pc, #132]	@ (8003870 <HAL_DMA_Abort_IT+0x3f0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d018      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003874 <HAL_DMA_Abort_IT+0x3f4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d013      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003878 <HAL_DMA_Abort_IT+0x3f8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00e      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <HAL_DMA_Abort_IT+0x3fc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <HAL_DMA_Abort_IT+0x400>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d004      	beq.n	8003822 <HAL_DMA_Abort_IT+0x3a2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <HAL_DMA_Abort_IT+0x404>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d132      	bne.n	8003888 <HAL_DMA_Abort_IT+0x408>
 8003822:	2301      	movs	r3, #1
 8003824:	e031      	b.n	800388a <HAL_DMA_Abort_IT+0x40a>
 8003826:	bf00      	nop
 8003828:	40020010 	.word	0x40020010
 800382c:	40020028 	.word	0x40020028
 8003830:	40020040 	.word	0x40020040
 8003834:	40020058 	.word	0x40020058
 8003838:	40020070 	.word	0x40020070
 800383c:	40020088 	.word	0x40020088
 8003840:	400200a0 	.word	0x400200a0
 8003844:	400200b8 	.word	0x400200b8
 8003848:	40020410 	.word	0x40020410
 800384c:	40020428 	.word	0x40020428
 8003850:	40020440 	.word	0x40020440
 8003854:	40020458 	.word	0x40020458
 8003858:	40020470 	.word	0x40020470
 800385c:	40020488 	.word	0x40020488
 8003860:	400204a0 	.word	0x400204a0
 8003864:	400204b8 	.word	0x400204b8
 8003868:	58025408 	.word	0x58025408
 800386c:	5802541c 	.word	0x5802541c
 8003870:	58025430 	.word	0x58025430
 8003874:	58025444 	.word	0x58025444
 8003878:	58025458 	.word	0x58025458
 800387c:	5802546c 	.word	0x5802546c
 8003880:	58025480 	.word	0x58025480
 8003884:	58025494 	.word	0x58025494
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d028      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003898:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800389c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2201      	movs	r2, #1
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80038bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop

0800390c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	@ 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003918:	4b67      	ldr	r3, [pc, #412]	@ (8003ab8 <HAL_DMA_IRQHandler+0x1ac>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a67      	ldr	r2, [pc, #412]	@ (8003abc <HAL_DMA_IRQHandler+0x1b0>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0a9b      	lsrs	r3, r3, #10
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003930:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a5f      	ldr	r2, [pc, #380]	@ (8003ac0 <HAL_DMA_IRQHandler+0x1b4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04a      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac4 <HAL_DMA_IRQHandler+0x1b8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d045      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac8 <HAL_DMA_IRQHandler+0x1bc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d040      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5a      	ldr	r2, [pc, #360]	@ (8003acc <HAL_DMA_IRQHandler+0x1c0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a59      	ldr	r2, [pc, #356]	@ (8003ad0 <HAL_DMA_IRQHandler+0x1c4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a57      	ldr	r2, [pc, #348]	@ (8003ad4 <HAL_DMA_IRQHandler+0x1c8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a56      	ldr	r2, [pc, #344]	@ (8003ad8 <HAL_DMA_IRQHandler+0x1cc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02c      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a54      	ldr	r2, [pc, #336]	@ (8003adc <HAL_DMA_IRQHandler+0x1d0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a53      	ldr	r2, [pc, #332]	@ (8003ae0 <HAL_DMA_IRQHandler+0x1d4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a51      	ldr	r2, [pc, #324]	@ (8003ae4 <HAL_DMA_IRQHandler+0x1d8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a50      	ldr	r2, [pc, #320]	@ (8003ae8 <HAL_DMA_IRQHandler+0x1dc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a4e      	ldr	r2, [pc, #312]	@ (8003aec <HAL_DMA_IRQHandler+0x1e0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a4d      	ldr	r2, [pc, #308]	@ (8003af0 <HAL_DMA_IRQHandler+0x1e4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a4b      	ldr	r2, [pc, #300]	@ (8003af4 <HAL_DMA_IRQHandler+0x1e8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a4a      	ldr	r2, [pc, #296]	@ (8003af8 <HAL_DMA_IRQHandler+0x1ec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_IRQHandler+0xd2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a48      	ldr	r2, [pc, #288]	@ (8003afc <HAL_DMA_IRQHandler+0x1f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_DMA_IRQHandler+0xd6>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_DMA_IRQHandler+0xd8>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 842b 	beq.w	8004240 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	2208      	movs	r2, #8
 80039f4:	409a      	lsls	r2, r3
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80a2 	beq.w	8003b44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac0 <HAL_DMA_IRQHandler+0x1b4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d04a      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac4 <HAL_DMA_IRQHandler+0x1b8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d045      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac8 <HAL_DMA_IRQHandler+0x1bc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d040      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2a      	ldr	r2, [pc, #168]	@ (8003acc <HAL_DMA_IRQHandler+0x1c0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d03b      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a28      	ldr	r2, [pc, #160]	@ (8003ad0 <HAL_DMA_IRQHandler+0x1c4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d036      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a27      	ldr	r2, [pc, #156]	@ (8003ad4 <HAL_DMA_IRQHandler+0x1c8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d031      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a25      	ldr	r2, [pc, #148]	@ (8003ad8 <HAL_DMA_IRQHandler+0x1cc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02c      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <HAL_DMA_IRQHandler+0x1d0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d027      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a22      	ldr	r2, [pc, #136]	@ (8003ae0 <HAL_DMA_IRQHandler+0x1d4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a21      	ldr	r2, [pc, #132]	@ (8003ae4 <HAL_DMA_IRQHandler+0x1d8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01d      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae8 <HAL_DMA_IRQHandler+0x1dc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1e      	ldr	r2, [pc, #120]	@ (8003aec <HAL_DMA_IRQHandler+0x1e0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <HAL_DMA_IRQHandler+0x1e4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <HAL_DMA_IRQHandler+0x1e8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a19      	ldr	r2, [pc, #100]	@ (8003af8 <HAL_DMA_IRQHandler+0x1ec>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x194>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <HAL_DMA_IRQHandler+0x1f0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d12f      	bne.n	8003b00 <HAL_DMA_IRQHandler+0x1f4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e02e      	b.n	8003b14 <HAL_DMA_IRQHandler+0x208>
 8003ab6:	bf00      	nop
 8003ab8:	24000004 	.word	0x24000004
 8003abc:	1b4e81b5 	.word	0x1b4e81b5
 8003ac0:	40020010 	.word	0x40020010
 8003ac4:	40020028 	.word	0x40020028
 8003ac8:	40020040 	.word	0x40020040
 8003acc:	40020058 	.word	0x40020058
 8003ad0:	40020070 	.word	0x40020070
 8003ad4:	40020088 	.word	0x40020088
 8003ad8:	400200a0 	.word	0x400200a0
 8003adc:	400200b8 	.word	0x400200b8
 8003ae0:	40020410 	.word	0x40020410
 8003ae4:	40020428 	.word	0x40020428
 8003ae8:	40020440 	.word	0x40020440
 8003aec:	40020458 	.word	0x40020458
 8003af0:	40020470 	.word	0x40020470
 8003af4:	40020488 	.word	0x40020488
 8003af8:	400204a0 	.word	0x400204a0
 8003afc:	400204b8 	.word	0x400204b8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0204 	bic.w	r2, r2, #4
 8003b26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2208      	movs	r2, #8
 8003b32:	409a      	lsls	r2, r3
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d06e      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a69      	ldr	r2, [pc, #420]	@ (8003d04 <HAL_DMA_IRQHandler+0x3f8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d04a      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a67      	ldr	r2, [pc, #412]	@ (8003d08 <HAL_DMA_IRQHandler+0x3fc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d045      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a66      	ldr	r2, [pc, #408]	@ (8003d0c <HAL_DMA_IRQHandler+0x400>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d040      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a64      	ldr	r2, [pc, #400]	@ (8003d10 <HAL_DMA_IRQHandler+0x404>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d03b      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a63      	ldr	r2, [pc, #396]	@ (8003d14 <HAL_DMA_IRQHandler+0x408>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d036      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a61      	ldr	r2, [pc, #388]	@ (8003d18 <HAL_DMA_IRQHandler+0x40c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d031      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a60      	ldr	r2, [pc, #384]	@ (8003d1c <HAL_DMA_IRQHandler+0x410>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d02c      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a5e      	ldr	r2, [pc, #376]	@ (8003d20 <HAL_DMA_IRQHandler+0x414>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d027      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5d      	ldr	r2, [pc, #372]	@ (8003d24 <HAL_DMA_IRQHandler+0x418>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d022      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a5b      	ldr	r2, [pc, #364]	@ (8003d28 <HAL_DMA_IRQHandler+0x41c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01d      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d2c <HAL_DMA_IRQHandler+0x420>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d018      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a58      	ldr	r2, [pc, #352]	@ (8003d30 <HAL_DMA_IRQHandler+0x424>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a57      	ldr	r2, [pc, #348]	@ (8003d34 <HAL_DMA_IRQHandler+0x428>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00e      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a55      	ldr	r2, [pc, #340]	@ (8003d38 <HAL_DMA_IRQHandler+0x42c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a54      	ldr	r2, [pc, #336]	@ (8003d3c <HAL_DMA_IRQHandler+0x430>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d004      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x2ee>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	@ (8003d40 <HAL_DMA_IRQHandler+0x434>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d10a      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x304>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e003      	b.n	8003c18 <HAL_DMA_IRQHandler+0x30c>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2201      	movs	r2, #1
 8003c26:	409a      	lsls	r2, r3
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c30:	f043 0202 	orr.w	r2, r3, #2
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	2204      	movs	r2, #4
 8003c42:	409a      	lsls	r2, r3
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 808f 	beq.w	8003d6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2c      	ldr	r2, [pc, #176]	@ (8003d04 <HAL_DMA_IRQHandler+0x3f8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d04a      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d08 <HAL_DMA_IRQHandler+0x3fc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d045      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a29      	ldr	r2, [pc, #164]	@ (8003d0c <HAL_DMA_IRQHandler+0x400>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d040      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a27      	ldr	r2, [pc, #156]	@ (8003d10 <HAL_DMA_IRQHandler+0x404>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d03b      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a26      	ldr	r2, [pc, #152]	@ (8003d14 <HAL_DMA_IRQHandler+0x408>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d036      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a24      	ldr	r2, [pc, #144]	@ (8003d18 <HAL_DMA_IRQHandler+0x40c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d031      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a23      	ldr	r2, [pc, #140]	@ (8003d1c <HAL_DMA_IRQHandler+0x410>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d02c      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a21      	ldr	r2, [pc, #132]	@ (8003d20 <HAL_DMA_IRQHandler+0x414>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d027      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a20      	ldr	r2, [pc, #128]	@ (8003d24 <HAL_DMA_IRQHandler+0x418>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d022      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1e      	ldr	r2, [pc, #120]	@ (8003d28 <HAL_DMA_IRQHandler+0x41c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01d      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <HAL_DMA_IRQHandler+0x420>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d30 <HAL_DMA_IRQHandler+0x424>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1a      	ldr	r2, [pc, #104]	@ (8003d34 <HAL_DMA_IRQHandler+0x428>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a18      	ldr	r2, [pc, #96]	@ (8003d38 <HAL_DMA_IRQHandler+0x42c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a17      	ldr	r2, [pc, #92]	@ (8003d3c <HAL_DMA_IRQHandler+0x430>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_DMA_IRQHandler+0x3e2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a15      	ldr	r2, [pc, #84]	@ (8003d40 <HAL_DMA_IRQHandler+0x434>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d12a      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x438>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	e023      	b.n	8003d4c <HAL_DMA_IRQHandler+0x440>
 8003d04:	40020010 	.word	0x40020010
 8003d08:	40020028 	.word	0x40020028
 8003d0c:	40020040 	.word	0x40020040
 8003d10:	40020058 	.word	0x40020058
 8003d14:	40020070 	.word	0x40020070
 8003d18:	40020088 	.word	0x40020088
 8003d1c:	400200a0 	.word	0x400200a0
 8003d20:	400200b8 	.word	0x400200b8
 8003d24:	40020410 	.word	0x40020410
 8003d28:	40020428 	.word	0x40020428
 8003d2c:	40020440 	.word	0x40020440
 8003d30:	40020458 	.word	0x40020458
 8003d34:	40020470 	.word	0x40020470
 8003d38:	40020488 	.word	0x40020488
 8003d3c:	400204a0 	.word	0x400204a0
 8003d40:	400204b8 	.word	0x400204b8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00d      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2204      	movs	r2, #4
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d64:	f043 0204 	orr.w	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2210      	movs	r2, #16
 8003d76:	409a      	lsls	r2, r3
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a6 	beq.w	8003ece <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a85      	ldr	r2, [pc, #532]	@ (8003f9c <HAL_DMA_IRQHandler+0x690>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d04a      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a83      	ldr	r2, [pc, #524]	@ (8003fa0 <HAL_DMA_IRQHandler+0x694>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d045      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a82      	ldr	r2, [pc, #520]	@ (8003fa4 <HAL_DMA_IRQHandler+0x698>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d040      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a80      	ldr	r2, [pc, #512]	@ (8003fa8 <HAL_DMA_IRQHandler+0x69c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d03b      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7f      	ldr	r2, [pc, #508]	@ (8003fac <HAL_DMA_IRQHandler+0x6a0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d036      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a7d      	ldr	r2, [pc, #500]	@ (8003fb0 <HAL_DMA_IRQHandler+0x6a4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d031      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fb4 <HAL_DMA_IRQHandler+0x6a8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d02c      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7a      	ldr	r2, [pc, #488]	@ (8003fb8 <HAL_DMA_IRQHandler+0x6ac>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d027      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a79      	ldr	r2, [pc, #484]	@ (8003fbc <HAL_DMA_IRQHandler+0x6b0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a77      	ldr	r2, [pc, #476]	@ (8003fc0 <HAL_DMA_IRQHandler+0x6b4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01d      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a76      	ldr	r2, [pc, #472]	@ (8003fc4 <HAL_DMA_IRQHandler+0x6b8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a74      	ldr	r2, [pc, #464]	@ (8003fc8 <HAL_DMA_IRQHandler+0x6bc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a73      	ldr	r2, [pc, #460]	@ (8003fcc <HAL_DMA_IRQHandler+0x6c0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a71      	ldr	r2, [pc, #452]	@ (8003fd0 <HAL_DMA_IRQHandler+0x6c4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a70      	ldr	r2, [pc, #448]	@ (8003fd4 <HAL_DMA_IRQHandler+0x6c8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x516>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd8 <HAL_DMA_IRQHandler+0x6cc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10a      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x52c>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e009      	b.n	8003e4c <HAL_DMA_IRQHandler+0x540>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d03e      	beq.n	8003ece <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	2210      	movs	r2, #16
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d024      	beq.n	8003ece <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
 8003e8c:	e01f      	b.n	8003ece <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01b      	beq.n	8003ece <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
 8003e9e:	e016      	b.n	8003ece <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d107      	bne.n	8003ebe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0208 	bic.w	r2, r2, #8
 8003ebc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8110 	beq.w	8004104 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2c      	ldr	r2, [pc, #176]	@ (8003f9c <HAL_DMA_IRQHandler+0x690>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d04a      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa0 <HAL_DMA_IRQHandler+0x694>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d045      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a29      	ldr	r2, [pc, #164]	@ (8003fa4 <HAL_DMA_IRQHandler+0x698>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d040      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a28      	ldr	r2, [pc, #160]	@ (8003fa8 <HAL_DMA_IRQHandler+0x69c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d03b      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a26      	ldr	r2, [pc, #152]	@ (8003fac <HAL_DMA_IRQHandler+0x6a0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d036      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a25      	ldr	r2, [pc, #148]	@ (8003fb0 <HAL_DMA_IRQHandler+0x6a4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d031      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a23      	ldr	r2, [pc, #140]	@ (8003fb4 <HAL_DMA_IRQHandler+0x6a8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02c      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a22      	ldr	r2, [pc, #136]	@ (8003fb8 <HAL_DMA_IRQHandler+0x6ac>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d027      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a20      	ldr	r2, [pc, #128]	@ (8003fbc <HAL_DMA_IRQHandler+0x6b0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d022      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc0 <HAL_DMA_IRQHandler+0x6b4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d01d      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc4 <HAL_DMA_IRQHandler+0x6b8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d018      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc8 <HAL_DMA_IRQHandler+0x6bc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1a      	ldr	r2, [pc, #104]	@ (8003fcc <HAL_DMA_IRQHandler+0x6c0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a19      	ldr	r2, [pc, #100]	@ (8003fd0 <HAL_DMA_IRQHandler+0x6c4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a17      	ldr	r2, [pc, #92]	@ (8003fd4 <HAL_DMA_IRQHandler+0x6c8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x678>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a16      	ldr	r2, [pc, #88]	@ (8003fd8 <HAL_DMA_IRQHandler+0x6cc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d12b      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x6d0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf14      	ite	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	2300      	moveq	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e02a      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x6e4>
 8003f9a:	bf00      	nop
 8003f9c:	40020010 	.word	0x40020010
 8003fa0:	40020028 	.word	0x40020028
 8003fa4:	40020040 	.word	0x40020040
 8003fa8:	40020058 	.word	0x40020058
 8003fac:	40020070 	.word	0x40020070
 8003fb0:	40020088 	.word	0x40020088
 8003fb4:	400200a0 	.word	0x400200a0
 8003fb8:	400200b8 	.word	0x400200b8
 8003fbc:	40020410 	.word	0x40020410
 8003fc0:	40020428 	.word	0x40020428
 8003fc4:	40020440 	.word	0x40020440
 8003fc8:	40020458 	.word	0x40020458
 8003fcc:	40020470 	.word	0x40020470
 8003fd0:	40020488 	.word	0x40020488
 8003fd4:	400204a0 	.word	0x400204a0
 8003fd8:	400204b8 	.word	0x400204b8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8087 	beq.w	8004104 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2220      	movs	r2, #32
 8004000:	409a      	lsls	r2, r3
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b04      	cmp	r3, #4
 8004010:	d139      	bne.n	8004086 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0216 	bic.w	r2, r2, #22
 8004020:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004030:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_DMA_IRQHandler+0x736>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0208 	bic.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	223f      	movs	r2, #63	@ 0x3f
 800405c:	409a      	lsls	r2, r3
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8382 	beq.w	8004780 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
          }
          return;
 8004084:	e37c      	b.n	8004780 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d018      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d108      	bne.n	80040b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02c      	beq.n	8004104 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
 80040b2:	e027      	b.n	8004104 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d023      	beq.n	8004104 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
 80040c4:	e01e      	b.n	8004104 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10f      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0210 	bic.w	r2, r2, #16
 80040e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 833e 	beq.w	800478a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8088 	beq.w	800422c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2204      	movs	r2, #4
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a89      	ldr	r2, [pc, #548]	@ (8004350 <HAL_DMA_IRQHandler+0xa44>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d04a      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a88      	ldr	r2, [pc, #544]	@ (8004354 <HAL_DMA_IRQHandler+0xa48>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d045      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a86      	ldr	r2, [pc, #536]	@ (8004358 <HAL_DMA_IRQHandler+0xa4c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d040      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a85      	ldr	r2, [pc, #532]	@ (800435c <HAL_DMA_IRQHandler+0xa50>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d03b      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a83      	ldr	r2, [pc, #524]	@ (8004360 <HAL_DMA_IRQHandler+0xa54>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d036      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a82      	ldr	r2, [pc, #520]	@ (8004364 <HAL_DMA_IRQHandler+0xa58>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d031      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a80      	ldr	r2, [pc, #512]	@ (8004368 <HAL_DMA_IRQHandler+0xa5c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02c      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7f      	ldr	r2, [pc, #508]	@ (800436c <HAL_DMA_IRQHandler+0xa60>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d027      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a7d      	ldr	r2, [pc, #500]	@ (8004370 <HAL_DMA_IRQHandler+0xa64>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d022      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7c      	ldr	r2, [pc, #496]	@ (8004374 <HAL_DMA_IRQHandler+0xa68>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d01d      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a7a      	ldr	r2, [pc, #488]	@ (8004378 <HAL_DMA_IRQHandler+0xa6c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d018      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a79      	ldr	r2, [pc, #484]	@ (800437c <HAL_DMA_IRQHandler+0xa70>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a77      	ldr	r2, [pc, #476]	@ (8004380 <HAL_DMA_IRQHandler+0xa74>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00e      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a76      	ldr	r2, [pc, #472]	@ (8004384 <HAL_DMA_IRQHandler+0xa78>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a74      	ldr	r2, [pc, #464]	@ (8004388 <HAL_DMA_IRQHandler+0xa7c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x8b8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a73      	ldr	r2, [pc, #460]	@ (800438c <HAL_DMA_IRQHandler+0xa80>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d108      	bne.n	80041d6 <HAL_DMA_IRQHandler+0x8ca>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	e007      	b.n	80041e6 <HAL_DMA_IRQHandler+0x8da>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d307      	bcc.n	8004202 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f2      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x8da>
 8004200:	e000      	b.n	8004204 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004202:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2203      	movs	r2, #3
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800421a:	e003      	b.n	8004224 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 82aa 	beq.w	800478a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
 800423e:	e2a4      	b.n	800478a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a52      	ldr	r2, [pc, #328]	@ (8004390 <HAL_DMA_IRQHandler+0xa84>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d04a      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a51      	ldr	r2, [pc, #324]	@ (8004394 <HAL_DMA_IRQHandler+0xa88>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d045      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a4f      	ldr	r2, [pc, #316]	@ (8004398 <HAL_DMA_IRQHandler+0xa8c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d040      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a4e      	ldr	r2, [pc, #312]	@ (800439c <HAL_DMA_IRQHandler+0xa90>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d03b      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a4c      	ldr	r2, [pc, #304]	@ (80043a0 <HAL_DMA_IRQHandler+0xa94>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d036      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a4b      	ldr	r2, [pc, #300]	@ (80043a4 <HAL_DMA_IRQHandler+0xa98>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d031      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a49      	ldr	r2, [pc, #292]	@ (80043a8 <HAL_DMA_IRQHandler+0xa9c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d02c      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a48      	ldr	r2, [pc, #288]	@ (80043ac <HAL_DMA_IRQHandler+0xaa0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d027      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a46      	ldr	r2, [pc, #280]	@ (80043b0 <HAL_DMA_IRQHandler+0xaa4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d022      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a45      	ldr	r2, [pc, #276]	@ (80043b4 <HAL_DMA_IRQHandler+0xaa8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d01d      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a43      	ldr	r2, [pc, #268]	@ (80043b8 <HAL_DMA_IRQHandler+0xaac>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d018      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a42      	ldr	r2, [pc, #264]	@ (80043bc <HAL_DMA_IRQHandler+0xab0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a40      	ldr	r2, [pc, #256]	@ (80043c0 <HAL_DMA_IRQHandler+0xab4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a3f      	ldr	r2, [pc, #252]	@ (80043c4 <HAL_DMA_IRQHandler+0xab8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3d      	ldr	r2, [pc, #244]	@ (80043c8 <HAL_DMA_IRQHandler+0xabc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x9d4>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3c      	ldr	r2, [pc, #240]	@ (80043cc <HAL_DMA_IRQHandler+0xac0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x9d8>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_DMA_IRQHandler+0x9da>
 80042e4:	2300      	movs	r3, #0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 824f 	beq.w	800478a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	2204      	movs	r2, #4
 80042fe:	409a      	lsls	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80dd 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xbb8>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80d7 	beq.w	80044c4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2204      	movs	r2, #4
 8004320:	409a      	lsls	r2, r3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d059      	beq.n	80043e4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d14a      	bne.n	80043d0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 8220 	beq.w	8004784 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800434c:	e21a      	b.n	8004784 <HAL_DMA_IRQHandler+0xe78>
 800434e:	bf00      	nop
 8004350:	40020010 	.word	0x40020010
 8004354:	40020028 	.word	0x40020028
 8004358:	40020040 	.word	0x40020040
 800435c:	40020058 	.word	0x40020058
 8004360:	40020070 	.word	0x40020070
 8004364:	40020088 	.word	0x40020088
 8004368:	400200a0 	.word	0x400200a0
 800436c:	400200b8 	.word	0x400200b8
 8004370:	40020410 	.word	0x40020410
 8004374:	40020428 	.word	0x40020428
 8004378:	40020440 	.word	0x40020440
 800437c:	40020458 	.word	0x40020458
 8004380:	40020470 	.word	0x40020470
 8004384:	40020488 	.word	0x40020488
 8004388:	400204a0 	.word	0x400204a0
 800438c:	400204b8 	.word	0x400204b8
 8004390:	48022c08 	.word	0x48022c08
 8004394:	48022c1c 	.word	0x48022c1c
 8004398:	48022c30 	.word	0x48022c30
 800439c:	48022c44 	.word	0x48022c44
 80043a0:	48022c58 	.word	0x48022c58
 80043a4:	48022c6c 	.word	0x48022c6c
 80043a8:	48022c80 	.word	0x48022c80
 80043ac:	48022c94 	.word	0x48022c94
 80043b0:	58025408 	.word	0x58025408
 80043b4:	5802541c 	.word	0x5802541c
 80043b8:	58025430 	.word	0x58025430
 80043bc:	58025444 	.word	0x58025444
 80043c0:	58025458 	.word	0x58025458
 80043c4:	5802546c 	.word	0x5802546c
 80043c8:	58025480 	.word	0x58025480
 80043cc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 81d5 	beq.w	8004784 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043e2:	e1cf      	b.n	8004784 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d160      	bne.n	80044b0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7f      	ldr	r2, [pc, #508]	@ (80045f0 <HAL_DMA_IRQHandler+0xce4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d04a      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7d      	ldr	r2, [pc, #500]	@ (80045f4 <HAL_DMA_IRQHandler+0xce8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d045      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7c      	ldr	r2, [pc, #496]	@ (80045f8 <HAL_DMA_IRQHandler+0xcec>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d040      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a7a      	ldr	r2, [pc, #488]	@ (80045fc <HAL_DMA_IRQHandler+0xcf0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d03b      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a79      	ldr	r2, [pc, #484]	@ (8004600 <HAL_DMA_IRQHandler+0xcf4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d036      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a77      	ldr	r2, [pc, #476]	@ (8004604 <HAL_DMA_IRQHandler+0xcf8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d031      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a76      	ldr	r2, [pc, #472]	@ (8004608 <HAL_DMA_IRQHandler+0xcfc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d02c      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a74      	ldr	r2, [pc, #464]	@ (800460c <HAL_DMA_IRQHandler+0xd00>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d027      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a73      	ldr	r2, [pc, #460]	@ (8004610 <HAL_DMA_IRQHandler+0xd04>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a71      	ldr	r2, [pc, #452]	@ (8004614 <HAL_DMA_IRQHandler+0xd08>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a70      	ldr	r2, [pc, #448]	@ (8004618 <HAL_DMA_IRQHandler+0xd0c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6e      	ldr	r2, [pc, #440]	@ (800461c <HAL_DMA_IRQHandler+0xd10>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6d      	ldr	r2, [pc, #436]	@ (8004620 <HAL_DMA_IRQHandler+0xd14>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a6b      	ldr	r2, [pc, #428]	@ (8004624 <HAL_DMA_IRQHandler+0xd18>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a6a      	ldr	r2, [pc, #424]	@ (8004628 <HAL_DMA_IRQHandler+0xd1c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_DMA_IRQHandler+0xb82>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a68      	ldr	r2, [pc, #416]	@ (800462c <HAL_DMA_IRQHandler+0xd20>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d108      	bne.n	80044a0 <HAL_DMA_IRQHandler+0xb94>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0208 	bic.w	r2, r2, #8
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e007      	b.n	80044b0 <HAL_DMA_IRQHandler+0xba4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0204 	bic.w	r2, r2, #4
 80044ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8165 	beq.w	8004784 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c2:	e15f      	b.n	8004784 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2202      	movs	r2, #2
 80044ce:	409a      	lsls	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80c5 	beq.w	8004664 <HAL_DMA_IRQHandler+0xd58>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80bf 	beq.w	8004664 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ea:	f003 031f 	and.w	r3, r3, #31
 80044ee:	2202      	movs	r2, #2
 80044f0:	409a      	lsls	r2, r3
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d018      	beq.n	8004532 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 813a 	beq.w	8004788 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451c:	e134      	b.n	8004788 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8130 	beq.w	8004788 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004530:	e12a      	b.n	8004788 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 8089 	bne.w	8004650 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2b      	ldr	r2, [pc, #172]	@ (80045f0 <HAL_DMA_IRQHandler+0xce4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d04a      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a29      	ldr	r2, [pc, #164]	@ (80045f4 <HAL_DMA_IRQHandler+0xce8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d045      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a28      	ldr	r2, [pc, #160]	@ (80045f8 <HAL_DMA_IRQHandler+0xcec>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d040      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a26      	ldr	r2, [pc, #152]	@ (80045fc <HAL_DMA_IRQHandler+0xcf0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d03b      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a25      	ldr	r2, [pc, #148]	@ (8004600 <HAL_DMA_IRQHandler+0xcf4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d036      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a23      	ldr	r2, [pc, #140]	@ (8004604 <HAL_DMA_IRQHandler+0xcf8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d031      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a22      	ldr	r2, [pc, #136]	@ (8004608 <HAL_DMA_IRQHandler+0xcfc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d02c      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a20      	ldr	r2, [pc, #128]	@ (800460c <HAL_DMA_IRQHandler+0xd00>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d027      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1f      	ldr	r2, [pc, #124]	@ (8004610 <HAL_DMA_IRQHandler+0xd04>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d022      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_DMA_IRQHandler+0xd08>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01d      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004618 <HAL_DMA_IRQHandler+0xd0c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d018      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <HAL_DMA_IRQHandler+0xd10>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a19      	ldr	r2, [pc, #100]	@ (8004620 <HAL_DMA_IRQHandler+0xd14>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a17      	ldr	r2, [pc, #92]	@ (8004624 <HAL_DMA_IRQHandler+0xd18>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d009      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a16      	ldr	r2, [pc, #88]	@ (8004628 <HAL_DMA_IRQHandler+0xd1c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_DMA_IRQHandler+0xcd2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a14      	ldr	r2, [pc, #80]	@ (800462c <HAL_DMA_IRQHandler+0xd20>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d128      	bne.n	8004630 <HAL_DMA_IRQHandler+0xd24>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0214 	bic.w	r2, r2, #20
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e027      	b.n	8004640 <HAL_DMA_IRQHandler+0xd34>
 80045f0:	40020010 	.word	0x40020010
 80045f4:	40020028 	.word	0x40020028
 80045f8:	40020040 	.word	0x40020040
 80045fc:	40020058 	.word	0x40020058
 8004600:	40020070 	.word	0x40020070
 8004604:	40020088 	.word	0x40020088
 8004608:	400200a0 	.word	0x400200a0
 800460c:	400200b8 	.word	0x400200b8
 8004610:	40020410 	.word	0x40020410
 8004614:	40020428 	.word	0x40020428
 8004618:	40020440 	.word	0x40020440
 800461c:	40020458 	.word	0x40020458
 8004620:	40020470 	.word	0x40020470
 8004624:	40020488 	.word	0x40020488
 8004628:	400204a0 	.word	0x400204a0
 800462c:	400204b8 	.word	0x400204b8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 020a 	bic.w	r2, r2, #10
 800463e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8097 	beq.w	8004788 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004662:	e091      	b.n	8004788 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2208      	movs	r2, #8
 800466e:	409a      	lsls	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8088 	beq.w	800478a <HAL_DMA_IRQHandler+0xe7e>
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8082 	beq.w	800478a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a41      	ldr	r2, [pc, #260]	@ (8004790 <HAL_DMA_IRQHandler+0xe84>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d04a      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3f      	ldr	r2, [pc, #252]	@ (8004794 <HAL_DMA_IRQHandler+0xe88>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d045      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a3e      	ldr	r2, [pc, #248]	@ (8004798 <HAL_DMA_IRQHandler+0xe8c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d040      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3c      	ldr	r2, [pc, #240]	@ (800479c <HAL_DMA_IRQHandler+0xe90>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d03b      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a3b      	ldr	r2, [pc, #236]	@ (80047a0 <HAL_DMA_IRQHandler+0xe94>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d036      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a39      	ldr	r2, [pc, #228]	@ (80047a4 <HAL_DMA_IRQHandler+0xe98>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d031      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a38      	ldr	r2, [pc, #224]	@ (80047a8 <HAL_DMA_IRQHandler+0xe9c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d02c      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a36      	ldr	r2, [pc, #216]	@ (80047ac <HAL_DMA_IRQHandler+0xea0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a35      	ldr	r2, [pc, #212]	@ (80047b0 <HAL_DMA_IRQHandler+0xea4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a33      	ldr	r2, [pc, #204]	@ (80047b4 <HAL_DMA_IRQHandler+0xea8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a32      	ldr	r2, [pc, #200]	@ (80047b8 <HAL_DMA_IRQHandler+0xeac>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a30      	ldr	r2, [pc, #192]	@ (80047bc <HAL_DMA_IRQHandler+0xeb0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2f      	ldr	r2, [pc, #188]	@ (80047c0 <HAL_DMA_IRQHandler+0xeb4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2d      	ldr	r2, [pc, #180]	@ (80047c4 <HAL_DMA_IRQHandler+0xeb8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2c      	ldr	r2, [pc, #176]	@ (80047c8 <HAL_DMA_IRQHandler+0xebc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe1a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <HAL_DMA_IRQHandler+0xec0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <HAL_DMA_IRQHandler+0xe2c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 021c 	bic.w	r2, r2, #28
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e007      	b.n	8004748 <HAL_DMA_IRQHandler+0xe3c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 020e 	bic.w	r2, r2, #14
 8004746:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2201      	movs	r2, #1
 8004752:	409a      	lsls	r2, r3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
 800477e:	e004      	b.n	800478a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004780:	bf00      	nop
 8004782:	e002      	b.n	800478a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004784:	bf00      	nop
 8004786:	e000      	b.n	800478a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004788:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800478a:	3728      	adds	r7, #40	@ 0x28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40020010 	.word	0x40020010
 8004794:	40020028 	.word	0x40020028
 8004798:	40020040 	.word	0x40020040
 800479c:	40020058 	.word	0x40020058
 80047a0:	40020070 	.word	0x40020070
 80047a4:	40020088 	.word	0x40020088
 80047a8:	400200a0 	.word	0x400200a0
 80047ac:	400200b8 	.word	0x400200b8
 80047b0:	40020410 	.word	0x40020410
 80047b4:	40020428 	.word	0x40020428
 80047b8:	40020440 	.word	0x40020440
 80047bc:	40020458 	.word	0x40020458
 80047c0:	40020470 	.word	0x40020470
 80047c4:	40020488 	.word	0x40020488
 80047c8:	400204a0 	.word	0x400204a0
 80047cc:	400204b8 	.word	0x400204b8

080047d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a7f      	ldr	r2, [pc, #508]	@ (8004a04 <DMA_SetConfig+0x21c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d072      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a7d      	ldr	r2, [pc, #500]	@ (8004a08 <DMA_SetConfig+0x220>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d06d      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a0c <DMA_SetConfig+0x224>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d068      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a7a      	ldr	r2, [pc, #488]	@ (8004a10 <DMA_SetConfig+0x228>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d063      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a79      	ldr	r2, [pc, #484]	@ (8004a14 <DMA_SetConfig+0x22c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d05e      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a77      	ldr	r2, [pc, #476]	@ (8004a18 <DMA_SetConfig+0x230>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d059      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a76      	ldr	r2, [pc, #472]	@ (8004a1c <DMA_SetConfig+0x234>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d054      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a74      	ldr	r2, [pc, #464]	@ (8004a20 <DMA_SetConfig+0x238>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d04f      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a73      	ldr	r2, [pc, #460]	@ (8004a24 <DMA_SetConfig+0x23c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d04a      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a71      	ldr	r2, [pc, #452]	@ (8004a28 <DMA_SetConfig+0x240>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d045      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a70      	ldr	r2, [pc, #448]	@ (8004a2c <DMA_SetConfig+0x244>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d040      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a6e      	ldr	r2, [pc, #440]	@ (8004a30 <DMA_SetConfig+0x248>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d03b      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a6d      	ldr	r2, [pc, #436]	@ (8004a34 <DMA_SetConfig+0x24c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d036      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a6b      	ldr	r2, [pc, #428]	@ (8004a38 <DMA_SetConfig+0x250>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d031      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6a      	ldr	r2, [pc, #424]	@ (8004a3c <DMA_SetConfig+0x254>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d02c      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a68      	ldr	r2, [pc, #416]	@ (8004a40 <DMA_SetConfig+0x258>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d027      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a67      	ldr	r2, [pc, #412]	@ (8004a44 <DMA_SetConfig+0x25c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d022      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a65      	ldr	r2, [pc, #404]	@ (8004a48 <DMA_SetConfig+0x260>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01d      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a64      	ldr	r2, [pc, #400]	@ (8004a4c <DMA_SetConfig+0x264>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d018      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a62      	ldr	r2, [pc, #392]	@ (8004a50 <DMA_SetConfig+0x268>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a61      	ldr	r2, [pc, #388]	@ (8004a54 <DMA_SetConfig+0x26c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00e      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004a58 <DMA_SetConfig+0x270>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d009      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5e      	ldr	r2, [pc, #376]	@ (8004a5c <DMA_SetConfig+0x274>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <DMA_SetConfig+0x10a>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a5c      	ldr	r2, [pc, #368]	@ (8004a60 <DMA_SetConfig+0x278>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <DMA_SetConfig+0x10e>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <DMA_SetConfig+0x110>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00d      	beq.n	8004918 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004904:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004916:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a39      	ldr	r2, [pc, #228]	@ (8004a04 <DMA_SetConfig+0x21c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d04a      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a38      	ldr	r2, [pc, #224]	@ (8004a08 <DMA_SetConfig+0x220>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d045      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a36      	ldr	r2, [pc, #216]	@ (8004a0c <DMA_SetConfig+0x224>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d040      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a35      	ldr	r2, [pc, #212]	@ (8004a10 <DMA_SetConfig+0x228>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d03b      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a33      	ldr	r2, [pc, #204]	@ (8004a14 <DMA_SetConfig+0x22c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d036      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a32      	ldr	r2, [pc, #200]	@ (8004a18 <DMA_SetConfig+0x230>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d031      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a30      	ldr	r2, [pc, #192]	@ (8004a1c <DMA_SetConfig+0x234>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02c      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2f      	ldr	r2, [pc, #188]	@ (8004a20 <DMA_SetConfig+0x238>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d027      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a24 <DMA_SetConfig+0x23c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d022      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2c      	ldr	r2, [pc, #176]	@ (8004a28 <DMA_SetConfig+0x240>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d01d      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2a      	ldr	r2, [pc, #168]	@ (8004a2c <DMA_SetConfig+0x244>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d018      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a29      	ldr	r2, [pc, #164]	@ (8004a30 <DMA_SetConfig+0x248>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a27      	ldr	r2, [pc, #156]	@ (8004a34 <DMA_SetConfig+0x24c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00e      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a26      	ldr	r2, [pc, #152]	@ (8004a38 <DMA_SetConfig+0x250>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a24      	ldr	r2, [pc, #144]	@ (8004a3c <DMA_SetConfig+0x254>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <DMA_SetConfig+0x1d0>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a23      	ldr	r2, [pc, #140]	@ (8004a40 <DMA_SetConfig+0x258>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <DMA_SetConfig+0x1d4>
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <DMA_SetConfig+0x1d6>
 80049bc:	2300      	movs	r3, #0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d059      	beq.n	8004a76 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	223f      	movs	r2, #63	@ 0x3f
 80049cc:	409a      	lsls	r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b40      	cmp	r3, #64	@ 0x40
 80049f0:	d138      	bne.n	8004a64 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a02:	e0ae      	b.n	8004b62 <DMA_SetConfig+0x37a>
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8
 8004a44:	58025408 	.word	0x58025408
 8004a48:	5802541c 	.word	0x5802541c
 8004a4c:	58025430 	.word	0x58025430
 8004a50:	58025444 	.word	0x58025444
 8004a54:	58025458 	.word	0x58025458
 8004a58:	5802546c 	.word	0x5802546c
 8004a5c:	58025480 	.word	0x58025480
 8004a60:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	60da      	str	r2, [r3, #12]
}
 8004a74:	e075      	b.n	8004b62 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3d      	ldr	r2, [pc, #244]	@ (8004b70 <DMA_SetConfig+0x388>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d04a      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3b      	ldr	r2, [pc, #236]	@ (8004b74 <DMA_SetConfig+0x38c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d045      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a3a      	ldr	r2, [pc, #232]	@ (8004b78 <DMA_SetConfig+0x390>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d040      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a38      	ldr	r2, [pc, #224]	@ (8004b7c <DMA_SetConfig+0x394>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d03b      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a37      	ldr	r2, [pc, #220]	@ (8004b80 <DMA_SetConfig+0x398>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d036      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a35      	ldr	r2, [pc, #212]	@ (8004b84 <DMA_SetConfig+0x39c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a34      	ldr	r2, [pc, #208]	@ (8004b88 <DMA_SetConfig+0x3a0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d02c      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a32      	ldr	r2, [pc, #200]	@ (8004b8c <DMA_SetConfig+0x3a4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d027      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a31      	ldr	r2, [pc, #196]	@ (8004b90 <DMA_SetConfig+0x3a8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d022      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8004b94 <DMA_SetConfig+0x3ac>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01d      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2e      	ldr	r2, [pc, #184]	@ (8004b98 <DMA_SetConfig+0x3b0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d018      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b9c <DMA_SetConfig+0x3b4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba0 <DMA_SetConfig+0x3b8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a29      	ldr	r2, [pc, #164]	@ (8004ba4 <DMA_SetConfig+0x3bc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a28      	ldr	r2, [pc, #160]	@ (8004ba8 <DMA_SetConfig+0x3c0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <DMA_SetConfig+0x32e>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a26      	ldr	r2, [pc, #152]	@ (8004bac <DMA_SetConfig+0x3c4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d101      	bne.n	8004b1a <DMA_SetConfig+0x332>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <DMA_SetConfig+0x334>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d020      	beq.n	8004b62 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2201      	movs	r2, #1
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d108      	bne.n	8004b52 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	60da      	str	r2, [r3, #12]
}
 8004b50:	e007      	b.n	8004b62 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	60da      	str	r2, [r3, #12]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	48022c08 	.word	0x48022c08
 8004b74:	48022c1c 	.word	0x48022c1c
 8004b78:	48022c30 	.word	0x48022c30
 8004b7c:	48022c44 	.word	0x48022c44
 8004b80:	48022c58 	.word	0x48022c58
 8004b84:	48022c6c 	.word	0x48022c6c
 8004b88:	48022c80 	.word	0x48022c80
 8004b8c:	48022c94 	.word	0x48022c94
 8004b90:	58025408 	.word	0x58025408
 8004b94:	5802541c 	.word	0x5802541c
 8004b98:	58025430 	.word	0x58025430
 8004b9c:	58025444 	.word	0x58025444
 8004ba0:	58025458 	.word	0x58025458
 8004ba4:	5802546c 	.word	0x5802546c
 8004ba8:	58025480 	.word	0x58025480
 8004bac:	58025494 	.word	0x58025494

08004bb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a42      	ldr	r2, [pc, #264]	@ (8004cc8 <DMA_CalcBaseAndBitshift+0x118>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d04a      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a41      	ldr	r2, [pc, #260]	@ (8004ccc <DMA_CalcBaseAndBitshift+0x11c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d045      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a3f      	ldr	r2, [pc, #252]	@ (8004cd0 <DMA_CalcBaseAndBitshift+0x120>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d040      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd4 <DMA_CalcBaseAndBitshift+0x124>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d03b      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3c      	ldr	r2, [pc, #240]	@ (8004cd8 <DMA_CalcBaseAndBitshift+0x128>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d036      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a3b      	ldr	r2, [pc, #236]	@ (8004cdc <DMA_CalcBaseAndBitshift+0x12c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d031      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a39      	ldr	r2, [pc, #228]	@ (8004ce0 <DMA_CalcBaseAndBitshift+0x130>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02c      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a38      	ldr	r2, [pc, #224]	@ (8004ce4 <DMA_CalcBaseAndBitshift+0x134>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d027      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a36      	ldr	r2, [pc, #216]	@ (8004ce8 <DMA_CalcBaseAndBitshift+0x138>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d022      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a35      	ldr	r2, [pc, #212]	@ (8004cec <DMA_CalcBaseAndBitshift+0x13c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d01d      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a33      	ldr	r2, [pc, #204]	@ (8004cf0 <DMA_CalcBaseAndBitshift+0x140>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d018      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a32      	ldr	r2, [pc, #200]	@ (8004cf4 <DMA_CalcBaseAndBitshift+0x144>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a30      	ldr	r2, [pc, #192]	@ (8004cf8 <DMA_CalcBaseAndBitshift+0x148>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00e      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cfc <DMA_CalcBaseAndBitshift+0x14c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d009      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2d      	ldr	r2, [pc, #180]	@ (8004d00 <DMA_CalcBaseAndBitshift+0x150>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <DMA_CalcBaseAndBitshift+0xa8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2c      	ldr	r2, [pc, #176]	@ (8004d04 <DMA_CalcBaseAndBitshift+0x154>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d101      	bne.n	8004c5c <DMA_CalcBaseAndBitshift+0xac>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <DMA_CalcBaseAndBitshift+0xae>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d024      	beq.n	8004cac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3b10      	subs	r3, #16
 8004c6a:	4a27      	ldr	r2, [pc, #156]	@ (8004d08 <DMA_CalcBaseAndBitshift+0x158>)
 8004c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	4a24      	ldr	r2, [pc, #144]	@ (8004d0c <DMA_CalcBaseAndBitshift+0x15c>)
 8004c7c:	5cd3      	ldrb	r3, [r2, r3]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d908      	bls.n	8004c9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4b1f      	ldr	r3, [pc, #124]	@ (8004d10 <DMA_CalcBaseAndBitshift+0x160>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	1d1a      	adds	r2, r3, #4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c9a:	e00d      	b.n	8004cb8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d10 <DMA_CalcBaseAndBitshift+0x160>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004caa:	e005      	b.n	8004cb8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40020010 	.word	0x40020010
 8004ccc:	40020028 	.word	0x40020028
 8004cd0:	40020040 	.word	0x40020040
 8004cd4:	40020058 	.word	0x40020058
 8004cd8:	40020070 	.word	0x40020070
 8004cdc:	40020088 	.word	0x40020088
 8004ce0:	400200a0 	.word	0x400200a0
 8004ce4:	400200b8 	.word	0x400200b8
 8004ce8:	40020410 	.word	0x40020410
 8004cec:	40020428 	.word	0x40020428
 8004cf0:	40020440 	.word	0x40020440
 8004cf4:	40020458 	.word	0x40020458
 8004cf8:	40020470 	.word	0x40020470
 8004cfc:	40020488 	.word	0x40020488
 8004d00:	400204a0 	.word	0x400204a0
 8004d04:	400204b8 	.word	0x400204b8
 8004d08:	aaaaaaab 	.word	0xaaaaaaab
 8004d0c:	0801bbcc 	.word	0x0801bbcc
 8004d10:	fffffc00 	.word	0xfffffc00

08004d14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d120      	bne.n	8004d6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d858      	bhi.n	8004de2 <DMA_CheckFifoParam+0xce>
 8004d30:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <DMA_CheckFifoParam+0x24>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d49 	.word	0x08004d49
 8004d3c:	08004d5b 	.word	0x08004d5b
 8004d40:	08004d49 	.word	0x08004d49
 8004d44:	08004de3 	.word	0x08004de3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d048      	beq.n	8004de6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d58:	e045      	b.n	8004de6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d62:	d142      	bne.n	8004dea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d68:	e03f      	b.n	8004dea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d72:	d123      	bne.n	8004dbc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d838      	bhi.n	8004dee <DMA_CheckFifoParam+0xda>
 8004d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <DMA_CheckFifoParam+0x70>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004d95 	.word	0x08004d95
 8004d88:	08004d9b 	.word	0x08004d9b
 8004d8c:	08004d95 	.word	0x08004d95
 8004d90:	08004dad 	.word	0x08004dad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
        break;
 8004d98:	e030      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d025      	beq.n	8004df2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004daa:	e022      	b.n	8004df2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004db4:	d11f      	bne.n	8004df6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dba:	e01c      	b.n	8004df6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d902      	bls.n	8004dca <DMA_CheckFifoParam+0xb6>
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d003      	beq.n	8004dd0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004dc8:	e018      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dce:	e015      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00e      	beq.n	8004dfa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
    break;
 8004de0:	e00b      	b.n	8004dfa <DMA_CheckFifoParam+0xe6>
        break;
 8004de2:	bf00      	nop
 8004de4:	e00a      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>
        break;
 8004de6:	bf00      	nop
 8004de8:	e008      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>
        break;
 8004dea:	bf00      	nop
 8004dec:	e006      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>
        break;
 8004dee:	bf00      	nop
 8004df0:	e004      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>
        break;
 8004df2:	bf00      	nop
 8004df4:	e002      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>
        break;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <DMA_CheckFifoParam+0xe8>
    break;
 8004dfa:	bf00      	nop
    }
  }

  return status;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop

08004e0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a38      	ldr	r2, [pc, #224]	@ (8004f00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a36      	ldr	r2, [pc, #216]	@ (8004f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a35      	ldr	r2, [pc, #212]	@ (8004f08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a33      	ldr	r2, [pc, #204]	@ (8004f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a32      	ldr	r2, [pc, #200]	@ (8004f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a30      	ldr	r2, [pc, #192]	@ (8004f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2d      	ldr	r2, [pc, #180]	@ (8004f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01a      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	3b08      	subs	r3, #8
 8004e7c:	4a28      	ldr	r2, [pc, #160]	@ (8004f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4b26      	ldr	r3, [pc, #152]	@ (8004f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a24      	ldr	r2, [pc, #144]	@ (8004f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004e98:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ea8:	e024      	b.n	8004ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	3b10      	subs	r3, #16
 8004eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d806      	bhi.n	8004ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d902      	bls.n	8004ed2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4b18      	ldr	r3, [pc, #96]	@ (8004f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	@ (8004f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ee4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	2201      	movs	r2, #1
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	58025408 	.word	0x58025408
 8004f04:	5802541c 	.word	0x5802541c
 8004f08:	58025430 	.word	0x58025430
 8004f0c:	58025444 	.word	0x58025444
 8004f10:	58025458 	.word	0x58025458
 8004f14:	5802546c 	.word	0x5802546c
 8004f18:	58025480 	.word	0x58025480
 8004f1c:	58025494 	.word	0x58025494
 8004f20:	cccccccd 	.word	0xcccccccd
 8004f24:	16009600 	.word	0x16009600
 8004f28:	58025880 	.word	0x58025880
 8004f2c:	aaaaaaab 	.word	0xaaaaaaab
 8004f30:	400204b8 	.word	0x400204b8
 8004f34:	4002040f 	.word	0x4002040f
 8004f38:	10008200 	.word	0x10008200
 8004f3c:	40020880 	.word	0x40020880

08004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d04a      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d847      	bhi.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a25      	ldr	r2, [pc, #148]	@ (8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d022      	beq.n	8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a24      	ldr	r2, [pc, #144]	@ (8004ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d01d      	beq.n	8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a22      	ldr	r2, [pc, #136]	@ (8005000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d018      	beq.n	8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a21      	ldr	r2, [pc, #132]	@ (8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1f      	ldr	r2, [pc, #124]	@ (8005008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00e      	beq.n	8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1e      	ldr	r2, [pc, #120]	@ (800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d009      	beq.n	8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4b17      	ldr	r3, [pc, #92]	@ (8005018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a15      	ldr	r2, [pc, #84]	@ (800501c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004fc8:	671a      	str	r2, [r3, #112]	@ 0x70
 8004fca:	e009      	b.n	8004fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a11      	ldr	r2, [pc, #68]	@ (8005024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004fde:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	409a      	lsls	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	58025408 	.word	0x58025408
 8004ffc:	5802541c 	.word	0x5802541c
 8005000:	58025430 	.word	0x58025430
 8005004:	58025444 	.word	0x58025444
 8005008:	58025458 	.word	0x58025458
 800500c:	5802546c 	.word	0x5802546c
 8005010:	58025480 	.word	0x58025480
 8005014:	58025494 	.word	0x58025494
 8005018:	1600963f 	.word	0x1600963f
 800501c:	58025940 	.word	0x58025940
 8005020:	1000823f 	.word	0x1000823f
 8005024:	40020940 	.word	0x40020940

08005028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005028:	b480      	push	{r7}
 800502a:	b089      	sub	sp, #36	@ 0x24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005036:	4b89      	ldr	r3, [pc, #548]	@ (800525c <HAL_GPIO_Init+0x234>)
 8005038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800503a:	e194      	b.n	8005366 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	4013      	ands	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8186 	beq.w	8005360 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b01      	cmp	r3, #1
 800505e:	d005      	beq.n	800506c <HAL_GPIO_Init+0x44>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d130      	bne.n	80050ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	2203      	movs	r2, #3
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	4313      	orrs	r3, r2
 8005094:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050a2:	2201      	movs	r2, #1
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	f003 0201 	and.w	r2, r3, #1
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d017      	beq.n	800510a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	2203      	movs	r2, #3
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4313      	orrs	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d123      	bne.n	800515e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	08da      	lsrs	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3208      	adds	r2, #8
 800511e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	220f      	movs	r2, #15
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	08da      	lsrs	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3208      	adds	r2, #8
 8005158:	69b9      	ldr	r1, [r7, #24]
 800515a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	2203      	movs	r2, #3
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4013      	ands	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0203 	and.w	r2, r3, #3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80e0 	beq.w	8005360 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005260 <HAL_GPIO_Init+0x238>)
 80051a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80051a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005260 <HAL_GPIO_Init+0x238>)
 80051a8:	f043 0302 	orr.w	r3, r3, #2
 80051ac:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80051b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005260 <HAL_GPIO_Init+0x238>)
 80051b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051be:	4a29      	ldr	r2, [pc, #164]	@ (8005264 <HAL_GPIO_Init+0x23c>)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	3302      	adds	r3, #2
 80051c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	220f      	movs	r2, #15
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a20      	ldr	r2, [pc, #128]	@ (8005268 <HAL_GPIO_Init+0x240>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d052      	beq.n	8005290 <HAL_GPIO_Init+0x268>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <HAL_GPIO_Init+0x244>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_GPIO_Init+0x22e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005270 <HAL_GPIO_Init+0x248>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02b      	beq.n	8005252 <HAL_GPIO_Init+0x22a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005274 <HAL_GPIO_Init+0x24c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d025      	beq.n	800524e <HAL_GPIO_Init+0x226>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1c      	ldr	r2, [pc, #112]	@ (8005278 <HAL_GPIO_Init+0x250>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01f      	beq.n	800524a <HAL_GPIO_Init+0x222>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <HAL_GPIO_Init+0x254>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d019      	beq.n	8005246 <HAL_GPIO_Init+0x21e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1a      	ldr	r2, [pc, #104]	@ (8005280 <HAL_GPIO_Init+0x258>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_GPIO_Init+0x21a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a19      	ldr	r2, [pc, #100]	@ (8005284 <HAL_GPIO_Init+0x25c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00d      	beq.n	800523e <HAL_GPIO_Init+0x216>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a18      	ldr	r2, [pc, #96]	@ (8005288 <HAL_GPIO_Init+0x260>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <HAL_GPIO_Init+0x212>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a17      	ldr	r2, [pc, #92]	@ (800528c <HAL_GPIO_Init+0x264>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_GPIO_Init+0x20e>
 8005232:	2309      	movs	r3, #9
 8005234:	e02d      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 8005236:	230a      	movs	r3, #10
 8005238:	e02b      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 800523a:	2308      	movs	r3, #8
 800523c:	e029      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 800523e:	2307      	movs	r3, #7
 8005240:	e027      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 8005242:	2306      	movs	r3, #6
 8005244:	e025      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 8005246:	2305      	movs	r3, #5
 8005248:	e023      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 800524a:	2304      	movs	r3, #4
 800524c:	e021      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 800524e:	2303      	movs	r3, #3
 8005250:	e01f      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 8005252:	2302      	movs	r3, #2
 8005254:	e01d      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 8005256:	2301      	movs	r3, #1
 8005258:	e01b      	b.n	8005292 <HAL_GPIO_Init+0x26a>
 800525a:	bf00      	nop
 800525c:	58000080 	.word	0x58000080
 8005260:	58024400 	.word	0x58024400
 8005264:	58000400 	.word	0x58000400
 8005268:	58020000 	.word	0x58020000
 800526c:	58020400 	.word	0x58020400
 8005270:	58020800 	.word	0x58020800
 8005274:	58020c00 	.word	0x58020c00
 8005278:	58021000 	.word	0x58021000
 800527c:	58021400 	.word	0x58021400
 8005280:	58021800 	.word	0x58021800
 8005284:	58021c00 	.word	0x58021c00
 8005288:	58022000 	.word	0x58022000
 800528c:	58022400 	.word	0x58022400
 8005290:	2300      	movs	r3, #0
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	f002 0203 	and.w	r2, r2, #3
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	4093      	lsls	r3, r2
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052a2:	4938      	ldr	r1, [pc, #224]	@ (8005384 <HAL_GPIO_Init+0x35c>)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	3302      	adds	r3, #2
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80052d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	43db      	mvns	r3, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4013      	ands	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	43db      	mvns	r3, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4013      	ands	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	3301      	adds	r3, #1
 8005364:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	f47f ae63 	bne.w	800503c <HAL_GPIO_Init+0x14>
  }
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	3724      	adds	r7, #36	@ 0x24
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	58000400 	.word	0x58000400

08005388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	807b      	strh	r3, [r7, #2]
 8005394:	4613      	mov	r3, r2
 8005396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005398:	787b      	ldrb	r3, [r7, #1]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800539e:	887a      	ldrh	r2, [r7, #2]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053a4:	e003      	b.n	80053ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	041a      	lsls	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	619a      	str	r2, [r3, #24]
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80053c4:	4b29      	ldr	r3, [pc, #164]	@ (800546c <HAL_PWREx_ConfigSupply+0xb0>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	2b06      	cmp	r3, #6
 80053ce:	d00a      	beq.n	80053e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80053d0:	4b26      	ldr	r3, [pc, #152]	@ (800546c <HAL_PWREx_ConfigSupply+0xb0>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d001      	beq.n	80053e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e040      	b.n	8005464 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e03e      	b.n	8005464 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80053e6:	4b21      	ldr	r3, [pc, #132]	@ (800546c <HAL_PWREx_ConfigSupply+0xb0>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80053ee:	491f      	ldr	r1, [pc, #124]	@ (800546c <HAL_PWREx_ConfigSupply+0xb0>)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80053f6:	f7fc fdc9 	bl	8001f8c <HAL_GetTick>
 80053fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80053fc:	e009      	b.n	8005412 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053fe:	f7fc fdc5 	bl	8001f8c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800540c:	d901      	bls.n	8005412 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e028      	b.n	8005464 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005412:	4b16      	ldr	r3, [pc, #88]	@ (800546c <HAL_PWREx_ConfigSupply+0xb0>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800541a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800541e:	d1ee      	bne.n	80053fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b1e      	cmp	r3, #30
 8005424:	d008      	beq.n	8005438 <HAL_PWREx_ConfigSupply+0x7c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b2e      	cmp	r3, #46	@ 0x2e
 800542a:	d005      	beq.n	8005438 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b1d      	cmp	r3, #29
 8005430:	d002      	beq.n	8005438 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b2d      	cmp	r3, #45	@ 0x2d
 8005436:	d114      	bne.n	8005462 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005438:	f7fc fda8 	bl	8001f8c <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800543e:	e009      	b.n	8005454 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005440:	f7fc fda4 	bl	8001f8c <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800544e:	d901      	bls.n	8005454 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e007      	b.n	8005464 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005454:	4b05      	ldr	r3, [pc, #20]	@ (800546c <HAL_PWREx_ConfigSupply+0xb0>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005460:	d1ee      	bne.n	8005440 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	58024800 	.word	0x58024800

08005470 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	@ 0x30
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f000 bc1f 	b.w	8005cc2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80b3 	beq.w	80055f8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005492:	4b95      	ldr	r3, [pc, #596]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800549a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800549c:	4b92      	ldr	r3, [pc, #584]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d007      	beq.n	80054b8 <HAL_RCC_OscConfig+0x48>
 80054a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054aa:	2b18      	cmp	r3, #24
 80054ac:	d112      	bne.n	80054d4 <HAL_RCC_OscConfig+0x64>
 80054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d10d      	bne.n	80054d4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	4b8b      	ldr	r3, [pc, #556]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8098 	beq.w	80055f6 <HAL_RCC_OscConfig+0x186>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f040 8093 	bne.w	80055f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e3f6      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054dc:	d106      	bne.n	80054ec <HAL_RCC_OscConfig+0x7c>
 80054de:	4b82      	ldr	r3, [pc, #520]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a81      	ldr	r2, [pc, #516]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80054e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e058      	b.n	800559e <HAL_RCC_OscConfig+0x12e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d112      	bne.n	800551a <HAL_RCC_OscConfig+0xaa>
 80054f4:	4b7c      	ldr	r3, [pc, #496]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a7b      	ldr	r2, [pc, #492]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b79      	ldr	r3, [pc, #484]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a78      	ldr	r2, [pc, #480]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005506:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4b76      	ldr	r3, [pc, #472]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a75      	ldr	r2, [pc, #468]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	e041      	b.n	800559e <HAL_RCC_OscConfig+0x12e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005522:	d112      	bne.n	800554a <HAL_RCC_OscConfig+0xda>
 8005524:	4b70      	ldr	r3, [pc, #448]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6f      	ldr	r2, [pc, #444]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800552a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b6d      	ldr	r3, [pc, #436]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a6c      	ldr	r2, [pc, #432]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005536:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	4b6a      	ldr	r3, [pc, #424]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a69      	ldr	r2, [pc, #420]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e029      	b.n	800559e <HAL_RCC_OscConfig+0x12e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005552:	d112      	bne.n	800557a <HAL_RCC_OscConfig+0x10a>
 8005554:	4b64      	ldr	r3, [pc, #400]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a63      	ldr	r2, [pc, #396]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800555a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	4b61      	ldr	r3, [pc, #388]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a60      	ldr	r2, [pc, #384]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4b5e      	ldr	r3, [pc, #376]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a5d      	ldr	r2, [pc, #372]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e011      	b.n	800559e <HAL_RCC_OscConfig+0x12e>
 800557a:	4b5b      	ldr	r3, [pc, #364]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a5a      	ldr	r2, [pc, #360]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b58      	ldr	r3, [pc, #352]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a57      	ldr	r2, [pc, #348]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800558c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	4b55      	ldr	r3, [pc, #340]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a54      	ldr	r2, [pc, #336]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005598:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800559c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d013      	beq.n	80055ce <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fc fcf1 	bl	8001f8c <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ae:	f7fc fced 	bl	8001f8c <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b64      	cmp	r3, #100	@ 0x64
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e380      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055c0:	4b49      	ldr	r3, [pc, #292]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x13e>
 80055cc:	e014      	b.n	80055f8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ce:	f7fc fcdd 	bl	8001f8c <HAL_GetTick>
 80055d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d6:	f7fc fcd9 	bl	8001f8c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b64      	cmp	r3, #100	@ 0x64
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e36c      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055e8:	4b3f      	ldr	r3, [pc, #252]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0x166>
 80055f4:	e000      	b.n	80055f8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 808c 	beq.w	800571e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005606:	4b38      	ldr	r3, [pc, #224]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800560e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005610:	4b35      	ldr	r3, [pc, #212]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_RCC_OscConfig+0x1bc>
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	2b18      	cmp	r3, #24
 8005620:	d137      	bne.n	8005692 <HAL_RCC_OscConfig+0x222>
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d132      	bne.n	8005692 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800562c:	4b2e      	ldr	r3, [pc, #184]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCC_OscConfig+0x1d4>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e33e      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005644:	4b28      	ldr	r3, [pc, #160]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 0219 	bic.w	r2, r3, #25
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4925      	ldr	r1, [pc, #148]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005652:	4313      	orrs	r3, r2
 8005654:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005656:	f7fc fc99 	bl	8001f8c <HAL_GetTick>
 800565a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565e:	f7fc fc95 	bl	8001f8c <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e328      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005670:	4b1d      	ldr	r3, [pc, #116]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f0      	beq.n	800565e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567c:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	061b      	lsls	r3, r3, #24
 800568a:	4917      	ldr	r1, [pc, #92]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005690:	e045      	b.n	800571e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d028      	beq.n	80056ec <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800569a:	4b13      	ldr	r3, [pc, #76]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 0219 	bic.w	r2, r3, #25
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	4910      	ldr	r1, [pc, #64]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fc fc6e 	bl	8001f8c <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b4:	f7fc fc6a 	bl	8001f8c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e2fd      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c6:	4b08      	ldr	r3, [pc, #32]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d2:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	061b      	lsls	r3, r3, #24
 80056e0:	4901      	ldr	r1, [pc, #4]	@ (80056e8 <HAL_RCC_OscConfig+0x278>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	604b      	str	r3, [r1, #4]
 80056e6:	e01a      	b.n	800571e <HAL_RCC_OscConfig+0x2ae>
 80056e8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ec:	4b97      	ldr	r3, [pc, #604]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a96      	ldr	r2, [pc, #600]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fc fc48 	bl	8001f8c <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005700:	f7fc fc44 	bl	8001f8c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e2d7      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005712:	4b8e      	ldr	r3, [pc, #568]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b00      	cmp	r3, #0
 8005728:	d06a      	beq.n	8005800 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800572a:	4b88      	ldr	r3, [pc, #544]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005732:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005734:	4b85      	ldr	r3, [pc, #532]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d007      	beq.n	8005750 <HAL_RCC_OscConfig+0x2e0>
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b18      	cmp	r3, #24
 8005744:	d11b      	bne.n	800577e <HAL_RCC_OscConfig+0x30e>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f003 0303 	and.w	r3, r3, #3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d116      	bne.n	800577e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005750:	4b7e      	ldr	r3, [pc, #504]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_OscConfig+0x2f8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	2b80      	cmp	r3, #128	@ 0x80
 8005762:	d001      	beq.n	8005768 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e2ac      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005768:	4b78      	ldr	r3, [pc, #480]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	061b      	lsls	r3, r3, #24
 8005776:	4975      	ldr	r1, [pc, #468]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800577c:	e040      	b.n	8005800 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d023      	beq.n	80057ce <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005786:	4b71      	ldr	r3, [pc, #452]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a70      	ldr	r2, [pc, #448]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 800578c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005792:	f7fc fbfb 	bl	8001f8c <HAL_GetTick>
 8005796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800579a:	f7fc fbf7 	bl	8001f8c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e28a      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057ac:	4b67      	ldr	r3, [pc, #412]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057b8:	4b64      	ldr	r3, [pc, #400]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	061b      	lsls	r3, r3, #24
 80057c6:	4961      	ldr	r1, [pc, #388]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60cb      	str	r3, [r1, #12]
 80057cc:	e018      	b.n	8005800 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80057ce:	4b5f      	ldr	r3, [pc, #380]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a5e      	ldr	r2, [pc, #376]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80057d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fc fbd7 	bl	8001f8c <HAL_GetTick>
 80057de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80057e2:	f7fc fbd3 	bl	8001f8c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e266      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057f4:	4b55      	ldr	r3, [pc, #340]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d036      	beq.n	800587a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d019      	beq.n	8005848 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005814:	4b4d      	ldr	r3, [pc, #308]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005818:	4a4c      	ldr	r2, [pc, #304]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fc fbb4 	bl	8001f8c <HAL_GetTick>
 8005824:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005828:	f7fc fbb0 	bl	8001f8c <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e243      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800583a:	4b44      	ldr	r3, [pc, #272]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 800583c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0x3b8>
 8005846:	e018      	b.n	800587a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005848:	4b40      	ldr	r3, [pc, #256]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 800584a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584c:	4a3f      	ldr	r2, [pc, #252]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005854:	f7fc fb9a 	bl	8001f8c <HAL_GetTick>
 8005858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585c:	f7fc fb96 	bl	8001f8c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e229      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800586e:	4b37      	ldr	r3, [pc, #220]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d036      	beq.n	80058f4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d019      	beq.n	80058c2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800588e:	4b2f      	ldr	r3, [pc, #188]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2e      	ldr	r2, [pc, #184]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005898:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800589a:	f7fc fb77 	bl	8001f8c <HAL_GetTick>
 800589e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058a2:	f7fc fb73 	bl	8001f8c <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e206      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058b4:	4b25      	ldr	r3, [pc, #148]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x432>
 80058c0:	e018      	b.n	80058f4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058c2:	4b22      	ldr	r3, [pc, #136]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80058c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058ce:	f7fc fb5d 	bl	8001f8c <HAL_GetTick>
 80058d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058d6:	f7fc fb59 	bl	8001f8c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e1ec      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058e8:	4b18      	ldr	r3, [pc, #96]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f0      	bne.n	80058d6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80af 	beq.w	8005a60 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005902:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <HAL_RCC_OscConfig+0x4e0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a12      	ldr	r2, [pc, #72]	@ (8005950 <HAL_RCC_OscConfig+0x4e0>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800590c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800590e:	f7fc fb3d 	bl	8001f8c <HAL_GetTick>
 8005912:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005916:	f7fc fb39 	bl	8001f8c <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b64      	cmp	r3, #100	@ 0x64
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e1cc      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005928:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <HAL_RCC_OscConfig+0x4e0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10b      	bne.n	8005954 <HAL_RCC_OscConfig+0x4e4>
 800593c:	4b03      	ldr	r3, [pc, #12]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005940:	4a02      	ldr	r2, [pc, #8]	@ (800594c <HAL_RCC_OscConfig+0x4dc>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	@ 0x70
 8005948:	e05b      	b.n	8005a02 <HAL_RCC_OscConfig+0x592>
 800594a:	bf00      	nop
 800594c:	58024400 	.word	0x58024400
 8005950:	58024800 	.word	0x58024800
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d112      	bne.n	8005982 <HAL_RCC_OscConfig+0x512>
 800595c:	4b9d      	ldr	r3, [pc, #628]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005960:	4a9c      	ldr	r2, [pc, #624]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6713      	str	r3, [r2, #112]	@ 0x70
 8005968:	4b9a      	ldr	r3, [pc, #616]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596c:	4a99      	ldr	r2, [pc, #612]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 800596e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005972:	6713      	str	r3, [r2, #112]	@ 0x70
 8005974:	4b97      	ldr	r3, [pc, #604]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005978:	4a96      	ldr	r2, [pc, #600]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 800597a:	f023 0304 	bic.w	r3, r3, #4
 800597e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005980:	e03f      	b.n	8005a02 <HAL_RCC_OscConfig+0x592>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2b05      	cmp	r3, #5
 8005988:	d112      	bne.n	80059b0 <HAL_RCC_OscConfig+0x540>
 800598a:	4b92      	ldr	r3, [pc, #584]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598e:	4a91      	ldr	r2, [pc, #580]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005990:	f043 0304 	orr.w	r3, r3, #4
 8005994:	6713      	str	r3, [r2, #112]	@ 0x70
 8005996:	4b8f      	ldr	r3, [pc, #572]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599a:	4a8e      	ldr	r2, [pc, #568]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 800599c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a2:	4b8c      	ldr	r3, [pc, #560]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	4a8b      	ldr	r2, [pc, #556]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ae:	e028      	b.n	8005a02 <HAL_RCC_OscConfig+0x592>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b85      	cmp	r3, #133	@ 0x85
 80059b6:	d112      	bne.n	80059de <HAL_RCC_OscConfig+0x56e>
 80059b8:	4b86      	ldr	r3, [pc, #536]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059bc:	4a85      	ldr	r2, [pc, #532]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059be:	f043 0304 	orr.w	r3, r3, #4
 80059c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059c4:	4b83      	ldr	r3, [pc, #524]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c8:	4a82      	ldr	r2, [pc, #520]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d0:	4b80      	ldr	r3, [pc, #512]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d4:	4a7f      	ldr	r2, [pc, #508]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	6713      	str	r3, [r2, #112]	@ 0x70
 80059dc:	e011      	b.n	8005a02 <HAL_RCC_OscConfig+0x592>
 80059de:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e2:	4a7c      	ldr	r2, [pc, #496]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ea:	4b7a      	ldr	r3, [pc, #488]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ee:	4a79      	ldr	r2, [pc, #484]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059f0:	f023 0304 	bic.w	r3, r3, #4
 80059f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f6:	4b77      	ldr	r3, [pc, #476]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fa:	4a76      	ldr	r2, [pc, #472]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 80059fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d015      	beq.n	8005a36 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fc fabf 	bl	8001f8c <HAL_GetTick>
 8005a0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a10:	e00a      	b.n	8005a28 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a12:	f7fc fabb 	bl	8001f8c <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e14c      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a28:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0ee      	beq.n	8005a12 <HAL_RCC_OscConfig+0x5a2>
 8005a34:	e014      	b.n	8005a60 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a36:	f7fc faa9 	bl	8001f8c <HAL_GetTick>
 8005a3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3e:	f7fc faa5 	bl	8001f8c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e136      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a54:	4b5f      	ldr	r3, [pc, #380]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1ee      	bne.n	8005a3e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 812b 	beq.w	8005cc0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a72:	2b18      	cmp	r3, #24
 8005a74:	f000 80bb 	beq.w	8005bee <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	f040 8095 	bne.w	8005bac <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a82:	4b54      	ldr	r3, [pc, #336]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a53      	ldr	r2, [pc, #332]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005a88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fc fa7d 	bl	8001f8c <HAL_GetTick>
 8005a92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a96:	f7fc fa79 	bl	8001f8c <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e10c      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ab4:	4b47      	ldr	r3, [pc, #284]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005ab6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ab8:	4b47      	ldr	r3, [pc, #284]	@ (8005bd8 <HAL_RCC_OscConfig+0x768>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ac4:	0112      	lsls	r2, r2, #4
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	4942      	ldr	r1, [pc, #264]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005adc:	3b01      	subs	r3, #1
 8005ade:	025b      	lsls	r3, r3, #9
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af6:	3b01      	subs	r3, #1
 8005af8:	061b      	lsls	r3, r3, #24
 8005afa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005afe:	4935      	ldr	r1, [pc, #212]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b04:	4b33      	ldr	r3, [pc, #204]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4a32      	ldr	r2, [pc, #200]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b10:	4b30      	ldr	r3, [pc, #192]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b14:	4b31      	ldr	r3, [pc, #196]	@ (8005bdc <HAL_RCC_OscConfig+0x76c>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b1c:	00d2      	lsls	r2, r2, #3
 8005b1e:	492d      	ldr	r1, [pc, #180]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b24:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	f023 020c 	bic.w	r2, r3, #12
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b30:	4928      	ldr	r1, [pc, #160]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b36:	4b27      	ldr	r3, [pc, #156]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3a:	f023 0202 	bic.w	r2, r3, #2
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	4924      	ldr	r1, [pc, #144]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b48:	4b22      	ldr	r3, [pc, #136]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	4a21      	ldr	r2, [pc, #132]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b54:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b60:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005b6c:	4b19      	ldr	r3, [pc, #100]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	4a18      	ldr	r2, [pc, #96]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b78:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a15      	ldr	r2, [pc, #84]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fc fa02 	bl	8001f8c <HAL_GetTick>
 8005b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fc f9fe 	bl	8001f8c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e091      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0x71c>
 8005baa:	e089      	b.n	8005cc0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bac:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a08      	ldr	r2, [pc, #32]	@ (8005bd4 <HAL_RCC_OscConfig+0x764>)
 8005bb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb8:	f7fc f9e8 	bl	8001f8c <HAL_GetTick>
 8005bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bbe:	e00f      	b.n	8005be0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc0:	f7fc f9e4 	bl	8001f8c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d908      	bls.n	8005be0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e077      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
 8005bd2:	bf00      	nop
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	fffffc0c 	.word	0xfffffc0c
 8005bdc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005be0:	4b3a      	ldr	r3, [pc, #232]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e9      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x750>
 8005bec:	e068      	b.n	8005cc0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005bee:	4b37      	ldr	r3, [pc, #220]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bf4:	4b35      	ldr	r3, [pc, #212]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d031      	beq.n	8005c66 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f003 0203 	and.w	r2, r3, #3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d12a      	bne.n	8005c66 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	091b      	lsrs	r3, r3, #4
 8005c14:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d122      	bne.n	8005c66 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d11a      	bne.n	8005c66 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	0a5b      	lsrs	r3, r3, #9
 8005c34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d111      	bne.n	8005c66 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d108      	bne.n	8005c66 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	0e1b      	lsrs	r3, r3, #24
 8005c58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d001      	beq.n	8005c6a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e02b      	b.n	8005cc2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005c6a:	4b18      	ldr	r3, [pc, #96]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6e:	08db      	lsrs	r3, r3, #3
 8005c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c74:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d01f      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005c80:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c84:	4a11      	ldr	r2, [pc, #68]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c8c:	f7fc f97e 	bl	8001f8c <HAL_GetTick>
 8005c90:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005c92:	bf00      	nop
 8005c94:	f7fc f97a 	bl	8001f8c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d0f9      	beq.n	8005c94 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd0 <HAL_RCC_OscConfig+0x860>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005cac:	00d2      	lsls	r2, r2, #3
 8005cae:	4907      	ldr	r1, [pc, #28]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005cb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	4a04      	ldr	r2, [pc, #16]	@ (8005ccc <HAL_RCC_OscConfig+0x85c>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3730      	adds	r7, #48	@ 0x30
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	ffff0007 	.word	0xffff0007

08005cd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e19c      	b.n	8006022 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b8a      	ldr	r3, [pc, #552]	@ (8005f14 <HAL_RCC_ClockConfig+0x240>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d910      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b87      	ldr	r3, [pc, #540]	@ (8005f14 <HAL_RCC_ClockConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 020f 	bic.w	r2, r3, #15
 8005cfe:	4985      	ldr	r1, [pc, #532]	@ (8005f14 <HAL_RCC_ClockConfig+0x240>)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b83      	ldr	r3, [pc, #524]	@ (8005f14 <HAL_RCC_ClockConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e184      	b.n	8006022 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d010      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	4b7b      	ldr	r3, [pc, #492]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d908      	bls.n	8005d46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d34:	4b78      	ldr	r3, [pc, #480]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	4975      	ldr	r1, [pc, #468]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d010      	beq.n	8005d74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	4b70      	ldr	r3, [pc, #448]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d908      	bls.n	8005d74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d62:	4b6d      	ldr	r3, [pc, #436]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	496a      	ldr	r1, [pc, #424]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d010      	beq.n	8005da2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	4b64      	ldr	r3, [pc, #400]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d908      	bls.n	8005da2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d90:	4b61      	ldr	r3, [pc, #388]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	495e      	ldr	r1, [pc, #376]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d010      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	4b59      	ldr	r3, [pc, #356]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d908      	bls.n	8005dd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dbe:	4b56      	ldr	r3, [pc, #344]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	4953      	ldr	r1, [pc, #332]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d010      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	4b4d      	ldr	r3, [pc, #308]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d908      	bls.n	8005dfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dec:	4b4a      	ldr	r3, [pc, #296]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	f023 020f 	bic.w	r2, r3, #15
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4947      	ldr	r1, [pc, #284]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d055      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e0a:	4b43      	ldr	r3, [pc, #268]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	4940      	ldr	r1, [pc, #256]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d107      	bne.n	8005e34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e24:	4b3c      	ldr	r3, [pc, #240]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d121      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0f6      	b.n	8006022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e3c:	4b36      	ldr	r3, [pc, #216]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d115      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0ea      	b.n	8006022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d107      	bne.n	8005e64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e54:	4b30      	ldr	r3, [pc, #192]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d109      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0de      	b.n	8006022 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e64:	4b2c      	ldr	r3, [pc, #176]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0d6      	b.n	8006022 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e74:	4b28      	ldr	r3, [pc, #160]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f023 0207 	bic.w	r2, r3, #7
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4925      	ldr	r1, [pc, #148]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e86:	f7fc f881 	bl	8001f8c <HAL_GetTick>
 8005e8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e8e:	f7fc f87d 	bl	8001f8c <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e0be      	b.n	8006022 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d1eb      	bne.n	8005e8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d010      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d208      	bcs.n	8005ee4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed2:	4b11      	ldr	r3, [pc, #68]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f023 020f 	bic.w	r2, r3, #15
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	490e      	ldr	r1, [pc, #56]	@ (8005f18 <HAL_RCC_ClockConfig+0x244>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <HAL_RCC_ClockConfig+0x240>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d214      	bcs.n	8005f1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef2:	4b08      	ldr	r3, [pc, #32]	@ (8005f14 <HAL_RCC_ClockConfig+0x240>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f023 020f 	bic.w	r2, r3, #15
 8005efa:	4906      	ldr	r1, [pc, #24]	@ (8005f14 <HAL_RCC_ClockConfig+0x240>)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f02:	4b04      	ldr	r3, [pc, #16]	@ (8005f14 <HAL_RCC_ClockConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e086      	b.n	8006022 <HAL_RCC_ClockConfig+0x34e>
 8005f14:	52002000 	.word	0x52002000
 8005f18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d010      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d208      	bcs.n	8005f4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f38:	4b3c      	ldr	r3, [pc, #240]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	4939      	ldr	r1, [pc, #228]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	4b34      	ldr	r3, [pc, #208]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d208      	bcs.n	8005f78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f66:	4b31      	ldr	r3, [pc, #196]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	492e      	ldr	r1, [pc, #184]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d010      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	4b28      	ldr	r3, [pc, #160]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d208      	bcs.n	8005fa6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f94:	4b25      	ldr	r3, [pc, #148]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	4922      	ldr	r1, [pc, #136]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d010      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d208      	bcs.n	8005fd4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	4917      	ldr	r1, [pc, #92]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005fd4:	f000 f834 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b14      	ldr	r3, [pc, #80]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	4912      	ldr	r1, [pc, #72]	@ (8006030 <HAL_RCC_ClockConfig+0x35c>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800602c <HAL_RCC_ClockConfig+0x358>)
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8006030 <HAL_RCC_ClockConfig+0x35c>)
 8005ffc:	5cd3      	ldrb	r3, [r2, r3]
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	4a0a      	ldr	r2, [pc, #40]	@ (8006034 <HAL_RCC_ClockConfig+0x360>)
 800600a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800600c:	4a0a      	ldr	r2, [pc, #40]	@ (8006038 <HAL_RCC_ClockConfig+0x364>)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006012:	4b0a      	ldr	r3, [pc, #40]	@ (800603c <HAL_RCC_ClockConfig+0x368>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f7fb fc20 	bl	800185c <HAL_InitTick>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
 8006030:	0801bbbc 	.word	0x0801bbbc
 8006034:	24000008 	.word	0x24000008
 8006038:	24000004 	.word	0x24000004
 800603c:	2400000c 	.word	0x2400000c

08006040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006040:	b480      	push	{r7}
 8006042:	b089      	sub	sp, #36	@ 0x24
 8006044:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006046:	4bb3      	ldr	r3, [pc, #716]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800604e:	2b18      	cmp	r3, #24
 8006050:	f200 8155 	bhi.w	80062fe <HAL_RCC_GetSysClockFreq+0x2be>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080062ff 	.word	0x080062ff
 8006064:	080062ff 	.word	0x080062ff
 8006068:	080062ff 	.word	0x080062ff
 800606c:	080062ff 	.word	0x080062ff
 8006070:	080062ff 	.word	0x080062ff
 8006074:	080062ff 	.word	0x080062ff
 8006078:	080062ff 	.word	0x080062ff
 800607c:	080060e7 	.word	0x080060e7
 8006080:	080062ff 	.word	0x080062ff
 8006084:	080062ff 	.word	0x080062ff
 8006088:	080062ff 	.word	0x080062ff
 800608c:	080062ff 	.word	0x080062ff
 8006090:	080062ff 	.word	0x080062ff
 8006094:	080062ff 	.word	0x080062ff
 8006098:	080062ff 	.word	0x080062ff
 800609c:	080060ed 	.word	0x080060ed
 80060a0:	080062ff 	.word	0x080062ff
 80060a4:	080062ff 	.word	0x080062ff
 80060a8:	080062ff 	.word	0x080062ff
 80060ac:	080062ff 	.word	0x080062ff
 80060b0:	080062ff 	.word	0x080062ff
 80060b4:	080062ff 	.word	0x080062ff
 80060b8:	080062ff 	.word	0x080062ff
 80060bc:	080060f3 	.word	0x080060f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060c0:	4b94      	ldr	r3, [pc, #592]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d009      	beq.n	80060e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060cc:	4b91      	ldr	r3, [pc, #580]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	08db      	lsrs	r3, r3, #3
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	4a90      	ldr	r2, [pc, #576]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
 80060dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80060de:	e111      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80060e0:	4b8d      	ldr	r3, [pc, #564]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060e2:	61bb      	str	r3, [r7, #24]
      break;
 80060e4:	e10e      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80060e6:	4b8d      	ldr	r3, [pc, #564]	@ (800631c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060e8:	61bb      	str	r3, [r7, #24]
      break;
 80060ea:	e10b      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80060ec:	4b8c      	ldr	r3, [pc, #560]	@ (8006320 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80060ee:	61bb      	str	r3, [r7, #24]
      break;
 80060f0:	e108      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060f2:	4b88      	ldr	r3, [pc, #544]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80060fc:	4b85      	ldr	r3, [pc, #532]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006106:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006108:	4b82      	ldr	r3, [pc, #520]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006112:	4b80      	ldr	r3, [pc, #512]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006116:	08db      	lsrs	r3, r3, #3
 8006118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80e1 	beq.w	80062f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b02      	cmp	r3, #2
 800613a:	f000 8083 	beq.w	8006244 <HAL_RCC_GetSysClockFreq+0x204>
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b02      	cmp	r3, #2
 8006142:	f200 80a1 	bhi.w	8006288 <HAL_RCC_GetSysClockFreq+0x248>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_RCC_GetSysClockFreq+0x114>
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d056      	beq.n	8006200 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006152:	e099      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006154:	4b6f      	ldr	r3, [pc, #444]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d02d      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006160:	4b6c      	ldr	r3, [pc, #432]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	08db      	lsrs	r3, r3, #3
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	4a6b      	ldr	r2, [pc, #428]	@ (8006318 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800616c:	fa22 f303 	lsr.w	r3, r2, r3
 8006170:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618a:	4b62      	ldr	r3, [pc, #392]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619a:	ed97 6a02 	vldr	s12, [r7, #8]
 800619e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006324 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80061ba:	e087      	b.n	80062cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006328 <HAL_RCC_GetSysClockFreq+0x2e8>
 80061ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ce:	4b51      	ldr	r3, [pc, #324]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061de:	ed97 6a02 	vldr	s12, [r7, #8]
 80061e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006324 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061fe:	e065      	b.n	80062cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800632c <HAL_RCC_GetSysClockFreq+0x2ec>
 800620e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006212:	4b40      	ldr	r3, [pc, #256]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006222:	ed97 6a02 	vldr	s12, [r7, #8]
 8006226:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800622a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006242:	e043      	b.n	80062cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006330 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006256:	4b2f      	ldr	r3, [pc, #188]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006266:	ed97 6a02 	vldr	s12, [r7, #8]
 800626a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006324 <HAL_RCC_GetSysClockFreq+0x2e4>
 800626e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800627a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006286:	e021      	b.n	80062cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006292:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800632c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800629a:	4b1e      	ldr	r3, [pc, #120]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a2:	ee07 3a90 	vmov	s15, r3
 80062a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006324 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80062cc:	4b11      	ldr	r3, [pc, #68]	@ (8006314 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d0:	0a5b      	lsrs	r3, r3, #9
 80062d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d6:	3301      	adds	r3, #1
 80062d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f0:	ee17 3a90 	vmov	r3, s15
 80062f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80062f6:	e005      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61bb      	str	r3, [r7, #24]
      break;
 80062fc:	e002      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80062fe:	4b07      	ldr	r3, [pc, #28]	@ (800631c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006300:	61bb      	str	r3, [r7, #24]
      break;
 8006302:	bf00      	nop
  }

  return sysclockfreq;
 8006304:	69bb      	ldr	r3, [r7, #24]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3724      	adds	r7, #36	@ 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	58024400 	.word	0x58024400
 8006318:	03d09000 	.word	0x03d09000
 800631c:	003d0900 	.word	0x003d0900
 8006320:	007a1200 	.word	0x007a1200
 8006324:	46000000 	.word	0x46000000
 8006328:	4c742400 	.word	0x4c742400
 800632c:	4a742400 	.word	0x4a742400
 8006330:	4af42400 	.word	0x4af42400

08006334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800633a:	f7ff fe81 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 800633e:	4602      	mov	r2, r0
 8006340:	4b10      	ldr	r3, [pc, #64]	@ (8006384 <HAL_RCC_GetHCLKFreq+0x50>)
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	0a1b      	lsrs	r3, r3, #8
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	490f      	ldr	r1, [pc, #60]	@ (8006388 <HAL_RCC_GetHCLKFreq+0x54>)
 800634c:	5ccb      	ldrb	r3, [r1, r3]
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	fa22 f303 	lsr.w	r3, r2, r3
 8006356:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006358:	4b0a      	ldr	r3, [pc, #40]	@ (8006384 <HAL_RCC_GetHCLKFreq+0x50>)
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	4a09      	ldr	r2, [pc, #36]	@ (8006388 <HAL_RCC_GetHCLKFreq+0x54>)
 8006362:	5cd3      	ldrb	r3, [r2, r3]
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	fa22 f303 	lsr.w	r3, r2, r3
 800636e:	4a07      	ldr	r2, [pc, #28]	@ (800638c <HAL_RCC_GetHCLKFreq+0x58>)
 8006370:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006372:	4a07      	ldr	r2, [pc, #28]	@ (8006390 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006378:	4b04      	ldr	r3, [pc, #16]	@ (800638c <HAL_RCC_GetHCLKFreq+0x58>)
 800637a:	681b      	ldr	r3, [r3, #0]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	58024400 	.word	0x58024400
 8006388:	0801bbbc 	.word	0x0801bbbc
 800638c:	24000008 	.word	0x24000008
 8006390:	24000004 	.word	0x24000004

08006394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006398:	f7ff ffcc 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 800639c:	4602      	mov	r2, r0
 800639e:	4b06      	ldr	r3, [pc, #24]	@ (80063b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	091b      	lsrs	r3, r3, #4
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4904      	ldr	r1, [pc, #16]	@ (80063bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80063aa:	5ccb      	ldrb	r3, [r1, r3]
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	58024400 	.word	0x58024400
 80063bc:	0801bbbc 	.word	0x0801bbbc

080063c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80063c4:	f7ff ffb6 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 80063c8:	4602      	mov	r2, r0
 80063ca:	4b06      	ldr	r3, [pc, #24]	@ (80063e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	0a1b      	lsrs	r3, r3, #8
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	4904      	ldr	r1, [pc, #16]	@ (80063e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063d6:	5ccb      	ldrb	r3, [r1, r3]
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	58024400 	.word	0x58024400
 80063e8:	0801bbbc 	.word	0x0801bbbc

080063ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	223f      	movs	r2, #63	@ 0x3f
 80063fa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <HAL_RCC_GetClockConfig+0x7c>)
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f003 0207 	and.w	r2, r3, #7
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8006408:	4b17      	ldr	r3, [pc, #92]	@ (8006468 <HAL_RCC_GetClockConfig+0x7c>)
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8006414:	4b14      	ldr	r3, [pc, #80]	@ (8006468 <HAL_RCC_GetClockConfig+0x7c>)
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8006420:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <HAL_RCC_GetClockConfig+0x7c>)
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800642c:	4b0e      	ldr	r3, [pc, #56]	@ (8006468 <HAL_RCC_GetClockConfig+0x7c>)
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8006438:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <HAL_RCC_GetClockConfig+0x7c>)
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8006444:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <HAL_RCC_GetClockConfig+0x7c>)
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006450:	4b06      	ldr	r3, [pc, #24]	@ (800646c <HAL_RCC_GetClockConfig+0x80>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 020f 	and.w	r2, r3, #15
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	601a      	str	r2, [r3, #0]
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	58024400 	.word	0x58024400
 800646c:	52002000 	.word	0x52002000

08006470 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006474:	b0c8      	sub	sp, #288	@ 0x120
 8006476:	af00      	add	r7, sp, #0
 8006478:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800647c:	2300      	movs	r3, #0
 800647e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006482:	2300      	movs	r3, #0
 8006484:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006494:	2500      	movs	r5, #0
 8006496:	ea54 0305 	orrs.w	r3, r4, r5
 800649a:	d049      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800649c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064a6:	d02f      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80064a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064ac:	d828      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064b2:	d01a      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064b8:	d822      	bhi.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80064be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064c2:	d007      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064c4:	e01c      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c6:	4ba7      	ldr	r3, [pc, #668]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ca:	4aa6      	ldr	r2, [pc, #664]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064d2:	e01a      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064d8:	3308      	adds	r3, #8
 80064da:	2102      	movs	r1, #2
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 fc43 	bl	8007d68 <RCCEx_PLL2_Config>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064e8:	e00f      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80064ee:	3328      	adds	r3, #40	@ 0x28
 80064f0:	2102      	movs	r1, #2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 fcea 	bl	8007ecc <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064fe:	e004      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006506:	e000      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006512:	4b94      	ldr	r3, [pc, #592]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006516:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800651e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006520:	4a90      	ldr	r2, [pc, #576]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006522:	430b      	orrs	r3, r1
 8006524:	6513      	str	r3, [r2, #80]	@ 0x50
 8006526:	e003      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800652c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800653c:	f04f 0900 	mov.w	r9, #0
 8006540:	ea58 0309 	orrs.w	r3, r8, r9
 8006544:	d047      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800654a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654c:	2b04      	cmp	r3, #4
 800654e:	d82a      	bhi.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006550:	a201      	add	r2, pc, #4	@ (adr r2, 8006558 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800656d 	.word	0x0800656d
 800655c:	0800657b 	.word	0x0800657b
 8006560:	08006591 	.word	0x08006591
 8006564:	080065af 	.word	0x080065af
 8006568:	080065af 	.word	0x080065af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656c:	4b7d      	ldr	r3, [pc, #500]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	4a7c      	ldr	r2, [pc, #496]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006578:	e01a      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800657a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800657e:	3308      	adds	r3, #8
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f001 fbf0 	bl	8007d68 <RCCEx_PLL2_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800658e:	e00f      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006594:	3328      	adds	r3, #40	@ 0x28
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f001 fc97 	bl	8007ecc <RCCEx_PLL3_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065a4:	e004      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80065ac:	e000      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80065ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065bc:	f023 0107 	bic.w	r1, r3, #7
 80065c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c6:	4a67      	ldr	r2, [pc, #412]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80065cc:	e003      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80065d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80065d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80065e2:	f04f 0b00 	mov.w	fp, #0
 80065e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80065ea:	d054      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80065ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80065f6:	d036      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80065f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80065fc:	d82f      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80065fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006602:	d032      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006608:	d829      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800660a:	2bc0      	cmp	r3, #192	@ 0xc0
 800660c:	d02f      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800660e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006610:	d825      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006612:	2b80      	cmp	r3, #128	@ 0x80
 8006614:	d018      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006616:	2b80      	cmp	r3, #128	@ 0x80
 8006618:	d821      	bhi.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800661e:	2b40      	cmp	r3, #64	@ 0x40
 8006620:	d007      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8006622:	e01c      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006624:	4b4f      	ldr	r3, [pc, #316]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006628:	4a4e      	ldr	r2, [pc, #312]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800662a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800662e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006630:	e01e      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006636:	3308      	adds	r3, #8
 8006638:	2100      	movs	r1, #0
 800663a:	4618      	mov	r0, r3
 800663c:	f001 fb94 	bl	8007d68 <RCCEx_PLL2_Config>
 8006640:	4603      	mov	r3, r0
 8006642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006646:	e013      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800664c:	3328      	adds	r3, #40	@ 0x28
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f001 fc3b 	bl	8007ecc <RCCEx_PLL3_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800665c:	e008      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006664:	e004      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006666:	bf00      	nop
 8006668:	e002      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800666a:	bf00      	nop
 800666c:	e000      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800666e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006670:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006678:	4b3a      	ldr	r3, [pc, #232]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800667a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800667c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006686:	4a37      	ldr	r2, [pc, #220]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6513      	str	r3, [r2, #80]	@ 0x50
 800668c:	e003      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006692:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80066a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80066a6:	2300      	movs	r3, #0
 80066a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80066ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80066b0:	460b      	mov	r3, r1
 80066b2:	4313      	orrs	r3, r2
 80066b4:	d05c      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80066b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80066ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066bc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066c0:	d03b      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066c2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80066c6:	d834      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80066c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066cc:	d037      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80066ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066d2:	d82e      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80066d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066d8:	d033      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80066da:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066de:	d828      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e4:	d01a      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80066e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ea:	d822      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f4:	d007      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80066f6:	e01c      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	4a19      	ldr	r2, [pc, #100]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006704:	e01e      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800670a:	3308      	adds	r3, #8
 800670c:	2100      	movs	r1, #0
 800670e:	4618      	mov	r0, r3
 8006710:	f001 fb2a 	bl	8007d68 <RCCEx_PLL2_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800671a:	e013      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800671c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006720:	3328      	adds	r3, #40	@ 0x28
 8006722:	2100      	movs	r1, #0
 8006724:	4618      	mov	r0, r3
 8006726:	f001 fbd1 	bl	8007ecc <RCCEx_PLL3_Config>
 800672a:	4603      	mov	r3, r0
 800672c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006738:	e004      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800673a:	bf00      	nop
 800673c:	e002      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006744:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800674c:	4b05      	ldr	r3, [pc, #20]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800674e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006750:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800675a:	4a02      	ldr	r2, [pc, #8]	@ (8006764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006760:	e006      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006762:	bf00      	nop
 8006764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800676c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800677c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006780:	2300      	movs	r3, #0
 8006782:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006786:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800678a:	460b      	mov	r3, r1
 800678c:	4313      	orrs	r3, r2
 800678e:	d03a      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006796:	2b30      	cmp	r3, #48	@ 0x30
 8006798:	d01f      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800679a:	2b30      	cmp	r3, #48	@ 0x30
 800679c:	d819      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d00c      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d815      	bhi.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d019      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d111      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ae:	4bae      	ldr	r3, [pc, #696]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	4aad      	ldr	r2, [pc, #692]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80067ba:	e011      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c0:	3308      	adds	r3, #8
 80067c2:	2102      	movs	r1, #2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 facf 	bl	8007d68 <RCCEx_PLL2_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80067d0:	e006      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80067d8:	e002      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80067da:	bf00      	nop
 80067dc:	e000      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80067de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80067e8:	4b9f      	ldr	r3, [pc, #636]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80067f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f6:	4a9c      	ldr	r2, [pc, #624]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067fc:	e003      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006802:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006812:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006816:	2300      	movs	r3, #0
 8006818:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800681c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006820:	460b      	mov	r3, r1
 8006822:	4313      	orrs	r3, r2
 8006824:	d051      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800682a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800682c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006830:	d035      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006836:	d82e      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006838:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800683c:	d031      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800683e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006842:	d828      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006848:	d01a      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684e:	d822      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006858:	d007      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800685a:	e01c      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4b82      	ldr	r3, [pc, #520]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800685e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006860:	4a81      	ldr	r2, [pc, #516]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006868:	e01c      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800686a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800686e:	3308      	adds	r3, #8
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f001 fa78 	bl	8007d68 <RCCEx_PLL2_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800687e:	e011      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006884:	3328      	adds	r3, #40	@ 0x28
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fb1f 	bl	8007ecc <RCCEx_PLL3_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006894:	e006      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800689c:	e002      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80068a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80068ac:	4b6e      	ldr	r3, [pc, #440]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80068b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068ba:	4a6b      	ldr	r2, [pc, #428]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068bc:	430b      	orrs	r3, r1
 80068be:	6513      	str	r3, [r2, #80]	@ 0x50
 80068c0:	e003      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80068c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80068ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80068d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068da:	2300      	movs	r3, #0
 80068dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80068e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80068e4:	460b      	mov	r3, r1
 80068e6:	4313      	orrs	r3, r2
 80068e8:	d053      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80068ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80068ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068f4:	d033      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80068f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068fa:	d82c      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80068fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006900:	d02f      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006902:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006906:	d826      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006908:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800690c:	d02b      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800690e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006912:	d820      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006918:	d012      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800691a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800691e:	d81a      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d022      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006928:	d115      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800692a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800692e:	3308      	adds	r3, #8
 8006930:	2101      	movs	r1, #1
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fa18 	bl	8007d68 <RCCEx_PLL2_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800693e:	e015      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006944:	3328      	adds	r3, #40	@ 0x28
 8006946:	2101      	movs	r1, #1
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fabf 	bl	8007ecc <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006954:	e00a      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800695c:	e006      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800695e:	bf00      	nop
 8006960:	e004      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006962:	bf00      	nop
 8006964:	e002      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006966:	bf00      	nop
 8006968:	e000      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800696a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006974:	4b3c      	ldr	r3, [pc, #240]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006978:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800697c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006980:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006982:	4a39      	ldr	r2, [pc, #228]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006984:	430b      	orrs	r3, r1
 8006986:	6513      	str	r3, [r2, #80]	@ 0x50
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800698e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800699e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069a2:	2300      	movs	r3, #0
 80069a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4313      	orrs	r3, r2
 80069b0:	d060      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80069b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069ba:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80069be:	d039      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80069c0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80069c4:	d832      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069ca:	d035      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80069cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069d0:	d82c      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d6:	d031      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069dc:	d826      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069e2:	d02d      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80069e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80069e8:	d820      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ee:	d012      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80069f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069f4:	d81a      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d024      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80069fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069fe:	d115      	bne.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a04:	3308      	adds	r3, #8
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f9ad 	bl	8007d68 <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a14:	e017      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a1a:	3328      	adds	r3, #40	@ 0x28
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fa54 	bl	8007ecc <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a2a:	e00c      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006a32:	e008      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a34:	bf00      	nop
 8006a36:	e006      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a38:	bf00      	nop
 8006a3a:	e004      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a3c:	bf00      	nop
 8006a3e:	e002      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10e      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a4e:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a5e:	4a02      	ldr	r2, [pc, #8]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a64:	e006      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006a66:	bf00      	nop
 8006a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006a70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4313      	orrs	r3, r2
 8006a92:	d037      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a9e:	d00e      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aa4:	d816      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d018      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006aaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aae:	d111      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab0:	4bc4      	ldr	r3, [pc, #784]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab4:	4ac3      	ldr	r2, [pc, #780]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006abc:	e00f      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f001 f94e 	bl	8007d68 <RCCEx_PLL2_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ad2:	e004      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006ada:	e000      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ade:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ae6:	4bb7      	ldr	r3, [pc, #732]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006af2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006af4:	4ab3      	ldr	r2, [pc, #716]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006af6:	430b      	orrs	r3, r1
 8006af8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006afa:	e003      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b14:	2300      	movs	r3, #0
 8006b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4313      	orrs	r3, r2
 8006b22:	d039      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d81c      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b34 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b71 	.word	0x08006b71
 8006b38:	08006b45 	.word	0x08006b45
 8006b3c:	08006b53 	.word	0x08006b53
 8006b40:	08006b71 	.word	0x08006b71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b44:	4b9f      	ldr	r3, [pc, #636]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b48:	4a9e      	ldr	r2, [pc, #632]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b50:	e00f      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b56:	3308      	adds	r3, #8
 8006b58:	2102      	movs	r1, #2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f001 f904 	bl	8007d68 <RCCEx_PLL2_Config>
 8006b60:	4603      	mov	r3, r0
 8006b62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006b66:	e004      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006b6e:	e000      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b7a:	4b92      	ldr	r3, [pc, #584]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b7e:	f023 0103 	bic.w	r1, r3, #3
 8006b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b88:	4a8e      	ldr	r2, [pc, #568]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b8e:	e003      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006b94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006ba4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f000 8099 	beq.w	8006cec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bba:	4b83      	ldr	r3, [pc, #524]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a82      	ldr	r2, [pc, #520]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bc6:	f7fb f9e1 	bl	8001f8c <HAL_GetTick>
 8006bca:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bce:	e00b      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd0:	f7fb f9dc 	bl	8001f8c <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b64      	cmp	r3, #100	@ 0x64
 8006bde:	d903      	bls.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006be6:	e005      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006be8:	4b77      	ldr	r3, [pc, #476]	@ (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0ed      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d173      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bfc:	4b71      	ldr	r3, [pc, #452]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c08:	4053      	eors	r3, r2
 8006c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d015      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c12:	4b6c      	ldr	r3, [pc, #432]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c1a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c1e:	4b69      	ldr	r3, [pc, #420]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c22:	4a68      	ldr	r2, [pc, #416]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c28:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c2a:	4b66      	ldr	r3, [pc, #408]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c2e:	4a65      	ldr	r2, [pc, #404]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c34:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c36:	4a63      	ldr	r2, [pc, #396]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c4a:	d118      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4c:	f7fb f99e 	bl	8001f8c <HAL_GetTick>
 8006c50:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c54:	e00d      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c56:	f7fb f999 	bl	8001f8c <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d903      	bls.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8006c70:	e005      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c72:	4b54      	ldr	r3, [pc, #336]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0eb      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d129      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c96:	d10e      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006c98:	4b4a      	ldr	r3, [pc, #296]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ca8:	091a      	lsrs	r2, r3, #4
 8006caa:	4b48      	ldr	r3, [pc, #288]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	4a45      	ldr	r2, [pc, #276]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6113      	str	r3, [r2, #16]
 8006cb4:	e005      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006cb6:	4b43      	ldr	r3, [pc, #268]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	4a42      	ldr	r2, [pc, #264]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cbc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006cc0:	6113      	str	r3, [r2, #16]
 8006cc2:	4b40      	ldr	r3, [pc, #256]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cd8:	e008      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006cde:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8006ce2:	e003      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ce8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f002 0301 	and.w	r3, r2, #1
 8006cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f000 8090 	beq.w	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d16:	2b28      	cmp	r3, #40	@ 0x28
 8006d18:	d870      	bhi.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006e05 	.word	0x08006e05
 8006d24:	08006dfd 	.word	0x08006dfd
 8006d28:	08006dfd 	.word	0x08006dfd
 8006d2c:	08006dfd 	.word	0x08006dfd
 8006d30:	08006dfd 	.word	0x08006dfd
 8006d34:	08006dfd 	.word	0x08006dfd
 8006d38:	08006dfd 	.word	0x08006dfd
 8006d3c:	08006dfd 	.word	0x08006dfd
 8006d40:	08006dd1 	.word	0x08006dd1
 8006d44:	08006dfd 	.word	0x08006dfd
 8006d48:	08006dfd 	.word	0x08006dfd
 8006d4c:	08006dfd 	.word	0x08006dfd
 8006d50:	08006dfd 	.word	0x08006dfd
 8006d54:	08006dfd 	.word	0x08006dfd
 8006d58:	08006dfd 	.word	0x08006dfd
 8006d5c:	08006dfd 	.word	0x08006dfd
 8006d60:	08006de7 	.word	0x08006de7
 8006d64:	08006dfd 	.word	0x08006dfd
 8006d68:	08006dfd 	.word	0x08006dfd
 8006d6c:	08006dfd 	.word	0x08006dfd
 8006d70:	08006dfd 	.word	0x08006dfd
 8006d74:	08006dfd 	.word	0x08006dfd
 8006d78:	08006dfd 	.word	0x08006dfd
 8006d7c:	08006dfd 	.word	0x08006dfd
 8006d80:	08006e05 	.word	0x08006e05
 8006d84:	08006dfd 	.word	0x08006dfd
 8006d88:	08006dfd 	.word	0x08006dfd
 8006d8c:	08006dfd 	.word	0x08006dfd
 8006d90:	08006dfd 	.word	0x08006dfd
 8006d94:	08006dfd 	.word	0x08006dfd
 8006d98:	08006dfd 	.word	0x08006dfd
 8006d9c:	08006dfd 	.word	0x08006dfd
 8006da0:	08006e05 	.word	0x08006e05
 8006da4:	08006dfd 	.word	0x08006dfd
 8006da8:	08006dfd 	.word	0x08006dfd
 8006dac:	08006dfd 	.word	0x08006dfd
 8006db0:	08006dfd 	.word	0x08006dfd
 8006db4:	08006dfd 	.word	0x08006dfd
 8006db8:	08006dfd 	.word	0x08006dfd
 8006dbc:	08006dfd 	.word	0x08006dfd
 8006dc0:	08006e05 	.word	0x08006e05
 8006dc4:	58024400 	.word	0x58024400
 8006dc8:	58024800 	.word	0x58024800
 8006dcc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 ffc5 	bl	8007d68 <RCCEx_PLL2_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006de4:	e00f      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006dea:	3328      	adds	r3, #40	@ 0x28
 8006dec:	2101      	movs	r1, #1
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 f86c 	bl	8007ecc <RCCEx_PLL3_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006dfa:	e004      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e0e:	4bc0      	ldr	r3, [pc, #768]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e12:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e1e:	4abc      	ldr	r2, [pc, #752]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e24:	e003      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006e2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f002 0302 	and.w	r3, r2, #2
 8006e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006e44:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	d043      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d824      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006e79 	.word	0x08006e79
 8006e68:	08006e8f 	.word	0x08006e8f
 8006e6c:	08006ead 	.word	0x08006ead
 8006e70:	08006ead 	.word	0x08006ead
 8006e74:	08006ead 	.word	0x08006ead
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 ff71 	bl	8007d68 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e8c:	e00f      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e92:	3328      	adds	r3, #40	@ 0x28
 8006e94:	2101      	movs	r1, #1
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 f818 	bl	8007ecc <RCCEx_PLL3_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ea2:	e004      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006eaa:	e000      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006eb6:	4b96      	ldr	r3, [pc, #600]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eba:	f023 0107 	bic.w	r1, r3, #7
 8006ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ec6:	4a92      	ldr	r2, [pc, #584]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ecc:	e003      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ece:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006ed2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f002 0304 	and.w	r3, r2, #4
 8006ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006eec:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	d043      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d824      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006f02:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f55 	.word	0x08006f55
 8006f0c:	08006f21 	.word	0x08006f21
 8006f10:	08006f37 	.word	0x08006f37
 8006f14:	08006f55 	.word	0x08006f55
 8006f18:	08006f55 	.word	0x08006f55
 8006f1c:	08006f55 	.word	0x08006f55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f24:	3308      	adds	r3, #8
 8006f26:	2101      	movs	r1, #1
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 ff1d 	bl	8007d68 <RCCEx_PLL2_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f34:	e00f      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f3a:	3328      	adds	r3, #40	@ 0x28
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 ffc4 	bl	8007ecc <RCCEx_PLL3_Config>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f4a:	e004      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8006f52:	e000      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10b      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f62:	f023 0107 	bic.w	r1, r3, #7
 8006f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f6e:	4a68      	ldr	r2, [pc, #416]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f74:	e003      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006f7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f002 0320 	and.w	r3, r2, #32
 8006f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	d055      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006faa:	d033      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fb0:	d82c      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb6:	d02f      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbc:	d826      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006fbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fc2:	d02b      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006fc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006fc8:	d820      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fce:	d012      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fd4:	d81a      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d022      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fde:	d115      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 febd 	bl	8007d68 <RCCEx_PLL2_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ff4:	e015      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ffa:	3328      	adds	r3, #40	@ 0x28
 8006ffc:	2102      	movs	r1, #2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 ff64 	bl	8007ecc <RCCEx_PLL3_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800700a:	e00a      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007012:	e006      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007014:	bf00      	nop
 8007016:	e004      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007022:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10b      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800702a:	4b39      	ldr	r3, [pc, #228]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800702c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007036:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800703a:	4a35      	ldr	r2, [pc, #212]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800703c:	430b      	orrs	r3, r1
 800703e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007040:	e003      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007042:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007046:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800704a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800705a:	2300      	movs	r3, #0
 800705c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007060:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007064:	460b      	mov	r3, r1
 8007066:	4313      	orrs	r3, r2
 8007068:	d058      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800706a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800706e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007072:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007076:	d033      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007078:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800707c:	d82c      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800707e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007082:	d02f      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007088:	d826      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800708a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800708e:	d02b      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007090:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007094:	d820      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800709a:	d012      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800709c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070a0:	d81a      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d022      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80070a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070aa:	d115      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070b0:	3308      	adds	r3, #8
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fe57 	bl	8007d68 <RCCEx_PLL2_Config>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80070c0:	e015      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070c6:	3328      	adds	r3, #40	@ 0x28
 80070c8:	2102      	movs	r1, #2
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fefe 	bl	8007ecc <RCCEx_PLL3_Config>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80070d6:	e00a      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070de:	e006      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80070e0:	bf00      	nop
 80070e2:	e004      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80070e4:	bf00      	nop
 80070e6:	e002      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80070e8:	bf00      	nop
 80070ea:	e000      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80070ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10e      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070f6:	4b06      	ldr	r3, [pc, #24]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80070fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007106:	4a02      	ldr	r2, [pc, #8]	@ (8007110 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007108:	430b      	orrs	r3, r1
 800710a:	6593      	str	r3, [r2, #88]	@ 0x58
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007118:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800711c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800712c:	2300      	movs	r3, #0
 800712e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007132:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007136:	460b      	mov	r3, r1
 8007138:	4313      	orrs	r3, r2
 800713a:	d055      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800713c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007140:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007144:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007148:	d033      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800714a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800714e:	d82c      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007154:	d02f      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800715a:	d826      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800715c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007160:	d02b      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007162:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007166:	d820      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007168:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800716c:	d012      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800716e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007172:	d81a      	bhi.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d022      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717c:	d115      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800717e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007182:	3308      	adds	r3, #8
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fdee 	bl	8007d68 <RCCEx_PLL2_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007192:	e015      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007198:	3328      	adds	r3, #40	@ 0x28
 800719a:	2102      	movs	r1, #2
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fe95 	bl	8007ecc <RCCEx_PLL3_Config>
 80071a2:	4603      	mov	r3, r0
 80071a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071a8:	e00a      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071b0:	e006      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80071b2:	bf00      	nop
 80071b4:	e004      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80071b6:	bf00      	nop
 80071b8:	e002      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80071ba:	bf00      	nop
 80071bc:	e000      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80071be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071c8:	4ba1      	ldr	r3, [pc, #644]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80071d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80071d8:	4a9d      	ldr	r2, [pc, #628]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80071da:	430b      	orrs	r3, r1
 80071dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80071de:	e003      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80071e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f002 0308 	and.w	r3, r2, #8
 80071f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071f8:	2300      	movs	r3, #0
 80071fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007202:	460b      	mov	r3, r1
 8007204:	4313      	orrs	r3, r2
 8007206:	d01e      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800720c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007214:	d10c      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800721a:	3328      	adds	r3, #40	@ 0x28
 800721c:	2102      	movs	r1, #2
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fe54 	bl	8007ecc <RCCEx_PLL3_Config>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007230:	4b87      	ldr	r3, [pc, #540]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007234:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800723c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007240:	4a83      	ldr	r2, [pc, #524]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007242:	430b      	orrs	r3, r1
 8007244:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f002 0310 	and.w	r3, r2, #16
 8007252:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007256:	2300      	movs	r3, #0
 8007258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800725c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007260:	460b      	mov	r3, r1
 8007262:	4313      	orrs	r3, r2
 8007264:	d01e      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800726a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800726e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007272:	d10c      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007278:	3328      	adds	r3, #40	@ 0x28
 800727a:	2102      	movs	r1, #2
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fe25 	bl	8007ecc <RCCEx_PLL3_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800728e:	4b70      	ldr	r3, [pc, #448]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007292:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800729a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800729e:	4a6c      	ldr	r2, [pc, #432]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072a0:	430b      	orrs	r3, r1
 80072a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80072b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072b4:	2300      	movs	r3, #0
 80072b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80072be:	460b      	mov	r3, r1
 80072c0:	4313      	orrs	r3, r2
 80072c2:	d03e      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80072c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80072cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072d0:	d022      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80072d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072d6:	d81b      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80072dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e0:	d00b      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80072e2:	e015      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072e8:	3308      	adds	r3, #8
 80072ea:	2100      	movs	r1, #0
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fd3b 	bl	8007d68 <RCCEx_PLL2_Config>
 80072f2:	4603      	mov	r3, r0
 80072f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80072f8:	e00f      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072fe:	3328      	adds	r3, #40	@ 0x28
 8007300:	2102      	movs	r1, #2
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fde2 	bl	8007ecc <RCCEx_PLL3_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800730e:	e004      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007316:	e000      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007322:	4b4b      	ldr	r3, [pc, #300]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007326:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800732a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800732e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007332:	4a47      	ldr	r2, [pc, #284]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007334:	430b      	orrs	r3, r1
 8007336:	6593      	str	r3, [r2, #88]	@ 0x58
 8007338:	e003      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800733e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800734e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007350:	2300      	movs	r3, #0
 8007352:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007354:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007358:	460b      	mov	r3, r1
 800735a:	4313      	orrs	r3, r2
 800735c:	d03b      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800735e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007366:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800736a:	d01f      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800736c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007370:	d818      	bhi.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007376:	d003      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800737c:	d007      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800737e:	e011      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007380:	4b33      	ldr	r3, [pc, #204]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007384:	4a32      	ldr	r2, [pc, #200]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800738a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800738c:	e00f      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800738e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007392:	3328      	adds	r3, #40	@ 0x28
 8007394:	2101      	movs	r1, #1
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fd98 	bl	8007ecc <RCCEx_PLL3_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80073a2:	e004      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073aa:	e000      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80073ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10b      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073b6:	4b26      	ldr	r3, [pc, #152]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c6:	4a22      	ldr	r2, [pc, #136]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073c8:	430b      	orrs	r3, r1
 80073ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80073cc:	e003      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80073d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80073e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80073e4:	2300      	movs	r3, #0
 80073e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80073e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80073ec:	460b      	mov	r3, r1
 80073ee:	4313      	orrs	r3, r2
 80073f0:	d034      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80073f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80073fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007400:	d007      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007402:	e011      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007404:	4b12      	ldr	r3, [pc, #72]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007408:	4a11      	ldr	r2, [pc, #68]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800740a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800740e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007410:	e00e      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007416:	3308      	adds	r3, #8
 8007418:	2102      	movs	r1, #2
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fca4 	bl	8007d68 <RCCEx_PLL2_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007426:	e003      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800742e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10d      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007438:	4b05      	ldr	r3, [pc, #20]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800743a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800743c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007446:	4a02      	ldr	r2, [pc, #8]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007448:	430b      	orrs	r3, r1
 800744a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800744c:	e006      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800744e:	bf00      	nop
 8007450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007458:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800745c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800746a:	2300      	movs	r3, #0
 800746c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800746e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007472:	460b      	mov	r3, r1
 8007474:	4313      	orrs	r3, r2
 8007476:	d00c      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800747c:	3328      	adds	r3, #40	@ 0x28
 800747e:	2102      	movs	r1, #2
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fd23 	bl	8007ecc <RCCEx_PLL3_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800749e:	663b      	str	r3, [r7, #96]	@ 0x60
 80074a0:	2300      	movs	r3, #0
 80074a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80074a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80074a8:	460b      	mov	r3, r1
 80074aa:	4313      	orrs	r3, r2
 80074ac:	d038      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80074ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074ba:	d018      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80074bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074c0:	d811      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80074c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c6:	d014      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80074c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074cc:	d80b      	bhi.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d011      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80074d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074d6:	d106      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d8:	4bc3      	ldr	r3, [pc, #780]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074dc:	4ac2      	ldr	r2, [pc, #776]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80074de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80074e4:	e008      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80074ec:	e004      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80074ee:	bf00      	nop
 80074f0:	e002      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80074f2:	bf00      	nop
 80074f4:	e000      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80074f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10b      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007500:	4bb9      	ldr	r3, [pc, #740]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007504:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007510:	4ab5      	ldr	r2, [pc, #724]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007512:	430b      	orrs	r3, r1
 8007514:	6553      	str	r3, [r2, #84]	@ 0x54
 8007516:	e003      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800751c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800752c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800752e:	2300      	movs	r3, #0
 8007530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007532:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007536:	460b      	mov	r3, r1
 8007538:	4313      	orrs	r3, r2
 800753a:	d009      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800753c:	4baa      	ldr	r3, [pc, #680]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800753e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007540:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007548:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800754a:	4aa7      	ldr	r2, [pc, #668]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800754c:	430b      	orrs	r3, r1
 800754e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800755c:	653b      	str	r3, [r7, #80]	@ 0x50
 800755e:	2300      	movs	r3, #0
 8007560:	657b      	str	r3, [r7, #84]	@ 0x54
 8007562:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d009      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800756c:	4b9e      	ldr	r3, [pc, #632]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800756e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007570:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757a:	4a9b      	ldr	r2, [pc, #620]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800757c:	430b      	orrs	r3, r1
 800757e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800758c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800758e:	2300      	movs	r3, #0
 8007590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007592:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007596:	460b      	mov	r3, r1
 8007598:	4313      	orrs	r3, r2
 800759a:	d009      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800759c:	4b92      	ldr	r3, [pc, #584]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800759e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80075a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075aa:	4a8f      	ldr	r2, [pc, #572]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075ac:	430b      	orrs	r3, r1
 80075ae:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80075bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80075be:	2300      	movs	r3, #0
 80075c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80075c6:	460b      	mov	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	d00e      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075cc:	4b86      	ldr	r3, [pc, #536]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	4a85      	ldr	r2, [pc, #532]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075d6:	6113      	str	r3, [r2, #16]
 80075d8:	4b83      	ldr	r3, [pc, #524]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075da:	6919      	ldr	r1, [r3, #16]
 80075dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80075e4:	4a80      	ldr	r2, [pc, #512]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075e6:	430b      	orrs	r3, r1
 80075e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80075f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075f8:	2300      	movs	r3, #0
 80075fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007600:	460b      	mov	r3, r1
 8007602:	4313      	orrs	r3, r2
 8007604:	d009      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007606:	4b78      	ldr	r3, [pc, #480]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800760e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007614:	4a74      	ldr	r2, [pc, #464]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007616:	430b      	orrs	r3, r1
 8007618:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800761a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007626:	633b      	str	r3, [r7, #48]	@ 0x30
 8007628:	2300      	movs	r3, #0
 800762a:	637b      	str	r3, [r7, #52]	@ 0x34
 800762c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007630:	460b      	mov	r3, r1
 8007632:	4313      	orrs	r3, r2
 8007634:	d00a      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007636:	4b6c      	ldr	r3, [pc, #432]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800763e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007646:	4a68      	ldr	r2, [pc, #416]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007648:	430b      	orrs	r3, r1
 800764a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800764c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	2100      	movs	r1, #0
 8007656:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800765e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007662:	460b      	mov	r3, r1
 8007664:	4313      	orrs	r3, r2
 8007666:	d011      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800766c:	3308      	adds	r3, #8
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fb79 	bl	8007d68 <RCCEx_PLL2_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800767c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007684:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007688:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800768c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	2100      	movs	r1, #0
 8007696:	6239      	str	r1, [r7, #32]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
 800769e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80076a2:	460b      	mov	r3, r1
 80076a4:	4313      	orrs	r3, r2
 80076a6:	d011      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ac:	3308      	adds	r3, #8
 80076ae:	2101      	movs	r1, #1
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fb59 	bl	8007d68 <RCCEx_PLL2_Config>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80076bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80076cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	2100      	movs	r1, #0
 80076d6:	61b9      	str	r1, [r7, #24]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80076e2:	460b      	mov	r3, r1
 80076e4:	4313      	orrs	r3, r2
 80076e6:	d011      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ec:	3308      	adds	r3, #8
 80076ee:	2102      	movs	r1, #2
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fb39 	bl	8007d68 <RCCEx_PLL2_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80076fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007708:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800770c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	2100      	movs	r1, #0
 8007716:	6139      	str	r1, [r7, #16]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007722:	460b      	mov	r3, r1
 8007724:	4313      	orrs	r3, r2
 8007726:	d011      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800772c:	3328      	adds	r3, #40	@ 0x28
 800772e:	2100      	movs	r1, #0
 8007730:	4618      	mov	r0, r3
 8007732:	f000 fbcb 	bl	8007ecc <RCCEx_PLL3_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800773c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007744:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007748:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800774c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	2100      	movs	r1, #0
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	f003 0310 	and.w	r3, r3, #16
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007762:	460b      	mov	r3, r1
 8007764:	4313      	orrs	r3, r2
 8007766:	d011      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800776c:	3328      	adds	r3, #40	@ 0x28
 800776e:	2101      	movs	r1, #1
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fbab 	bl	8007ecc <RCCEx_PLL3_Config>
 8007776:	4603      	mov	r3, r0
 8007778:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800777c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007784:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007788:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800778c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	2100      	movs	r1, #0
 8007796:	6039      	str	r1, [r7, #0]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	607b      	str	r3, [r7, #4]
 800779e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077a2:	460b      	mov	r3, r1
 80077a4:	4313      	orrs	r3, r2
 80077a6:	d011      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077ac:	3328      	adds	r3, #40	@ 0x28
 80077ae:	2102      	movs	r1, #2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fb8b 	bl	8007ecc <RCCEx_PLL3_Config>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80077bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80077cc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e000      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
}
 80077da:	4618      	mov	r0, r3
 80077dc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80077e0:	46bd      	mov	sp, r7
 80077e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077e6:	bf00      	nop
 80077e8:	58024400 	.word	0x58024400

080077ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80077f0:	f7fe fda0 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 80077f4:	4602      	mov	r2, r0
 80077f6:	4b06      	ldr	r3, [pc, #24]	@ (8007810 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	091b      	lsrs	r3, r3, #4
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	4904      	ldr	r1, [pc, #16]	@ (8007814 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007802:	5ccb      	ldrb	r3, [r1, r3]
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800780c:	4618      	mov	r0, r3
 800780e:	bd80      	pop	{r7, pc}
 8007810:	58024400 	.word	0x58024400
 8007814:	0801bbbc 	.word	0x0801bbbc

08007818 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007818:	b480      	push	{r7}
 800781a:	b089      	sub	sp, #36	@ 0x24
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007820:	4ba1      	ldr	r3, [pc, #644]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800782a:	4b9f      	ldr	r3, [pc, #636]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800782c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782e:	0b1b      	lsrs	r3, r3, #12
 8007830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007834:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007836:	4b9c      	ldr	r3, [pc, #624]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783a:	091b      	lsrs	r3, r3, #4
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007842:	4b99      	ldr	r3, [pc, #612]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007846:	08db      	lsrs	r3, r3, #3
 8007848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	fb02 f303 	mul.w	r3, r2, r3
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8111 	beq.w	8007a88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	2b02      	cmp	r3, #2
 800786a:	f000 8083 	beq.w	8007974 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b02      	cmp	r3, #2
 8007872:	f200 80a1 	bhi.w	80079b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d056      	beq.n	8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007882:	e099      	b.n	80079b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007884:	4b88      	ldr	r3, [pc, #544]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d02d      	beq.n	80078ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007890:	4b85      	ldr	r3, [pc, #532]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	08db      	lsrs	r3, r3, #3
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	4a84      	ldr	r2, [pc, #528]	@ (8007aac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800789c:	fa22 f303 	lsr.w	r3, r2, r3
 80078a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	ee07 3a90 	vmov	s15, r3
 80078a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ba:	4b7b      	ldr	r3, [pc, #492]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078ea:	e087      	b.n	80079fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80078fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fe:	4b6a      	ldr	r3, [pc, #424]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007912:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800792e:	e065      	b.n	80079fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800793e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007942:	4b59      	ldr	r3, [pc, #356]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007952:	ed97 6a03 	vldr	s12, [r7, #12]
 8007956:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800795a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007972:	e043      	b.n	80079fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007986:	4b48      	ldr	r3, [pc, #288]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007996:	ed97 6a03 	vldr	s12, [r7, #12]
 800799a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800799e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079b6:	e021      	b.n	80079fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ca:	4b37      	ldr	r3, [pc, #220]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079da:	ed97 6a03 	vldr	s12, [r7, #12]
 80079de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80079fc:	4b2a      	ldr	r3, [pc, #168]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	0a5b      	lsrs	r3, r3, #9
 8007a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a22:	ee17 2a90 	vmov	r2, s15
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2e:	0c1b      	lsrs	r3, r3, #16
 8007a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a50:	ee17 2a90 	vmov	r2, s15
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007a58:	4b13      	ldr	r3, [pc, #76]	@ (8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5c:	0e1b      	lsrs	r3, r3, #24
 8007a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a7e:	ee17 2a90 	vmov	r2, s15
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a86:	e008      	b.n	8007a9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
}
 8007a9a:	bf00      	nop
 8007a9c:	3724      	adds	r7, #36	@ 0x24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	58024400 	.word	0x58024400
 8007aac:	03d09000 	.word	0x03d09000
 8007ab0:	46000000 	.word	0x46000000
 8007ab4:	4c742400 	.word	0x4c742400
 8007ab8:	4a742400 	.word	0x4a742400
 8007abc:	4af42400 	.word	0x4af42400

08007ac0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b089      	sub	sp, #36	@ 0x24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ac8:	4ba1      	ldr	r3, [pc, #644]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007ad2:	4b9f      	ldr	r3, [pc, #636]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad6:	0d1b      	lsrs	r3, r3, #20
 8007ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007adc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ade:	4b9c      	ldr	r3, [pc, #624]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	0a1b      	lsrs	r3, r3, #8
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007aea:	4b99      	ldr	r3, [pc, #612]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aee:	08db      	lsrs	r3, r3, #3
 8007af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 8111 	beq.w	8007d30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	f000 8083 	beq.w	8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	f200 80a1 	bhi.w	8007c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d056      	beq.n	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007b2a:	e099      	b.n	8007c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b2c:	4b88      	ldr	r3, [pc, #544]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d02d      	beq.n	8007b94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b38:	4b85      	ldr	r3, [pc, #532]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	08db      	lsrs	r3, r3, #3
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	4a84      	ldr	r2, [pc, #528]	@ (8007d54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007b44:	fa22 f303 	lsr.w	r3, r2, r3
 8007b48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b62:	4b7b      	ldr	r3, [pc, #492]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b92:	e087      	b.n	8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007d5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bae:	ee07 3a90 	vmov	s15, r3
 8007bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bd6:	e065      	b.n	8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bea:	4b59      	ldr	r3, [pc, #356]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bfe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c1a:	e043      	b.n	8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b48      	ldr	r3, [pc, #288]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c5e:	e021      	b.n	8007ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c72:	4b37      	ldr	r3, [pc, #220]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ca2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca8:	0a5b      	lsrs	r3, r3, #9
 8007caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cca:	ee17 2a90 	vmov	r2, s15
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd6:	0c1b      	lsrs	r3, r3, #16
 8007cd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cf8:	ee17 2a90 	vmov	r2, s15
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007d00:	4b13      	ldr	r3, [pc, #76]	@ (8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d04:	0e1b      	lsrs	r3, r3, #24
 8007d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d26:	ee17 2a90 	vmov	r2, s15
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007d2e:	e008      	b.n	8007d42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	609a      	str	r2, [r3, #8]
}
 8007d42:	bf00      	nop
 8007d44:	3724      	adds	r7, #36	@ 0x24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	58024400 	.word	0x58024400
 8007d54:	03d09000 	.word	0x03d09000
 8007d58:	46000000 	.word	0x46000000
 8007d5c:	4c742400 	.word	0x4c742400
 8007d60:	4a742400 	.word	0x4a742400
 8007d64:	4af42400 	.word	0x4af42400

08007d68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d76:	4b53      	ldr	r3, [pc, #332]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d101      	bne.n	8007d86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e099      	b.n	8007eba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d86:	4b4f      	ldr	r3, [pc, #316]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a4e      	ldr	r2, [pc, #312]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d92:	f7fa f8fb 	bl	8001f8c <HAL_GetTick>
 8007d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d98:	e008      	b.n	8007dac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d9a:	f7fa f8f7 	bl	8001f8c <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e086      	b.n	8007eba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dac:	4b45      	ldr	r3, [pc, #276]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f0      	bne.n	8007d9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007db8:	4b42      	ldr	r3, [pc, #264]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	031b      	lsls	r3, r3, #12
 8007dc6:	493f      	ldr	r1, [pc, #252]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	628b      	str	r3, [r1, #40]	@ 0x28
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	025b      	lsls	r3, r3, #9
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007dfc:	4931      	ldr	r1, [pc, #196]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e02:	4b30      	ldr	r3, [pc, #192]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	492d      	ldr	r1, [pc, #180]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e14:	4b2b      	ldr	r3, [pc, #172]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e18:	f023 0220 	bic.w	r2, r3, #32
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	4928      	ldr	r1, [pc, #160]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e26:	4b27      	ldr	r3, [pc, #156]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2a:	4a26      	ldr	r2, [pc, #152]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e2c:	f023 0310 	bic.w	r3, r3, #16
 8007e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e32:	4b24      	ldr	r3, [pc, #144]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e36:	4b24      	ldr	r3, [pc, #144]	@ (8007ec8 <RCCEx_PLL2_Config+0x160>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	69d2      	ldr	r2, [r2, #28]
 8007e3e:	00d2      	lsls	r2, r2, #3
 8007e40:	4920      	ldr	r1, [pc, #128]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e46:	4b1f      	ldr	r3, [pc, #124]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	f043 0310 	orr.w	r3, r3, #16
 8007e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d106      	bne.n	8007e66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e58:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5c:	4a19      	ldr	r2, [pc, #100]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e64:	e00f      	b.n	8007e86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d106      	bne.n	8007e7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e6c:	4b15      	ldr	r3, [pc, #84]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	4a14      	ldr	r2, [pc, #80]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007e78:	e005      	b.n	8007e86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7e:	4a11      	ldr	r2, [pc, #68]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e86:	4b0f      	ldr	r3, [pc, #60]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e92:	f7fa f87b 	bl	8001f8c <HAL_GetTick>
 8007e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e98:	e008      	b.n	8007eac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e9a:	f7fa f877 	bl	8001f8c <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e006      	b.n	8007eba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007eac:	4b05      	ldr	r3, [pc, #20]	@ (8007ec4 <RCCEx_PLL2_Config+0x15c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	ffff0007 	.word	0xffff0007

08007ecc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007eda:	4b53      	ldr	r3, [pc, #332]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d101      	bne.n	8007eea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e099      	b.n	800801e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007eea:	4b4f      	ldr	r3, [pc, #316]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a4e      	ldr	r2, [pc, #312]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef6:	f7fa f849 	bl	8001f8c <HAL_GetTick>
 8007efa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007efc:	e008      	b.n	8007f10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007efe:	f7fa f845 	bl	8001f8c <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e086      	b.n	800801e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f10:	4b45      	ldr	r3, [pc, #276]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f0      	bne.n	8007efe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f1c:	4b42      	ldr	r3, [pc, #264]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	051b      	lsls	r3, r3, #20
 8007f2a:	493f      	ldr	r1, [pc, #252]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	025b      	lsls	r3, r3, #9
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	431a      	orrs	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	061b      	lsls	r3, r3, #24
 8007f5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f60:	4931      	ldr	r1, [pc, #196]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f66:	4b30      	ldr	r3, [pc, #192]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	492d      	ldr	r1, [pc, #180]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f78:	4b2b      	ldr	r3, [pc, #172]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	4928      	ldr	r1, [pc, #160]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f8a:	4b27      	ldr	r3, [pc, #156]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	4a26      	ldr	r2, [pc, #152]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f96:	4b24      	ldr	r3, [pc, #144]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f9a:	4b24      	ldr	r3, [pc, #144]	@ (800802c <RCCEx_PLL3_Config+0x160>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	69d2      	ldr	r2, [r2, #28]
 8007fa2:	00d2      	lsls	r2, r2, #3
 8007fa4:	4920      	ldr	r1, [pc, #128]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007faa:	4b1f      	ldr	r3, [pc, #124]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fae:	4a1e      	ldr	r2, [pc, #120]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d106      	bne.n	8007fca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc0:	4a19      	ldr	r2, [pc, #100]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fc8:	e00f      	b.n	8007fea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d106      	bne.n	8007fde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007fd0:	4b15      	ldr	r3, [pc, #84]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd4:	4a14      	ldr	r2, [pc, #80]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007fda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007fdc:	e005      	b.n	8007fea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007fde:	4b12      	ldr	r3, [pc, #72]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	4a11      	ldr	r2, [pc, #68]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fe4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007fea:	4b0f      	ldr	r3, [pc, #60]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a0e      	ldr	r2, [pc, #56]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8007ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ff6:	f7f9 ffc9 	bl	8001f8c <HAL_GetTick>
 8007ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ffc:	e008      	b.n	8008010 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ffe:	f7f9 ffc5 	bl	8001f8c <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e006      	b.n	800801e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008010:	4b05      	ldr	r3, [pc, #20]	@ (8008028 <RCCEx_PLL3_Config+0x15c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0f0      	beq.n	8007ffe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	58024400 	.word	0x58024400
 800802c:	ffff0007 	.word	0xffff0007

08008030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e049      	b.n	80080d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d106      	bne.n	800805c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f841 	bl	80080de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f000 f9e8 	bl	8008444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
	...

080080f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	d001      	beq.n	800810c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e054      	b.n	80081b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a26      	ldr	r2, [pc, #152]	@ (80081c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d022      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x80>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008136:	d01d      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x80>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a22      	ldr	r2, [pc, #136]	@ (80081c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d018      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x80>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a21      	ldr	r2, [pc, #132]	@ (80081cc <HAL_TIM_Base_Start_IT+0xd8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d013      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x80>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1f      	ldr	r2, [pc, #124]	@ (80081d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00e      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x80>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1e      	ldr	r2, [pc, #120]	@ (80081d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d009      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x80>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a1c      	ldr	r2, [pc, #112]	@ (80081d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d004      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x80>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a1b      	ldr	r2, [pc, #108]	@ (80081dc <HAL_TIM_Base_Start_IT+0xe8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d115      	bne.n	80081a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	4b19      	ldr	r3, [pc, #100]	@ (80081e0 <HAL_TIM_Base_Start_IT+0xec>)
 800817c:	4013      	ands	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b06      	cmp	r3, #6
 8008184:	d015      	beq.n	80081b2 <HAL_TIM_Base_Start_IT+0xbe>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800818c:	d011      	beq.n	80081b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f042 0201 	orr.w	r2, r2, #1
 800819c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800819e:	e008      	b.n	80081b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	e000      	b.n	80081b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	40010000 	.word	0x40010000
 80081c8:	40000400 	.word	0x40000400
 80081cc:	40000800 	.word	0x40000800
 80081d0:	40000c00 	.word	0x40000c00
 80081d4:	40010400 	.word	0x40010400
 80081d8:	40001800 	.word	0x40001800
 80081dc:	40014000 	.word	0x40014000
 80081e0:	00010007 	.word	0x00010007

080081e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d020      	beq.n	8008248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01b      	beq.n	8008248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f06f 0202 	mvn.w	r2, #2
 8008218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d003      	beq.n	8008236 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8e9 	bl	8008406 <HAL_TIM_IC_CaptureCallback>
 8008234:	e005      	b.n	8008242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8db 	bl	80083f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f8ec 	bl	800841a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 0304 	and.w	r3, r3, #4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d020      	beq.n	8008294 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01b      	beq.n	8008294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0204 	mvn.w	r2, #4
 8008264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2202      	movs	r2, #2
 800826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f8c3 	bl	8008406 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f8b5 	bl	80083f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f8c6 	bl	800841a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d020      	beq.n	80082e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01b      	beq.n	80082e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f06f 0208 	mvn.w	r2, #8
 80082b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2204      	movs	r2, #4
 80082b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f89d 	bl	8008406 <HAL_TIM_IC_CaptureCallback>
 80082cc:	e005      	b.n	80082da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f88f 	bl	80083f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f8a0 	bl	800841a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f003 0310 	and.w	r3, r3, #16
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d020      	beq.n	800832c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01b      	beq.n	800832c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0210 	mvn.w	r2, #16
 80082fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2208      	movs	r2, #8
 8008302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f877 	bl	8008406 <HAL_TIM_IC_CaptureCallback>
 8008318:	e005      	b.n	8008326 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f869 	bl	80083f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f87a 	bl	800841a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00c      	beq.n	8008350 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d007      	beq.n	8008350 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0201 	mvn.w	r2, #1
 8008348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7f9 f8ec 	bl	8001528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008356:	2b00      	cmp	r3, #0
 8008358:	d104      	bne.n	8008364 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00c      	beq.n	800837e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f90d 	bl	8008598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00c      	beq.n	80083a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800839a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f905 	bl	80085ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00c      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f834 	bl	800842e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f003 0320 	and.w	r3, r3, #32
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00c      	beq.n	80083ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f06f 0220 	mvn.w	r2, #32
 80083e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f8cd 	bl	8008584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
	...

08008444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a43      	ldr	r2, [pc, #268]	@ (8008564 <TIM_Base_SetConfig+0x120>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d013      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008462:	d00f      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a40      	ldr	r2, [pc, #256]	@ (8008568 <TIM_Base_SetConfig+0x124>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00b      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a3f      	ldr	r2, [pc, #252]	@ (800856c <TIM_Base_SetConfig+0x128>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d007      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a3e      	ldr	r2, [pc, #248]	@ (8008570 <TIM_Base_SetConfig+0x12c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a3d      	ldr	r2, [pc, #244]	@ (8008574 <TIM_Base_SetConfig+0x130>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d108      	bne.n	8008496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a32      	ldr	r2, [pc, #200]	@ (8008564 <TIM_Base_SetConfig+0x120>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01f      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a4:	d01b      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008568 <TIM_Base_SetConfig+0x124>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d017      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a2e      	ldr	r2, [pc, #184]	@ (800856c <TIM_Base_SetConfig+0x128>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d013      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008570 <TIM_Base_SetConfig+0x12c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00f      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2c      	ldr	r2, [pc, #176]	@ (8008574 <TIM_Base_SetConfig+0x130>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00b      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008578 <TIM_Base_SetConfig+0x134>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d007      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2a      	ldr	r2, [pc, #168]	@ (800857c <TIM_Base_SetConfig+0x138>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <TIM_Base_SetConfig+0x9a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a29      	ldr	r2, [pc, #164]	@ (8008580 <TIM_Base_SetConfig+0x13c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d108      	bne.n	80084f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a14      	ldr	r2, [pc, #80]	@ (8008564 <TIM_Base_SetConfig+0x120>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00f      	beq.n	8008536 <TIM_Base_SetConfig+0xf2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a16      	ldr	r2, [pc, #88]	@ (8008574 <TIM_Base_SetConfig+0x130>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00b      	beq.n	8008536 <TIM_Base_SetConfig+0xf2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a15      	ldr	r2, [pc, #84]	@ (8008578 <TIM_Base_SetConfig+0x134>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d007      	beq.n	8008536 <TIM_Base_SetConfig+0xf2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a14      	ldr	r2, [pc, #80]	@ (800857c <TIM_Base_SetConfig+0x138>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d003      	beq.n	8008536 <TIM_Base_SetConfig+0xf2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a13      	ldr	r2, [pc, #76]	@ (8008580 <TIM_Base_SetConfig+0x13c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d103      	bne.n	800853e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	691a      	ldr	r2, [r3, #16]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f043 0204 	orr.w	r2, r3, #4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	601a      	str	r2, [r3, #0]
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40010000 	.word	0x40010000
 8008568:	40000400 	.word	0x40000400
 800856c:	40000800 	.word	0x40000800
 8008570:	40000c00 	.word	0x40000c00
 8008574:	40010400 	.word	0x40010400
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400
 8008580:	40014800 	.word	0x40014800

08008584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e042      	b.n	8008658 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d106      	bne.n	80085ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7f9 fb7d 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2224      	movs	r2, #36	@ 0x24
 80085ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0201 	bic.w	r2, r2, #1
 8008600:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fc98 	bl	8009f40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fe29 	bl	8009268 <UART_SetConfig>
 8008616:	4603      	mov	r3, r0
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e01b      	b.n	8008658 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800862e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800863e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0201 	orr.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fd17 	bl	800a084 <UART_CheckIdleState>
 8008656:	4603      	mov	r3, r0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08a      	sub	sp, #40	@ 0x28
 8008664:	af02      	add	r7, sp, #8
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	4613      	mov	r3, r2
 800866e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008676:	2b20      	cmp	r3, #32
 8008678:	d17b      	bne.n	8008772 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <HAL_UART_Transmit+0x26>
 8008680:	88fb      	ldrh	r3, [r7, #6]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e074      	b.n	8008774 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2221      	movs	r2, #33	@ 0x21
 8008696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800869a:	f7f9 fc77 	bl	8001f8c <HAL_GetTick>
 800869e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	88fa      	ldrh	r2, [r7, #6]
 80086ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086b8:	d108      	bne.n	80086cc <HAL_UART_Transmit+0x6c>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d104      	bne.n	80086cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	e003      	b.n	80086d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086d0:	2300      	movs	r3, #0
 80086d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086d4:	e030      	b.n	8008738 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2200      	movs	r2, #0
 80086de:	2180      	movs	r1, #128	@ 0x80
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f001 fd79 	bl	800a1d8 <UART_WaitOnFlagUntilTimeout>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e03d      	b.n	8008774 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800870c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	3302      	adds	r3, #2
 8008712:	61bb      	str	r3, [r7, #24]
 8008714:	e007      	b.n	8008726 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	781a      	ldrb	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	3301      	adds	r3, #1
 8008724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800873e:	b29b      	uxth	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1c8      	bne.n	80086d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2200      	movs	r2, #0
 800874c:	2140      	movs	r1, #64	@ 0x40
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f001 fd42 	bl	800a1d8 <UART_WaitOnFlagUntilTimeout>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2220      	movs	r2, #32
 800875e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e006      	b.n	8008774 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2220      	movs	r2, #32
 800876a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	e000      	b.n	8008774 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008772:	2302      	movs	r3, #2
  }
}
 8008774:	4618      	mov	r0, r3
 8008776:	3720      	adds	r7, #32
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	@ 0x28
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008790:	2b20      	cmp	r3, #32
 8008792:	d167      	bne.n	8008864 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_UART_Transmit_DMA+0x24>
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e060      	b.n	8008866 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	88fa      	ldrh	r2, [r7, #6]
 80087ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	88fa      	ldrh	r2, [r7, #6]
 80087b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2221      	movs	r2, #33	@ 0x21
 80087c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d028      	beq.n	8008824 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087d6:	4a26      	ldr	r2, [pc, #152]	@ (8008870 <HAL_UART_Transmit_DMA+0xf4>)
 80087d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087de:	4a25      	ldr	r2, [pc, #148]	@ (8008874 <HAL_UART_Transmit_DMA+0xf8>)
 80087e0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087e6:	4a24      	ldr	r2, [pc, #144]	@ (8008878 <HAL_UART_Transmit_DMA+0xfc>)
 80087e8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087ee:	2200      	movs	r2, #0
 80087f0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087fa:	4619      	mov	r1, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3328      	adds	r3, #40	@ 0x28
 8008802:	461a      	mov	r2, r3
 8008804:	88fb      	ldrh	r3, [r7, #6]
 8008806:	f7fa f8b3 	bl	8002970 <HAL_DMA_Start_IT>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2210      	movs	r2, #16
 8008814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2220      	movs	r2, #32
 800881c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e020      	b.n	8008866 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2240      	movs	r2, #64	@ 0x40
 800882a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	613b      	str	r3, [r7, #16]
   return(result);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008842:	627b      	str	r3, [r7, #36]	@ 0x24
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3308      	adds	r3, #8
 800884a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800884c:	623a      	str	r2, [r7, #32]
 800884e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	69f9      	ldr	r1, [r7, #28]
 8008852:	6a3a      	ldr	r2, [r7, #32]
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	61bb      	str	r3, [r7, #24]
   return(result);
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e5      	bne.n	800882c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	e000      	b.n	8008866 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008864:	2302      	movs	r3, #2
  }
}
 8008866:	4618      	mov	r0, r3
 8008868:	3728      	adds	r7, #40	@ 0x28
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	0800a551 	.word	0x0800a551
 8008874:	0800a5e7 	.word	0x0800a5e7
 8008878:	0800a769 	.word	0x0800a769

0800887c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	@ 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008890:	2b20      	cmp	r3, #32
 8008892:	d137      	bne.n	8008904 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <HAL_UART_Receive_DMA+0x24>
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e030      	b.n	8008906 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a18      	ldr	r2, [pc, #96]	@ (8008910 <HAL_UART_Receive_DMA+0x94>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d01f      	beq.n	80088f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d018      	beq.n	80088f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	613b      	str	r3, [r7, #16]
   return(result);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	623b      	str	r3, [r7, #32]
 80088e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	69f9      	ldr	r1, [r7, #28]
 80088e6:	6a3a      	ldr	r2, [r7, #32]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e6      	bne.n	80088c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80088f4:	88fb      	ldrh	r3, [r7, #6]
 80088f6:	461a      	mov	r2, r3
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f001 fcda 	bl	800a2b4 <UART_Start_Receive_DMA>
 8008900:	4603      	mov	r3, r0
 8008902:	e000      	b.n	8008906 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008904:	2302      	movs	r3, #2
  }
}
 8008906:	4618      	mov	r0, r3
 8008908:	3728      	adds	r7, #40	@ 0x28
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	58000c00 	.word	0x58000c00

08008914 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b090      	sub	sp, #64	@ 0x40
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800892a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008936:	2b80      	cmp	r3, #128	@ 0x80
 8008938:	d139      	bne.n	80089ae <HAL_UART_DMAStop+0x9a>
 800893a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893c:	2b21      	cmp	r3, #33	@ 0x21
 800893e:	d136      	bne.n	80089ae <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008956:	637b      	str	r3, [r7, #52]	@ 0x34
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3308      	adds	r3, #8
 800895e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e5      	bne.n	8008940 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d015      	beq.n	80089a8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008980:	4618      	mov	r0, r3
 8008982:	f7fa fa5f 	bl	8002e44 <HAL_DMA_Abort>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00d      	beq.n	80089a8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008990:	4618      	mov	r0, r3
 8008992:	f7fb ff1d 	bl	80047d0 <HAL_DMA_GetError>
 8008996:	4603      	mov	r3, r0
 8008998:	2b20      	cmp	r3, #32
 800899a:	d105      	bne.n	80089a8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2210      	movs	r2, #16
 80089a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e047      	b.n	8008a38 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fd29 	bl	800a400 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b8:	2b40      	cmp	r3, #64	@ 0x40
 80089ba:	d13c      	bne.n	8008a36 <HAL_UART_DMAStop+0x122>
 80089bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089be:	2b22      	cmp	r3, #34	@ 0x22
 80089c0:	d139      	bne.n	8008a36 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3308      	adds	r3, #8
 80089c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	e853 3f00 	ldrex	r3, [r3]
 80089d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3308      	adds	r3, #8
 80089e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e2:	61ba      	str	r2, [r7, #24]
 80089e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e6:	6979      	ldr	r1, [r7, #20]
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	e841 2300 	strex	r3, r2, [r1]
 80089ee:	613b      	str	r3, [r7, #16]
   return(result);
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1e5      	bne.n	80089c2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d017      	beq.n	8008a30 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fa fa1c 	bl	8002e44 <HAL_DMA_Abort>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00e      	beq.n	8008a30 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fb fed9 	bl	80047d0 <HAL_DMA_GetError>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d105      	bne.n	8008a30 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2210      	movs	r2, #16
 8008a28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e003      	b.n	8008a38 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f001 fd27 	bl	800a484 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3740      	adds	r7, #64	@ 0x40
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b0ba      	sub	sp, #232	@ 0xe8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a6e:	4013      	ands	r3, r2
 8008a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d11b      	bne.n	8008ab4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d015      	beq.n	8008ab4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a8c:	f003 0320 	and.w	r3, r3, #32
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 8393 	beq.w	80091d0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
      }
      return;
 8008ab2:	e38d      	b.n	80091d0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8123 	beq.w	8008d04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008abe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8008cf8 <HAL_UART_IRQHandler+0x2b8>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d106      	bne.n	8008ad8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008aca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008ace:	4b8b      	ldr	r3, [pc, #556]	@ (8008cfc <HAL_UART_IRQHandler+0x2bc>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 8116 	beq.w	8008d04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d011      	beq.n	8008b08 <HAL_UART_IRQHandler+0xc8>
 8008ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2201      	movs	r2, #1
 8008af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008afe:	f043 0201 	orr.w	r2, r3, #1
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d011      	beq.n	8008b38 <HAL_UART_IRQHandler+0xf8>
 8008b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b18:	f003 0301 	and.w	r3, r3, #1
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2202      	movs	r2, #2
 8008b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2e:	f043 0204 	orr.w	r2, r3, #4
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d011      	beq.n	8008b68 <HAL_UART_IRQHandler+0x128>
 8008b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2204      	movs	r2, #4
 8008b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b5e:	f043 0202 	orr.w	r2, r3, #2
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6c:	f003 0308 	and.w	r3, r3, #8
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d017      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b78:	f003 0320 	and.w	r3, r3, #32
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d105      	bne.n	8008b8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b84:	4b5c      	ldr	r3, [pc, #368]	@ (8008cf8 <HAL_UART_IRQHandler+0x2b8>)
 8008b86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00b      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2208      	movs	r2, #8
 8008b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b9a:	f043 0208 	orr.w	r2, r3, #8
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d012      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x196>
 8008bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00c      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bcc:	f043 0220 	orr.w	r2, r3, #32
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 82f9 	beq.w	80091d4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d013      	beq.n	8008c16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d105      	bne.n	8008c06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2a:	2b40      	cmp	r3, #64	@ 0x40
 8008c2c:	d005      	beq.n	8008c3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d054      	beq.n	8008ce4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 fc22 	bl	800a484 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c4a:	2b40      	cmp	r3, #64	@ 0x40
 8008c4c:	d146      	bne.n	8008cdc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3308      	adds	r3, #8
 8008c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
 8008c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3308      	adds	r3, #8
 8008c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1d9      	bne.n	8008c4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d017      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008caa:	4a15      	ldr	r2, [pc, #84]	@ (8008d00 <HAL_UART_IRQHandler+0x2c0>)
 8008cac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fa fbe3 	bl	8003480 <HAL_DMA_Abort_IT>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d019      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008cce:	4610      	mov	r0, r2
 8008cd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd2:	e00f      	b.n	8008cf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fab1 	bl	800923c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cda:	e00b      	b.n	8008cf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 faad 	bl	800923c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce2:	e007      	b.n	8008cf4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 faa9 	bl	800923c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008cf2:	e26f      	b.n	80091d4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf4:	bf00      	nop
    return;
 8008cf6:	e26d      	b.n	80091d4 <HAL_UART_IRQHandler+0x794>
 8008cf8:	10000001 	.word	0x10000001
 8008cfc:	04000120 	.word	0x04000120
 8008d00:	0800a7e9 	.word	0x0800a7e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	f040 8203 	bne.w	8009114 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d12:	f003 0310 	and.w	r3, r3, #16
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 81fc 	beq.w	8009114 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 81f5 	beq.w	8009114 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2210      	movs	r2, #16
 8008d30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3c:	2b40      	cmp	r3, #64	@ 0x40
 8008d3e:	f040 816d 	bne.w	800901c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4aa4      	ldr	r2, [pc, #656]	@ (8008fdc <HAL_UART_IRQHandler+0x59c>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d068      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4aa1      	ldr	r2, [pc, #644]	@ (8008fe0 <HAL_UART_IRQHandler+0x5a0>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d061      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a9f      	ldr	r2, [pc, #636]	@ (8008fe4 <HAL_UART_IRQHandler+0x5a4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d05a      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a9c      	ldr	r2, [pc, #624]	@ (8008fe8 <HAL_UART_IRQHandler+0x5a8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d053      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a9a      	ldr	r2, [pc, #616]	@ (8008fec <HAL_UART_IRQHandler+0x5ac>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d04c      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a97      	ldr	r2, [pc, #604]	@ (8008ff0 <HAL_UART_IRQHandler+0x5b0>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d045      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a95      	ldr	r2, [pc, #596]	@ (8008ff4 <HAL_UART_IRQHandler+0x5b4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d03e      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a92      	ldr	r2, [pc, #584]	@ (8008ff8 <HAL_UART_IRQHandler+0x5b8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d037      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a90      	ldr	r2, [pc, #576]	@ (8008ffc <HAL_UART_IRQHandler+0x5bc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d030      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a8d      	ldr	r2, [pc, #564]	@ (8009000 <HAL_UART_IRQHandler+0x5c0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d029      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a8b      	ldr	r2, [pc, #556]	@ (8009004 <HAL_UART_IRQHandler+0x5c4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d022      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a88      	ldr	r2, [pc, #544]	@ (8009008 <HAL_UART_IRQHandler+0x5c8>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d01b      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a86      	ldr	r2, [pc, #536]	@ (800900c <HAL_UART_IRQHandler+0x5cc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d014      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a83      	ldr	r2, [pc, #524]	@ (8009010 <HAL_UART_IRQHandler+0x5d0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00d      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a81      	ldr	r2, [pc, #516]	@ (8009014 <HAL_UART_IRQHandler+0x5d4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d006      	beq.n	8008e22 <HAL_UART_IRQHandler+0x3e2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a7e      	ldr	r2, [pc, #504]	@ (8009018 <HAL_UART_IRQHandler+0x5d8>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d106      	bne.n	8008e30 <HAL_UART_IRQHandler+0x3f0>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	e005      	b.n	8008e3c <HAL_UART_IRQHandler+0x3fc>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 80ad 	beq.w	8008fa4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e54:	429a      	cmp	r2, r3
 8008e56:	f080 80a5 	bcs.w	8008fa4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e70:	f000 8087 	beq.w	8008f82 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e80:	e853 3f00 	ldrex	r3, [r3]
 8008e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ea2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1da      	bne.n	8008e74 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ed0:	f023 0301 	bic.w	r3, r3, #1
 8008ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e1      	bne.n	8008ebe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3308      	adds	r3, #8
 8008f00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f04:	e853 3f00 	ldrex	r3, [r3]
 8008f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3308      	adds	r3, #8
 8008f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e3      	bne.n	8008efa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2220      	movs	r2, #32
 8008f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f50:	f023 0310 	bic.w	r3, r3, #16
 8008f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e4      	bne.n	8008f40 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7f9 ff61 	bl	8002e44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2202      	movs	r2, #2
 8008f86:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f957 	bl	8009250 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008fa2:	e119      	b.n	80091d8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	f040 8112 	bne.w	80091d8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fc0:	f040 810a 	bne.w	80091d8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f93c 	bl	8009250 <HAL_UARTEx_RxEventCallback>
      return;
 8008fd8:	e0fe      	b.n	80091d8 <HAL_UART_IRQHandler+0x798>
 8008fda:	bf00      	nop
 8008fdc:	40020010 	.word	0x40020010
 8008fe0:	40020028 	.word	0x40020028
 8008fe4:	40020040 	.word	0x40020040
 8008fe8:	40020058 	.word	0x40020058
 8008fec:	40020070 	.word	0x40020070
 8008ff0:	40020088 	.word	0x40020088
 8008ff4:	400200a0 	.word	0x400200a0
 8008ff8:	400200b8 	.word	0x400200b8
 8008ffc:	40020410 	.word	0x40020410
 8009000:	40020428 	.word	0x40020428
 8009004:	40020440 	.word	0x40020440
 8009008:	40020458 	.word	0x40020458
 800900c:	40020470 	.word	0x40020470
 8009010:	40020488 	.word	0x40020488
 8009014:	400204a0 	.word	0x400204a0
 8009018:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009028:	b29b      	uxth	r3, r3
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009036:	b29b      	uxth	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 80cf 	beq.w	80091dc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800903e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 80ca 	beq.w	80091dc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009058:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800905c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800906a:	647b      	str	r3, [r7, #68]	@ 0x44
 800906c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009070:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e4      	bne.n	8009048 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	623b      	str	r3, [r7, #32]
   return(result);
 800908e:	6a3a      	ldr	r2, [r7, #32]
 8009090:	4b55      	ldr	r3, [pc, #340]	@ (80091e8 <HAL_UART_IRQHandler+0x7a8>)
 8009092:	4013      	ands	r3, r2
 8009094:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80090a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1e3      	bne.n	800907e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	e853 3f00 	ldrex	r3, [r3]
 80090d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0310 	bic.w	r3, r3, #16
 80090de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	69b9      	ldr	r1, [r7, #24]
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	617b      	str	r3, [r7, #20]
   return(result);
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e4      	bne.n	80090ca <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f89f 	bl	8009250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009112:	e063      	b.n	80091dc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00e      	beq.n	800913e <HAL_UART_IRQHandler+0x6fe>
 8009120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d008      	beq.n	800913e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fb93 	bl	800a862 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800913c:	e051      	b.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800913e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009146:	2b00      	cmp	r3, #0
 8009148:	d014      	beq.n	8009174 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800914a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800914e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009152:	2b00      	cmp	r3, #0
 8009154:	d105      	bne.n	8009162 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800915a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d008      	beq.n	8009174 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009166:	2b00      	cmp	r3, #0
 8009168:	d03a      	beq.n	80091e0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
    }
    return;
 8009172:	e035      	b.n	80091e0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <HAL_UART_IRQHandler+0x754>
 8009180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 fb3d 	bl	800a80c <UART_EndTransmit_IT>
    return;
 8009192:	e026      	b.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d009      	beq.n	80091b4 <HAL_UART_IRQHandler+0x774>
 80091a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f001 fb6c 	bl	800a88a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091b2:	e016      	b.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d010      	beq.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
 80091c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	da0c      	bge.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 fb54 	bl	800a876 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091ce:	e008      	b.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80091d0:	bf00      	nop
 80091d2:	e006      	b.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80091d4:	bf00      	nop
 80091d6:	e004      	b.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80091d8:	bf00      	nop
 80091da:	e002      	b.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80091dc:	bf00      	nop
 80091de:	e000      	b.n	80091e2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80091e0:	bf00      	nop
  }
}
 80091e2:	37e8      	adds	r7, #232	@ 0xe8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	effffffe 	.word	0xeffffffe

080091ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800926c:	b092      	sub	sp, #72	@ 0x48
 800926e:	af00      	add	r7, sp, #0
 8009270:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	431a      	orrs	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	431a      	orrs	r2, r3
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	4313      	orrs	r3, r2
 800928e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	4bbe      	ldr	r3, [pc, #760]	@ (8009590 <UART_SetConfig+0x328>)
 8009298:	4013      	ands	r3, r2
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092a0:	430b      	orrs	r3, r1
 80092a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4ab3      	ldr	r2, [pc, #716]	@ (8009594 <UART_SetConfig+0x32c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d004      	beq.n	80092d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092d0:	4313      	orrs	r3, r2
 80092d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	4baf      	ldr	r3, [pc, #700]	@ (8009598 <UART_SetConfig+0x330>)
 80092dc:	4013      	ands	r3, r2
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092e4:	430b      	orrs	r3, r1
 80092e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ee:	f023 010f 	bic.w	r1, r3, #15
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4aa6      	ldr	r2, [pc, #664]	@ (800959c <UART_SetConfig+0x334>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d177      	bne.n	80093f8 <UART_SetConfig+0x190>
 8009308:	4ba5      	ldr	r3, [pc, #660]	@ (80095a0 <UART_SetConfig+0x338>)
 800930a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800930c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009310:	2b28      	cmp	r3, #40	@ 0x28
 8009312:	d86d      	bhi.n	80093f0 <UART_SetConfig+0x188>
 8009314:	a201      	add	r2, pc, #4	@ (adr r2, 800931c <UART_SetConfig+0xb4>)
 8009316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931a:	bf00      	nop
 800931c:	080093c1 	.word	0x080093c1
 8009320:	080093f1 	.word	0x080093f1
 8009324:	080093f1 	.word	0x080093f1
 8009328:	080093f1 	.word	0x080093f1
 800932c:	080093f1 	.word	0x080093f1
 8009330:	080093f1 	.word	0x080093f1
 8009334:	080093f1 	.word	0x080093f1
 8009338:	080093f1 	.word	0x080093f1
 800933c:	080093c9 	.word	0x080093c9
 8009340:	080093f1 	.word	0x080093f1
 8009344:	080093f1 	.word	0x080093f1
 8009348:	080093f1 	.word	0x080093f1
 800934c:	080093f1 	.word	0x080093f1
 8009350:	080093f1 	.word	0x080093f1
 8009354:	080093f1 	.word	0x080093f1
 8009358:	080093f1 	.word	0x080093f1
 800935c:	080093d1 	.word	0x080093d1
 8009360:	080093f1 	.word	0x080093f1
 8009364:	080093f1 	.word	0x080093f1
 8009368:	080093f1 	.word	0x080093f1
 800936c:	080093f1 	.word	0x080093f1
 8009370:	080093f1 	.word	0x080093f1
 8009374:	080093f1 	.word	0x080093f1
 8009378:	080093f1 	.word	0x080093f1
 800937c:	080093d9 	.word	0x080093d9
 8009380:	080093f1 	.word	0x080093f1
 8009384:	080093f1 	.word	0x080093f1
 8009388:	080093f1 	.word	0x080093f1
 800938c:	080093f1 	.word	0x080093f1
 8009390:	080093f1 	.word	0x080093f1
 8009394:	080093f1 	.word	0x080093f1
 8009398:	080093f1 	.word	0x080093f1
 800939c:	080093e1 	.word	0x080093e1
 80093a0:	080093f1 	.word	0x080093f1
 80093a4:	080093f1 	.word	0x080093f1
 80093a8:	080093f1 	.word	0x080093f1
 80093ac:	080093f1 	.word	0x080093f1
 80093b0:	080093f1 	.word	0x080093f1
 80093b4:	080093f1 	.word	0x080093f1
 80093b8:	080093f1 	.word	0x080093f1
 80093bc:	080093e9 	.word	0x080093e9
 80093c0:	2301      	movs	r3, #1
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c6:	e326      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80093c8:	2304      	movs	r3, #4
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e322      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80093d0:	2308      	movs	r3, #8
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e31e      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80093d8:	2310      	movs	r3, #16
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e31a      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80093e0:	2320      	movs	r3, #32
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e316      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80093e8:	2340      	movs	r3, #64	@ 0x40
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e312      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80093f0:	2380      	movs	r3, #128	@ 0x80
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e30e      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a69      	ldr	r2, [pc, #420]	@ (80095a4 <UART_SetConfig+0x33c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d130      	bne.n	8009464 <UART_SetConfig+0x1fc>
 8009402:	4b67      	ldr	r3, [pc, #412]	@ (80095a0 <UART_SetConfig+0x338>)
 8009404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	2b05      	cmp	r3, #5
 800940c:	d826      	bhi.n	800945c <UART_SetConfig+0x1f4>
 800940e:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <UART_SetConfig+0x1ac>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	0800942d 	.word	0x0800942d
 8009418:	08009435 	.word	0x08009435
 800941c:	0800943d 	.word	0x0800943d
 8009420:	08009445 	.word	0x08009445
 8009424:	0800944d 	.word	0x0800944d
 8009428:	08009455 	.word	0x08009455
 800942c:	2300      	movs	r3, #0
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009432:	e2f0      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009434:	2304      	movs	r3, #4
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e2ec      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800943c:	2308      	movs	r3, #8
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e2e8      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009444:	2310      	movs	r3, #16
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e2e4      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800944c:	2320      	movs	r3, #32
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e2e0      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009454:	2340      	movs	r3, #64	@ 0x40
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e2dc      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800945c:	2380      	movs	r3, #128	@ 0x80
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e2d8      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a4f      	ldr	r2, [pc, #316]	@ (80095a8 <UART_SetConfig+0x340>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d130      	bne.n	80094d0 <UART_SetConfig+0x268>
 800946e:	4b4c      	ldr	r3, [pc, #304]	@ (80095a0 <UART_SetConfig+0x338>)
 8009470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	2b05      	cmp	r3, #5
 8009478:	d826      	bhi.n	80094c8 <UART_SetConfig+0x260>
 800947a:	a201      	add	r2, pc, #4	@ (adr r2, 8009480 <UART_SetConfig+0x218>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	08009499 	.word	0x08009499
 8009484:	080094a1 	.word	0x080094a1
 8009488:	080094a9 	.word	0x080094a9
 800948c:	080094b1 	.word	0x080094b1
 8009490:	080094b9 	.word	0x080094b9
 8009494:	080094c1 	.word	0x080094c1
 8009498:	2300      	movs	r3, #0
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949e:	e2ba      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80094a0:	2304      	movs	r3, #4
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e2b6      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80094a8:	2308      	movs	r3, #8
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e2b2      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80094b0:	2310      	movs	r3, #16
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e2ae      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80094b8:	2320      	movs	r3, #32
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e2aa      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80094c0:	2340      	movs	r3, #64	@ 0x40
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e2a6      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80094c8:	2380      	movs	r3, #128	@ 0x80
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e2a2      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a35      	ldr	r2, [pc, #212]	@ (80095ac <UART_SetConfig+0x344>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d130      	bne.n	800953c <UART_SetConfig+0x2d4>
 80094da:	4b31      	ldr	r3, [pc, #196]	@ (80095a0 <UART_SetConfig+0x338>)
 80094dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b05      	cmp	r3, #5
 80094e4:	d826      	bhi.n	8009534 <UART_SetConfig+0x2cc>
 80094e6:	a201      	add	r2, pc, #4	@ (adr r2, 80094ec <UART_SetConfig+0x284>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	08009505 	.word	0x08009505
 80094f0:	0800950d 	.word	0x0800950d
 80094f4:	08009515 	.word	0x08009515
 80094f8:	0800951d 	.word	0x0800951d
 80094fc:	08009525 	.word	0x08009525
 8009500:	0800952d 	.word	0x0800952d
 8009504:	2300      	movs	r3, #0
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950a:	e284      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800950c:	2304      	movs	r3, #4
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e280      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009514:	2308      	movs	r3, #8
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e27c      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800951c:	2310      	movs	r3, #16
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e278      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009524:	2320      	movs	r3, #32
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e274      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800952c:	2340      	movs	r3, #64	@ 0x40
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e270      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009534:	2380      	movs	r3, #128	@ 0x80
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e26c      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a1b      	ldr	r2, [pc, #108]	@ (80095b0 <UART_SetConfig+0x348>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d142      	bne.n	80095cc <UART_SetConfig+0x364>
 8009546:	4b16      	ldr	r3, [pc, #88]	@ (80095a0 <UART_SetConfig+0x338>)
 8009548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800954a:	f003 0307 	and.w	r3, r3, #7
 800954e:	2b05      	cmp	r3, #5
 8009550:	d838      	bhi.n	80095c4 <UART_SetConfig+0x35c>
 8009552:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <UART_SetConfig+0x2f0>)
 8009554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009558:	08009571 	.word	0x08009571
 800955c:	08009579 	.word	0x08009579
 8009560:	08009581 	.word	0x08009581
 8009564:	08009589 	.word	0x08009589
 8009568:	080095b5 	.word	0x080095b5
 800956c:	080095bd 	.word	0x080095bd
 8009570:	2300      	movs	r3, #0
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009576:	e24e      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009578:	2304      	movs	r3, #4
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e24a      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009580:	2308      	movs	r3, #8
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e246      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009588:	2310      	movs	r3, #16
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e242      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009590:	cfff69f3 	.word	0xcfff69f3
 8009594:	58000c00 	.word	0x58000c00
 8009598:	11fff4ff 	.word	0x11fff4ff
 800959c:	40011000 	.word	0x40011000
 80095a0:	58024400 	.word	0x58024400
 80095a4:	40004400 	.word	0x40004400
 80095a8:	40004800 	.word	0x40004800
 80095ac:	40004c00 	.word	0x40004c00
 80095b0:	40005000 	.word	0x40005000
 80095b4:	2320      	movs	r3, #32
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e22c      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80095bc:	2340      	movs	r3, #64	@ 0x40
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c2:	e228      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80095c4:	2380      	movs	r3, #128	@ 0x80
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e224      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4ab1      	ldr	r2, [pc, #708]	@ (8009898 <UART_SetConfig+0x630>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d176      	bne.n	80096c4 <UART_SetConfig+0x45c>
 80095d6:	4bb1      	ldr	r3, [pc, #708]	@ (800989c <UART_SetConfig+0x634>)
 80095d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095de:	2b28      	cmp	r3, #40	@ 0x28
 80095e0:	d86c      	bhi.n	80096bc <UART_SetConfig+0x454>
 80095e2:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <UART_SetConfig+0x380>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	0800968d 	.word	0x0800968d
 80095ec:	080096bd 	.word	0x080096bd
 80095f0:	080096bd 	.word	0x080096bd
 80095f4:	080096bd 	.word	0x080096bd
 80095f8:	080096bd 	.word	0x080096bd
 80095fc:	080096bd 	.word	0x080096bd
 8009600:	080096bd 	.word	0x080096bd
 8009604:	080096bd 	.word	0x080096bd
 8009608:	08009695 	.word	0x08009695
 800960c:	080096bd 	.word	0x080096bd
 8009610:	080096bd 	.word	0x080096bd
 8009614:	080096bd 	.word	0x080096bd
 8009618:	080096bd 	.word	0x080096bd
 800961c:	080096bd 	.word	0x080096bd
 8009620:	080096bd 	.word	0x080096bd
 8009624:	080096bd 	.word	0x080096bd
 8009628:	0800969d 	.word	0x0800969d
 800962c:	080096bd 	.word	0x080096bd
 8009630:	080096bd 	.word	0x080096bd
 8009634:	080096bd 	.word	0x080096bd
 8009638:	080096bd 	.word	0x080096bd
 800963c:	080096bd 	.word	0x080096bd
 8009640:	080096bd 	.word	0x080096bd
 8009644:	080096bd 	.word	0x080096bd
 8009648:	080096a5 	.word	0x080096a5
 800964c:	080096bd 	.word	0x080096bd
 8009650:	080096bd 	.word	0x080096bd
 8009654:	080096bd 	.word	0x080096bd
 8009658:	080096bd 	.word	0x080096bd
 800965c:	080096bd 	.word	0x080096bd
 8009660:	080096bd 	.word	0x080096bd
 8009664:	080096bd 	.word	0x080096bd
 8009668:	080096ad 	.word	0x080096ad
 800966c:	080096bd 	.word	0x080096bd
 8009670:	080096bd 	.word	0x080096bd
 8009674:	080096bd 	.word	0x080096bd
 8009678:	080096bd 	.word	0x080096bd
 800967c:	080096bd 	.word	0x080096bd
 8009680:	080096bd 	.word	0x080096bd
 8009684:	080096bd 	.word	0x080096bd
 8009688:	080096b5 	.word	0x080096b5
 800968c:	2301      	movs	r3, #1
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009692:	e1c0      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009694:	2304      	movs	r3, #4
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e1bc      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800969c:	2308      	movs	r3, #8
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e1b8      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80096a4:	2310      	movs	r3, #16
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e1b4      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80096ac:	2320      	movs	r3, #32
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e1b0      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80096b4:	2340      	movs	r3, #64	@ 0x40
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e1ac      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80096bc:	2380      	movs	r3, #128	@ 0x80
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e1a8      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a75      	ldr	r2, [pc, #468]	@ (80098a0 <UART_SetConfig+0x638>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d130      	bne.n	8009730 <UART_SetConfig+0x4c8>
 80096ce:	4b73      	ldr	r3, [pc, #460]	@ (800989c <UART_SetConfig+0x634>)
 80096d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d2:	f003 0307 	and.w	r3, r3, #7
 80096d6:	2b05      	cmp	r3, #5
 80096d8:	d826      	bhi.n	8009728 <UART_SetConfig+0x4c0>
 80096da:	a201      	add	r2, pc, #4	@ (adr r2, 80096e0 <UART_SetConfig+0x478>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	080096f9 	.word	0x080096f9
 80096e4:	08009701 	.word	0x08009701
 80096e8:	08009709 	.word	0x08009709
 80096ec:	08009711 	.word	0x08009711
 80096f0:	08009719 	.word	0x08009719
 80096f4:	08009721 	.word	0x08009721
 80096f8:	2300      	movs	r3, #0
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fe:	e18a      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009700:	2304      	movs	r3, #4
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e186      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009708:	2308      	movs	r3, #8
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e182      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009710:	2310      	movs	r3, #16
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e17e      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009718:	2320      	movs	r3, #32
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e17a      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009720:	2340      	movs	r3, #64	@ 0x40
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e176      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009728:	2380      	movs	r3, #128	@ 0x80
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e172      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a5b      	ldr	r2, [pc, #364]	@ (80098a4 <UART_SetConfig+0x63c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d130      	bne.n	800979c <UART_SetConfig+0x534>
 800973a:	4b58      	ldr	r3, [pc, #352]	@ (800989c <UART_SetConfig+0x634>)
 800973c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	2b05      	cmp	r3, #5
 8009744:	d826      	bhi.n	8009794 <UART_SetConfig+0x52c>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <UART_SetConfig+0x4e4>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	08009765 	.word	0x08009765
 8009750:	0800976d 	.word	0x0800976d
 8009754:	08009775 	.word	0x08009775
 8009758:	0800977d 	.word	0x0800977d
 800975c:	08009785 	.word	0x08009785
 8009760:	0800978d 	.word	0x0800978d
 8009764:	2300      	movs	r3, #0
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976a:	e154      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800976c:	2304      	movs	r3, #4
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e150      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009774:	2308      	movs	r3, #8
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977a:	e14c      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800977c:	2310      	movs	r3, #16
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e148      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009784:	2320      	movs	r3, #32
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e144      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800978c:	2340      	movs	r3, #64	@ 0x40
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e140      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009794:	2380      	movs	r3, #128	@ 0x80
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e13c      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a41      	ldr	r2, [pc, #260]	@ (80098a8 <UART_SetConfig+0x640>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	f040 8082 	bne.w	80098ac <UART_SetConfig+0x644>
 80097a8:	4b3c      	ldr	r3, [pc, #240]	@ (800989c <UART_SetConfig+0x634>)
 80097aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097b0:	2b28      	cmp	r3, #40	@ 0x28
 80097b2:	d86d      	bhi.n	8009890 <UART_SetConfig+0x628>
 80097b4:	a201      	add	r2, pc, #4	@ (adr r2, 80097bc <UART_SetConfig+0x554>)
 80097b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ba:	bf00      	nop
 80097bc:	08009861 	.word	0x08009861
 80097c0:	08009891 	.word	0x08009891
 80097c4:	08009891 	.word	0x08009891
 80097c8:	08009891 	.word	0x08009891
 80097cc:	08009891 	.word	0x08009891
 80097d0:	08009891 	.word	0x08009891
 80097d4:	08009891 	.word	0x08009891
 80097d8:	08009891 	.word	0x08009891
 80097dc:	08009869 	.word	0x08009869
 80097e0:	08009891 	.word	0x08009891
 80097e4:	08009891 	.word	0x08009891
 80097e8:	08009891 	.word	0x08009891
 80097ec:	08009891 	.word	0x08009891
 80097f0:	08009891 	.word	0x08009891
 80097f4:	08009891 	.word	0x08009891
 80097f8:	08009891 	.word	0x08009891
 80097fc:	08009871 	.word	0x08009871
 8009800:	08009891 	.word	0x08009891
 8009804:	08009891 	.word	0x08009891
 8009808:	08009891 	.word	0x08009891
 800980c:	08009891 	.word	0x08009891
 8009810:	08009891 	.word	0x08009891
 8009814:	08009891 	.word	0x08009891
 8009818:	08009891 	.word	0x08009891
 800981c:	08009879 	.word	0x08009879
 8009820:	08009891 	.word	0x08009891
 8009824:	08009891 	.word	0x08009891
 8009828:	08009891 	.word	0x08009891
 800982c:	08009891 	.word	0x08009891
 8009830:	08009891 	.word	0x08009891
 8009834:	08009891 	.word	0x08009891
 8009838:	08009891 	.word	0x08009891
 800983c:	08009881 	.word	0x08009881
 8009840:	08009891 	.word	0x08009891
 8009844:	08009891 	.word	0x08009891
 8009848:	08009891 	.word	0x08009891
 800984c:	08009891 	.word	0x08009891
 8009850:	08009891 	.word	0x08009891
 8009854:	08009891 	.word	0x08009891
 8009858:	08009891 	.word	0x08009891
 800985c:	08009889 	.word	0x08009889
 8009860:	2301      	movs	r3, #1
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e0d6      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009868:	2304      	movs	r3, #4
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e0d2      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009870:	2308      	movs	r3, #8
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e0ce      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009878:	2310      	movs	r3, #16
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987e:	e0ca      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009880:	2320      	movs	r3, #32
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009886:	e0c6      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009888:	2340      	movs	r3, #64	@ 0x40
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988e:	e0c2      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009890:	2380      	movs	r3, #128	@ 0x80
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009896:	e0be      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009898:	40011400 	.word	0x40011400
 800989c:	58024400 	.word	0x58024400
 80098a0:	40007800 	.word	0x40007800
 80098a4:	40007c00 	.word	0x40007c00
 80098a8:	40011800 	.word	0x40011800
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4aad      	ldr	r2, [pc, #692]	@ (8009b68 <UART_SetConfig+0x900>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d176      	bne.n	80099a4 <UART_SetConfig+0x73c>
 80098b6:	4bad      	ldr	r3, [pc, #692]	@ (8009b6c <UART_SetConfig+0x904>)
 80098b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098be:	2b28      	cmp	r3, #40	@ 0x28
 80098c0:	d86c      	bhi.n	800999c <UART_SetConfig+0x734>
 80098c2:	a201      	add	r2, pc, #4	@ (adr r2, 80098c8 <UART_SetConfig+0x660>)
 80098c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c8:	0800996d 	.word	0x0800996d
 80098cc:	0800999d 	.word	0x0800999d
 80098d0:	0800999d 	.word	0x0800999d
 80098d4:	0800999d 	.word	0x0800999d
 80098d8:	0800999d 	.word	0x0800999d
 80098dc:	0800999d 	.word	0x0800999d
 80098e0:	0800999d 	.word	0x0800999d
 80098e4:	0800999d 	.word	0x0800999d
 80098e8:	08009975 	.word	0x08009975
 80098ec:	0800999d 	.word	0x0800999d
 80098f0:	0800999d 	.word	0x0800999d
 80098f4:	0800999d 	.word	0x0800999d
 80098f8:	0800999d 	.word	0x0800999d
 80098fc:	0800999d 	.word	0x0800999d
 8009900:	0800999d 	.word	0x0800999d
 8009904:	0800999d 	.word	0x0800999d
 8009908:	0800997d 	.word	0x0800997d
 800990c:	0800999d 	.word	0x0800999d
 8009910:	0800999d 	.word	0x0800999d
 8009914:	0800999d 	.word	0x0800999d
 8009918:	0800999d 	.word	0x0800999d
 800991c:	0800999d 	.word	0x0800999d
 8009920:	0800999d 	.word	0x0800999d
 8009924:	0800999d 	.word	0x0800999d
 8009928:	08009985 	.word	0x08009985
 800992c:	0800999d 	.word	0x0800999d
 8009930:	0800999d 	.word	0x0800999d
 8009934:	0800999d 	.word	0x0800999d
 8009938:	0800999d 	.word	0x0800999d
 800993c:	0800999d 	.word	0x0800999d
 8009940:	0800999d 	.word	0x0800999d
 8009944:	0800999d 	.word	0x0800999d
 8009948:	0800998d 	.word	0x0800998d
 800994c:	0800999d 	.word	0x0800999d
 8009950:	0800999d 	.word	0x0800999d
 8009954:	0800999d 	.word	0x0800999d
 8009958:	0800999d 	.word	0x0800999d
 800995c:	0800999d 	.word	0x0800999d
 8009960:	0800999d 	.word	0x0800999d
 8009964:	0800999d 	.word	0x0800999d
 8009968:	08009995 	.word	0x08009995
 800996c:	2301      	movs	r3, #1
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009972:	e050      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009974:	2304      	movs	r3, #4
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997a:	e04c      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800997c:	2308      	movs	r3, #8
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e048      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009984:	2310      	movs	r3, #16
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e044      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800998c:	2320      	movs	r3, #32
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e040      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009994:	2340      	movs	r3, #64	@ 0x40
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e03c      	b.n	8009a16 <UART_SetConfig+0x7ae>
 800999c:	2380      	movs	r3, #128	@ 0x80
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e038      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a71      	ldr	r2, [pc, #452]	@ (8009b70 <UART_SetConfig+0x908>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d130      	bne.n	8009a10 <UART_SetConfig+0x7a8>
 80099ae:	4b6f      	ldr	r3, [pc, #444]	@ (8009b6c <UART_SetConfig+0x904>)
 80099b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	2b05      	cmp	r3, #5
 80099b8:	d826      	bhi.n	8009a08 <UART_SetConfig+0x7a0>
 80099ba:	a201      	add	r2, pc, #4	@ (adr r2, 80099c0 <UART_SetConfig+0x758>)
 80099bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c0:	080099d9 	.word	0x080099d9
 80099c4:	080099e1 	.word	0x080099e1
 80099c8:	080099e9 	.word	0x080099e9
 80099cc:	080099f1 	.word	0x080099f1
 80099d0:	080099f9 	.word	0x080099f9
 80099d4:	08009a01 	.word	0x08009a01
 80099d8:	2302      	movs	r3, #2
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e01a      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80099e0:	2304      	movs	r3, #4
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e6:	e016      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80099e8:	2308      	movs	r3, #8
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e012      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80099f0:	2310      	movs	r3, #16
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e00e      	b.n	8009a16 <UART_SetConfig+0x7ae>
 80099f8:	2320      	movs	r3, #32
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e00a      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009a00:	2340      	movs	r3, #64	@ 0x40
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a06:	e006      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009a08:	2380      	movs	r3, #128	@ 0x80
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a0e:	e002      	b.n	8009a16 <UART_SetConfig+0x7ae>
 8009a10:	2380      	movs	r3, #128	@ 0x80
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a55      	ldr	r2, [pc, #340]	@ (8009b70 <UART_SetConfig+0x908>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	f040 80f8 	bne.w	8009c12 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	dc46      	bgt.n	8009ab8 <UART_SetConfig+0x850>
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	db75      	blt.n	8009b1a <UART_SetConfig+0x8b2>
 8009a2e:	3b02      	subs	r3, #2
 8009a30:	2b1e      	cmp	r3, #30
 8009a32:	d872      	bhi.n	8009b1a <UART_SetConfig+0x8b2>
 8009a34:	a201      	add	r2, pc, #4	@ (adr r2, 8009a3c <UART_SetConfig+0x7d4>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009abf 	.word	0x08009abf
 8009a40:	08009b1b 	.word	0x08009b1b
 8009a44:	08009ac7 	.word	0x08009ac7
 8009a48:	08009b1b 	.word	0x08009b1b
 8009a4c:	08009b1b 	.word	0x08009b1b
 8009a50:	08009b1b 	.word	0x08009b1b
 8009a54:	08009ad7 	.word	0x08009ad7
 8009a58:	08009b1b 	.word	0x08009b1b
 8009a5c:	08009b1b 	.word	0x08009b1b
 8009a60:	08009b1b 	.word	0x08009b1b
 8009a64:	08009b1b 	.word	0x08009b1b
 8009a68:	08009b1b 	.word	0x08009b1b
 8009a6c:	08009b1b 	.word	0x08009b1b
 8009a70:	08009b1b 	.word	0x08009b1b
 8009a74:	08009ae7 	.word	0x08009ae7
 8009a78:	08009b1b 	.word	0x08009b1b
 8009a7c:	08009b1b 	.word	0x08009b1b
 8009a80:	08009b1b 	.word	0x08009b1b
 8009a84:	08009b1b 	.word	0x08009b1b
 8009a88:	08009b1b 	.word	0x08009b1b
 8009a8c:	08009b1b 	.word	0x08009b1b
 8009a90:	08009b1b 	.word	0x08009b1b
 8009a94:	08009b1b 	.word	0x08009b1b
 8009a98:	08009b1b 	.word	0x08009b1b
 8009a9c:	08009b1b 	.word	0x08009b1b
 8009aa0:	08009b1b 	.word	0x08009b1b
 8009aa4:	08009b1b 	.word	0x08009b1b
 8009aa8:	08009b1b 	.word	0x08009b1b
 8009aac:	08009b1b 	.word	0x08009b1b
 8009ab0:	08009b1b 	.word	0x08009b1b
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	2b40      	cmp	r3, #64	@ 0x40
 8009aba:	d02a      	beq.n	8009b12 <UART_SetConfig+0x8aa>
 8009abc:	e02d      	b.n	8009b1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009abe:	f7fd fe95 	bl	80077ec <HAL_RCCEx_GetD3PCLK1Freq>
 8009ac2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ac4:	e02f      	b.n	8009b26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fd fea4 	bl	8007818 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad4:	e027      	b.n	8009b26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ad6:	f107 0318 	add.w	r3, r7, #24
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fd fff0 	bl	8007ac0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae4:	e01f      	b.n	8009b26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ae6:	4b21      	ldr	r3, [pc, #132]	@ (8009b6c <UART_SetConfig+0x904>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0320 	and.w	r3, r3, #32
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d009      	beq.n	8009b06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009af2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b6c <UART_SetConfig+0x904>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	08db      	lsrs	r3, r3, #3
 8009af8:	f003 0303 	and.w	r3, r3, #3
 8009afc:	4a1d      	ldr	r2, [pc, #116]	@ (8009b74 <UART_SetConfig+0x90c>)
 8009afe:	fa22 f303 	lsr.w	r3, r2, r3
 8009b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b04:	e00f      	b.n	8009b26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b06:	4b1b      	ldr	r3, [pc, #108]	@ (8009b74 <UART_SetConfig+0x90c>)
 8009b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b0a:	e00c      	b.n	8009b26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8009b78 <UART_SetConfig+0x910>)
 8009b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b10:	e009      	b.n	8009b26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b18:	e005      	b.n	8009b26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f000 81ee 	beq.w	8009f0a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b32:	4a12      	ldr	r2, [pc, #72]	@ (8009b7c <UART_SetConfig+0x914>)
 8009b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b40:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	4613      	mov	r3, r2
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	4413      	add	r3, r2
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d305      	bcc.n	8009b5e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d910      	bls.n	8009b80 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b64:	e1d1      	b.n	8009f0a <UART_SetConfig+0xca2>
 8009b66:	bf00      	nop
 8009b68:	40011c00 	.word	0x40011c00
 8009b6c:	58024400 	.word	0x58024400
 8009b70:	58000c00 	.word	0x58000c00
 8009b74:	03d09000 	.word	0x03d09000
 8009b78:	003d0900 	.word	0x003d0900
 8009b7c:	0801bbd4 	.word	0x0801bbd4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b82:	2200      	movs	r2, #0
 8009b84:	60bb      	str	r3, [r7, #8]
 8009b86:	60fa      	str	r2, [r7, #12]
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8c:	4ac0      	ldr	r2, [pc, #768]	@ (8009e90 <UART_SetConfig+0xc28>)
 8009b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2200      	movs	r2, #0
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	607a      	str	r2, [r7, #4]
 8009b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ba2:	f7f6 fc5d 	bl	8000460 <__aeabi_uldivmod>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4610      	mov	r0, r2
 8009bac:	4619      	mov	r1, r3
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	f04f 0300 	mov.w	r3, #0
 8009bb6:	020b      	lsls	r3, r1, #8
 8009bb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bbc:	0202      	lsls	r2, r0, #8
 8009bbe:	6979      	ldr	r1, [r7, #20]
 8009bc0:	6849      	ldr	r1, [r1, #4]
 8009bc2:	0849      	lsrs	r1, r1, #1
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	4605      	mov	r5, r0
 8009bca:	eb12 0804 	adds.w	r8, r2, r4
 8009bce:	eb43 0905 	adc.w	r9, r3, r5
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	469a      	mov	sl, r3
 8009bda:	4693      	mov	fp, r2
 8009bdc:	4652      	mov	r2, sl
 8009bde:	465b      	mov	r3, fp
 8009be0:	4640      	mov	r0, r8
 8009be2:	4649      	mov	r1, r9
 8009be4:	f7f6 fc3c 	bl	8000460 <__aeabi_uldivmod>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4613      	mov	r3, r2
 8009bee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bf6:	d308      	bcc.n	8009c0a <UART_SetConfig+0x9a2>
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bfe:	d204      	bcs.n	8009c0a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c06:	60da      	str	r2, [r3, #12]
 8009c08:	e17f      	b.n	8009f0a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c10:	e17b      	b.n	8009f0a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c1a:	f040 80bd 	bne.w	8009d98 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009c1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c22:	2b20      	cmp	r3, #32
 8009c24:	dc48      	bgt.n	8009cb8 <UART_SetConfig+0xa50>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	db7b      	blt.n	8009d22 <UART_SetConfig+0xaba>
 8009c2a:	2b20      	cmp	r3, #32
 8009c2c:	d879      	bhi.n	8009d22 <UART_SetConfig+0xaba>
 8009c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c34 <UART_SetConfig+0x9cc>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009cbf 	.word	0x08009cbf
 8009c38:	08009cc7 	.word	0x08009cc7
 8009c3c:	08009d23 	.word	0x08009d23
 8009c40:	08009d23 	.word	0x08009d23
 8009c44:	08009ccf 	.word	0x08009ccf
 8009c48:	08009d23 	.word	0x08009d23
 8009c4c:	08009d23 	.word	0x08009d23
 8009c50:	08009d23 	.word	0x08009d23
 8009c54:	08009cdf 	.word	0x08009cdf
 8009c58:	08009d23 	.word	0x08009d23
 8009c5c:	08009d23 	.word	0x08009d23
 8009c60:	08009d23 	.word	0x08009d23
 8009c64:	08009d23 	.word	0x08009d23
 8009c68:	08009d23 	.word	0x08009d23
 8009c6c:	08009d23 	.word	0x08009d23
 8009c70:	08009d23 	.word	0x08009d23
 8009c74:	08009cef 	.word	0x08009cef
 8009c78:	08009d23 	.word	0x08009d23
 8009c7c:	08009d23 	.word	0x08009d23
 8009c80:	08009d23 	.word	0x08009d23
 8009c84:	08009d23 	.word	0x08009d23
 8009c88:	08009d23 	.word	0x08009d23
 8009c8c:	08009d23 	.word	0x08009d23
 8009c90:	08009d23 	.word	0x08009d23
 8009c94:	08009d23 	.word	0x08009d23
 8009c98:	08009d23 	.word	0x08009d23
 8009c9c:	08009d23 	.word	0x08009d23
 8009ca0:	08009d23 	.word	0x08009d23
 8009ca4:	08009d23 	.word	0x08009d23
 8009ca8:	08009d23 	.word	0x08009d23
 8009cac:	08009d23 	.word	0x08009d23
 8009cb0:	08009d23 	.word	0x08009d23
 8009cb4:	08009d15 	.word	0x08009d15
 8009cb8:	2b40      	cmp	r3, #64	@ 0x40
 8009cba:	d02e      	beq.n	8009d1a <UART_SetConfig+0xab2>
 8009cbc:	e031      	b.n	8009d22 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cbe:	f7fc fb69 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8009cc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cc4:	e033      	b.n	8009d2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cc6:	f7fc fb7b 	bl	80063c0 <HAL_RCC_GetPCLK2Freq>
 8009cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ccc:	e02f      	b.n	8009d2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fd fda0 	bl	8007818 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cdc:	e027      	b.n	8009d2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cde:	f107 0318 	add.w	r3, r7, #24
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fd feec 	bl	8007ac0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cec:	e01f      	b.n	8009d2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cee:	4b69      	ldr	r3, [pc, #420]	@ (8009e94 <UART_SetConfig+0xc2c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0320 	and.w	r3, r3, #32
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d009      	beq.n	8009d0e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cfa:	4b66      	ldr	r3, [pc, #408]	@ (8009e94 <UART_SetConfig+0xc2c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	08db      	lsrs	r3, r3, #3
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	4a64      	ldr	r2, [pc, #400]	@ (8009e98 <UART_SetConfig+0xc30>)
 8009d06:	fa22 f303 	lsr.w	r3, r2, r3
 8009d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d0c:	e00f      	b.n	8009d2e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009d0e:	4b62      	ldr	r3, [pc, #392]	@ (8009e98 <UART_SetConfig+0xc30>)
 8009d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d12:	e00c      	b.n	8009d2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d14:	4b61      	ldr	r3, [pc, #388]	@ (8009e9c <UART_SetConfig+0xc34>)
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d18:	e009      	b.n	8009d2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d20:	e005      	b.n	8009d2e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 80ea 	beq.w	8009f0a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d3a:	4a55      	ldr	r2, [pc, #340]	@ (8009e90 <UART_SetConfig+0xc28>)
 8009d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d40:	461a      	mov	r2, r3
 8009d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d48:	005a      	lsls	r2, r3, #1
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	085b      	lsrs	r3, r3, #1
 8009d50:	441a      	add	r2, r3
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	2b0f      	cmp	r3, #15
 8009d60:	d916      	bls.n	8009d90 <UART_SetConfig+0xb28>
 8009d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d68:	d212      	bcs.n	8009d90 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f023 030f 	bic.w	r3, r3, #15
 8009d72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d76:	085b      	lsrs	r3, r3, #1
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d82:	4313      	orrs	r3, r2
 8009d84:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d8c:	60da      	str	r2, [r3, #12]
 8009d8e:	e0bc      	b.n	8009f0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d96:	e0b8      	b.n	8009f0a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	dc4b      	bgt.n	8009e38 <UART_SetConfig+0xbd0>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f2c0 8087 	blt.w	8009eb4 <UART_SetConfig+0xc4c>
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	f200 8084 	bhi.w	8009eb4 <UART_SetConfig+0xc4c>
 8009dac:	a201      	add	r2, pc, #4	@ (adr r2, 8009db4 <UART_SetConfig+0xb4c>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009e3f 	.word	0x08009e3f
 8009db8:	08009e47 	.word	0x08009e47
 8009dbc:	08009eb5 	.word	0x08009eb5
 8009dc0:	08009eb5 	.word	0x08009eb5
 8009dc4:	08009e4f 	.word	0x08009e4f
 8009dc8:	08009eb5 	.word	0x08009eb5
 8009dcc:	08009eb5 	.word	0x08009eb5
 8009dd0:	08009eb5 	.word	0x08009eb5
 8009dd4:	08009e5f 	.word	0x08009e5f
 8009dd8:	08009eb5 	.word	0x08009eb5
 8009ddc:	08009eb5 	.word	0x08009eb5
 8009de0:	08009eb5 	.word	0x08009eb5
 8009de4:	08009eb5 	.word	0x08009eb5
 8009de8:	08009eb5 	.word	0x08009eb5
 8009dec:	08009eb5 	.word	0x08009eb5
 8009df0:	08009eb5 	.word	0x08009eb5
 8009df4:	08009e6f 	.word	0x08009e6f
 8009df8:	08009eb5 	.word	0x08009eb5
 8009dfc:	08009eb5 	.word	0x08009eb5
 8009e00:	08009eb5 	.word	0x08009eb5
 8009e04:	08009eb5 	.word	0x08009eb5
 8009e08:	08009eb5 	.word	0x08009eb5
 8009e0c:	08009eb5 	.word	0x08009eb5
 8009e10:	08009eb5 	.word	0x08009eb5
 8009e14:	08009eb5 	.word	0x08009eb5
 8009e18:	08009eb5 	.word	0x08009eb5
 8009e1c:	08009eb5 	.word	0x08009eb5
 8009e20:	08009eb5 	.word	0x08009eb5
 8009e24:	08009eb5 	.word	0x08009eb5
 8009e28:	08009eb5 	.word	0x08009eb5
 8009e2c:	08009eb5 	.word	0x08009eb5
 8009e30:	08009eb5 	.word	0x08009eb5
 8009e34:	08009ea7 	.word	0x08009ea7
 8009e38:	2b40      	cmp	r3, #64	@ 0x40
 8009e3a:	d037      	beq.n	8009eac <UART_SetConfig+0xc44>
 8009e3c:	e03a      	b.n	8009eb4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e3e:	f7fc faa9 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 8009e42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e44:	e03c      	b.n	8009ec0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e46:	f7fc fabb 	bl	80063c0 <HAL_RCC_GetPCLK2Freq>
 8009e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e4c:	e038      	b.n	8009ec0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fd fce0 	bl	8007818 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e5c:	e030      	b.n	8009ec0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e5e:	f107 0318 	add.w	r3, r7, #24
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fd fe2c 	bl	8007ac0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e6c:	e028      	b.n	8009ec0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e6e:	4b09      	ldr	r3, [pc, #36]	@ (8009e94 <UART_SetConfig+0xc2c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0320 	and.w	r3, r3, #32
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d012      	beq.n	8009ea0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e7a:	4b06      	ldr	r3, [pc, #24]	@ (8009e94 <UART_SetConfig+0xc2c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	08db      	lsrs	r3, r3, #3
 8009e80:	f003 0303 	and.w	r3, r3, #3
 8009e84:	4a04      	ldr	r2, [pc, #16]	@ (8009e98 <UART_SetConfig+0xc30>)
 8009e86:	fa22 f303 	lsr.w	r3, r2, r3
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e8c:	e018      	b.n	8009ec0 <UART_SetConfig+0xc58>
 8009e8e:	bf00      	nop
 8009e90:	0801bbd4 	.word	0x0801bbd4
 8009e94:	58024400 	.word	0x58024400
 8009e98:	03d09000 	.word	0x03d09000
 8009e9c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009ea0:	4b24      	ldr	r3, [pc, #144]	@ (8009f34 <UART_SetConfig+0xccc>)
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea4:	e00c      	b.n	8009ec0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ea6:	4b24      	ldr	r3, [pc, #144]	@ (8009f38 <UART_SetConfig+0xcd0>)
 8009ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eaa:	e009      	b.n	8009ec0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb2:	e005      	b.n	8009ec0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ebe:	bf00      	nop
    }

    if (pclk != 0U)
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d021      	beq.n	8009f0a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eca:	4a1c      	ldr	r2, [pc, #112]	@ (8009f3c <UART_SetConfig+0xcd4>)
 8009ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	085b      	lsrs	r3, r3, #1
 8009ede:	441a      	add	r2, r3
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eec:	2b0f      	cmp	r3, #15
 8009eee:	d909      	bls.n	8009f04 <UART_SetConfig+0xc9c>
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ef6:	d205      	bcs.n	8009f04 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	60da      	str	r2, [r3, #12]
 8009f02:	e002      	b.n	8009f0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2200      	movs	r2, #0
 8009f24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f26:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3748      	adds	r7, #72	@ 0x48
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f34:	03d09000 	.word	0x03d09000
 8009f38:	003d0900 	.word	0x003d0900
 8009f3c:	0801bbd4 	.word	0x0801bbd4

08009f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00a      	beq.n	8009f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	430a      	orrs	r2, r1
 8009f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f90:	f003 0302 	and.w	r3, r3, #2
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00a      	beq.n	8009fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb2:	f003 0304 	and.w	r3, r3, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff6:	f003 0320 	and.w	r3, r3, #32
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01a      	beq.n	800a056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a03a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a03e:	d10a      	bne.n	800a056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	605a      	str	r2, [r3, #4]
  }
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b098      	sub	sp, #96	@ 0x60
 800a088:	af02      	add	r7, sp, #8
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a094:	f7f7 ff7a 	bl	8001f8c <HAL_GetTick>
 800a098:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0308 	and.w	r3, r3, #8
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d12f      	bne.n	800a108 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f88e 	bl	800a1d8 <UART_WaitOnFlagUntilTimeout>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d022      	beq.n	800a108 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e6      	bne.n	800a0c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e063      	b.n	800a1d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0304 	and.w	r3, r3, #4
 800a112:	2b04      	cmp	r3, #4
 800a114:	d149      	bne.n	800a1aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a116:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a11e:	2200      	movs	r2, #0
 800a120:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f857 	bl	800a1d8 <UART_WaitOnFlagUntilTimeout>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d03c      	beq.n	800a1aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	623b      	str	r3, [r7, #32]
   return(result);
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a14e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a150:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a156:	e841 2300 	strex	r3, r2, [r1]
 800a15a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1e6      	bne.n	800a130 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3308      	adds	r3, #8
 800a168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	e853 3f00 	ldrex	r3, [r3]
 800a170:	60fb      	str	r3, [r7, #12]
   return(result);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f023 0301 	bic.w	r3, r3, #1
 800a178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3308      	adds	r3, #8
 800a180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a182:	61fa      	str	r2, [r7, #28]
 800a184:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a186:	69b9      	ldr	r1, [r7, #24]
 800a188:	69fa      	ldr	r2, [r7, #28]
 800a18a:	e841 2300 	strex	r3, r2, [r1]
 800a18e:	617b      	str	r3, [r7, #20]
   return(result);
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e5      	bne.n	800a162 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2220      	movs	r2, #32
 800a19a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e012      	b.n	800a1d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2220      	movs	r2, #32
 800a1ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2220      	movs	r2, #32
 800a1b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3758      	adds	r7, #88	@ 0x58
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	603b      	str	r3, [r7, #0]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e8:	e04f      	b.n	800a28a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1f0:	d04b      	beq.n	800a28a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1f2:	f7f7 fecb 	bl	8001f8c <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	69ba      	ldr	r2, [r7, #24]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d302      	bcc.n	800a208 <UART_WaitOnFlagUntilTimeout+0x30>
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e04e      	b.n	800a2aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0304 	and.w	r3, r3, #4
 800a216:	2b00      	cmp	r3, #0
 800a218:	d037      	beq.n	800a28a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b80      	cmp	r3, #128	@ 0x80
 800a21e:	d034      	beq.n	800a28a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b40      	cmp	r3, #64	@ 0x40
 800a224:	d031      	beq.n	800a28a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	f003 0308 	and.w	r3, r3, #8
 800a230:	2b08      	cmp	r3, #8
 800a232:	d110      	bne.n	800a256 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2208      	movs	r2, #8
 800a23a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f000 f921 	bl	800a484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2208      	movs	r2, #8
 800a246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e029      	b.n	800a2aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a264:	d111      	bne.n	800a28a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a26e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 f907 	bl	800a484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e00f      	b.n	800a2aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	69da      	ldr	r2, [r3, #28]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	4013      	ands	r3, r2
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	429a      	cmp	r2, r3
 800a298:	bf0c      	ite	eq
 800a29a:	2301      	moveq	r3, #1
 800a29c:	2300      	movne	r3, #0
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	79fb      	ldrb	r3, [r7, #7]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d0a0      	beq.n	800a1ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b096      	sub	sp, #88	@ 0x58
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	88fa      	ldrh	r2, [r7, #6]
 800a2cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2222      	movs	r2, #34	@ 0x22
 800a2dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d02d      	beq.n	800a346 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2f0:	4a40      	ldr	r2, [pc, #256]	@ (800a3f4 <UART_Start_Receive_DMA+0x140>)
 800a2f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2fa:	4a3f      	ldr	r2, [pc, #252]	@ (800a3f8 <UART_Start_Receive_DMA+0x144>)
 800a2fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a304:	4a3d      	ldr	r2, [pc, #244]	@ (800a3fc <UART_Start_Receive_DMA+0x148>)
 800a306:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a30e:	2200      	movs	r2, #0
 800a310:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3324      	adds	r3, #36	@ 0x24
 800a31e:	4619      	mov	r1, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a324:	461a      	mov	r2, r3
 800a326:	88fb      	ldrh	r3, [r7, #6]
 800a328:	f7f8 fb22 	bl	8002970 <HAL_DMA_Start_IT>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d009      	beq.n	800a346 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2210      	movs	r2, #16
 800a336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e051      	b.n	800a3ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d018      	beq.n	800a380 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a356:	e853 3f00 	ldrex	r3, [r3]
 800a35a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a362:	657b      	str	r3, [r7, #84]	@ 0x54
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	461a      	mov	r2, r3
 800a36a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a36c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a36e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a370:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a374:	e841 2300 	strex	r3, r2, [r1]
 800a378:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a37a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1e6      	bne.n	800a34e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3308      	adds	r3, #8
 800a386:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38a:	e853 3f00 	ldrex	r3, [r3]
 800a38e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a392:	f043 0301 	orr.w	r3, r3, #1
 800a396:	653b      	str	r3, [r7, #80]	@ 0x50
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3a0:	637a      	str	r2, [r7, #52]	@ 0x34
 800a3a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3a8:	e841 2300 	strex	r3, r2, [r1]
 800a3ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1e5      	bne.n	800a380 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	e853 3f00 	ldrex	r3, [r3]
 800a3c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a3d4:	623a      	str	r2, [r7, #32]
 800a3d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d8:	69f9      	ldr	r1, [r7, #28]
 800a3da:	6a3a      	ldr	r2, [r7, #32]
 800a3dc:	e841 2300 	strex	r3, r2, [r1]
 800a3e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e5      	bne.n	800a3b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3758      	adds	r7, #88	@ 0x58
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800a603 	.word	0x0800a603
 800a3f8:	0800a72b 	.word	0x0800a72b
 800a3fc:	0800a769 	.word	0x0800a769

0800a400 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a400:	b480      	push	{r7}
 800a402:	b08f      	sub	sp, #60	@ 0x3c
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	61fb      	str	r3, [r7, #28]
   return(result);
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a41c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a428:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a42c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e6      	bne.n	800a408 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	60bb      	str	r3, [r7, #8]
   return(result);
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a450:	633b      	str	r3, [r7, #48]	@ 0x30
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3308      	adds	r3, #8
 800a458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a45a:	61ba      	str	r2, [r7, #24]
 800a45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6979      	ldr	r1, [r7, #20]
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	613b      	str	r3, [r7, #16]
   return(result);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e5      	bne.n	800a43a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2220      	movs	r2, #32
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a476:	bf00      	nop
 800a478:	373c      	adds	r7, #60	@ 0x3c
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
	...

0800a484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a484:	b480      	push	{r7}
 800a486:	b095      	sub	sp, #84	@ 0x54
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a494:	e853 3f00 	ldrex	r3, [r3]
 800a498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4b2:	e841 2300 	strex	r3, r2, [r1]
 800a4b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1e6      	bne.n	800a48c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	e853 3f00 	ldrex	r3, [r3]
 800a4cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ce:	69fa      	ldr	r2, [r7, #28]
 800a4d0:	4b1e      	ldr	r3, [pc, #120]	@ (800a54c <UART_EndRxTransfer+0xc8>)
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4e6:	e841 2300 	strex	r3, r2, [r1]
 800a4ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1e5      	bne.n	800a4be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d118      	bne.n	800a52c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	60bb      	str	r3, [r7, #8]
   return(result);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f023 0310 	bic.w	r3, r3, #16
 800a50e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6979      	ldr	r1, [r7, #20]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	613b      	str	r3, [r7, #16]
   return(result);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e6      	bne.n	800a4fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a540:	bf00      	nop
 800a542:	3754      	adds	r7, #84	@ 0x54
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	effffffe 	.word	0xeffffffe

0800a550 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b090      	sub	sp, #64	@ 0x40
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a566:	d037      	beq.n	800a5d8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3308      	adds	r3, #8
 800a576:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	e853 3f00 	ldrex	r3, [r3]
 800a57e:	623b      	str	r3, [r7, #32]
   return(result);
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a586:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3308      	adds	r3, #8
 800a58e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a590:	633a      	str	r2, [r7, #48]	@ 0x30
 800a592:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a594:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a598:	e841 2300 	strex	r3, r2, [r1]
 800a59c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1e5      	bne.n	800a570 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c2:	61fb      	str	r3, [r7, #28]
 800a5c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	69b9      	ldr	r1, [r7, #24]
 800a5c8:	69fa      	ldr	r2, [r7, #28]
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e6      	bne.n	800a5a4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5d6:	e002      	b.n	800a5de <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a5d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a5da:	f7fe fe07 	bl	80091ec <HAL_UART_TxCpltCallback>
}
 800a5de:	bf00      	nop
 800a5e0:	3740      	adds	r7, #64	@ 0x40
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f7fe fe03 	bl	8009200 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5fa:	bf00      	nop
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b09c      	sub	sp, #112	@ 0x70
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a60e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	69db      	ldr	r3, [r3, #28]
 800a614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a618:	d071      	beq.n	800a6fe <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a61a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a61c:	2200      	movs	r2, #0
 800a61e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a62a:	e853 3f00 	ldrex	r3, [r3]
 800a62e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a632:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a636:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	461a      	mov	r2, r3
 800a63e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a640:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a642:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a644:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a648:	e841 2300 	strex	r3, r2, [r1]
 800a64c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a64e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1e6      	bne.n	800a622 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3308      	adds	r3, #8
 800a65a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65e:	e853 3f00 	ldrex	r3, [r3]
 800a662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a666:	f023 0301 	bic.w	r3, r3, #1
 800a66a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a66c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3308      	adds	r3, #8
 800a672:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a674:	647a      	str	r2, [r7, #68]	@ 0x44
 800a676:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a67a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a67c:	e841 2300 	strex	r3, r2, [r1]
 800a680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e5      	bne.n	800a654 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3308      	adds	r3, #8
 800a68e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	e853 3f00 	ldrex	r3, [r3]
 800a696:	623b      	str	r3, [r7, #32]
   return(result);
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a69e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a6a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e5      	bne.n	800a688 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d118      	bne.n	800a6fe <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f023 0310 	bic.w	r3, r3, #16
 800a6e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	69b9      	ldr	r1, [r7, #24]
 800a6f0:	69fa      	ldr	r2, [r7, #28]
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e6      	bne.n	800a6cc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a700:	2200      	movs	r2, #0
 800a702:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d107      	bne.n	800a71c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a70c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a70e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a712:	4619      	mov	r1, r3
 800a714:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a716:	f7fe fd9b 	bl	8009250 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a71a:	e002      	b.n	800a722 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a71c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a71e:	f7fe fd79 	bl	8009214 <HAL_UART_RxCpltCallback>
}
 800a722:	bf00      	nop
 800a724:	3770      	adds	r7, #112	@ 0x70
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a736:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2201      	movs	r2, #1
 800a73c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a742:	2b01      	cmp	r3, #1
 800a744:	d109      	bne.n	800a75a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a74c:	085b      	lsrs	r3, r3, #1
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4619      	mov	r1, r3
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7fe fd7c 	bl	8009250 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a758:	e002      	b.n	800a760 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f7fe fd64 	bl	8009228 <HAL_UART_RxHalfCpltCallback>
}
 800a760:	bf00      	nop
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a774:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a77c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a784:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a790:	2b80      	cmp	r3, #128	@ 0x80
 800a792:	d109      	bne.n	800a7a8 <UART_DMAError+0x40>
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	2b21      	cmp	r3, #33	@ 0x21
 800a798:	d106      	bne.n	800a7a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a7a2:	6978      	ldr	r0, [r7, #20]
 800a7a4:	f7ff fe2c 	bl	800a400 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b2:	2b40      	cmp	r3, #64	@ 0x40
 800a7b4:	d109      	bne.n	800a7ca <UART_DMAError+0x62>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b22      	cmp	r3, #34	@ 0x22
 800a7ba:	d106      	bne.n	800a7ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a7c4:	6978      	ldr	r0, [r7, #20]
 800a7c6:	f7ff fe5d 	bl	800a484 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7d0:	f043 0210 	orr.w	r2, r3, #16
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7da:	6978      	ldr	r0, [r7, #20]
 800a7dc:	f7fe fd2e 	bl	800923c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7e0:	bf00      	nop
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7fe fd1c 	bl	800923c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	60bb      	str	r3, [r7, #8]
   return(result);
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	61bb      	str	r3, [r7, #24]
 800a834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	6979      	ldr	r1, [r7, #20]
 800a838:	69ba      	ldr	r2, [r7, #24]
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	613b      	str	r3, [r7, #16]
   return(result);
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e6      	bne.n	800a814 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7fe fcc9 	bl	80091ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a85a:	bf00      	nop
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a87e:	bf00      	nop
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a892:	bf00      	nop
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	e027      	b.n	800a904 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2224      	movs	r2, #36	@ 0x24
 800a8c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f022 0201 	bic.w	r2, r2, #1
 800a8da:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3714      	adds	r7, #20
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a924:	2302      	movs	r3, #2
 800a926:	e02d      	b.n	800a984 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2224      	movs	r2, #36	@ 0x24
 800a934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f022 0201 	bic.w	r2, r2, #1
 800a94e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f84f 	bl	800aa08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2220      	movs	r2, #32
 800a976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d101      	bne.n	800a9a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e02d      	b.n	800aa00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2224      	movs	r2, #36	@ 0x24
 800a9b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f022 0201 	bic.w	r2, r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f811 	bl	800aa08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d108      	bne.n	800aa2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa28:	e031      	b.n	800aa8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa2a:	2310      	movs	r3, #16
 800aa2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa2e:	2310      	movs	r3, #16
 800aa30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	0e5b      	lsrs	r3, r3, #25
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	0f5b      	lsrs	r3, r3, #29
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	7b3a      	ldrb	r2, [r7, #12]
 800aa56:	4911      	ldr	r1, [pc, #68]	@ (800aa9c <UARTEx_SetNbDataToProcess+0x94>)
 800aa58:	5c8a      	ldrb	r2, [r1, r2]
 800aa5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa5e:	7b3a      	ldrb	r2, [r7, #12]
 800aa60:	490f      	ldr	r1, [pc, #60]	@ (800aaa0 <UARTEx_SetNbDataToProcess+0x98>)
 800aa62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa64:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	7b7a      	ldrb	r2, [r7, #13]
 800aa74:	4909      	ldr	r1, [pc, #36]	@ (800aa9c <UARTEx_SetNbDataToProcess+0x94>)
 800aa76:	5c8a      	ldrb	r2, [r1, r2]
 800aa78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa7c:	7b7a      	ldrb	r2, [r7, #13]
 800aa7e:	4908      	ldr	r1, [pc, #32]	@ (800aaa0 <UARTEx_SetNbDataToProcess+0x98>)
 800aa80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa82:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa8e:	bf00      	nop
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	0801bbec 	.word	0x0801bbec
 800aaa0:	0801bbf4 	.word	0x0801bbf4

0800aaa4 <__NVIC_SetPriority>:
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800aab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	db0a      	blt.n	800aace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	490c      	ldr	r1, [pc, #48]	@ (800aaf0 <__NVIC_SetPriority+0x4c>)
 800aabe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aac2:	0112      	lsls	r2, r2, #4
 800aac4:	b2d2      	uxtb	r2, r2
 800aac6:	440b      	add	r3, r1
 800aac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aacc:	e00a      	b.n	800aae4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	4908      	ldr	r1, [pc, #32]	@ (800aaf4 <__NVIC_SetPriority+0x50>)
 800aad4:	88fb      	ldrh	r3, [r7, #6]
 800aad6:	f003 030f 	and.w	r3, r3, #15
 800aada:	3b04      	subs	r3, #4
 800aadc:	0112      	lsls	r2, r2, #4
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	440b      	add	r3, r1
 800aae2:	761a      	strb	r2, [r3, #24]
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	e000e100 	.word	0xe000e100
 800aaf4:	e000ed00 	.word	0xe000ed00

0800aaf8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aafc:	4b05      	ldr	r3, [pc, #20]	@ (800ab14 <SysTick_Handler+0x1c>)
 800aafe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ab00:	f001 fd6e 	bl	800c5e0 <xTaskGetSchedulerState>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d001      	beq.n	800ab0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ab0a:	f002 fb65 	bl	800d1d8 <xPortSysTickHandler>
  }
}
 800ab0e:	bf00      	nop
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	e000e010 	.word	0xe000e010

0800ab18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	f06f 0004 	mvn.w	r0, #4
 800ab22:	f7ff ffbf 	bl	800aaa4 <__NVIC_SetPriority>
#endif
}
 800ab26:	bf00      	nop
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab32:	f3ef 8305 	mrs	r3, IPSR
 800ab36:	603b      	str	r3, [r7, #0]
  return(result);
 800ab38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ab3e:	f06f 0305 	mvn.w	r3, #5
 800ab42:	607b      	str	r3, [r7, #4]
 800ab44:	e00c      	b.n	800ab60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ab46:	4b0a      	ldr	r3, [pc, #40]	@ (800ab70 <osKernelInitialize+0x44>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d105      	bne.n	800ab5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ab4e:	4b08      	ldr	r3, [pc, #32]	@ (800ab70 <osKernelInitialize+0x44>)
 800ab50:	2201      	movs	r2, #1
 800ab52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	607b      	str	r3, [r7, #4]
 800ab58:	e002      	b.n	800ab60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ab5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab60:	687b      	ldr	r3, [r7, #4]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	24004b3c 	.word	0x24004b3c

0800ab74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab7a:	f3ef 8305 	mrs	r3, IPSR
 800ab7e:	603b      	str	r3, [r7, #0]
  return(result);
 800ab80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab86:	f06f 0305 	mvn.w	r3, #5
 800ab8a:	607b      	str	r3, [r7, #4]
 800ab8c:	e010      	b.n	800abb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	@ (800abbc <osKernelStart+0x48>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d109      	bne.n	800abaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab96:	f7ff ffbf 	bl	800ab18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab9a:	4b08      	ldr	r3, [pc, #32]	@ (800abbc <osKernelStart+0x48>)
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aba0:	f001 f892 	bl	800bcc8 <vTaskStartScheduler>
      stat = osOK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	607b      	str	r3, [r7, #4]
 800aba8:	e002      	b.n	800abb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800abaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800abb0:	687b      	ldr	r3, [r7, #4]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	24004b3c 	.word	0x24004b3c

0800abc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08e      	sub	sp, #56	@ 0x38
 800abc4:	af04      	add	r7, sp, #16
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abd0:	f3ef 8305 	mrs	r3, IPSR
 800abd4:	617b      	str	r3, [r7, #20]
  return(result);
 800abd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d17e      	bne.n	800acda <osThreadNew+0x11a>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d07b      	beq.n	800acda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800abe2:	2380      	movs	r3, #128	@ 0x80
 800abe4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800abe6:	2318      	movs	r3, #24
 800abe8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800abea:	2300      	movs	r3, #0
 800abec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800abee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abf2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d045      	beq.n	800ac86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <osThreadNew+0x48>
        name = attr->name;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d008      	beq.n	800ac2e <osThreadNew+0x6e>
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	2b38      	cmp	r3, #56	@ 0x38
 800ac20:	d805      	bhi.n	800ac2e <osThreadNew+0x6e>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <osThreadNew+0x72>
        return (NULL);
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e054      	b.n	800acdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	089b      	lsrs	r3, r3, #2
 800ac40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00e      	beq.n	800ac68 <osThreadNew+0xa8>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	2ba7      	cmp	r3, #167	@ 0xa7
 800ac50:	d90a      	bls.n	800ac68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d006      	beq.n	800ac68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <osThreadNew+0xa8>
        mem = 1;
 800ac62:	2301      	movs	r3, #1
 800ac64:	61bb      	str	r3, [r7, #24]
 800ac66:	e010      	b.n	800ac8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10c      	bne.n	800ac8a <osThreadNew+0xca>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d108      	bne.n	800ac8a <osThreadNew+0xca>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d104      	bne.n	800ac8a <osThreadNew+0xca>
          mem = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	61bb      	str	r3, [r7, #24]
 800ac84:	e001      	b.n	800ac8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ac86:	2300      	movs	r3, #0
 800ac88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d110      	bne.n	800acb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac98:	9202      	str	r2, [sp, #8]
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	6a3a      	ldr	r2, [r7, #32]
 800aca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 fe1a 	bl	800b8e0 <xTaskCreateStatic>
 800acac:	4603      	mov	r3, r0
 800acae:	613b      	str	r3, [r7, #16]
 800acb0:	e013      	b.n	800acda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d110      	bne.n	800acda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	b29a      	uxth	r2, r3
 800acbc:	f107 0310 	add.w	r3, r7, #16
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 fe68 	bl	800b9a0 <xTaskCreate>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d001      	beq.n	800acda <osThreadNew+0x11a>
            hTask = NULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800acda:	693b      	ldr	r3, [r7, #16]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3728      	adds	r7, #40	@ 0x28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acec:	f3ef 8305 	mrs	r3, IPSR
 800acf0:	60bb      	str	r3, [r7, #8]
  return(result);
 800acf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <osDelay+0x1c>
    stat = osErrorISR;
 800acf8:	f06f 0305 	mvn.w	r3, #5
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	e007      	b.n	800ad10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 ffa6 	bl	800bc5c <vTaskDelay>
    }
  }

  return (stat);
 800ad10:	68fb      	ldr	r3, [r7, #12]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
	...

0800ad1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	4a07      	ldr	r2, [pc, #28]	@ (800ad48 <vApplicationGetIdleTaskMemory+0x2c>)
 800ad2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	4a06      	ldr	r2, [pc, #24]	@ (800ad4c <vApplicationGetIdleTaskMemory+0x30>)
 800ad32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2280      	movs	r2, #128	@ 0x80
 800ad38:	601a      	str	r2, [r3, #0]
}
 800ad3a:	bf00      	nop
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	24004b40 	.word	0x24004b40
 800ad4c:	24004be8 	.word	0x24004be8

0800ad50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4a07      	ldr	r2, [pc, #28]	@ (800ad7c <vApplicationGetTimerTaskMemory+0x2c>)
 800ad60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	4a06      	ldr	r2, [pc, #24]	@ (800ad80 <vApplicationGetTimerTaskMemory+0x30>)
 800ad66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad6e:	601a      	str	r2, [r3, #0]
}
 800ad70:	bf00      	nop
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	24004de8 	.word	0x24004de8
 800ad80:	24004e90 	.word	0x24004e90

0800ad84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f103 0208 	add.w	r2, r3, #8
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f103 0208 	add.w	r2, r3, #8
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f103 0208 	add.w	r2, r3, #8
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adde:	b480      	push	{r7}
 800ade0:	b085      	sub	sp, #20
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	689a      	ldr	r2, [r3, #8]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	601a      	str	r2, [r3, #0]
}
 800ae1a:	bf00      	nop
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae26:	b480      	push	{r7}
 800ae28:	b085      	sub	sp, #20
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae3c:	d103      	bne.n	800ae46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	e00c      	b.n	800ae60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3308      	adds	r3, #8
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	e002      	b.n	800ae54 <vListInsert+0x2e>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d2f6      	bcs.n	800ae4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
}
 800ae8c:	bf00      	nop
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	6892      	ldr	r2, [r2, #8]
 800aeae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6852      	ldr	r2, [r2, #4]
 800aeb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d103      	bne.n	800aecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689a      	ldr	r2, [r3, #8]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	1e5a      	subs	r2, r3, #1
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10b      	bne.n	800af18 <xQueueGenericReset+0x2c>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af04:	f383 8811 	msr	BASEPRI, r3
 800af08:	f3bf 8f6f 	isb	sy
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	60bb      	str	r3, [r7, #8]
}
 800af12:	bf00      	nop
 800af14:	bf00      	nop
 800af16:	e7fd      	b.n	800af14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af18:	f002 f8ce 	bl	800d0b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af24:	68f9      	ldr	r1, [r7, #12]
 800af26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800af28:	fb01 f303 	mul.w	r3, r1, r3
 800af2c:	441a      	add	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af48:	3b01      	subs	r3, #1
 800af4a:	68f9      	ldr	r1, [r7, #12]
 800af4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800af4e:	fb01 f303 	mul.w	r3, r1, r3
 800af52:	441a      	add	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	22ff      	movs	r2, #255	@ 0xff
 800af5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	22ff      	movs	r2, #255	@ 0xff
 800af64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d114      	bne.n	800af98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d01a      	beq.n	800afac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3310      	adds	r3, #16
 800af7a:	4618      	mov	r0, r3
 800af7c:	f001 f942 	bl	800c204 <xTaskRemoveFromEventList>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d012      	beq.n	800afac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af86:	4b0d      	ldr	r3, [pc, #52]	@ (800afbc <xQueueGenericReset+0xd0>)
 800af88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	e009      	b.n	800afac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3310      	adds	r3, #16
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7ff fef1 	bl	800ad84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3324      	adds	r3, #36	@ 0x24
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff feec 	bl	800ad84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800afac:	f002 f8b6 	bl	800d11c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800afb0:	2301      	movs	r3, #1
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	e000ed04 	.word	0xe000ed04

0800afc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08e      	sub	sp, #56	@ 0x38
 800afc4:	af02      	add	r7, sp, #8
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10b      	bne.n	800afec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afe6:	bf00      	nop
 800afe8:	bf00      	nop
 800afea:	e7fd      	b.n	800afe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10b      	bne.n	800b00a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <xQueueGenericCreateStatic+0x56>
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <xQueueGenericCreateStatic+0x5a>
 800b016:	2301      	movs	r3, #1
 800b018:	e000      	b.n	800b01c <xQueueGenericCreateStatic+0x5c>
 800b01a:	2300      	movs	r3, #0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10b      	bne.n	800b038 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	623b      	str	r3, [r7, #32]
}
 800b032:	bf00      	nop
 800b034:	bf00      	nop
 800b036:	e7fd      	b.n	800b034 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <xQueueGenericCreateStatic+0x84>
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d101      	bne.n	800b048 <xQueueGenericCreateStatic+0x88>
 800b044:	2301      	movs	r3, #1
 800b046:	e000      	b.n	800b04a <xQueueGenericCreateStatic+0x8a>
 800b048:	2300      	movs	r3, #0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10b      	bne.n	800b066 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	61fb      	str	r3, [r7, #28]
}
 800b060:	bf00      	nop
 800b062:	bf00      	nop
 800b064:	e7fd      	b.n	800b062 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b066:	2350      	movs	r3, #80	@ 0x50
 800b068:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2b50      	cmp	r3, #80	@ 0x50
 800b06e:	d00b      	beq.n	800b088 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	61bb      	str	r3, [r7, #24]
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	e7fd      	b.n	800b084 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b088:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00d      	beq.n	800b0b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b09c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f000 f805 	bl	800b0ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3730      	adds	r7, #48	@ 0x30
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	607a      	str	r2, [r7, #4]
 800b0c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d103      	bne.n	800b0d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	e002      	b.n	800b0dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	69b8      	ldr	r0, [r7, #24]
 800b0ec:	f7ff fefe 	bl	800aeec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	78fa      	ldrb	r2, [r7, #3]
 800b0f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0f8:	bf00      	nop
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b08e      	sub	sp, #56	@ 0x38
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b10e:	2300      	movs	r3, #0
 800b110:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10b      	bne.n	800b134 <xQueueGenericSend+0x34>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b12e:	bf00      	nop
 800b130:	bf00      	nop
 800b132:	e7fd      	b.n	800b130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d103      	bne.n	800b142 <xQueueGenericSend+0x42>
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <xQueueGenericSend+0x46>
 800b142:	2301      	movs	r3, #1
 800b144:	e000      	b.n	800b148 <xQueueGenericSend+0x48>
 800b146:	2300      	movs	r3, #0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10b      	bne.n	800b164 <xQueueGenericSend+0x64>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b15e:	bf00      	nop
 800b160:	bf00      	nop
 800b162:	e7fd      	b.n	800b160 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d103      	bne.n	800b172 <xQueueGenericSend+0x72>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d101      	bne.n	800b176 <xQueueGenericSend+0x76>
 800b172:	2301      	movs	r3, #1
 800b174:	e000      	b.n	800b178 <xQueueGenericSend+0x78>
 800b176:	2300      	movs	r3, #0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10b      	bne.n	800b194 <xQueueGenericSend+0x94>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	623b      	str	r3, [r7, #32]
}
 800b18e:	bf00      	nop
 800b190:	bf00      	nop
 800b192:	e7fd      	b.n	800b190 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b194:	f001 fa24 	bl	800c5e0 <xTaskGetSchedulerState>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <xQueueGenericSend+0xa4>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <xQueueGenericSend+0xa8>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e000      	b.n	800b1aa <xQueueGenericSend+0xaa>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10b      	bne.n	800b1c6 <xQueueGenericSend+0xc6>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	61fb      	str	r3, [r7, #28]
}
 800b1c0:	bf00      	nop
 800b1c2:	bf00      	nop
 800b1c4:	e7fd      	b.n	800b1c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1c6:	f001 ff77 	bl	800d0b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d302      	bcc.n	800b1dc <xQueueGenericSend+0xdc>
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d129      	bne.n	800b230 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	68b9      	ldr	r1, [r7, #8]
 800b1e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1e2:	f000 fa0f 	bl	800b604 <prvCopyDataToQueue>
 800b1e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d010      	beq.n	800b212 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	3324      	adds	r3, #36	@ 0x24
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f001 f805 	bl	800c204 <xTaskRemoveFromEventList>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d013      	beq.n	800b228 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b200:	4b3f      	ldr	r3, [pc, #252]	@ (800b300 <xQueueGenericSend+0x200>)
 800b202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	e00a      	b.n	800b228 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b214:	2b00      	cmp	r3, #0
 800b216:	d007      	beq.n	800b228 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b218:	4b39      	ldr	r3, [pc, #228]	@ (800b300 <xQueueGenericSend+0x200>)
 800b21a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b228:	f001 ff78 	bl	800d11c <vPortExitCritical>
				return pdPASS;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e063      	b.n	800b2f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d103      	bne.n	800b23e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b236:	f001 ff71 	bl	800d11c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b23a:	2300      	movs	r3, #0
 800b23c:	e05c      	b.n	800b2f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b240:	2b00      	cmp	r3, #0
 800b242:	d106      	bne.n	800b252 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b244:	f107 0314 	add.w	r3, r7, #20
 800b248:	4618      	mov	r0, r3
 800b24a:	f001 f867 	bl	800c31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b24e:	2301      	movs	r3, #1
 800b250:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b252:	f001 ff63 	bl	800d11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b256:	f000 fda7 	bl	800bda8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b25a:	f001 ff2d 	bl	800d0b8 <vPortEnterCritical>
 800b25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b264:	b25b      	sxtb	r3, r3
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b26a:	d103      	bne.n	800b274 <xQueueGenericSend+0x174>
 800b26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b27a:	b25b      	sxtb	r3, r3
 800b27c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b280:	d103      	bne.n	800b28a <xQueueGenericSend+0x18a>
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b28a:	f001 ff47 	bl	800d11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b28e:	1d3a      	adds	r2, r7, #4
 800b290:	f107 0314 	add.w	r3, r7, #20
 800b294:	4611      	mov	r1, r2
 800b296:	4618      	mov	r0, r3
 800b298:	f001 f856 	bl	800c348 <xTaskCheckForTimeOut>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d124      	bne.n	800b2ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b2a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2a4:	f000 faa6 	bl	800b7f4 <prvIsQueueFull>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d018      	beq.n	800b2e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b0:	3310      	adds	r3, #16
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 ff52 	bl	800c160 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2be:	f000 fa31 	bl	800b724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2c2:	f000 fd7f 	bl	800bdc4 <xTaskResumeAll>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f47f af7c 	bne.w	800b1c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b300 <xQueueGenericSend+0x200>)
 800b2d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	e772      	b.n	800b1c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2e2:	f000 fa1f 	bl	800b724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2e6:	f000 fd6d 	bl	800bdc4 <xTaskResumeAll>
 800b2ea:	e76c      	b.n	800b1c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2ee:	f000 fa19 	bl	800b724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2f2:	f000 fd67 	bl	800bdc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3738      	adds	r7, #56	@ 0x38
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	e000ed04 	.word	0xe000ed04

0800b304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b090      	sub	sp, #64	@ 0x40
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10b      	bne.n	800b334 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b32e:	bf00      	nop
 800b330:	bf00      	nop
 800b332:	e7fd      	b.n	800b330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d103      	bne.n	800b342 <xQueueGenericSendFromISR+0x3e>
 800b33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <xQueueGenericSendFromISR+0x42>
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <xQueueGenericSendFromISR+0x44>
 800b346:	2300      	movs	r3, #0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10b      	bne.n	800b364 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	e7fd      	b.n	800b360 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2b02      	cmp	r3, #2
 800b368:	d103      	bne.n	800b372 <xQueueGenericSendFromISR+0x6e>
 800b36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d101      	bne.n	800b376 <xQueueGenericSendFromISR+0x72>
 800b372:	2301      	movs	r3, #1
 800b374:	e000      	b.n	800b378 <xQueueGenericSendFromISR+0x74>
 800b376:	2300      	movs	r3, #0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10b      	bne.n	800b394 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	623b      	str	r3, [r7, #32]
}
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	e7fd      	b.n	800b390 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b394:	f001 ff70 	bl	800d278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b398:	f3ef 8211 	mrs	r2, BASEPRI
 800b39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	61fa      	str	r2, [r7, #28]
 800b3ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b3b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d302      	bcc.n	800b3c6 <xQueueGenericSendFromISR+0xc2>
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d12f      	bne.n	800b426 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	68b9      	ldr	r1, [r7, #8]
 800b3da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3dc:	f000 f912 	bl	800b604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3e8:	d112      	bne.n	800b410 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d016      	beq.n	800b420 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f4:	3324      	adds	r3, #36	@ 0x24
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 ff04 	bl	800c204 <xTaskRemoveFromEventList>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00e      	beq.n	800b420 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e007      	b.n	800b420 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b414:	3301      	adds	r3, #1
 800b416:	b2db      	uxtb	r3, r3
 800b418:	b25a      	sxtb	r2, r3
 800b41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b420:	2301      	movs	r3, #1
 800b422:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b424:	e001      	b.n	800b42a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b426:	2300      	movs	r3, #0
 800b428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b42a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3740      	adds	r7, #64	@ 0x40
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	@ 0x30
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b44c:	2300      	movs	r3, #0
 800b44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10b      	bne.n	800b472 <xQueueReceive+0x32>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	623b      	str	r3, [r7, #32]
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	e7fd      	b.n	800b46e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d103      	bne.n	800b480 <xQueueReceive+0x40>
 800b478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <xQueueReceive+0x44>
 800b480:	2301      	movs	r3, #1
 800b482:	e000      	b.n	800b486 <xQueueReceive+0x46>
 800b484:	2300      	movs	r3, #0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <xQueueReceive+0x62>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	61fb      	str	r3, [r7, #28]
}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	e7fd      	b.n	800b49e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4a2:	f001 f89d 	bl	800c5e0 <xTaskGetSchedulerState>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d102      	bne.n	800b4b2 <xQueueReceive+0x72>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d101      	bne.n	800b4b6 <xQueueReceive+0x76>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e000      	b.n	800b4b8 <xQueueReceive+0x78>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10b      	bne.n	800b4d4 <xQueueReceive+0x94>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	61bb      	str	r3, [r7, #24]
}
 800b4ce:	bf00      	nop
 800b4d0:	bf00      	nop
 800b4d2:	e7fd      	b.n	800b4d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4d4:	f001 fdf0 	bl	800d0b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d01f      	beq.n	800b524 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4e4:	68b9      	ldr	r1, [r7, #8]
 800b4e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4e8:	f000 f8f6 	bl	800b6d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ee:	1e5a      	subs	r2, r3, #1
 800b4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00f      	beq.n	800b51c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	3310      	adds	r3, #16
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fe7f 	bl	800c204 <xTaskRemoveFromEventList>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d007      	beq.n	800b51c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b50c:	4b3c      	ldr	r3, [pc, #240]	@ (800b600 <xQueueReceive+0x1c0>)
 800b50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b51c:	f001 fdfe 	bl	800d11c <vPortExitCritical>
				return pdPASS;
 800b520:	2301      	movs	r3, #1
 800b522:	e069      	b.n	800b5f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d103      	bne.n	800b532 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b52a:	f001 fdf7 	bl	800d11c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b52e:	2300      	movs	r3, #0
 800b530:	e062      	b.n	800b5f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b534:	2b00      	cmp	r3, #0
 800b536:	d106      	bne.n	800b546 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b538:	f107 0310 	add.w	r3, r7, #16
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 feed 	bl	800c31c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b542:	2301      	movs	r3, #1
 800b544:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b546:	f001 fde9 	bl	800d11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b54a:	f000 fc2d 	bl	800bda8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b54e:	f001 fdb3 	bl	800d0b8 <vPortEnterCritical>
 800b552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b558:	b25b      	sxtb	r3, r3
 800b55a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b55e:	d103      	bne.n	800b568 <xQueueReceive+0x128>
 800b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b562:	2200      	movs	r2, #0
 800b564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b56e:	b25b      	sxtb	r3, r3
 800b570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b574:	d103      	bne.n	800b57e <xQueueReceive+0x13e>
 800b576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b57e:	f001 fdcd 	bl	800d11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b582:	1d3a      	adds	r2, r7, #4
 800b584:	f107 0310 	add.w	r3, r7, #16
 800b588:	4611      	mov	r1, r2
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 fedc 	bl	800c348 <xTaskCheckForTimeOut>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d123      	bne.n	800b5de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b598:	f000 f916 	bl	800b7c8 <prvIsQueueEmpty>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d017      	beq.n	800b5d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a4:	3324      	adds	r3, #36	@ 0x24
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 fdd8 	bl	800c160 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5b2:	f000 f8b7 	bl	800b724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5b6:	f000 fc05 	bl	800bdc4 <xTaskResumeAll>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d189      	bne.n	800b4d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b600 <xQueueReceive+0x1c0>)
 800b5c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	e780      	b.n	800b4d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b5d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5d4:	f000 f8a6 	bl	800b724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5d8:	f000 fbf4 	bl	800bdc4 <xTaskResumeAll>
 800b5dc:	e77a      	b.n	800b4d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5e0:	f000 f8a0 	bl	800b724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5e4:	f000 fbee 	bl	800bdc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5ea:	f000 f8ed 	bl	800b7c8 <prvIsQueueEmpty>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	f43f af6f 	beq.w	800b4d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3730      	adds	r7, #48	@ 0x30
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	e000ed04 	.word	0xe000ed04

0800b604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b610:	2300      	movs	r3, #0
 800b612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10d      	bne.n	800b63e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d14d      	bne.n	800b6c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fff4 	bl	800c61c <xTaskPriorityDisinherit>
 800b634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	609a      	str	r2, [r3, #8]
 800b63c:	e043      	b.n	800b6c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d119      	bne.n	800b678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6858      	ldr	r0, [r3, #4]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b64c:	461a      	mov	r2, r3
 800b64e:	68b9      	ldr	r1, [r7, #8]
 800b650:	f00f fc0d 	bl	801ae6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b65c:	441a      	add	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d32b      	bcc.n	800b6c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	605a      	str	r2, [r3, #4]
 800b676:	e026      	b.n	800b6c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	68d8      	ldr	r0, [r3, #12]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b680:	461a      	mov	r2, r3
 800b682:	68b9      	ldr	r1, [r7, #8]
 800b684:	f00f fbf3 	bl	801ae6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68da      	ldr	r2, [r3, #12]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b690:	425b      	negs	r3, r3
 800b692:	441a      	add	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	68da      	ldr	r2, [r3, #12]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d207      	bcs.n	800b6b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	689a      	ldr	r2, [r3, #8]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ac:	425b      	negs	r3, r3
 800b6ae:	441a      	add	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d105      	bne.n	800b6c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d002      	beq.n	800b6c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	1c5a      	adds	r2, r3, #1
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b6ce:	697b      	ldr	r3, [r7, #20]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d018      	beq.n	800b71c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f2:	441a      	add	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	429a      	cmp	r2, r3
 800b702:	d303      	bcc.n	800b70c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	68d9      	ldr	r1, [r3, #12]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b714:	461a      	mov	r2, r3
 800b716:	6838      	ldr	r0, [r7, #0]
 800b718:	f00f fba9 	bl	801ae6e <memcpy>
	}
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b72c:	f001 fcc4 	bl	800d0b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b738:	e011      	b.n	800b75e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d012      	beq.n	800b768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3324      	adds	r3, #36	@ 0x24
 800b746:	4618      	mov	r0, r3
 800b748:	f000 fd5c 	bl	800c204 <xTaskRemoveFromEventList>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b752:	f000 fe5d 	bl	800c410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	3b01      	subs	r3, #1
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b762:	2b00      	cmp	r3, #0
 800b764:	dce9      	bgt.n	800b73a <prvUnlockQueue+0x16>
 800b766:	e000      	b.n	800b76a <prvUnlockQueue+0x46>
					break;
 800b768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	22ff      	movs	r2, #255	@ 0xff
 800b76e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b772:	f001 fcd3 	bl	800d11c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b776:	f001 fc9f 	bl	800d0b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b782:	e011      	b.n	800b7a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d012      	beq.n	800b7b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3310      	adds	r3, #16
 800b790:	4618      	mov	r0, r3
 800b792:	f000 fd37 	bl	800c204 <xTaskRemoveFromEventList>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b79c:	f000 fe38 	bl	800c410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dce9      	bgt.n	800b784 <prvUnlockQueue+0x60>
 800b7b0:	e000      	b.n	800b7b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	22ff      	movs	r2, #255	@ 0xff
 800b7b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b7bc:	f001 fcae 	bl	800d11c <vPortExitCritical>
}
 800b7c0:	bf00      	nop
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7d0:	f001 fc72 	bl	800d0b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	60fb      	str	r3, [r7, #12]
 800b7e0:	e001      	b.n	800b7e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7e6:	f001 fc99 	bl	800d11c <vPortExitCritical>

	return xReturn;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7fc:	f001 fc5c 	bl	800d0b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b808:	429a      	cmp	r2, r3
 800b80a:	d102      	bne.n	800b812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b80c:	2301      	movs	r3, #1
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	e001      	b.n	800b816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b812:	2300      	movs	r3, #0
 800b814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b816:	f001 fc81 	bl	800d11c <vPortExitCritical>

	return xReturn;
 800b81a:	68fb      	ldr	r3, [r7, #12]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]
 800b832:	e014      	b.n	800b85e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b834:	4a0f      	ldr	r2, [pc, #60]	@ (800b874 <vQueueAddToRegistry+0x50>)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10b      	bne.n	800b858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b840:	490c      	ldr	r1, [pc, #48]	@ (800b874 <vQueueAddToRegistry+0x50>)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b84a:	4a0a      	ldr	r2, [pc, #40]	@ (800b874 <vQueueAddToRegistry+0x50>)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	00db      	lsls	r3, r3, #3
 800b850:	4413      	add	r3, r2
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b856:	e006      	b.n	800b866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3301      	adds	r3, #1
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b07      	cmp	r3, #7
 800b862:	d9e7      	bls.n	800b834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b864:	bf00      	nop
 800b866:	bf00      	nop
 800b868:	3714      	adds	r7, #20
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	24005290 	.word	0x24005290

0800b878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b888:	f001 fc16 	bl	800d0b8 <vPortEnterCritical>
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b892:	b25b      	sxtb	r3, r3
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b898:	d103      	bne.n	800b8a2 <vQueueWaitForMessageRestricted+0x2a>
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8a8:	b25b      	sxtb	r3, r3
 800b8aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8ae:	d103      	bne.n	800b8b8 <vQueueWaitForMessageRestricted+0x40>
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8b8:	f001 fc30 	bl	800d11c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d106      	bne.n	800b8d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	3324      	adds	r3, #36	@ 0x24
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 fc6d 	bl	800c1ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b8d2:	6978      	ldr	r0, [r7, #20]
 800b8d4:	f7ff ff26 	bl	800b724 <prvUnlockQueue>
	}
 800b8d8:	bf00      	nop
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08e      	sub	sp, #56	@ 0x38
 800b8e4:	af04      	add	r7, sp, #16
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10b      	bne.n	800b90c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	623b      	str	r3, [r7, #32]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10b      	bne.n	800b92a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	61fb      	str	r3, [r7, #28]
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop
 800b928:	e7fd      	b.n	800b926 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b92a:	23a8      	movs	r3, #168	@ 0xa8
 800b92c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2ba8      	cmp	r3, #168	@ 0xa8
 800b932:	d00b      	beq.n	800b94c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	61bb      	str	r3, [r7, #24]
}
 800b946:	bf00      	nop
 800b948:	bf00      	nop
 800b94a:	e7fd      	b.n	800b948 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b94c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01e      	beq.n	800b992 <xTaskCreateStatic+0xb2>
 800b954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01b      	beq.n	800b992 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b962:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b966:	2202      	movs	r2, #2
 800b968:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b96c:	2300      	movs	r3, #0
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b972:	9302      	str	r3, [sp, #8]
 800b974:	f107 0314 	add.w	r3, r7, #20
 800b978:	9301      	str	r3, [sp, #4]
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 f851 	bl	800ba2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b98a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b98c:	f000 f8f6 	bl	800bb7c <prvAddNewTaskToReadyList>
 800b990:	e001      	b.n	800b996 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b996:	697b      	ldr	r3, [r7, #20]
	}
 800b998:	4618      	mov	r0, r3
 800b99a:	3728      	adds	r7, #40	@ 0x28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b08c      	sub	sp, #48	@ 0x30
 800b9a4:	af04      	add	r7, sp, #16
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9b0:	88fb      	ldrh	r3, [r7, #6]
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 fca1 	bl	800d2fc <pvPortMalloc>
 800b9ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00e      	beq.n	800b9e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9c2:	20a8      	movs	r0, #168	@ 0xa8
 800b9c4:	f001 fc9a 	bl	800d2fc <pvPortMalloc>
 800b9c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9d6:	e005      	b.n	800b9e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f001 fd5d 	bl	800d498 <vPortFree>
 800b9de:	e001      	b.n	800b9e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d017      	beq.n	800ba1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9f2:	88fa      	ldrh	r2, [r7, #6]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9303      	str	r3, [sp, #12]
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	68b9      	ldr	r1, [r7, #8]
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f80f 	bl	800ba2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba0e:	69f8      	ldr	r0, [r7, #28]
 800ba10:	f000 f8b4 	bl	800bb7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba14:	2301      	movs	r3, #1
 800ba16:	61bb      	str	r3, [r7, #24]
 800ba18:	e002      	b.n	800ba20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba20:	69bb      	ldr	r3, [r7, #24]
	}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3720      	adds	r7, #32
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	461a      	mov	r2, r3
 800ba44:	21a5      	movs	r1, #165	@ 0xa5
 800ba46:	f00f f8d9 	bl	801abfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ba54:	440b      	add	r3, r1
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	f023 0307 	bic.w	r3, r3, #7
 800ba62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	f003 0307 	and.w	r3, r3, #7
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00b      	beq.n	800ba86 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	617b      	str	r3, [r7, #20]
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	e7fd      	b.n	800ba82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01f      	beq.n	800bacc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61fb      	str	r3, [r7, #28]
 800ba90:	e012      	b.n	800bab8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	4413      	add	r3, r2
 800ba98:	7819      	ldrb	r1, [r3, #0]
 800ba9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	4413      	add	r3, r2
 800baa0:	3334      	adds	r3, #52	@ 0x34
 800baa2:	460a      	mov	r2, r1
 800baa4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	4413      	add	r3, r2
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d006      	beq.n	800bac0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	3301      	adds	r3, #1
 800bab6:	61fb      	str	r3, [r7, #28]
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	2b0f      	cmp	r3, #15
 800babc:	d9e9      	bls.n	800ba92 <prvInitialiseNewTask+0x66>
 800babe:	e000      	b.n	800bac2 <prvInitialiseNewTask+0x96>
			{
				break;
 800bac0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800baca:	e003      	b.n	800bad4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad6:	2b37      	cmp	r3, #55	@ 0x37
 800bad8:	d901      	bls.n	800bade <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bada:	2337      	movs	r3, #55	@ 0x37
 800badc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bae2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bae8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800baea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baec:	2200      	movs	r2, #0
 800baee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800baf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf2:	3304      	adds	r3, #4
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7ff f965 	bl	800adc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafc:	3318      	adds	r3, #24
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff f960 	bl	800adc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	3354      	adds	r3, #84	@ 0x54
 800bb2e:	224c      	movs	r2, #76	@ 0x4c
 800bb30:	2100      	movs	r1, #0
 800bb32:	4618      	mov	r0, r3
 800bb34:	f00f f862 	bl	801abfc <memset>
 800bb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3a:	4a0d      	ldr	r2, [pc, #52]	@ (800bb70 <prvInitialiseNewTask+0x144>)
 800bb3c:	659a      	str	r2, [r3, #88]	@ 0x58
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb40:	4a0c      	ldr	r2, [pc, #48]	@ (800bb74 <prvInitialiseNewTask+0x148>)
 800bb42:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb46:	4a0c      	ldr	r2, [pc, #48]	@ (800bb78 <prvInitialiseNewTask+0x14c>)
 800bb48:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	68f9      	ldr	r1, [r7, #12]
 800bb4e:	69b8      	ldr	r0, [r7, #24]
 800bb50:	f001 f982 	bl	800ce58 <pxPortInitialiseStack>
 800bb54:	4602      	mov	r2, r0
 800bb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb66:	bf00      	nop
 800bb68:	3720      	adds	r7, #32
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	2400e0a4 	.word	0x2400e0a4
 800bb74:	2400e10c 	.word	0x2400e10c
 800bb78:	2400e174 	.word	0x2400e174

0800bb7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb84:	f001 fa98 	bl	800d0b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb88:	4b2d      	ldr	r3, [pc, #180]	@ (800bc40 <prvAddNewTaskToReadyList+0xc4>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	4a2c      	ldr	r2, [pc, #176]	@ (800bc40 <prvAddNewTaskToReadyList+0xc4>)
 800bb90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb92:	4b2c      	ldr	r3, [pc, #176]	@ (800bc44 <prvAddNewTaskToReadyList+0xc8>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d109      	bne.n	800bbae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb9a:	4a2a      	ldr	r2, [pc, #168]	@ (800bc44 <prvAddNewTaskToReadyList+0xc8>)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bba0:	4b27      	ldr	r3, [pc, #156]	@ (800bc40 <prvAddNewTaskToReadyList+0xc4>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d110      	bne.n	800bbca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bba8:	f000 fc56 	bl	800c458 <prvInitialiseTaskLists>
 800bbac:	e00d      	b.n	800bbca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbae:	4b26      	ldr	r3, [pc, #152]	@ (800bc48 <prvAddNewTaskToReadyList+0xcc>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d109      	bne.n	800bbca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbb6:	4b23      	ldr	r3, [pc, #140]	@ (800bc44 <prvAddNewTaskToReadyList+0xc8>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d802      	bhi.n	800bbca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bbc4:	4a1f      	ldr	r2, [pc, #124]	@ (800bc44 <prvAddNewTaskToReadyList+0xc8>)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bbca:	4b20      	ldr	r3, [pc, #128]	@ (800bc4c <prvAddNewTaskToReadyList+0xd0>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	4a1e      	ldr	r2, [pc, #120]	@ (800bc4c <prvAddNewTaskToReadyList+0xd0>)
 800bbd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bbd4:	4b1d      	ldr	r3, [pc, #116]	@ (800bc4c <prvAddNewTaskToReadyList+0xd0>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe0:	4b1b      	ldr	r3, [pc, #108]	@ (800bc50 <prvAddNewTaskToReadyList+0xd4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d903      	bls.n	800bbf0 <prvAddNewTaskToReadyList+0x74>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbec:	4a18      	ldr	r2, [pc, #96]	@ (800bc50 <prvAddNewTaskToReadyList+0xd4>)
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	4413      	add	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4a15      	ldr	r2, [pc, #84]	@ (800bc54 <prvAddNewTaskToReadyList+0xd8>)
 800bbfe:	441a      	add	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3304      	adds	r3, #4
 800bc04:	4619      	mov	r1, r3
 800bc06:	4610      	mov	r0, r2
 800bc08:	f7ff f8e9 	bl	800adde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc0c:	f001 fa86 	bl	800d11c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc10:	4b0d      	ldr	r3, [pc, #52]	@ (800bc48 <prvAddNewTaskToReadyList+0xcc>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00e      	beq.n	800bc36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc18:	4b0a      	ldr	r3, [pc, #40]	@ (800bc44 <prvAddNewTaskToReadyList+0xc8>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d207      	bcs.n	800bc36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc26:	4b0c      	ldr	r3, [pc, #48]	@ (800bc58 <prvAddNewTaskToReadyList+0xdc>)
 800bc28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc36:	bf00      	nop
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	240057a4 	.word	0x240057a4
 800bc44:	240052d0 	.word	0x240052d0
 800bc48:	240057b0 	.word	0x240057b0
 800bc4c:	240057c0 	.word	0x240057c0
 800bc50:	240057ac 	.word	0x240057ac
 800bc54:	240052d4 	.word	0x240052d4
 800bc58:	e000ed04 	.word	0xe000ed04

0800bc5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc64:	2300      	movs	r3, #0
 800bc66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d018      	beq.n	800bca0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc6e:	4b14      	ldr	r3, [pc, #80]	@ (800bcc0 <vTaskDelay+0x64>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00b      	beq.n	800bc8e <vTaskDelay+0x32>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	60bb      	str	r3, [r7, #8]
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	e7fd      	b.n	800bc8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bc8e:	f000 f88b 	bl	800bda8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc92:	2100      	movs	r1, #0
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fd31 	bl	800c6fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc9a:	f000 f893 	bl	800bdc4 <xTaskResumeAll>
 800bc9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d107      	bne.n	800bcb6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bca6:	4b07      	ldr	r3, [pc, #28]	@ (800bcc4 <vTaskDelay+0x68>)
 800bca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcb6:	bf00      	nop
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	240057cc 	.word	0x240057cc
 800bcc4:	e000ed04 	.word	0xe000ed04

0800bcc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	@ 0x28
 800bccc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcd6:	463a      	mov	r2, r7
 800bcd8:	1d39      	adds	r1, r7, #4
 800bcda:	f107 0308 	add.w	r3, r7, #8
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff f81c 	bl	800ad1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	9202      	str	r2, [sp, #8]
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	2300      	movs	r3, #0
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	460a      	mov	r2, r1
 800bcf6:	4924      	ldr	r1, [pc, #144]	@ (800bd88 <vTaskStartScheduler+0xc0>)
 800bcf8:	4824      	ldr	r0, [pc, #144]	@ (800bd8c <vTaskStartScheduler+0xc4>)
 800bcfa:	f7ff fdf1 	bl	800b8e0 <xTaskCreateStatic>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	4a23      	ldr	r2, [pc, #140]	@ (800bd90 <vTaskStartScheduler+0xc8>)
 800bd02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd04:	4b22      	ldr	r3, [pc, #136]	@ (800bd90 <vTaskStartScheduler+0xc8>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	617b      	str	r3, [r7, #20]
 800bd10:	e001      	b.n	800bd16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd12:	2300      	movs	r3, #0
 800bd14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d102      	bne.n	800bd22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bd1c:	f000 fd42 	bl	800c7a4 <xTimerCreateTimerTask>
 800bd20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d11b      	bne.n	800bd60 <vTaskStartScheduler+0x98>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	613b      	str	r3, [r7, #16]
}
 800bd3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd3c:	4b15      	ldr	r3, [pc, #84]	@ (800bd94 <vTaskStartScheduler+0xcc>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3354      	adds	r3, #84	@ 0x54
 800bd42:	4a15      	ldr	r2, [pc, #84]	@ (800bd98 <vTaskStartScheduler+0xd0>)
 800bd44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd46:	4b15      	ldr	r3, [pc, #84]	@ (800bd9c <vTaskStartScheduler+0xd4>)
 800bd48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd4e:	4b14      	ldr	r3, [pc, #80]	@ (800bda0 <vTaskStartScheduler+0xd8>)
 800bd50:	2201      	movs	r2, #1
 800bd52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd54:	4b13      	ldr	r3, [pc, #76]	@ (800bda4 <vTaskStartScheduler+0xdc>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd5a:	f001 f909 	bl	800cf70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd5e:	e00f      	b.n	800bd80 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd66:	d10b      	bne.n	800bd80 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bd68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6c:	f383 8811 	msr	BASEPRI, r3
 800bd70:	f3bf 8f6f 	isb	sy
 800bd74:	f3bf 8f4f 	dsb	sy
 800bd78:	60fb      	str	r3, [r7, #12]
}
 800bd7a:	bf00      	nop
 800bd7c:	bf00      	nop
 800bd7e:	e7fd      	b.n	800bd7c <vTaskStartScheduler+0xb4>
}
 800bd80:	bf00      	nop
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	0801bb60 	.word	0x0801bb60
 800bd8c:	0800c429 	.word	0x0800c429
 800bd90:	240057c8 	.word	0x240057c8
 800bd94:	240052d0 	.word	0x240052d0
 800bd98:	240004c0 	.word	0x240004c0
 800bd9c:	240057c4 	.word	0x240057c4
 800bda0:	240057b0 	.word	0x240057b0
 800bda4:	240057a8 	.word	0x240057a8

0800bda8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bda8:	b480      	push	{r7}
 800bdaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bdac:	4b04      	ldr	r3, [pc, #16]	@ (800bdc0 <vTaskSuspendAll+0x18>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	4a03      	ldr	r2, [pc, #12]	@ (800bdc0 <vTaskSuspendAll+0x18>)
 800bdb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bdb6:	bf00      	nop
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr
 800bdc0:	240057cc 	.word	0x240057cc

0800bdc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bdd2:	4b42      	ldr	r3, [pc, #264]	@ (800bedc <xTaskResumeAll+0x118>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10b      	bne.n	800bdf2 <xTaskResumeAll+0x2e>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	603b      	str	r3, [r7, #0]
}
 800bdec:	bf00      	nop
 800bdee:	bf00      	nop
 800bdf0:	e7fd      	b.n	800bdee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdf2:	f001 f961 	bl	800d0b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdf6:	4b39      	ldr	r3, [pc, #228]	@ (800bedc <xTaskResumeAll+0x118>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	4a37      	ldr	r2, [pc, #220]	@ (800bedc <xTaskResumeAll+0x118>)
 800bdfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be00:	4b36      	ldr	r3, [pc, #216]	@ (800bedc <xTaskResumeAll+0x118>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d162      	bne.n	800bece <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be08:	4b35      	ldr	r3, [pc, #212]	@ (800bee0 <xTaskResumeAll+0x11c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d05e      	beq.n	800bece <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be10:	e02f      	b.n	800be72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be12:	4b34      	ldr	r3, [pc, #208]	@ (800bee4 <xTaskResumeAll+0x120>)
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	3318      	adds	r3, #24
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff f83a 	bl	800ae98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	3304      	adds	r3, #4
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff f835 	bl	800ae98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be32:	4b2d      	ldr	r3, [pc, #180]	@ (800bee8 <xTaskResumeAll+0x124>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	429a      	cmp	r2, r3
 800be38:	d903      	bls.n	800be42 <xTaskResumeAll+0x7e>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3e:	4a2a      	ldr	r2, [pc, #168]	@ (800bee8 <xTaskResumeAll+0x124>)
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4a27      	ldr	r2, [pc, #156]	@ (800beec <xTaskResumeAll+0x128>)
 800be50:	441a      	add	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3304      	adds	r3, #4
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7fe ffc0 	bl	800adde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be62:	4b23      	ldr	r3, [pc, #140]	@ (800bef0 <xTaskResumeAll+0x12c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be68:	429a      	cmp	r2, r3
 800be6a:	d302      	bcc.n	800be72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800be6c:	4b21      	ldr	r3, [pc, #132]	@ (800bef4 <xTaskResumeAll+0x130>)
 800be6e:	2201      	movs	r2, #1
 800be70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be72:	4b1c      	ldr	r3, [pc, #112]	@ (800bee4 <xTaskResumeAll+0x120>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1cb      	bne.n	800be12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be80:	f000 fb8e 	bl	800c5a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be84:	4b1c      	ldr	r3, [pc, #112]	@ (800bef8 <xTaskResumeAll+0x134>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d010      	beq.n	800beb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be90:	f000 f846 	bl	800bf20 <xTaskIncrementTick>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800be9a:	4b16      	ldr	r3, [pc, #88]	@ (800bef4 <xTaskResumeAll+0x130>)
 800be9c:	2201      	movs	r2, #1
 800be9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	3b01      	subs	r3, #1
 800bea4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1f1      	bne.n	800be90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800beac:	4b12      	ldr	r3, [pc, #72]	@ (800bef8 <xTaskResumeAll+0x134>)
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800beb2:	4b10      	ldr	r3, [pc, #64]	@ (800bef4 <xTaskResumeAll+0x130>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d009      	beq.n	800bece <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800beba:	2301      	movs	r3, #1
 800bebc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bebe:	4b0f      	ldr	r3, [pc, #60]	@ (800befc <xTaskResumeAll+0x138>)
 800bec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bece:	f001 f925 	bl	800d11c <vPortExitCritical>

	return xAlreadyYielded;
 800bed2:	68bb      	ldr	r3, [r7, #8]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	240057cc 	.word	0x240057cc
 800bee0:	240057a4 	.word	0x240057a4
 800bee4:	24005764 	.word	0x24005764
 800bee8:	240057ac 	.word	0x240057ac
 800beec:	240052d4 	.word	0x240052d4
 800bef0:	240052d0 	.word	0x240052d0
 800bef4:	240057b8 	.word	0x240057b8
 800bef8:	240057b4 	.word	0x240057b4
 800befc:	e000ed04 	.word	0xe000ed04

0800bf00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf06:	4b05      	ldr	r3, [pc, #20]	@ (800bf1c <xTaskGetTickCount+0x1c>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf0c:	687b      	ldr	r3, [r7, #4]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	240057a8 	.word	0x240057a8

0800bf20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf2a:	4b4f      	ldr	r3, [pc, #316]	@ (800c068 <xTaskIncrementTick+0x148>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f040 8090 	bne.w	800c054 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf34:	4b4d      	ldr	r3, [pc, #308]	@ (800c06c <xTaskIncrementTick+0x14c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf3c:	4a4b      	ldr	r2, [pc, #300]	@ (800c06c <xTaskIncrementTick+0x14c>)
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d121      	bne.n	800bf8c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf48:	4b49      	ldr	r3, [pc, #292]	@ (800c070 <xTaskIncrementTick+0x150>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00b      	beq.n	800bf6a <xTaskIncrementTick+0x4a>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	603b      	str	r3, [r7, #0]
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop
 800bf68:	e7fd      	b.n	800bf66 <xTaskIncrementTick+0x46>
 800bf6a:	4b41      	ldr	r3, [pc, #260]	@ (800c070 <xTaskIncrementTick+0x150>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	4b40      	ldr	r3, [pc, #256]	@ (800c074 <xTaskIncrementTick+0x154>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a3e      	ldr	r2, [pc, #248]	@ (800c070 <xTaskIncrementTick+0x150>)
 800bf76:	6013      	str	r3, [r2, #0]
 800bf78:	4a3e      	ldr	r2, [pc, #248]	@ (800c074 <xTaskIncrementTick+0x154>)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	4b3e      	ldr	r3, [pc, #248]	@ (800c078 <xTaskIncrementTick+0x158>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	4a3c      	ldr	r2, [pc, #240]	@ (800c078 <xTaskIncrementTick+0x158>)
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	f000 fb0a 	bl	800c5a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf8c:	4b3b      	ldr	r3, [pc, #236]	@ (800c07c <xTaskIncrementTick+0x15c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d349      	bcc.n	800c02a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf96:	4b36      	ldr	r3, [pc, #216]	@ (800c070 <xTaskIncrementTick+0x150>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfa0:	4b36      	ldr	r3, [pc, #216]	@ (800c07c <xTaskIncrementTick+0x15c>)
 800bfa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfa6:	601a      	str	r2, [r3, #0]
					break;
 800bfa8:	e03f      	b.n	800c02a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfaa:	4b31      	ldr	r3, [pc, #196]	@ (800c070 <xTaskIncrementTick+0x150>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	68db      	ldr	r3, [r3, #12]
 800bfb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d203      	bcs.n	800bfca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bfc2:	4a2e      	ldr	r2, [pc, #184]	@ (800c07c <xTaskIncrementTick+0x15c>)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bfc8:	e02f      	b.n	800c02a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	3304      	adds	r3, #4
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fe ff62 	bl	800ae98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d004      	beq.n	800bfe6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	3318      	adds	r3, #24
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe ff59 	bl	800ae98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfea:	4b25      	ldr	r3, [pc, #148]	@ (800c080 <xTaskIncrementTick+0x160>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d903      	bls.n	800bffa <xTaskIncrementTick+0xda>
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff6:	4a22      	ldr	r2, [pc, #136]	@ (800c080 <xTaskIncrementTick+0x160>)
 800bff8:	6013      	str	r3, [r2, #0]
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bffe:	4613      	mov	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4a1f      	ldr	r2, [pc, #124]	@ (800c084 <xTaskIncrementTick+0x164>)
 800c008:	441a      	add	r2, r3
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	3304      	adds	r3, #4
 800c00e:	4619      	mov	r1, r3
 800c010:	4610      	mov	r0, r2
 800c012:	f7fe fee4 	bl	800adde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c01a:	4b1b      	ldr	r3, [pc, #108]	@ (800c088 <xTaskIncrementTick+0x168>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c020:	429a      	cmp	r2, r3
 800c022:	d3b8      	bcc.n	800bf96 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c024:	2301      	movs	r3, #1
 800c026:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c028:	e7b5      	b.n	800bf96 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c02a:	4b17      	ldr	r3, [pc, #92]	@ (800c088 <xTaskIncrementTick+0x168>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c030:	4914      	ldr	r1, [pc, #80]	@ (800c084 <xTaskIncrementTick+0x164>)
 800c032:	4613      	mov	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	440b      	add	r3, r1
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d901      	bls.n	800c046 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c042:	2301      	movs	r3, #1
 800c044:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c046:	4b11      	ldr	r3, [pc, #68]	@ (800c08c <xTaskIncrementTick+0x16c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d007      	beq.n	800c05e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c04e:	2301      	movs	r3, #1
 800c050:	617b      	str	r3, [r7, #20]
 800c052:	e004      	b.n	800c05e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c054:	4b0e      	ldr	r3, [pc, #56]	@ (800c090 <xTaskIncrementTick+0x170>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	3301      	adds	r3, #1
 800c05a:	4a0d      	ldr	r2, [pc, #52]	@ (800c090 <xTaskIncrementTick+0x170>)
 800c05c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c05e:	697b      	ldr	r3, [r7, #20]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3718      	adds	r7, #24
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	240057cc 	.word	0x240057cc
 800c06c:	240057a8 	.word	0x240057a8
 800c070:	2400575c 	.word	0x2400575c
 800c074:	24005760 	.word	0x24005760
 800c078:	240057bc 	.word	0x240057bc
 800c07c:	240057c4 	.word	0x240057c4
 800c080:	240057ac 	.word	0x240057ac
 800c084:	240052d4 	.word	0x240052d4
 800c088:	240052d0 	.word	0x240052d0
 800c08c:	240057b8 	.word	0x240057b8
 800c090:	240057b4 	.word	0x240057b4

0800c094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c09a:	4b2b      	ldr	r3, [pc, #172]	@ (800c148 <vTaskSwitchContext+0xb4>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800c14c <vTaskSwitchContext+0xb8>)
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0a8:	e047      	b.n	800c13a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c0aa:	4b28      	ldr	r3, [pc, #160]	@ (800c14c <vTaskSwitchContext+0xb8>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0b0:	4b27      	ldr	r3, [pc, #156]	@ (800c150 <vTaskSwitchContext+0xbc>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	60fb      	str	r3, [r7, #12]
 800c0b6:	e011      	b.n	800c0dc <vTaskSwitchContext+0x48>
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10b      	bne.n	800c0d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	607b      	str	r3, [r7, #4]
}
 800c0d0:	bf00      	nop
 800c0d2:	bf00      	nop
 800c0d4:	e7fd      	b.n	800c0d2 <vTaskSwitchContext+0x3e>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	491d      	ldr	r1, [pc, #116]	@ (800c154 <vTaskSwitchContext+0xc0>)
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4413      	add	r3, r2
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	440b      	add	r3, r1
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0e3      	beq.n	800c0b8 <vTaskSwitchContext+0x24>
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4a16      	ldr	r2, [pc, #88]	@ (800c154 <vTaskSwitchContext+0xc0>)
 800c0fc:	4413      	add	r3, r2
 800c0fe:	60bb      	str	r3, [r7, #8]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	605a      	str	r2, [r3, #4]
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	685a      	ldr	r2, [r3, #4]
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	3308      	adds	r3, #8
 800c112:	429a      	cmp	r2, r3
 800c114:	d104      	bne.n	800c120 <vTaskSwitchContext+0x8c>
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	605a      	str	r2, [r3, #4]
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	4a0c      	ldr	r2, [pc, #48]	@ (800c158 <vTaskSwitchContext+0xc4>)
 800c128:	6013      	str	r3, [r2, #0]
 800c12a:	4a09      	ldr	r2, [pc, #36]	@ (800c150 <vTaskSwitchContext+0xbc>)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c130:	4b09      	ldr	r3, [pc, #36]	@ (800c158 <vTaskSwitchContext+0xc4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3354      	adds	r3, #84	@ 0x54
 800c136:	4a09      	ldr	r2, [pc, #36]	@ (800c15c <vTaskSwitchContext+0xc8>)
 800c138:	6013      	str	r3, [r2, #0]
}
 800c13a:	bf00      	nop
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	240057cc 	.word	0x240057cc
 800c14c:	240057b8 	.word	0x240057b8
 800c150:	240057ac 	.word	0x240057ac
 800c154:	240052d4 	.word	0x240052d4
 800c158:	240052d0 	.word	0x240052d0
 800c15c:	240004c0 	.word	0x240004c0

0800c160 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10b      	bne.n	800c188 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60fb      	str	r3, [r7, #12]
}
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	e7fd      	b.n	800c184 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c188:	4b07      	ldr	r3, [pc, #28]	@ (800c1a8 <vTaskPlaceOnEventList+0x48>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3318      	adds	r3, #24
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7fe fe48 	bl	800ae26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c196:	2101      	movs	r1, #1
 800c198:	6838      	ldr	r0, [r7, #0]
 800c19a:	f000 faaf 	bl	800c6fc <prvAddCurrentTaskToDelayedList>
}
 800c19e:	bf00      	nop
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	240052d0 	.word	0x240052d0

0800c1ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10b      	bne.n	800c1d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	617b      	str	r3, [r7, #20]
}
 800c1d0:	bf00      	nop
 800c1d2:	bf00      	nop
 800c1d4:	e7fd      	b.n	800c1d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c200 <vTaskPlaceOnEventListRestricted+0x54>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3318      	adds	r3, #24
 800c1dc:	4619      	mov	r1, r3
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f7fe fdfd 	bl	800adde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d002      	beq.n	800c1f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c1ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c1f0:	6879      	ldr	r1, [r7, #4]
 800c1f2:	68b8      	ldr	r0, [r7, #8]
 800c1f4:	f000 fa82 	bl	800c6fc <prvAddCurrentTaskToDelayedList>
	}
 800c1f8:	bf00      	nop
 800c1fa:	3718      	adds	r7, #24
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	240052d0 	.word	0x240052d0

0800c204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10b      	bne.n	800c232 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	60fb      	str	r3, [r7, #12]
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	e7fd      	b.n	800c22e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	3318      	adds	r3, #24
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fe2e 	bl	800ae98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c23c:	4b1d      	ldr	r3, [pc, #116]	@ (800c2b4 <xTaskRemoveFromEventList+0xb0>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d11d      	bne.n	800c280 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	3304      	adds	r3, #4
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fe fe25 	bl	800ae98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c252:	4b19      	ldr	r3, [pc, #100]	@ (800c2b8 <xTaskRemoveFromEventList+0xb4>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	429a      	cmp	r2, r3
 800c258:	d903      	bls.n	800c262 <xTaskRemoveFromEventList+0x5e>
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25e:	4a16      	ldr	r2, [pc, #88]	@ (800c2b8 <xTaskRemoveFromEventList+0xb4>)
 800c260:	6013      	str	r3, [r2, #0]
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c266:	4613      	mov	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4413      	add	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4a13      	ldr	r2, [pc, #76]	@ (800c2bc <xTaskRemoveFromEventList+0xb8>)
 800c270:	441a      	add	r2, r3
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	3304      	adds	r3, #4
 800c276:	4619      	mov	r1, r3
 800c278:	4610      	mov	r0, r2
 800c27a:	f7fe fdb0 	bl	800adde <vListInsertEnd>
 800c27e:	e005      	b.n	800c28c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	3318      	adds	r3, #24
 800c284:	4619      	mov	r1, r3
 800c286:	480e      	ldr	r0, [pc, #56]	@ (800c2c0 <xTaskRemoveFromEventList+0xbc>)
 800c288:	f7fe fda9 	bl	800adde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c290:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c4 <xTaskRemoveFromEventList+0xc0>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c296:	429a      	cmp	r2, r3
 800c298:	d905      	bls.n	800c2a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c29a:	2301      	movs	r3, #1
 800c29c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c29e:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c8 <xTaskRemoveFromEventList+0xc4>)
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	e001      	b.n	800c2aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2aa:	697b      	ldr	r3, [r7, #20]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	240057cc 	.word	0x240057cc
 800c2b8:	240057ac 	.word	0x240057ac
 800c2bc:	240052d4 	.word	0x240052d4
 800c2c0:	24005764 	.word	0x24005764
 800c2c4:	240052d0 	.word	0x240052d0
 800c2c8:	240057b8 	.word	0x240057b8

0800c2cc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10b      	bne.n	800c2f2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	60fb      	str	r3, [r7, #12]
}
 800c2ec:	bf00      	nop
 800c2ee:	bf00      	nop
 800c2f0:	e7fd      	b.n	800c2ee <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c2f2:	f000 fee1 	bl	800d0b8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2f6:	4b07      	ldr	r3, [pc, #28]	@ (800c314 <vTaskSetTimeOutState+0x48>)
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c2fe:	4b06      	ldr	r3, [pc, #24]	@ (800c318 <vTaskSetTimeOutState+0x4c>)
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c306:	f000 ff09 	bl	800d11c <vPortExitCritical>
}
 800c30a:	bf00      	nop
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	240057bc 	.word	0x240057bc
 800c318:	240057a8 	.word	0x240057a8

0800c31c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c324:	4b06      	ldr	r3, [pc, #24]	@ (800c340 <vTaskInternalSetTimeOutState+0x24>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c32c:	4b05      	ldr	r3, [pc, #20]	@ (800c344 <vTaskInternalSetTimeOutState+0x28>)
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	605a      	str	r2, [r3, #4]
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	240057bc 	.word	0x240057bc
 800c344:	240057a8 	.word	0x240057a8

0800c348 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10b      	bne.n	800c370 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	613b      	str	r3, [r7, #16]
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	e7fd      	b.n	800c36c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10b      	bne.n	800c38e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	60fb      	str	r3, [r7, #12]
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	e7fd      	b.n	800c38a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c38e:	f000 fe93 	bl	800d0b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c392:	4b1d      	ldr	r3, [pc, #116]	@ (800c408 <xTaskCheckForTimeOut+0xc0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	69ba      	ldr	r2, [r7, #24]
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3aa:	d102      	bne.n	800c3b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	61fb      	str	r3, [r7, #28]
 800c3b0:	e023      	b.n	800c3fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	4b15      	ldr	r3, [pc, #84]	@ (800c40c <xTaskCheckForTimeOut+0xc4>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d007      	beq.n	800c3ce <xTaskCheckForTimeOut+0x86>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	69ba      	ldr	r2, [r7, #24]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d302      	bcc.n	800c3ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	61fb      	str	r3, [r7, #28]
 800c3cc:	e015      	b.n	800c3fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d20b      	bcs.n	800c3f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	1ad2      	subs	r2, r2, r3
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff ff99 	bl	800c31c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	61fb      	str	r3, [r7, #28]
 800c3ee:	e004      	b.n	800c3fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c3fa:	f000 fe8f 	bl	800d11c <vPortExitCritical>

	return xReturn;
 800c3fe:	69fb      	ldr	r3, [r7, #28]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3720      	adds	r7, #32
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	240057a8 	.word	0x240057a8
 800c40c:	240057bc 	.word	0x240057bc

0800c410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c410:	b480      	push	{r7}
 800c412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c414:	4b03      	ldr	r3, [pc, #12]	@ (800c424 <vTaskMissedYield+0x14>)
 800c416:	2201      	movs	r2, #1
 800c418:	601a      	str	r2, [r3, #0]
}
 800c41a:	bf00      	nop
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	240057b8 	.word	0x240057b8

0800c428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c430:	f000 f852 	bl	800c4d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c434:	4b06      	ldr	r3, [pc, #24]	@ (800c450 <prvIdleTask+0x28>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d9f9      	bls.n	800c430 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c43c:	4b05      	ldr	r3, [pc, #20]	@ (800c454 <prvIdleTask+0x2c>)
 800c43e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c44c:	e7f0      	b.n	800c430 <prvIdleTask+0x8>
 800c44e:	bf00      	nop
 800c450:	240052d4 	.word	0x240052d4
 800c454:	e000ed04 	.word	0xe000ed04

0800c458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c45e:	2300      	movs	r3, #0
 800c460:	607b      	str	r3, [r7, #4]
 800c462:	e00c      	b.n	800c47e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	4613      	mov	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4a12      	ldr	r2, [pc, #72]	@ (800c4b8 <prvInitialiseTaskLists+0x60>)
 800c470:	4413      	add	r3, r2
 800c472:	4618      	mov	r0, r3
 800c474:	f7fe fc86 	bl	800ad84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3301      	adds	r3, #1
 800c47c:	607b      	str	r3, [r7, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2b37      	cmp	r3, #55	@ 0x37
 800c482:	d9ef      	bls.n	800c464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c484:	480d      	ldr	r0, [pc, #52]	@ (800c4bc <prvInitialiseTaskLists+0x64>)
 800c486:	f7fe fc7d 	bl	800ad84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c48a:	480d      	ldr	r0, [pc, #52]	@ (800c4c0 <prvInitialiseTaskLists+0x68>)
 800c48c:	f7fe fc7a 	bl	800ad84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c490:	480c      	ldr	r0, [pc, #48]	@ (800c4c4 <prvInitialiseTaskLists+0x6c>)
 800c492:	f7fe fc77 	bl	800ad84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c496:	480c      	ldr	r0, [pc, #48]	@ (800c4c8 <prvInitialiseTaskLists+0x70>)
 800c498:	f7fe fc74 	bl	800ad84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c49c:	480b      	ldr	r0, [pc, #44]	@ (800c4cc <prvInitialiseTaskLists+0x74>)
 800c49e:	f7fe fc71 	bl	800ad84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c4d0 <prvInitialiseTaskLists+0x78>)
 800c4a4:	4a05      	ldr	r2, [pc, #20]	@ (800c4bc <prvInitialiseTaskLists+0x64>)
 800c4a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c4d4 <prvInitialiseTaskLists+0x7c>)
 800c4aa:	4a05      	ldr	r2, [pc, #20]	@ (800c4c0 <prvInitialiseTaskLists+0x68>)
 800c4ac:	601a      	str	r2, [r3, #0]
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	240052d4 	.word	0x240052d4
 800c4bc:	24005734 	.word	0x24005734
 800c4c0:	24005748 	.word	0x24005748
 800c4c4:	24005764 	.word	0x24005764
 800c4c8:	24005778 	.word	0x24005778
 800c4cc:	24005790 	.word	0x24005790
 800c4d0:	2400575c 	.word	0x2400575c
 800c4d4:	24005760 	.word	0x24005760

0800c4d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4de:	e019      	b.n	800c514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c4e0:	f000 fdea 	bl	800d0b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4e4:	4b10      	ldr	r3, [pc, #64]	@ (800c528 <prvCheckTasksWaitingTermination+0x50>)
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe fcd1 	bl	800ae98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c52c <prvCheckTasksWaitingTermination+0x54>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	4a0b      	ldr	r2, [pc, #44]	@ (800c52c <prvCheckTasksWaitingTermination+0x54>)
 800c4fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c500:	4b0b      	ldr	r3, [pc, #44]	@ (800c530 <prvCheckTasksWaitingTermination+0x58>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3b01      	subs	r3, #1
 800c506:	4a0a      	ldr	r2, [pc, #40]	@ (800c530 <prvCheckTasksWaitingTermination+0x58>)
 800c508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c50a:	f000 fe07 	bl	800d11c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f810 	bl	800c534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c514:	4b06      	ldr	r3, [pc, #24]	@ (800c530 <prvCheckTasksWaitingTermination+0x58>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e1      	bne.n	800c4e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c51c:	bf00      	nop
 800c51e:	bf00      	nop
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	24005778 	.word	0x24005778
 800c52c:	240057a4 	.word	0x240057a4
 800c530:	2400578c 	.word	0x2400578c

0800c534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3354      	adds	r3, #84	@ 0x54
 800c540:	4618      	mov	r0, r3
 800c542:	f00e fbbb 	bl	801acbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d108      	bne.n	800c562 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c554:	4618      	mov	r0, r3
 800c556:	f000 ff9f 	bl	800d498 <vPortFree>
				vPortFree( pxTCB );
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 ff9c 	bl	800d498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c560:	e019      	b.n	800c596 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d103      	bne.n	800c574 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 ff93 	bl	800d498 <vPortFree>
	}
 800c572:	e010      	b.n	800c596 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d00b      	beq.n	800c596 <prvDeleteTCB+0x62>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	60fb      	str	r3, [r7, #12]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <prvDeleteTCB+0x5e>
	}
 800c596:	bf00      	nop
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
	...

0800c5a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d8 <prvResetNextTaskUnblockTime+0x38>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d104      	bne.n	800c5ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5dc <prvResetNextTaskUnblockTime+0x3c>)
 800c5b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c5b8:	e008      	b.n	800c5cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5ba:	4b07      	ldr	r3, [pc, #28]	@ (800c5d8 <prvResetNextTaskUnblockTime+0x38>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	4a04      	ldr	r2, [pc, #16]	@ (800c5dc <prvResetNextTaskUnblockTime+0x3c>)
 800c5ca:	6013      	str	r3, [r2, #0]
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	2400575c 	.word	0x2400575c
 800c5dc:	240057c4 	.word	0x240057c4

0800c5e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c614 <xTaskGetSchedulerState+0x34>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d102      	bne.n	800c5f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	607b      	str	r3, [r7, #4]
 800c5f2:	e008      	b.n	800c606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5f4:	4b08      	ldr	r3, [pc, #32]	@ (800c618 <xTaskGetSchedulerState+0x38>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d102      	bne.n	800c602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	607b      	str	r3, [r7, #4]
 800c600:	e001      	b.n	800c606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c602:	2300      	movs	r3, #0
 800c604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c606:	687b      	ldr	r3, [r7, #4]
	}
 800c608:	4618      	mov	r0, r3
 800c60a:	370c      	adds	r7, #12
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr
 800c614:	240057b0 	.word	0x240057b0
 800c618:	240057cc 	.word	0x240057cc

0800c61c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c628:	2300      	movs	r3, #0
 800c62a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d058      	beq.n	800c6e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c632:	4b2f      	ldr	r3, [pc, #188]	@ (800c6f0 <xTaskPriorityDisinherit+0xd4>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d00b      	beq.n	800c654 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	60fb      	str	r3, [r7, #12]
}
 800c64e:	bf00      	nop
 800c650:	bf00      	nop
 800c652:	e7fd      	b.n	800c650 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10b      	bne.n	800c674 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	60bb      	str	r3, [r7, #8]
}
 800c66e:	bf00      	nop
 800c670:	bf00      	nop
 800c672:	e7fd      	b.n	800c670 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c678:	1e5a      	subs	r2, r3, #1
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c686:	429a      	cmp	r2, r3
 800c688:	d02c      	beq.n	800c6e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d128      	bne.n	800c6e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	3304      	adds	r3, #4
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fbfe 	bl	800ae98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c6f4 <xTaskPriorityDisinherit+0xd8>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d903      	bls.n	800c6c4 <xTaskPriorityDisinherit+0xa8>
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c0:	4a0c      	ldr	r2, [pc, #48]	@ (800c6f4 <xTaskPriorityDisinherit+0xd8>)
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4a09      	ldr	r2, [pc, #36]	@ (800c6f8 <xTaskPriorityDisinherit+0xdc>)
 800c6d2:	441a      	add	r2, r3
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	4619      	mov	r1, r3
 800c6da:	4610      	mov	r0, r2
 800c6dc:	f7fe fb7f 	bl	800adde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6e4:	697b      	ldr	r3, [r7, #20]
	}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	240052d0 	.word	0x240052d0
 800c6f4:	240057ac 	.word	0x240057ac
 800c6f8:	240052d4 	.word	0x240052d4

0800c6fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c706:	4b21      	ldr	r3, [pc, #132]	@ (800c78c <prvAddCurrentTaskToDelayedList+0x90>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c70c:	4b20      	ldr	r3, [pc, #128]	@ (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3304      	adds	r3, #4
 800c712:	4618      	mov	r0, r3
 800c714:	f7fe fbc0 	bl	800ae98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c71e:	d10a      	bne.n	800c736 <prvAddCurrentTaskToDelayedList+0x3a>
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d007      	beq.n	800c736 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c726:	4b1a      	ldr	r3, [pc, #104]	@ (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3304      	adds	r3, #4
 800c72c:	4619      	mov	r1, r3
 800c72e:	4819      	ldr	r0, [pc, #100]	@ (800c794 <prvAddCurrentTaskToDelayedList+0x98>)
 800c730:	f7fe fb55 	bl	800adde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c734:	e026      	b.n	800c784 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4413      	add	r3, r2
 800c73c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c73e:	4b14      	ldr	r3, [pc, #80]	@ (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c746:	68ba      	ldr	r2, [r7, #8]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d209      	bcs.n	800c762 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c74e:	4b12      	ldr	r3, [pc, #72]	@ (800c798 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	4b0f      	ldr	r3, [pc, #60]	@ (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3304      	adds	r3, #4
 800c758:	4619      	mov	r1, r3
 800c75a:	4610      	mov	r0, r2
 800c75c:	f7fe fb63 	bl	800ae26 <vListInsert>
}
 800c760:	e010      	b.n	800c784 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c762:	4b0e      	ldr	r3, [pc, #56]	@ (800c79c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	4b0a      	ldr	r3, [pc, #40]	@ (800c790 <prvAddCurrentTaskToDelayedList+0x94>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3304      	adds	r3, #4
 800c76c:	4619      	mov	r1, r3
 800c76e:	4610      	mov	r0, r2
 800c770:	f7fe fb59 	bl	800ae26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c774:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d202      	bcs.n	800c784 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c77e:	4a08      	ldr	r2, [pc, #32]	@ (800c7a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	6013      	str	r3, [r2, #0]
}
 800c784:	bf00      	nop
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	240057a8 	.word	0x240057a8
 800c790:	240052d0 	.word	0x240052d0
 800c794:	24005790 	.word	0x24005790
 800c798:	24005760 	.word	0x24005760
 800c79c:	2400575c 	.word	0x2400575c
 800c7a0:	240057c4 	.word	0x240057c4

0800c7a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08a      	sub	sp, #40	@ 0x28
 800c7a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c7ae:	f000 fb13 	bl	800cdd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800c828 <xTimerCreateTimerTask+0x84>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d021      	beq.n	800c7fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c7c2:	1d3a      	adds	r2, r7, #4
 800c7c4:	f107 0108 	add.w	r1, r7, #8
 800c7c8:	f107 030c 	add.w	r3, r7, #12
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fe fabf 	bl	800ad50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c7d2:	6879      	ldr	r1, [r7, #4]
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	9202      	str	r2, [sp, #8]
 800c7da:	9301      	str	r3, [sp, #4]
 800c7dc:	2302      	movs	r3, #2
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	460a      	mov	r2, r1
 800c7e4:	4911      	ldr	r1, [pc, #68]	@ (800c82c <xTimerCreateTimerTask+0x88>)
 800c7e6:	4812      	ldr	r0, [pc, #72]	@ (800c830 <xTimerCreateTimerTask+0x8c>)
 800c7e8:	f7ff f87a 	bl	800b8e0 <xTaskCreateStatic>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	4a11      	ldr	r2, [pc, #68]	@ (800c834 <xTimerCreateTimerTask+0x90>)
 800c7f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c7f2:	4b10      	ldr	r3, [pc, #64]	@ (800c834 <xTimerCreateTimerTask+0x90>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10b      	bne.n	800c81c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	613b      	str	r3, [r7, #16]
}
 800c816:	bf00      	nop
 800c818:	bf00      	nop
 800c81a:	e7fd      	b.n	800c818 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c81c:	697b      	ldr	r3, [r7, #20]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	24005800 	.word	0x24005800
 800c82c:	0801bb68 	.word	0x0801bb68
 800c830:	0800c971 	.word	0x0800c971
 800c834:	24005804 	.word	0x24005804

0800c838 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	@ 0x28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
 800c844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c846:	2300      	movs	r3, #0
 800c848:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10b      	bne.n	800c868 <xTimerGenericCommand+0x30>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	623b      	str	r3, [r7, #32]
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	e7fd      	b.n	800c864 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c868:	4b19      	ldr	r3, [pc, #100]	@ (800c8d0 <xTimerGenericCommand+0x98>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d02a      	beq.n	800c8c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	2b05      	cmp	r3, #5
 800c880:	dc18      	bgt.n	800c8b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c882:	f7ff fead 	bl	800c5e0 <xTaskGetSchedulerState>
 800c886:	4603      	mov	r3, r0
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d109      	bne.n	800c8a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c88c:	4b10      	ldr	r3, [pc, #64]	@ (800c8d0 <xTimerGenericCommand+0x98>)
 800c88e:	6818      	ldr	r0, [r3, #0]
 800c890:	f107 0110 	add.w	r1, r7, #16
 800c894:	2300      	movs	r3, #0
 800c896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c898:	f7fe fc32 	bl	800b100 <xQueueGenericSend>
 800c89c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c89e:	e012      	b.n	800c8c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d0 <xTimerGenericCommand+0x98>)
 800c8a2:	6818      	ldr	r0, [r3, #0]
 800c8a4:	f107 0110 	add.w	r1, r7, #16
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f7fe fc28 	bl	800b100 <xQueueGenericSend>
 800c8b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c8b2:	e008      	b.n	800c8c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c8b4:	4b06      	ldr	r3, [pc, #24]	@ (800c8d0 <xTimerGenericCommand+0x98>)
 800c8b6:	6818      	ldr	r0, [r3, #0]
 800c8b8:	f107 0110 	add.w	r1, r7, #16
 800c8bc:	2300      	movs	r3, #0
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	f7fe fd20 	bl	800b304 <xQueueGenericSendFromISR>
 800c8c4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3728      	adds	r7, #40	@ 0x28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	24005800 	.word	0x24005800

0800c8d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8de:	4b23      	ldr	r3, [pc, #140]	@ (800c96c <prvProcessExpiredTimer+0x98>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fe fad3 	bl	800ae98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8f8:	f003 0304 	and.w	r3, r3, #4
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d023      	beq.n	800c948 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	699a      	ldr	r2, [r3, #24]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	18d1      	adds	r1, r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	6978      	ldr	r0, [r7, #20]
 800c90e:	f000 f8d5 	bl	800cabc <prvInsertTimerInActiveList>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d020      	beq.n	800c95a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c918:	2300      	movs	r3, #0
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	2300      	movs	r3, #0
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	2100      	movs	r1, #0
 800c922:	6978      	ldr	r0, [r7, #20]
 800c924:	f7ff ff88 	bl	800c838 <xTimerGenericCommand>
 800c928:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d114      	bne.n	800c95a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	60fb      	str	r3, [r7, #12]
}
 800c942:	bf00      	nop
 800c944:	bf00      	nop
 800c946:	e7fd      	b.n	800c944 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c94e:	f023 0301 	bic.w	r3, r3, #1
 800c952:	b2da      	uxtb	r2, r3
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	6978      	ldr	r0, [r7, #20]
 800c960:	4798      	blx	r3
}
 800c962:	bf00      	nop
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	240057f8 	.word	0x240057f8

0800c970 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c978:	f107 0308 	add.w	r3, r7, #8
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 f859 	bl	800ca34 <prvGetNextExpireTime>
 800c982:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	4619      	mov	r1, r3
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 f805 	bl	800c998 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c98e:	f000 f8d7 	bl	800cb40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c992:	bf00      	nop
 800c994:	e7f0      	b.n	800c978 <prvTimerTask+0x8>
	...

0800c998 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c9a2:	f7ff fa01 	bl	800bda8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9a6:	f107 0308 	add.w	r3, r7, #8
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f866 	bl	800ca7c <prvSampleTimeNow>
 800c9b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d130      	bne.n	800ca1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10a      	bne.n	800c9d4 <prvProcessTimerOrBlockTask+0x3c>
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d806      	bhi.n	800c9d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c9c6:	f7ff f9fd 	bl	800bdc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c9ca:	68f9      	ldr	r1, [r7, #12]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7ff ff81 	bl	800c8d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c9d2:	e024      	b.n	800ca1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d008      	beq.n	800c9ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c9da:	4b13      	ldr	r3, [pc, #76]	@ (800ca28 <prvProcessTimerOrBlockTask+0x90>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d101      	bne.n	800c9e8 <prvProcessTimerOrBlockTask+0x50>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e000      	b.n	800c9ea <prvProcessTimerOrBlockTask+0x52>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c9ec:	4b0f      	ldr	r3, [pc, #60]	@ (800ca2c <prvProcessTimerOrBlockTask+0x94>)
 800c9ee:	6818      	ldr	r0, [r3, #0]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	f7fe ff3d 	bl	800b878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c9fe:	f7ff f9e1 	bl	800bdc4 <xTaskResumeAll>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca08:	4b09      	ldr	r3, [pc, #36]	@ (800ca30 <prvProcessTimerOrBlockTask+0x98>)
 800ca0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca0e:	601a      	str	r2, [r3, #0]
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	f3bf 8f6f 	isb	sy
}
 800ca18:	e001      	b.n	800ca1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca1a:	f7ff f9d3 	bl	800bdc4 <xTaskResumeAll>
}
 800ca1e:	bf00      	nop
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	240057fc 	.word	0x240057fc
 800ca2c:	24005800 	.word	0x24005800
 800ca30:	e000ed04 	.word	0xe000ed04

0800ca34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ca3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ca78 <prvGetNextExpireTime+0x44>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <prvGetNextExpireTime+0x16>
 800ca46:	2201      	movs	r2, #1
 800ca48:	e000      	b.n	800ca4c <prvGetNextExpireTime+0x18>
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d105      	bne.n	800ca64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca58:	4b07      	ldr	r3, [pc, #28]	@ (800ca78 <prvGetNextExpireTime+0x44>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60fb      	str	r3, [r7, #12]
 800ca62:	e001      	b.n	800ca68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ca64:	2300      	movs	r3, #0
 800ca66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ca68:	68fb      	ldr	r3, [r7, #12]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3714      	adds	r7, #20
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop
 800ca78:	240057f8 	.word	0x240057f8

0800ca7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ca84:	f7ff fa3c 	bl	800bf00 <xTaskGetTickCount>
 800ca88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ca8a:	4b0b      	ldr	r3, [pc, #44]	@ (800cab8 <prvSampleTimeNow+0x3c>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d205      	bcs.n	800caa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ca94:	f000 f93a 	bl	800cd0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	e002      	b.n	800caa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800caa6:	4a04      	ldr	r2, [pc, #16]	@ (800cab8 <prvSampleTimeNow+0x3c>)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800caac:	68fb      	ldr	r3, [r7, #12]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	24005808 	.word	0x24005808

0800cabc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800caca:	2300      	movs	r3, #0
 800cacc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d812      	bhi.n	800cb08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	1ad2      	subs	r2, r2, r3
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	429a      	cmp	r2, r3
 800caee:	d302      	bcc.n	800caf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800caf0:	2301      	movs	r3, #1
 800caf2:	617b      	str	r3, [r7, #20]
 800caf4:	e01b      	b.n	800cb2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800caf6:	4b10      	ldr	r3, [pc, #64]	@ (800cb38 <prvInsertTimerInActiveList+0x7c>)
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3304      	adds	r3, #4
 800cafe:	4619      	mov	r1, r3
 800cb00:	4610      	mov	r0, r2
 800cb02:	f7fe f990 	bl	800ae26 <vListInsert>
 800cb06:	e012      	b.n	800cb2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d206      	bcs.n	800cb1e <prvInsertTimerInActiveList+0x62>
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d302      	bcc.n	800cb1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	617b      	str	r3, [r7, #20]
 800cb1c:	e007      	b.n	800cb2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb1e:	4b07      	ldr	r3, [pc, #28]	@ (800cb3c <prvInsertTimerInActiveList+0x80>)
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3304      	adds	r3, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	4610      	mov	r0, r2
 800cb2a:	f7fe f97c 	bl	800ae26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cb2e:	697b      	ldr	r3, [r7, #20]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	240057fc 	.word	0x240057fc
 800cb3c:	240057f8 	.word	0x240057f8

0800cb40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b08e      	sub	sp, #56	@ 0x38
 800cb44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb46:	e0ce      	b.n	800cce6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	da19      	bge.n	800cb82 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cb4e:	1d3b      	adds	r3, r7, #4
 800cb50:	3304      	adds	r3, #4
 800cb52:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10b      	bne.n	800cb72 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	61fb      	str	r3, [r7, #28]
}
 800cb6c:	bf00      	nop
 800cb6e:	bf00      	nop
 800cb70:	e7fd      	b.n	800cb6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb78:	6850      	ldr	r0, [r2, #4]
 800cb7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb7c:	6892      	ldr	r2, [r2, #8]
 800cb7e:	4611      	mov	r1, r2
 800cb80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f2c0 80ae 	blt.w	800cce6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb90:	695b      	ldr	r3, [r3, #20]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d004      	beq.n	800cba0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb98:	3304      	adds	r3, #4
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe f97c 	bl	800ae98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cba0:	463b      	mov	r3, r7
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff ff6a 	bl	800ca7c <prvSampleTimeNow>
 800cba8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b09      	cmp	r3, #9
 800cbae:	f200 8097 	bhi.w	800cce0 <prvProcessReceivedCommands+0x1a0>
 800cbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800cbb8 <prvProcessReceivedCommands+0x78>)
 800cbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb8:	0800cbe1 	.word	0x0800cbe1
 800cbbc:	0800cbe1 	.word	0x0800cbe1
 800cbc0:	0800cbe1 	.word	0x0800cbe1
 800cbc4:	0800cc57 	.word	0x0800cc57
 800cbc8:	0800cc6b 	.word	0x0800cc6b
 800cbcc:	0800ccb7 	.word	0x0800ccb7
 800cbd0:	0800cbe1 	.word	0x0800cbe1
 800cbd4:	0800cbe1 	.word	0x0800cbe1
 800cbd8:	0800cc57 	.word	0x0800cc57
 800cbdc:	0800cc6b 	.word	0x0800cc6b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbe6:	f043 0301 	orr.w	r3, r3, #1
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	18d1      	adds	r1, r2, r3
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc00:	f7ff ff5c 	bl	800cabc <prvInsertTimerInActiveList>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d06c      	beq.n	800cce4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc18:	f003 0304 	and.w	r3, r3, #4
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d061      	beq.n	800cce4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	441a      	add	r2, r3
 800cc28:	2300      	movs	r3, #0
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	2100      	movs	r1, #0
 800cc30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc32:	f7ff fe01 	bl	800c838 <xTimerGenericCommand>
 800cc36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cc38:	6a3b      	ldr	r3, [r7, #32]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d152      	bne.n	800cce4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	61bb      	str	r3, [r7, #24]
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	e7fd      	b.n	800cc52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc5c:	f023 0301 	bic.w	r3, r3, #1
 800cc60:	b2da      	uxtb	r2, r3
 800cc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cc68:	e03d      	b.n	800cce6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc70:	f043 0301 	orr.w	r3, r3, #1
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc80:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc84:	699b      	ldr	r3, [r3, #24]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10b      	bne.n	800cca2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	617b      	str	r3, [r7, #20]
}
 800cc9c:	bf00      	nop
 800cc9e:	bf00      	nop
 800cca0:	e7fd      	b.n	800cc9e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca4:	699a      	ldr	r2, [r3, #24]
 800cca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca8:	18d1      	adds	r1, r2, r3
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccb0:	f7ff ff04 	bl	800cabc <prvInsertTimerInActiveList>
					break;
 800ccb4:	e017      	b.n	800cce6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ccb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccbc:	f003 0302 	and.w	r3, r3, #2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d103      	bne.n	800cccc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ccc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ccc6:	f000 fbe7 	bl	800d498 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ccca:	e00c      	b.n	800cce6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccd2:	f023 0301 	bic.w	r3, r3, #1
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ccde:	e002      	b.n	800cce6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cce0:	bf00      	nop
 800cce2:	e000      	b.n	800cce6 <prvProcessReceivedCommands+0x1a6>
					break;
 800cce4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cce6:	4b08      	ldr	r3, [pc, #32]	@ (800cd08 <prvProcessReceivedCommands+0x1c8>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	1d39      	adds	r1, r7, #4
 800ccec:	2200      	movs	r2, #0
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7fe fba6 	bl	800b440 <xQueueReceive>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f47f af26 	bne.w	800cb48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ccfc:	bf00      	nop
 800ccfe:	bf00      	nop
 800cd00:	3730      	adds	r7, #48	@ 0x30
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	24005800 	.word	0x24005800

0800cd0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd12:	e049      	b.n	800cda8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd14:	4b2e      	ldr	r3, [pc, #184]	@ (800cdd0 <prvSwitchTimerLists+0xc4>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68db      	ldr	r3, [r3, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd1e:	4b2c      	ldr	r3, [pc, #176]	@ (800cdd0 <prvSwitchTimerLists+0xc4>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe f8b3 	bl	800ae98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6a1b      	ldr	r3, [r3, #32]
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd40:	f003 0304 	and.w	r3, r3, #4
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d02f      	beq.n	800cda8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	699b      	ldr	r3, [r3, #24]
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	4413      	add	r3, r2
 800cd50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d90e      	bls.n	800cd78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd66:	4b1a      	ldr	r3, [pc, #104]	@ (800cdd0 <prvSwitchTimerLists+0xc4>)
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4610      	mov	r0, r2
 800cd72:	f7fe f858 	bl	800ae26 <vListInsert>
 800cd76:	e017      	b.n	800cda8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd78:	2300      	movs	r3, #0
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	2100      	movs	r1, #0
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff fd58 	bl	800c838 <xTimerGenericCommand>
 800cd88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10b      	bne.n	800cda8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	603b      	str	r3, [r7, #0]
}
 800cda2:	bf00      	nop
 800cda4:	bf00      	nop
 800cda6:	e7fd      	b.n	800cda4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cda8:	4b09      	ldr	r3, [pc, #36]	@ (800cdd0 <prvSwitchTimerLists+0xc4>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1b0      	bne.n	800cd14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cdb2:	4b07      	ldr	r3, [pc, #28]	@ (800cdd0 <prvSwitchTimerLists+0xc4>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cdb8:	4b06      	ldr	r3, [pc, #24]	@ (800cdd4 <prvSwitchTimerLists+0xc8>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a04      	ldr	r2, [pc, #16]	@ (800cdd0 <prvSwitchTimerLists+0xc4>)
 800cdbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cdc0:	4a04      	ldr	r2, [pc, #16]	@ (800cdd4 <prvSwitchTimerLists+0xc8>)
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	6013      	str	r3, [r2, #0]
}
 800cdc6:	bf00      	nop
 800cdc8:	3718      	adds	r7, #24
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	240057f8 	.word	0x240057f8
 800cdd4:	240057fc 	.word	0x240057fc

0800cdd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cdde:	f000 f96b 	bl	800d0b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cde2:	4b15      	ldr	r3, [pc, #84]	@ (800ce38 <prvCheckForValidListAndQueue+0x60>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d120      	bne.n	800ce2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cdea:	4814      	ldr	r0, [pc, #80]	@ (800ce3c <prvCheckForValidListAndQueue+0x64>)
 800cdec:	f7fd ffca 	bl	800ad84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cdf0:	4813      	ldr	r0, [pc, #76]	@ (800ce40 <prvCheckForValidListAndQueue+0x68>)
 800cdf2:	f7fd ffc7 	bl	800ad84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cdf6:	4b13      	ldr	r3, [pc, #76]	@ (800ce44 <prvCheckForValidListAndQueue+0x6c>)
 800cdf8:	4a10      	ldr	r2, [pc, #64]	@ (800ce3c <prvCheckForValidListAndQueue+0x64>)
 800cdfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cdfc:	4b12      	ldr	r3, [pc, #72]	@ (800ce48 <prvCheckForValidListAndQueue+0x70>)
 800cdfe:	4a10      	ldr	r2, [pc, #64]	@ (800ce40 <prvCheckForValidListAndQueue+0x68>)
 800ce00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce02:	2300      	movs	r3, #0
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	4b11      	ldr	r3, [pc, #68]	@ (800ce4c <prvCheckForValidListAndQueue+0x74>)
 800ce08:	4a11      	ldr	r2, [pc, #68]	@ (800ce50 <prvCheckForValidListAndQueue+0x78>)
 800ce0a:	2110      	movs	r1, #16
 800ce0c:	200a      	movs	r0, #10
 800ce0e:	f7fe f8d7 	bl	800afc0 <xQueueGenericCreateStatic>
 800ce12:	4603      	mov	r3, r0
 800ce14:	4a08      	ldr	r2, [pc, #32]	@ (800ce38 <prvCheckForValidListAndQueue+0x60>)
 800ce16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce18:	4b07      	ldr	r3, [pc, #28]	@ (800ce38 <prvCheckForValidListAndQueue+0x60>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d005      	beq.n	800ce2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce20:	4b05      	ldr	r3, [pc, #20]	@ (800ce38 <prvCheckForValidListAndQueue+0x60>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	490b      	ldr	r1, [pc, #44]	@ (800ce54 <prvCheckForValidListAndQueue+0x7c>)
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe fcfc 	bl	800b824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce2c:	f000 f976 	bl	800d11c <vPortExitCritical>
}
 800ce30:	bf00      	nop
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	24005800 	.word	0x24005800
 800ce3c:	240057d0 	.word	0x240057d0
 800ce40:	240057e4 	.word	0x240057e4
 800ce44:	240057f8 	.word	0x240057f8
 800ce48:	240057fc 	.word	0x240057fc
 800ce4c:	240058ac 	.word	0x240058ac
 800ce50:	2400580c 	.word	0x2400580c
 800ce54:	0801bb70 	.word	0x0801bb70

0800ce58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b085      	sub	sp, #20
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	3b04      	subs	r3, #4
 800ce68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ce70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3b04      	subs	r3, #4
 800ce76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	f023 0201 	bic.w	r2, r3, #1
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	3b04      	subs	r3, #4
 800ce86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce88:	4a0c      	ldr	r2, [pc, #48]	@ (800cebc <pxPortInitialiseStack+0x64>)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3b14      	subs	r3, #20
 800ce92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3b04      	subs	r3, #4
 800ce9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f06f 0202 	mvn.w	r2, #2
 800cea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3b20      	subs	r3, #32
 800ceac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ceae:	68fb      	ldr	r3, [r7, #12]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	0800cec1 	.word	0x0800cec1

0800cec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ceca:	4b13      	ldr	r3, [pc, #76]	@ (800cf18 <prvTaskExitError+0x58>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ced2:	d00b      	beq.n	800ceec <prvTaskExitError+0x2c>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	60fb      	str	r3, [r7, #12]
}
 800cee6:	bf00      	nop
 800cee8:	bf00      	nop
 800ceea:	e7fd      	b.n	800cee8 <prvTaskExitError+0x28>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	60bb      	str	r3, [r7, #8]
}
 800cefe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf00:	bf00      	nop
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0fc      	beq.n	800cf02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf08:	bf00      	nop
 800cf0a:	bf00      	nop
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	24000014 	.word	0x24000014
 800cf1c:	00000000 	.word	0x00000000

0800cf20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf20:	4b07      	ldr	r3, [pc, #28]	@ (800cf40 <pxCurrentTCBConst2>)
 800cf22:	6819      	ldr	r1, [r3, #0]
 800cf24:	6808      	ldr	r0, [r1, #0]
 800cf26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2a:	f380 8809 	msr	PSP, r0
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f04f 0000 	mov.w	r0, #0
 800cf36:	f380 8811 	msr	BASEPRI, r0
 800cf3a:	4770      	bx	lr
 800cf3c:	f3af 8000 	nop.w

0800cf40 <pxCurrentTCBConst2>:
 800cf40:	240052d0 	.word	0x240052d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf44:	bf00      	nop
 800cf46:	bf00      	nop

0800cf48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf48:	4808      	ldr	r0, [pc, #32]	@ (800cf6c <prvPortStartFirstTask+0x24>)
 800cf4a:	6800      	ldr	r0, [r0, #0]
 800cf4c:	6800      	ldr	r0, [r0, #0]
 800cf4e:	f380 8808 	msr	MSP, r0
 800cf52:	f04f 0000 	mov.w	r0, #0
 800cf56:	f380 8814 	msr	CONTROL, r0
 800cf5a:	b662      	cpsie	i
 800cf5c:	b661      	cpsie	f
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	f3bf 8f6f 	isb	sy
 800cf66:	df00      	svc	0
 800cf68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cf6a:	bf00      	nop
 800cf6c:	e000ed08 	.word	0xe000ed08

0800cf70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cf76:	4b47      	ldr	r3, [pc, #284]	@ (800d094 <xPortStartScheduler+0x124>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a47      	ldr	r2, [pc, #284]	@ (800d098 <xPortStartScheduler+0x128>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d10b      	bne.n	800cf98 <xPortStartScheduler+0x28>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	60fb      	str	r3, [r7, #12]
}
 800cf92:	bf00      	nop
 800cf94:	bf00      	nop
 800cf96:	e7fd      	b.n	800cf94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cf98:	4b3e      	ldr	r3, [pc, #248]	@ (800d094 <xPortStartScheduler+0x124>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a3f      	ldr	r2, [pc, #252]	@ (800d09c <xPortStartScheduler+0x12c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d10b      	bne.n	800cfba <xPortStartScheduler+0x4a>
	__asm volatile
 800cfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	613b      	str	r3, [r7, #16]
}
 800cfb4:	bf00      	nop
 800cfb6:	bf00      	nop
 800cfb8:	e7fd      	b.n	800cfb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cfba:	4b39      	ldr	r3, [pc, #228]	@ (800d0a0 <xPortStartScheduler+0x130>)
 800cfbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	22ff      	movs	r2, #255	@ 0xff
 800cfca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	4b31      	ldr	r3, [pc, #196]	@ (800d0a4 <xPortStartScheduler+0x134>)
 800cfe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cfe2:	4b31      	ldr	r3, [pc, #196]	@ (800d0a8 <xPortStartScheduler+0x138>)
 800cfe4:	2207      	movs	r2, #7
 800cfe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfe8:	e009      	b.n	800cffe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cfea:	4b2f      	ldr	r3, [pc, #188]	@ (800d0a8 <xPortStartScheduler+0x138>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	4a2d      	ldr	r2, [pc, #180]	@ (800d0a8 <xPortStartScheduler+0x138>)
 800cff2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cff4:	78fb      	ldrb	r3, [r7, #3]
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cffe:	78fb      	ldrb	r3, [r7, #3]
 800d000:	b2db      	uxtb	r3, r3
 800d002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d006:	2b80      	cmp	r3, #128	@ 0x80
 800d008:	d0ef      	beq.n	800cfea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d00a:	4b27      	ldr	r3, [pc, #156]	@ (800d0a8 <xPortStartScheduler+0x138>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f1c3 0307 	rsb	r3, r3, #7
 800d012:	2b04      	cmp	r3, #4
 800d014:	d00b      	beq.n	800d02e <xPortStartScheduler+0xbe>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	60bb      	str	r3, [r7, #8]
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	e7fd      	b.n	800d02a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d02e:	4b1e      	ldr	r3, [pc, #120]	@ (800d0a8 <xPortStartScheduler+0x138>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	021b      	lsls	r3, r3, #8
 800d034:	4a1c      	ldr	r2, [pc, #112]	@ (800d0a8 <xPortStartScheduler+0x138>)
 800d036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d038:	4b1b      	ldr	r3, [pc, #108]	@ (800d0a8 <xPortStartScheduler+0x138>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d040:	4a19      	ldr	r2, [pc, #100]	@ (800d0a8 <xPortStartScheduler+0x138>)
 800d042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	b2da      	uxtb	r2, r3
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d04c:	4b17      	ldr	r3, [pc, #92]	@ (800d0ac <xPortStartScheduler+0x13c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a16      	ldr	r2, [pc, #88]	@ (800d0ac <xPortStartScheduler+0x13c>)
 800d052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d058:	4b14      	ldr	r3, [pc, #80]	@ (800d0ac <xPortStartScheduler+0x13c>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a13      	ldr	r2, [pc, #76]	@ (800d0ac <xPortStartScheduler+0x13c>)
 800d05e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d064:	f000 f8da 	bl	800d21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d068:	4b11      	ldr	r3, [pc, #68]	@ (800d0b0 <xPortStartScheduler+0x140>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d06e:	f000 f8f9 	bl	800d264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d072:	4b10      	ldr	r3, [pc, #64]	@ (800d0b4 <xPortStartScheduler+0x144>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a0f      	ldr	r2, [pc, #60]	@ (800d0b4 <xPortStartScheduler+0x144>)
 800d078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d07c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d07e:	f7ff ff63 	bl	800cf48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d082:	f7ff f807 	bl	800c094 <vTaskSwitchContext>
	prvTaskExitError();
 800d086:	f7ff ff1b 	bl	800cec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3718      	adds	r7, #24
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	e000ed00 	.word	0xe000ed00
 800d098:	410fc271 	.word	0x410fc271
 800d09c:	410fc270 	.word	0x410fc270
 800d0a0:	e000e400 	.word	0xe000e400
 800d0a4:	240058fc 	.word	0x240058fc
 800d0a8:	24005900 	.word	0x24005900
 800d0ac:	e000ed20 	.word	0xe000ed20
 800d0b0:	24000014 	.word	0x24000014
 800d0b4:	e000ef34 	.word	0xe000ef34

0800d0b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	607b      	str	r3, [r7, #4]
}
 800d0d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d0d2:	4b10      	ldr	r3, [pc, #64]	@ (800d114 <vPortEnterCritical+0x5c>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	4a0e      	ldr	r2, [pc, #56]	@ (800d114 <vPortEnterCritical+0x5c>)
 800d0da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d0dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d114 <vPortEnterCritical+0x5c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d110      	bne.n	800d106 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d118 <vPortEnterCritical+0x60>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00b      	beq.n	800d106 <vPortEnterCritical+0x4e>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	603b      	str	r3, [r7, #0]
}
 800d100:	bf00      	nop
 800d102:	bf00      	nop
 800d104:	e7fd      	b.n	800d102 <vPortEnterCritical+0x4a>
	}
}
 800d106:	bf00      	nop
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	24000014 	.word	0x24000014
 800d118:	e000ed04 	.word	0xe000ed04

0800d11c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d122:	4b12      	ldr	r3, [pc, #72]	@ (800d16c <vPortExitCritical+0x50>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10b      	bne.n	800d142 <vPortExitCritical+0x26>
	__asm volatile
 800d12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	607b      	str	r3, [r7, #4]
}
 800d13c:	bf00      	nop
 800d13e:	bf00      	nop
 800d140:	e7fd      	b.n	800d13e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d142:	4b0a      	ldr	r3, [pc, #40]	@ (800d16c <vPortExitCritical+0x50>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	3b01      	subs	r3, #1
 800d148:	4a08      	ldr	r2, [pc, #32]	@ (800d16c <vPortExitCritical+0x50>)
 800d14a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d14c:	4b07      	ldr	r3, [pc, #28]	@ (800d16c <vPortExitCritical+0x50>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d105      	bne.n	800d160 <vPortExitCritical+0x44>
 800d154:	2300      	movs	r3, #0
 800d156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	f383 8811 	msr	BASEPRI, r3
}
 800d15e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	24000014 	.word	0x24000014

0800d170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d170:	f3ef 8009 	mrs	r0, PSP
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	4b15      	ldr	r3, [pc, #84]	@ (800d1d0 <pxCurrentTCBConst>)
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	f01e 0f10 	tst.w	lr, #16
 800d180:	bf08      	it	eq
 800d182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18a:	6010      	str	r0, [r2, #0]
 800d18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d194:	f380 8811 	msr	BASEPRI, r0
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f7fe ff78 	bl	800c094 <vTaskSwitchContext>
 800d1a4:	f04f 0000 	mov.w	r0, #0
 800d1a8:	f380 8811 	msr	BASEPRI, r0
 800d1ac:	bc09      	pop	{r0, r3}
 800d1ae:	6819      	ldr	r1, [r3, #0]
 800d1b0:	6808      	ldr	r0, [r1, #0]
 800d1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b6:	f01e 0f10 	tst.w	lr, #16
 800d1ba:	bf08      	it	eq
 800d1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d1c0:	f380 8809 	msr	PSP, r0
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	f3af 8000 	nop.w

0800d1d0 <pxCurrentTCBConst>:
 800d1d0:	240052d0 	.word	0x240052d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop

0800d1d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	607b      	str	r3, [r7, #4]
}
 800d1f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d1f2:	f7fe fe95 	bl	800bf20 <xTaskIncrementTick>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d003      	beq.n	800d204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d1fc:	4b06      	ldr	r3, [pc, #24]	@ (800d218 <xPortSysTickHandler+0x40>)
 800d1fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	2300      	movs	r3, #0
 800d206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	f383 8811 	msr	BASEPRI, r3
}
 800d20e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	e000ed04 	.word	0xe000ed04

0800d21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d21c:	b480      	push	{r7}
 800d21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d220:	4b0b      	ldr	r3, [pc, #44]	@ (800d250 <vPortSetupTimerInterrupt+0x34>)
 800d222:	2200      	movs	r2, #0
 800d224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d226:	4b0b      	ldr	r3, [pc, #44]	@ (800d254 <vPortSetupTimerInterrupt+0x38>)
 800d228:	2200      	movs	r2, #0
 800d22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d22c:	4b0a      	ldr	r3, [pc, #40]	@ (800d258 <vPortSetupTimerInterrupt+0x3c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a0a      	ldr	r2, [pc, #40]	@ (800d25c <vPortSetupTimerInterrupt+0x40>)
 800d232:	fba2 2303 	umull	r2, r3, r2, r3
 800d236:	099b      	lsrs	r3, r3, #6
 800d238:	4a09      	ldr	r2, [pc, #36]	@ (800d260 <vPortSetupTimerInterrupt+0x44>)
 800d23a:	3b01      	subs	r3, #1
 800d23c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d23e:	4b04      	ldr	r3, [pc, #16]	@ (800d250 <vPortSetupTimerInterrupt+0x34>)
 800d240:	2207      	movs	r2, #7
 800d242:	601a      	str	r2, [r3, #0]
}
 800d244:	bf00      	nop
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	e000e010 	.word	0xe000e010
 800d254:	e000e018 	.word	0xe000e018
 800d258:	24000004 	.word	0x24000004
 800d25c:	10624dd3 	.word	0x10624dd3
 800d260:	e000e014 	.word	0xe000e014

0800d264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d274 <vPortEnableVFP+0x10>
 800d268:	6801      	ldr	r1, [r0, #0]
 800d26a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d26e:	6001      	str	r1, [r0, #0]
 800d270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d272:	bf00      	nop
 800d274:	e000ed88 	.word	0xe000ed88

0800d278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d27e:	f3ef 8305 	mrs	r3, IPSR
 800d282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2b0f      	cmp	r3, #15
 800d288:	d915      	bls.n	800d2b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d28a:	4a18      	ldr	r2, [pc, #96]	@ (800d2ec <vPortValidateInterruptPriority+0x74>)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	4413      	add	r3, r2
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d294:	4b16      	ldr	r3, [pc, #88]	@ (800d2f0 <vPortValidateInterruptPriority+0x78>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	7afa      	ldrb	r2, [r7, #11]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d20b      	bcs.n	800d2b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	607b      	str	r3, [r7, #4]
}
 800d2b0:	bf00      	nop
 800d2b2:	bf00      	nop
 800d2b4:	e7fd      	b.n	800d2b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d2f4 <vPortValidateInterruptPriority+0x7c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d2be:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f8 <vPortValidateInterruptPriority+0x80>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d90b      	bls.n	800d2de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ca:	f383 8811 	msr	BASEPRI, r3
 800d2ce:	f3bf 8f6f 	isb	sy
 800d2d2:	f3bf 8f4f 	dsb	sy
 800d2d6:	603b      	str	r3, [r7, #0]
}
 800d2d8:	bf00      	nop
 800d2da:	bf00      	nop
 800d2dc:	e7fd      	b.n	800d2da <vPortValidateInterruptPriority+0x62>
	}
 800d2de:	bf00      	nop
 800d2e0:	3714      	adds	r7, #20
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	e000e3f0 	.word	0xe000e3f0
 800d2f0:	240058fc 	.word	0x240058fc
 800d2f4:	e000ed0c 	.word	0xe000ed0c
 800d2f8:	24005900 	.word	0x24005900

0800d2fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b08a      	sub	sp, #40	@ 0x28
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d304:	2300      	movs	r3, #0
 800d306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d308:	f7fe fd4e 	bl	800bda8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d30c:	4b5c      	ldr	r3, [pc, #368]	@ (800d480 <pvPortMalloc+0x184>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d314:	f000 f924 	bl	800d560 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d318:	4b5a      	ldr	r3, [pc, #360]	@ (800d484 <pvPortMalloc+0x188>)
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4013      	ands	r3, r2
 800d320:	2b00      	cmp	r3, #0
 800d322:	f040 8095 	bne.w	800d450 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d01e      	beq.n	800d36a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d32c:	2208      	movs	r2, #8
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4413      	add	r3, r2
 800d332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f003 0307 	and.w	r3, r3, #7
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d015      	beq.n	800d36a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f023 0307 	bic.w	r3, r3, #7
 800d344:	3308      	adds	r3, #8
 800d346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f003 0307 	and.w	r3, r3, #7
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00b      	beq.n	800d36a <pvPortMalloc+0x6e>
	__asm volatile
 800d352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d356:	f383 8811 	msr	BASEPRI, r3
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	f3bf 8f4f 	dsb	sy
 800d362:	617b      	str	r3, [r7, #20]
}
 800d364:	bf00      	nop
 800d366:	bf00      	nop
 800d368:	e7fd      	b.n	800d366 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d06f      	beq.n	800d450 <pvPortMalloc+0x154>
 800d370:	4b45      	ldr	r3, [pc, #276]	@ (800d488 <pvPortMalloc+0x18c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	429a      	cmp	r2, r3
 800d378:	d86a      	bhi.n	800d450 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d37a:	4b44      	ldr	r3, [pc, #272]	@ (800d48c <pvPortMalloc+0x190>)
 800d37c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d37e:	4b43      	ldr	r3, [pc, #268]	@ (800d48c <pvPortMalloc+0x190>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d384:	e004      	b.n	800d390 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	429a      	cmp	r2, r3
 800d398:	d903      	bls.n	800d3a2 <pvPortMalloc+0xa6>
 800d39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1f1      	bne.n	800d386 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d3a2:	4b37      	ldr	r3, [pc, #220]	@ (800d480 <pvPortMalloc+0x184>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d051      	beq.n	800d450 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2208      	movs	r2, #8
 800d3b2:	4413      	add	r3, r2
 800d3b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c0:	685a      	ldr	r2, [r3, #4]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	1ad2      	subs	r2, r2, r3
 800d3c6:	2308      	movs	r3, #8
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d920      	bls.n	800d410 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d3ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	f003 0307 	and.w	r3, r3, #7
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00b      	beq.n	800d3f8 <pvPortMalloc+0xfc>
	__asm volatile
 800d3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	613b      	str	r3, [r7, #16]
}
 800d3f2:	bf00      	nop
 800d3f4:	bf00      	nop
 800d3f6:	e7fd      	b.n	800d3f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fa:	685a      	ldr	r2, [r3, #4]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	1ad2      	subs	r2, r2, r3
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d40a:	69b8      	ldr	r0, [r7, #24]
 800d40c:	f000 f90a 	bl	800d624 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d410:	4b1d      	ldr	r3, [pc, #116]	@ (800d488 <pvPortMalloc+0x18c>)
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	4a1b      	ldr	r2, [pc, #108]	@ (800d488 <pvPortMalloc+0x18c>)
 800d41c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d41e:	4b1a      	ldr	r3, [pc, #104]	@ (800d488 <pvPortMalloc+0x18c>)
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	4b1b      	ldr	r3, [pc, #108]	@ (800d490 <pvPortMalloc+0x194>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	429a      	cmp	r2, r3
 800d428:	d203      	bcs.n	800d432 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d42a:	4b17      	ldr	r3, [pc, #92]	@ (800d488 <pvPortMalloc+0x18c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a18      	ldr	r2, [pc, #96]	@ (800d490 <pvPortMalloc+0x194>)
 800d430:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d434:	685a      	ldr	r2, [r3, #4]
 800d436:	4b13      	ldr	r3, [pc, #76]	@ (800d484 <pvPortMalloc+0x188>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	431a      	orrs	r2, r3
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d442:	2200      	movs	r2, #0
 800d444:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d446:	4b13      	ldr	r3, [pc, #76]	@ (800d494 <pvPortMalloc+0x198>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	3301      	adds	r3, #1
 800d44c:	4a11      	ldr	r2, [pc, #68]	@ (800d494 <pvPortMalloc+0x198>)
 800d44e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d450:	f7fe fcb8 	bl	800bdc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	f003 0307 	and.w	r3, r3, #7
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00b      	beq.n	800d476 <pvPortMalloc+0x17a>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	60fb      	str	r3, [r7, #12]
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	e7fd      	b.n	800d472 <pvPortMalloc+0x176>
	return pvReturn;
 800d476:	69fb      	ldr	r3, [r7, #28]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3728      	adds	r7, #40	@ 0x28
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	2400950c 	.word	0x2400950c
 800d484:	24009520 	.word	0x24009520
 800d488:	24009510 	.word	0x24009510
 800d48c:	24009504 	.word	0x24009504
 800d490:	24009514 	.word	0x24009514
 800d494:	24009518 	.word	0x24009518

0800d498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d04f      	beq.n	800d54a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d4aa:	2308      	movs	r3, #8
 800d4ac:	425b      	negs	r3, r3
 800d4ae:	697a      	ldr	r2, [r7, #20]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	4b25      	ldr	r3, [pc, #148]	@ (800d554 <vPortFree+0xbc>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10b      	bne.n	800d4de <vPortFree+0x46>
	__asm volatile
 800d4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	60fb      	str	r3, [r7, #12]
}
 800d4d8:	bf00      	nop
 800d4da:	bf00      	nop
 800d4dc:	e7fd      	b.n	800d4da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00b      	beq.n	800d4fe <vPortFree+0x66>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	60bb      	str	r3, [r7, #8]
}
 800d4f8:	bf00      	nop
 800d4fa:	bf00      	nop
 800d4fc:	e7fd      	b.n	800d4fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	4b14      	ldr	r3, [pc, #80]	@ (800d554 <vPortFree+0xbc>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4013      	ands	r3, r2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d01e      	beq.n	800d54a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d11a      	bne.n	800d54a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	4b0e      	ldr	r3, [pc, #56]	@ (800d554 <vPortFree+0xbc>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	43db      	mvns	r3, r3
 800d51e:	401a      	ands	r2, r3
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d524:	f7fe fc40 	bl	800bda8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	4b0a      	ldr	r3, [pc, #40]	@ (800d558 <vPortFree+0xc0>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4413      	add	r3, r2
 800d532:	4a09      	ldr	r2, [pc, #36]	@ (800d558 <vPortFree+0xc0>)
 800d534:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d536:	6938      	ldr	r0, [r7, #16]
 800d538:	f000 f874 	bl	800d624 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d53c:	4b07      	ldr	r3, [pc, #28]	@ (800d55c <vPortFree+0xc4>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3301      	adds	r3, #1
 800d542:	4a06      	ldr	r2, [pc, #24]	@ (800d55c <vPortFree+0xc4>)
 800d544:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d546:	f7fe fc3d 	bl	800bdc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d54a:	bf00      	nop
 800d54c:	3718      	adds	r7, #24
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	24009520 	.word	0x24009520
 800d558:	24009510 	.word	0x24009510
 800d55c:	2400951c 	.word	0x2400951c

0800d560 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d566:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d56a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d56c:	4b27      	ldr	r3, [pc, #156]	@ (800d60c <prvHeapInit+0xac>)
 800d56e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f003 0307 	and.w	r3, r3, #7
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00c      	beq.n	800d594 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	3307      	adds	r3, #7
 800d57e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f023 0307 	bic.w	r3, r3, #7
 800d586:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	1ad3      	subs	r3, r2, r3
 800d58e:	4a1f      	ldr	r2, [pc, #124]	@ (800d60c <prvHeapInit+0xac>)
 800d590:	4413      	add	r3, r2
 800d592:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d598:	4a1d      	ldr	r2, [pc, #116]	@ (800d610 <prvHeapInit+0xb0>)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d59e:	4b1c      	ldr	r3, [pc, #112]	@ (800d610 <prvHeapInit+0xb0>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d5ac:	2208      	movs	r2, #8
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	1a9b      	subs	r3, r3, r2
 800d5b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f023 0307 	bic.w	r3, r3, #7
 800d5ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	4a15      	ldr	r2, [pc, #84]	@ (800d614 <prvHeapInit+0xb4>)
 800d5c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d5c2:	4b14      	ldr	r3, [pc, #80]	@ (800d614 <prvHeapInit+0xb4>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d5ca:	4b12      	ldr	r3, [pc, #72]	@ (800d614 <prvHeapInit+0xb4>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	1ad2      	subs	r2, r2, r3
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d5e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d614 <prvHeapInit+0xb4>)
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	4a0a      	ldr	r2, [pc, #40]	@ (800d618 <prvHeapInit+0xb8>)
 800d5ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	4a09      	ldr	r2, [pc, #36]	@ (800d61c <prvHeapInit+0xbc>)
 800d5f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d5f8:	4b09      	ldr	r3, [pc, #36]	@ (800d620 <prvHeapInit+0xc0>)
 800d5fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d5fe:	601a      	str	r2, [r3, #0]
}
 800d600:	bf00      	nop
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	24005904 	.word	0x24005904
 800d610:	24009504 	.word	0x24009504
 800d614:	2400950c 	.word	0x2400950c
 800d618:	24009514 	.word	0x24009514
 800d61c:	24009510 	.word	0x24009510
 800d620:	24009520 	.word	0x24009520

0800d624 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d62c:	4b28      	ldr	r3, [pc, #160]	@ (800d6d0 <prvInsertBlockIntoFreeList+0xac>)
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	e002      	b.n	800d638 <prvInsertBlockIntoFreeList+0x14>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	60fb      	str	r3, [r7, #12]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d8f7      	bhi.n	800d632 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	4413      	add	r3, r2
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	429a      	cmp	r2, r3
 800d652:	d108      	bne.n	800d666 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	441a      	add	r2, r3
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	441a      	add	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	429a      	cmp	r2, r3
 800d678:	d118      	bne.n	800d6ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	4b15      	ldr	r3, [pc, #84]	@ (800d6d4 <prvInsertBlockIntoFreeList+0xb0>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	429a      	cmp	r2, r3
 800d684:	d00d      	beq.n	800d6a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	685a      	ldr	r2, [r3, #4]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	441a      	add	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	601a      	str	r2, [r3, #0]
 800d6a0:	e008      	b.n	800d6b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d6d4 <prvInsertBlockIntoFreeList+0xb0>)
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	e003      	b.n	800d6b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d002      	beq.n	800d6c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6c2:	bf00      	nop
 800d6c4:	3714      	adds	r7, #20
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
 800d6ce:	bf00      	nop
 800d6d0:	24009504 	.word	0x24009504
 800d6d4:	2400950c 	.word	0x2400950c

0800d6d8 <rcl_get_zero_initialized_publisher>:
 800d6d8:	4b01      	ldr	r3, [pc, #4]	@ (800d6e0 <rcl_get_zero_initialized_publisher+0x8>)
 800d6da:	6818      	ldr	r0, [r3, #0]
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	0801bbfc 	.word	0x0801bbfc

0800d6e4 <rcl_publisher_init>:
 800d6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6e8:	b089      	sub	sp, #36	@ 0x24
 800d6ea:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d6ec:	2d00      	cmp	r5, #0
 800d6ee:	d06b      	beq.n	800d7c8 <rcl_publisher_init+0xe4>
 800d6f0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	460e      	mov	r6, r1
 800d6f8:	4617      	mov	r7, r2
 800d6fa:	4648      	mov	r0, r9
 800d6fc:	4698      	mov	r8, r3
 800d6fe:	f000 fffd 	bl	800e6fc <rcutils_allocator_is_valid>
 800d702:	2c00      	cmp	r4, #0
 800d704:	d060      	beq.n	800d7c8 <rcl_publisher_init+0xe4>
 800d706:	f080 0001 	eor.w	r0, r0, #1
 800d70a:	b2c0      	uxtb	r0, r0
 800d70c:	2800      	cmp	r0, #0
 800d70e:	d15b      	bne.n	800d7c8 <rcl_publisher_init+0xe4>
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	b123      	cbz	r3, 800d71e <rcl_publisher_init+0x3a>
 800d714:	2764      	movs	r7, #100	@ 0x64
 800d716:	4638      	mov	r0, r7
 800d718:	b009      	add	sp, #36	@ 0x24
 800d71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d71e:	4630      	mov	r0, r6
 800d720:	f006 f8be 	bl	80138a0 <rcl_node_is_valid>
 800d724:	2800      	cmp	r0, #0
 800d726:	d054      	beq.n	800d7d2 <rcl_publisher_init+0xee>
 800d728:	f1b8 0f00 	cmp.w	r8, #0
 800d72c:	d04c      	beq.n	800d7c8 <rcl_publisher_init+0xe4>
 800d72e:	fab7 f387 	clz	r3, r7
 800d732:	095b      	lsrs	r3, r3, #5
 800d734:	2f00      	cmp	r7, #0
 800d736:	d047      	beq.n	800d7c8 <rcl_publisher_init+0xe4>
 800d738:	aa07      	add	r2, sp, #28
 800d73a:	9307      	str	r3, [sp, #28]
 800d73c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d740:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800d744:	9205      	str	r2, [sp, #20]
 800d746:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d74a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d74e:	4641      	mov	r1, r8
 800d750:	4630      	mov	r0, r6
 800d752:	e899 000c 	ldmia.w	r9, {r2, r3}
 800d756:	f006 f937 	bl	80139c8 <rcl_node_resolve_name>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d150      	bne.n	800d800 <rcl_publisher_init+0x11c>
 800d75e:	21c8      	movs	r1, #200	@ 0xc8
 800d760:	2001      	movs	r0, #1
 800d762:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800d766:	4798      	blx	r3
 800d768:	6020      	str	r0, [r4, #0]
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d04e      	beq.n	800d80c <rcl_publisher_init+0x128>
 800d76e:	4630      	mov	r0, r6
 800d770:	f006 f8b8 	bl	80138e4 <rcl_node_get_rmw_handle>
 800d774:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d778:	4639      	mov	r1, r7
 800d77a:	9a07      	ldr	r2, [sp, #28]
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	462b      	mov	r3, r5
 800d780:	6827      	ldr	r7, [r4, #0]
 800d782:	f001 f8cb 	bl	800e91c <rmw_create_publisher>
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800d78c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d790:	b370      	cbz	r0, 800d7f0 <rcl_publisher_init+0x10c>
 800d792:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800d796:	f001 f99f 	bl	800ead8 <rmw_publisher_get_actual_qos>
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	4607      	mov	r7, r0
 800d79e:	b9d0      	cbnz	r0, 800d7d6 <rcl_publisher_init+0xf2>
 800d7a0:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800d7ac:	2270      	movs	r2, #112	@ 0x70
 800d7ae:	f00d fb5e 	bl	801ae6e <memcpy>
 800d7b2:	6832      	ldr	r2, [r6, #0]
 800d7b4:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800d7b8:	9807      	ldr	r0, [sp, #28]
 800d7ba:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800d7bc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d7be:	4798      	blx	r3
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	b009      	add	sp, #36	@ 0x24
 800d7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c8:	270b      	movs	r7, #11
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	b009      	add	sp, #36	@ 0x24
 800d7ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7d2:	27c8      	movs	r7, #200	@ 0xc8
 800d7d4:	e79f      	b.n	800d716 <rcl_publisher_init+0x32>
 800d7d6:	b18b      	cbz	r3, 800d7fc <rcl_publisher_init+0x118>
 800d7d8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d7dc:	b142      	cbz	r2, 800d7f0 <rcl_publisher_init+0x10c>
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f006 f880 	bl	80138e4 <rcl_node_get_rmw_handle>
 800d7e4:	6823      	ldr	r3, [r4, #0]
 800d7e6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800d7ea:	f001 f989 	bl	800eb00 <rmw_destroy_publisher>
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800d7f4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d7f6:	4790      	blx	r2
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6023      	str	r3, [r4, #0]
 800d7fc:	2701      	movs	r7, #1
 800d7fe:	e7db      	b.n	800d7b8 <rcl_publisher_init+0xd4>
 800d800:	2867      	cmp	r0, #103	@ 0x67
 800d802:	d005      	beq.n	800d810 <rcl_publisher_init+0x12c>
 800d804:	2869      	cmp	r0, #105	@ 0x69
 800d806:	d003      	beq.n	800d810 <rcl_publisher_init+0x12c>
 800d808:	280a      	cmp	r0, #10
 800d80a:	d1f7      	bne.n	800d7fc <rcl_publisher_init+0x118>
 800d80c:	270a      	movs	r7, #10
 800d80e:	e7d3      	b.n	800d7b8 <rcl_publisher_init+0xd4>
 800d810:	2767      	movs	r7, #103	@ 0x67
 800d812:	e7d1      	b.n	800d7b8 <rcl_publisher_init+0xd4>

0800d814 <rcl_publisher_get_default_options>:
 800d814:	b570      	push	{r4, r5, r6, lr}
 800d816:	b08a      	sub	sp, #40	@ 0x28
 800d818:	2250      	movs	r2, #80	@ 0x50
 800d81a:	4918      	ldr	r1, [pc, #96]	@ (800d87c <rcl_publisher_get_default_options+0x68>)
 800d81c:	4605      	mov	r5, r0
 800d81e:	4818      	ldr	r0, [pc, #96]	@ (800d880 <rcl_publisher_get_default_options+0x6c>)
 800d820:	466e      	mov	r6, sp
 800d822:	f00d fb24 	bl	801ae6e <memcpy>
 800d826:	a802      	add	r0, sp, #8
 800d828:	f000 ff3c 	bl	800e6a4 <rcutils_get_default_allocator>
 800d82c:	f10d 0c08 	add.w	ip, sp, #8
 800d830:	4c14      	ldr	r4, [pc, #80]	@ (800d884 <rcl_publisher_get_default_options+0x70>)
 800d832:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d838:	f8dc 3000 	ldr.w	r3, [ip]
 800d83c:	4630      	mov	r0, r6
 800d83e:	f844 3b04 	str.w	r3, [r4], #4
 800d842:	f000 ffed 	bl	800e820 <rmw_get_default_publisher_options>
 800d846:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d84a:	2600      	movs	r6, #0
 800d84c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d850:	f10d 0027 	add.w	r0, sp, #39	@ 0x27
 800d854:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 800d858:	f006 f84a 	bl	80138f0 <rcl_get_disable_loaned_message>
 800d85c:	b958      	cbnz	r0, 800d876 <rcl_publisher_get_default_options+0x62>
 800d85e:	f89d 6027 	ldrb.w	r6, [sp, #39]	@ 0x27
 800d862:	4907      	ldr	r1, [pc, #28]	@ (800d880 <rcl_publisher_get_default_options+0x6c>)
 800d864:	2270      	movs	r2, #112	@ 0x70
 800d866:	4628      	mov	r0, r5
 800d868:	f881 606c 	strb.w	r6, [r1, #108]	@ 0x6c
 800d86c:	f00d faff 	bl	801ae6e <memcpy>
 800d870:	4628      	mov	r0, r5
 800d872:	b00a      	add	sp, #40	@ 0x28
 800d874:	bd70      	pop	{r4, r5, r6, pc}
 800d876:	f000 ff67 	bl	800e748 <rcutils_reset_error>
 800d87a:	e7f2      	b.n	800d862 <rcl_publisher_get_default_options+0x4e>
 800d87c:	0801bc00 	.word	0x0801bc00
 800d880:	24009528 	.word	0x24009528
 800d884:	24009578 	.word	0x24009578

0800d888 <rcl_publish>:
 800d888:	b1f8      	cbz	r0, 800d8ca <rcl_publish+0x42>
 800d88a:	6803      	ldr	r3, [r0, #0]
 800d88c:	b570      	push	{r4, r5, r6, lr}
 800d88e:	4604      	mov	r4, r0
 800d890:	b1b3      	cbz	r3, 800d8c0 <rcl_publish+0x38>
 800d892:	4616      	mov	r6, r2
 800d894:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d898:	b192      	cbz	r2, 800d8c0 <rcl_publish+0x38>
 800d89a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d89e:	460d      	mov	r5, r1
 800d8a0:	f005 fbf8 	bl	8013094 <rcl_context_is_valid>
 800d8a4:	b160      	cbz	r0, 800d8c0 <rcl_publish+0x38>
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d8ac:	b140      	cbz	r0, 800d8c0 <rcl_publish+0x38>
 800d8ae:	b155      	cbz	r5, 800d8c6 <rcl_publish+0x3e>
 800d8b0:	4632      	mov	r2, r6
 800d8b2:	4629      	mov	r1, r5
 800d8b4:	f000 ffd2 	bl	800e85c <rmw_publish>
 800d8b8:	3800      	subs	r0, #0
 800d8ba:	bf18      	it	ne
 800d8bc:	2001      	movne	r0, #1
 800d8be:	bd70      	pop	{r4, r5, r6, pc}
 800d8c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d8c4:	bd70      	pop	{r4, r5, r6, pc}
 800d8c6:	200b      	movs	r0, #11
 800d8c8:	bd70      	pop	{r4, r5, r6, pc}
 800d8ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d8ce:	4770      	bx	lr

0800d8d0 <rcl_publisher_is_valid>:
 800d8d0:	b1a0      	cbz	r0, 800d8fc <rcl_publisher_is_valid+0x2c>
 800d8d2:	6803      	ldr	r3, [r0, #0]
 800d8d4:	b510      	push	{r4, lr}
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	b173      	cbz	r3, 800d8f8 <rcl_publisher_is_valid+0x28>
 800d8da:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d8de:	b15a      	cbz	r2, 800d8f8 <rcl_publisher_is_valid+0x28>
 800d8e0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d8e4:	f005 fbd6 	bl	8013094 <rcl_context_is_valid>
 800d8e8:	b130      	cbz	r0, 800d8f8 <rcl_publisher_is_valid+0x28>
 800d8ea:	6823      	ldr	r3, [r4, #0]
 800d8ec:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d8f0:	3800      	subs	r0, #0
 800d8f2:	bf18      	it	ne
 800d8f4:	2001      	movne	r0, #1
 800d8f6:	bd10      	pop	{r4, pc}
 800d8f8:	2000      	movs	r0, #0
 800d8fa:	bd10      	pop	{r4, pc}
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	4770      	bx	lr

0800d900 <rcl_publisher_is_valid_except_context>:
 800d900:	b130      	cbz	r0, 800d910 <rcl_publisher_is_valid_except_context+0x10>
 800d902:	6800      	ldr	r0, [r0, #0]
 800d904:	b120      	cbz	r0, 800d910 <rcl_publisher_is_valid_except_context+0x10>
 800d906:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800d90a:	3800      	subs	r0, #0
 800d90c:	bf18      	it	ne
 800d90e:	2001      	movne	r0, #1
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop

0800d914 <_rclc_check_for_new_data>:
 800d914:	2800      	cmp	r0, #0
 800d916:	d046      	beq.n	800d9a6 <_rclc_check_for_new_data+0x92>
 800d918:	4603      	mov	r3, r0
 800d91a:	b530      	push	{r4, r5, lr}
 800d91c:	7802      	ldrb	r2, [r0, #0]
 800d91e:	b085      	sub	sp, #20
 800d920:	2a0a      	cmp	r2, #10
 800d922:	d842      	bhi.n	800d9aa <_rclc_check_for_new_data+0x96>
 800d924:	e8df f002 	tbb	[pc, r2]
 800d928:	14181212 	.word	0x14181212
 800d92c:	06060614 	.word	0x06060614
 800d930:	2e1a      	.short	0x2e1a
 800d932:	16          	.byte	0x16
 800d933:	00          	.byte	0x00
 800d934:	6a0a      	ldr	r2, [r1, #32]
 800d936:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d938:	2000      	movs	r0, #0
 800d93a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d93e:	3a00      	subs	r2, #0
 800d940:	bf18      	it	ne
 800d942:	2201      	movne	r2, #1
 800d944:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d948:	b005      	add	sp, #20
 800d94a:	bd30      	pop	{r4, r5, pc}
 800d94c:	680a      	ldr	r2, [r1, #0]
 800d94e:	e7f2      	b.n	800d936 <_rclc_check_for_new_data+0x22>
 800d950:	698a      	ldr	r2, [r1, #24]
 800d952:	e7f0      	b.n	800d936 <_rclc_check_for_new_data+0x22>
 800d954:	688a      	ldr	r2, [r1, #8]
 800d956:	e7ee      	b.n	800d936 <_rclc_check_for_new_data+0x22>
 800d958:	690a      	ldr	r2, [r1, #16]
 800d95a:	e7ec      	b.n	800d936 <_rclc_check_for_new_data+0x22>
 800d95c:	685c      	ldr	r4, [r3, #4]
 800d95e:	4608      	mov	r0, r1
 800d960:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d968:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800d96c:	f104 0110 	add.w	r1, r4, #16
 800d970:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d974:	9500      	str	r5, [sp, #0]
 800d976:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800d97a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800d97e:	f007 fe3b 	bl	80155f8 <rcl_action_client_wait_set_get_entities_ready>
 800d982:	e7e1      	b.n	800d948 <_rclc_check_for_new_data+0x34>
 800d984:	685c      	ldr	r4, [r3, #4]
 800d986:	4608      	mov	r0, r1
 800d988:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800d98c:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800d990:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800d994:	e9cd 2100 	strd	r2, r1, [sp]
 800d998:	f104 0220 	add.w	r2, r4, #32
 800d99c:	f104 0110 	add.w	r1, r4, #16
 800d9a0:	f008 f832 	bl	8015a08 <rcl_action_server_wait_set_get_entities_ready>
 800d9a4:	e7d0      	b.n	800d948 <_rclc_check_for_new_data+0x34>
 800d9a6:	200b      	movs	r0, #11
 800d9a8:	4770      	bx	lr
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	e7cc      	b.n	800d948 <_rclc_check_for_new_data+0x34>
 800d9ae:	bf00      	nop

0800d9b0 <_rclc_take_new_data>:
 800d9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9b2:	b099      	sub	sp, #100	@ 0x64
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	f000 8082 	beq.w	800dabe <_rclc_take_new_data+0x10e>
 800d9ba:	7803      	ldrb	r3, [r0, #0]
 800d9bc:	4604      	mov	r4, r0
 800d9be:	2b0a      	cmp	r3, #10
 800d9c0:	f200 815d 	bhi.w	800dc7e <_rclc_take_new_data+0x2ce>
 800d9c4:	e8df f003 	tbb	[pc, r3]
 800d9c8:	31531f1f 	.word	0x31531f1f
 800d9cc:	06060631 	.word	0x06060631
 800d9d0:	4555      	.short	0x4555
 800d9d2:	53          	.byte	0x53
 800d9d3:	00          	.byte	0x00
 800d9d4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d9d6:	6a0b      	ldr	r3, [r1, #32]
 800d9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d046      	beq.n	800da6e <_rclc_take_new_data+0xbe>
 800d9e0:	6882      	ldr	r2, [r0, #8]
 800d9e2:	f100 0110 	add.w	r1, r0, #16
 800d9e6:	6840      	ldr	r0, [r0, #4]
 800d9e8:	f006 f8bc 	bl	8013b64 <rcl_take_request>
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d03d      	beq.n	800da6e <_rclc_take_new_data+0xbe>
 800d9f2:	f240 2359 	movw	r3, #601	@ 0x259
 800d9f6:	4298      	cmp	r0, r3
 800d9f8:	d128      	bne.n	800da4c <_rclc_take_new_data+0x9c>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800da00:	4628      	mov	r0, r5
 800da02:	b019      	add	sp, #100	@ 0x64
 800da04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da06:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800da08:	680b      	ldr	r3, [r1, #0]
 800da0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0e:	b373      	cbz	r3, 800da6e <_rclc_take_new_data+0xbe>
 800da10:	2300      	movs	r3, #0
 800da12:	aa0a      	add	r2, sp, #40	@ 0x28
 800da14:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800da18:	f006 f9ba 	bl	8013d90 <rcl_take>
 800da1c:	4605      	mov	r5, r0
 800da1e:	b330      	cbz	r0, 800da6e <_rclc_take_new_data+0xbe>
 800da20:	f240 1391 	movw	r3, #401	@ 0x191
 800da24:	4298      	cmp	r0, r3
 800da26:	d0e8      	beq.n	800d9fa <_rclc_take_new_data+0x4a>
 800da28:	e010      	b.n	800da4c <_rclc_take_new_data+0x9c>
 800da2a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800da2c:	698b      	ldr	r3, [r1, #24]
 800da2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da32:	b1e3      	cbz	r3, 800da6e <_rclc_take_new_data+0xbe>
 800da34:	6882      	ldr	r2, [r0, #8]
 800da36:	f100 0110 	add.w	r1, r0, #16
 800da3a:	6840      	ldr	r0, [r0, #4]
 800da3c:	f005 fa94 	bl	8012f68 <rcl_take_response>
 800da40:	4605      	mov	r5, r0
 800da42:	b1a0      	cbz	r0, 800da6e <_rclc_take_new_data+0xbe>
 800da44:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800da48:	4298      	cmp	r0, r3
 800da4a:	d0d9      	beq.n	800da00 <_rclc_take_new_data+0x50>
 800da4c:	f000 fe7c 	bl	800e748 <rcutils_reset_error>
 800da50:	e7d6      	b.n	800da00 <_rclc_take_new_data+0x50>
 800da52:	6840      	ldr	r0, [r0, #4]
 800da54:	f890 3020 	ldrb.w	r3, [r0, #32]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d15f      	bne.n	800db1c <_rclc_take_new_data+0x16c>
 800da5c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800da60:	2b00      	cmp	r3, #0
 800da62:	d179      	bne.n	800db58 <_rclc_take_new_data+0x1a8>
 800da64:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f040 8096 	bne.w	800db9a <_rclc_take_new_data+0x1ea>
 800da6e:	2500      	movs	r5, #0
 800da70:	e7c6      	b.n	800da00 <_rclc_take_new_data+0x50>
 800da72:	6840      	ldr	r0, [r0, #4]
 800da74:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d138      	bne.n	800daee <_rclc_take_new_data+0x13e>
 800da7c:	69c3      	ldr	r3, [r0, #28]
 800da7e:	b113      	cbz	r3, 800da86 <_rclc_take_new_data+0xd6>
 800da80:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800da84:	b9fb      	cbnz	r3, 800dac6 <_rclc_take_new_data+0x116>
 800da86:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f040 80a8 	bne.w	800dbe0 <_rclc_take_new_data+0x230>
 800da90:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800da94:	2b00      	cmp	r3, #0
 800da96:	d0ea      	beq.n	800da6e <_rclc_take_new_data+0xbe>
 800da98:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800da9a:	a90a      	add	r1, sp, #40	@ 0x28
 800da9c:	3010      	adds	r0, #16
 800da9e:	f007 fc8f 	bl	80153c0 <rcl_action_take_result_response>
 800daa2:	4605      	mov	r5, r0
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d1d1      	bne.n	800da4c <_rclc_take_new_data+0x9c>
 800daa8:	6860      	ldr	r0, [r4, #4]
 800daaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800daae:	f008 f8dd 	bl	8015c6c <rclc_action_find_handle_by_result_request_sequence_number>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0db      	beq.n	800da6e <_rclc_take_new_data+0xbe>
 800dab6:	2301      	movs	r3, #1
 800dab8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800dabc:	e7d7      	b.n	800da6e <_rclc_take_new_data+0xbe>
 800dabe:	250b      	movs	r5, #11
 800dac0:	4628      	mov	r0, r5
 800dac2:	b019      	add	sp, #100	@ 0x64
 800dac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dac6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800dac8:	3010      	adds	r0, #16
 800daca:	f007 fcf5 	bl	80154b8 <rcl_action_take_feedback>
 800dace:	4605      	mov	r5, r0
 800dad0:	2800      	cmp	r0, #0
 800dad2:	d1bb      	bne.n	800da4c <_rclc_take_new_data+0x9c>
 800dad4:	6860      	ldr	r0, [r4, #4]
 800dad6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800dad8:	f008 f888 	bl	8015bec <rclc_action_find_goal_handle_by_uuid>
 800dadc:	4603      	mov	r3, r0
 800dade:	2800      	cmp	r0, #0
 800dae0:	f000 80c4 	beq.w	800dc6c <_rclc_take_new_data+0x2bc>
 800dae4:	2201      	movs	r2, #1
 800dae6:	6860      	ldr	r0, [r4, #4]
 800dae8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800daec:	e7cb      	b.n	800da86 <_rclc_take_new_data+0xd6>
 800daee:	aa04      	add	r2, sp, #16
 800daf0:	a90a      	add	r1, sp, #40	@ 0x28
 800daf2:	3010      	adds	r0, #16
 800daf4:	f007 fbf4 	bl	80152e0 <rcl_action_take_goal_response>
 800daf8:	4605      	mov	r5, r0
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d1a6      	bne.n	800da4c <_rclc_take_new_data+0x9c>
 800dafe:	6860      	ldr	r0, [r4, #4]
 800db00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800db04:	f008 f8a0 	bl	8015c48 <rclc_action_find_handle_by_goal_request_sequence_number>
 800db08:	b130      	cbz	r0, 800db18 <_rclc_take_new_data+0x168>
 800db0a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800db0e:	2201      	movs	r2, #1
 800db10:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800db14:	f880 2020 	strb.w	r2, [r0, #32]
 800db18:	6860      	ldr	r0, [r4, #4]
 800db1a:	e7af      	b.n	800da7c <_rclc_take_new_data+0xcc>
 800db1c:	f008 f840 	bl	8015ba0 <rclc_action_take_goal_handle>
 800db20:	4606      	mov	r6, r0
 800db22:	6860      	ldr	r0, [r4, #4]
 800db24:	2e00      	cmp	r6, #0
 800db26:	d099      	beq.n	800da5c <_rclc_take_new_data+0xac>
 800db28:	6070      	str	r0, [r6, #4]
 800db2a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800db2e:	69f2      	ldr	r2, [r6, #28]
 800db30:	3010      	adds	r0, #16
 800db32:	f007 fdf3 	bl	801571c <rcl_action_take_goal_request>
 800db36:	4605      	mov	r5, r0
 800db38:	2800      	cmp	r0, #0
 800db3a:	f040 8099 	bne.w	800dc70 <_rclc_take_new_data+0x2c0>
 800db3e:	69f7      	ldr	r7, [r6, #28]
 800db40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800db42:	7235      	strb	r5, [r6, #8]
 800db44:	f8c6 0009 	str.w	r0, [r6, #9]
 800db48:	f8c6 100d 	str.w	r1, [r6, #13]
 800db4c:	6860      	ldr	r0, [r4, #4]
 800db4e:	f8c6 2011 	str.w	r2, [r6, #17]
 800db52:	f8c6 3015 	str.w	r3, [r6, #21]
 800db56:	e781      	b.n	800da5c <_rclc_take_new_data+0xac>
 800db58:	3010      	adds	r0, #16
 800db5a:	aa04      	add	r2, sp, #16
 800db5c:	a90a      	add	r1, sp, #40	@ 0x28
 800db5e:	f007 fe4d 	bl	80157fc <rcl_action_take_result_request>
 800db62:	4605      	mov	r5, r0
 800db64:	2800      	cmp	r0, #0
 800db66:	f47f af71 	bne.w	800da4c <_rclc_take_new_data+0x9c>
 800db6a:	a904      	add	r1, sp, #16
 800db6c:	6860      	ldr	r0, [r4, #4]
 800db6e:	f008 f83d 	bl	8015bec <rclc_action_find_goal_handle_by_uuid>
 800db72:	4607      	mov	r7, r0
 800db74:	b160      	cbz	r0, 800db90 <_rclc_take_new_data+0x1e0>
 800db76:	ad0a      	add	r5, sp, #40	@ 0x28
 800db78:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800db7c:	f04f 0c02 	mov.w	ip, #2
 800db80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800db84:	e895 0003 	ldmia.w	r5, {r0, r1}
 800db88:	e886 0003 	stmia.w	r6, {r0, r1}
 800db8c:	f887 c008 	strb.w	ip, [r7, #8]
 800db90:	6860      	ldr	r0, [r4, #4]
 800db92:	2300      	movs	r3, #0
 800db94:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800db98:	e764      	b.n	800da64 <_rclc_take_new_data+0xb4>
 800db9a:	ae04      	add	r6, sp, #16
 800db9c:	3010      	adds	r0, #16
 800db9e:	aa0a      	add	r2, sp, #40	@ 0x28
 800dba0:	4631      	mov	r1, r6
 800dba2:	f007 fe69 	bl	8015878 <rcl_action_take_cancel_request>
 800dba6:	4605      	mov	r5, r0
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	f47f af4f 	bne.w	800da4c <_rclc_take_new_data+0x9c>
 800dbae:	a90a      	add	r1, sp, #40	@ 0x28
 800dbb0:	6860      	ldr	r0, [r4, #4]
 800dbb2:	f008 f81b 	bl	8015bec <rclc_action_find_goal_handle_by_uuid>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d04c      	beq.n	800dc56 <_rclc_take_new_data+0x2a6>
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800dbc2:	f007 ff9b 	bl	8015afc <rcl_action_transition_goal_state>
 800dbc6:	2803      	cmp	r0, #3
 800dbc8:	4607      	mov	r7, r0
 800dbca:	d139      	bne.n	800dc40 <_rclc_take_new_data+0x290>
 800dbcc:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800dbd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dbd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbd4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dbd8:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbdc:	722f      	strb	r7, [r5, #8]
 800dbde:	e746      	b.n	800da6e <_rclc_take_new_data+0xbe>
 800dbe0:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800dbe4:	a90a      	add	r1, sp, #40	@ 0x28
 800dbe6:	3010      	adds	r0, #16
 800dbe8:	f007 fc28 	bl	801543c <rcl_action_take_cancel_response>
 800dbec:	4605      	mov	r5, r0
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f47f af2c 	bne.w	800da4c <_rclc_take_new_data+0x9c>
 800dbf4:	6860      	ldr	r0, [r4, #4]
 800dbf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dbfa:	f008 f849 	bl	8015c90 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800dbfe:	4606      	mov	r6, r0
 800dc00:	6860      	ldr	r0, [r4, #4]
 800dc02:	2e00      	cmp	r6, #0
 800dc04:	f43f af44 	beq.w	800da90 <_rclc_take_new_data+0xe0>
 800dc08:	2701      	movs	r7, #1
 800dc0a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800dc0c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f43f af3e 	beq.w	800da90 <_rclc_take_new_data+0xe0>
 800dc14:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800dc18:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800dc1a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800dc1e:	f007 ffe5 	bl	8015bec <rclc_action_find_goal_handle_by_uuid>
 800dc22:	b138      	cbz	r0, 800dc34 <_rclc_take_new_data+0x284>
 800dc24:	6860      	ldr	r0, [r4, #4]
 800dc26:	3501      	adds	r5, #1
 800dc28:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800dc2c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800dc2e:	42ab      	cmp	r3, r5
 800dc30:	d8f0      	bhi.n	800dc14 <_rclc_take_new_data+0x264>
 800dc32:	e72d      	b.n	800da90 <_rclc_take_new_data+0xe0>
 800dc34:	6860      	ldr	r0, [r4, #4]
 800dc36:	3501      	adds	r5, #1
 800dc38:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800dc3a:	42ab      	cmp	r3, r5
 800dc3c:	d8ea      	bhi.n	800dc14 <_rclc_take_new_data+0x264>
 800dc3e:	e727      	b.n	800da90 <_rclc_take_new_data+0xe0>
 800dc40:	ab06      	add	r3, sp, #24
 800dc42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc44:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dc48:	2103      	movs	r1, #3
 800dc4a:	6860      	ldr	r0, [r4, #4]
 800dc4c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800dc50:	f008 f892 	bl	8015d78 <rclc_action_server_goal_cancel_reject>
 800dc54:	e70b      	b.n	800da6e <_rclc_take_new_data+0xbe>
 800dc56:	ab06      	add	r3, sp, #24
 800dc58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc5a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dc5e:	2102      	movs	r1, #2
 800dc60:	6860      	ldr	r0, [r4, #4]
 800dc62:	e896 000c 	ldmia.w	r6, {r2, r3}
 800dc66:	f008 f887 	bl	8015d78 <rclc_action_server_goal_cancel_reject>
 800dc6a:	e700      	b.n	800da6e <_rclc_take_new_data+0xbe>
 800dc6c:	6860      	ldr	r0, [r4, #4]
 800dc6e:	e70a      	b.n	800da86 <_rclc_take_new_data+0xd6>
 800dc70:	4631      	mov	r1, r6
 800dc72:	6860      	ldr	r0, [r4, #4]
 800dc74:	f007 ffa4 	bl	8015bc0 <rclc_action_remove_used_goal_handle>
 800dc78:	f000 fd66 	bl	800e748 <rcutils_reset_error>
 800dc7c:	e6c0      	b.n	800da00 <_rclc_take_new_data+0x50>
 800dc7e:	2501      	movs	r5, #1
 800dc80:	e6be      	b.n	800da00 <_rclc_take_new_data+0x50>
 800dc82:	bf00      	nop

0800dc84 <rclc_executor_trigger_any>:
 800dc84:	4603      	mov	r3, r0
 800dc86:	b368      	cbz	r0, 800dce4 <rclc_executor_trigger_any+0x60>
 800dc88:	b371      	cbz	r1, 800dce8 <rclc_executor_trigger_any+0x64>
 800dc8a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800dc8e:	2200      	movs	r2, #0
 800dc90:	b348      	cbz	r0, 800dce6 <rclc_executor_trigger_any+0x62>
 800dc92:	b430      	push	{r4, r5}
 800dc94:	f893 c000 	ldrb.w	ip, [r3]
 800dc98:	f1bc 0f08 	cmp.w	ip, #8
 800dc9c:	d016      	beq.n	800dccc <rclc_executor_trigger_any+0x48>
 800dc9e:	f1bc 0f09 	cmp.w	ip, #9
 800dca2:	d00c      	beq.n	800dcbe <rclc_executor_trigger_any+0x3a>
 800dca4:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800dca8:	b938      	cbnz	r0, 800dcba <rclc_executor_trigger_any+0x36>
 800dcaa:	3201      	adds	r2, #1
 800dcac:	3340      	adds	r3, #64	@ 0x40
 800dcae:	4291      	cmp	r1, r2
 800dcb0:	d003      	beq.n	800dcba <rclc_executor_trigger_any+0x36>
 800dcb2:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	d1ec      	bne.n	800dc94 <rclc_executor_trigger_any+0x10>
 800dcba:	bc30      	pop	{r4, r5}
 800dcbc:	4770      	bx	lr
 800dcbe:	685c      	ldr	r4, [r3, #4]
 800dcc0:	6a25      	ldr	r5, [r4, #32]
 800dcc2:	2d00      	cmp	r5, #0
 800dcc4:	d1f9      	bne.n	800dcba <rclc_executor_trigger_any+0x36>
 800dcc6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800dcca:	e7ed      	b.n	800dca8 <rclc_executor_trigger_any+0x24>
 800dccc:	685c      	ldr	r4, [r3, #4]
 800dcce:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800dcd0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800dcd4:	d1f1      	bne.n	800dcba <rclc_executor_trigger_any+0x36>
 800dcd6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d1ed      	bne.n	800dcba <rclc_executor_trigger_any+0x36>
 800dcde:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800dce2:	e7e1      	b.n	800dca8 <rclc_executor_trigger_any+0x24>
 800dce4:	4770      	bx	lr
 800dce6:	4770      	bx	lr
 800dce8:	4608      	mov	r0, r1
 800dcea:	4770      	bx	lr

0800dcec <_rclc_execute>:
 800dcec:	2800      	cmp	r0, #0
 800dcee:	f000 80d4 	beq.w	800de9a <_rclc_execute+0x1ae>
 800dcf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcf4:	7843      	ldrb	r3, [r0, #1]
 800dcf6:	b087      	sub	sp, #28
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	b9c3      	cbnz	r3, 800dd2e <_rclc_execute+0x42>
 800dcfc:	7803      	ldrb	r3, [r0, #0]
 800dcfe:	2b08      	cmp	r3, #8
 800dd00:	f000 809d 	beq.w	800de3e <_rclc_execute+0x152>
 800dd04:	2b09      	cmp	r3, #9
 800dd06:	d028      	beq.n	800dd5a <_rclc_execute+0x6e>
 800dd08:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800dd0c:	b188      	cbz	r0, 800dd32 <_rclc_execute+0x46>
 800dd0e:	2b0a      	cmp	r3, #10
 800dd10:	f200 8158 	bhi.w	800dfc4 <_rclc_execute+0x2d8>
 800dd14:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dd18:	008e0075 	.word	0x008e0075
 800dd1c:	00750082 	.word	0x00750082
 800dd20:	005d0079 	.word	0x005d0079
 800dd24:	005d005d 	.word	0x005d005d
 800dd28:	01560156 	.word	0x01560156
 800dd2c:	007f      	.short	0x007f
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d002      	beq.n	800dd38 <_rclc_execute+0x4c>
 800dd32:	2000      	movs	r0, #0
 800dd34:	b007      	add	sp, #28
 800dd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd38:	7803      	ldrb	r3, [r0, #0]
 800dd3a:	2b0a      	cmp	r3, #10
 800dd3c:	f200 8142 	bhi.w	800dfc4 <_rclc_execute+0x2d8>
 800dd40:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dd44:	007600f2 	.word	0x007600f2
 800dd48:	005f006c 	.word	0x005f006c
 800dd4c:	00470063 	.word	0x00470063
 800dd50:	00470047 	.word	0x00470047
 800dd54:	00fb00f9 	.word	0x00fb00f9
 800dd58:	0069      	.short	0x0069
 800dd5a:	6840      	ldr	r0, [r0, #4]
 800dd5c:	6a02      	ldr	r2, [r0, #32]
 800dd5e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800dd62:	2a00      	cmp	r2, #0
 800dd64:	f040 80ec 	bne.w	800df40 <_rclc_execute+0x254>
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d0e2      	beq.n	800dd32 <_rclc_execute+0x46>
 800dd6c:	e003      	b.n	800dd76 <_rclc_execute+0x8a>
 800dd6e:	6848      	ldr	r0, [r1, #4]
 800dd70:	f007 ff26 	bl	8015bc0 <rclc_action_remove_used_goal_handle>
 800dd74:	6860      	ldr	r0, [r4, #4]
 800dd76:	f007 ff5b 	bl	8015c30 <rclc_action_find_first_terminated_handle>
 800dd7a:	4601      	mov	r1, r0
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	d1f6      	bne.n	800dd6e <_rclc_execute+0x82>
 800dd80:	6860      	ldr	r0, [r4, #4]
 800dd82:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800dd86:	f890 3020 	ldrb.w	r3, [r0, #32]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f000 80e5 	beq.w	800df5a <_rclc_execute+0x26e>
 800dd90:	f640 0634 	movw	r6, #2100	@ 0x834
 800dd94:	2701      	movs	r7, #1
 800dd96:	e007      	b.n	800dda8 <_rclc_execute+0xbc>
 800dd98:	4628      	mov	r0, r5
 800dd9a:	f007 ffa3 	bl	8015ce4 <rclc_action_server_response_goal_request>
 800dd9e:	4629      	mov	r1, r5
 800dda0:	6860      	ldr	r0, [r4, #4]
 800dda2:	f007 ff0d 	bl	8015bc0 <rclc_action_remove_used_goal_handle>
 800dda6:	6860      	ldr	r0, [r4, #4]
 800dda8:	2100      	movs	r1, #0
 800ddaa:	f007 ff35 	bl	8015c18 <rclc_action_find_first_handle_by_status>
 800ddae:	4605      	mov	r5, r0
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	f000 80cf 	beq.w	800df54 <_rclc_execute+0x268>
 800ddb6:	6863      	ldr	r3, [r4, #4]
 800ddb8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ddba:	699b      	ldr	r3, [r3, #24]
 800ddbc:	4798      	blx	r3
 800ddbe:	42b0      	cmp	r0, r6
 800ddc0:	f04f 0100 	mov.w	r1, #0
 800ddc4:	d1e8      	bne.n	800dd98 <_rclc_execute+0xac>
 800ddc6:	2101      	movs	r1, #1
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f007 ff8b 	bl	8015ce4 <rclc_action_server_response_goal_request>
 800ddce:	722f      	strb	r7, [r5, #8]
 800ddd0:	e7e9      	b.n	800dda6 <_rclc_execute+0xba>
 800ddd2:	2b06      	cmp	r3, #6
 800ddd4:	68a0      	ldr	r0, [r4, #8]
 800ddd6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ddd8:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800ddda:	f000 80b5 	beq.w	800df48 <_rclc_execute+0x25c>
 800ddde:	2b07      	cmp	r3, #7
 800dde0:	f000 80eb 	beq.w	800dfba <_rclc_execute+0x2ce>
 800dde4:	f104 0510 	add.w	r5, r4, #16
 800dde8:	47b0      	blx	r6
 800ddea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ddec:	4629      	mov	r1, r5
 800ddee:	6860      	ldr	r0, [r4, #4]
 800ddf0:	f005 ff08 	bl	8013c04 <rcl_send_response>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d09d      	beq.n	800dd34 <_rclc_execute+0x48>
 800ddf8:	9005      	str	r0, [sp, #20]
 800ddfa:	f000 fca5 	bl	800e748 <rcutils_reset_error>
 800ddfe:	9805      	ldr	r0, [sp, #20]
 800de00:	e798      	b.n	800dd34 <_rclc_execute+0x48>
 800de02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800de04:	68a0      	ldr	r0, [r4, #8]
 800de06:	4798      	blx	r3
 800de08:	e793      	b.n	800dd32 <_rclc_execute+0x46>
 800de0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800de0c:	f104 0110 	add.w	r1, r4, #16
 800de10:	68a0      	ldr	r0, [r4, #8]
 800de12:	4798      	blx	r3
 800de14:	e78d      	b.n	800dd32 <_rclc_execute+0x46>
 800de16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800de18:	4798      	blx	r3
 800de1a:	e78a      	b.n	800dd32 <_rclc_execute+0x46>
 800de1c:	6860      	ldr	r0, [r4, #4]
 800de1e:	f006 fb11 	bl	8014444 <rcl_timer_call>
 800de22:	f240 3321 	movw	r3, #801	@ 0x321
 800de26:	4298      	cmp	r0, r3
 800de28:	d083      	beq.n	800dd32 <_rclc_execute+0x46>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d081      	beq.n	800dd32 <_rclc_execute+0x46>
 800de2e:	e7e3      	b.n	800ddf8 <_rclc_execute+0x10c>
 800de30:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800de34:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800de38:	2800      	cmp	r0, #0
 800de3a:	d0ea      	beq.n	800de12 <_rclc_execute+0x126>
 800de3c:	e7e8      	b.n	800de10 <_rclc_execute+0x124>
 800de3e:	6840      	ldr	r0, [r0, #4]
 800de40:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800de42:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800de46:	d107      	bne.n	800de58 <_rclc_execute+0x16c>
 800de48:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800de4c:	b923      	cbnz	r3, 800de58 <_rclc_execute+0x16c>
 800de4e:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800de52:	2b00      	cmp	r3, #0
 800de54:	f43f af6d 	beq.w	800dd32 <_rclc_execute+0x46>
 800de58:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800de5c:	b303      	cbz	r3, 800dea0 <_rclc_execute+0x1b4>
 800de5e:	2600      	movs	r6, #0
 800de60:	2701      	movs	r7, #1
 800de62:	e004      	b.n	800de6e <_rclc_execute+0x182>
 800de64:	f007 fe76 	bl	8015b54 <rclc_action_send_result_request>
 800de68:	b990      	cbnz	r0, 800de90 <_rclc_execute+0x1a4>
 800de6a:	722f      	strb	r7, [r5, #8]
 800de6c:	6860      	ldr	r0, [r4, #4]
 800de6e:	f007 ff21 	bl	8015cb4 <rclc_action_find_first_handle_with_goal_response>
 800de72:	4605      	mov	r5, r0
 800de74:	b198      	cbz	r0, 800de9e <_rclc_execute+0x1b2>
 800de76:	6863      	ldr	r3, [r4, #4]
 800de78:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800de7a:	699b      	ldr	r3, [r3, #24]
 800de7c:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800de80:	f885 6020 	strb.w	r6, [r5, #32]
 800de84:	4798      	blx	r3
 800de86:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800de8a:	4628      	mov	r0, r5
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1e9      	bne.n	800de64 <_rclc_execute+0x178>
 800de90:	4629      	mov	r1, r5
 800de92:	6860      	ldr	r0, [r4, #4]
 800de94:	f007 fe94 	bl	8015bc0 <rclc_action_remove_used_goal_handle>
 800de98:	e7e8      	b.n	800de6c <_rclc_execute+0x180>
 800de9a:	200b      	movs	r0, #11
 800de9c:	4770      	bx	lr
 800de9e:	6860      	ldr	r0, [r4, #4]
 800dea0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800dea4:	b18b      	cbz	r3, 800deca <_rclc_execute+0x1de>
 800dea6:	68c5      	ldr	r5, [r0, #12]
 800dea8:	b32d      	cbz	r5, 800def6 <_rclc_execute+0x20a>
 800deaa:	2600      	movs	r6, #0
 800deac:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800deb0:	b143      	cbz	r3, 800dec4 <_rclc_execute+0x1d8>
 800deb2:	69c3      	ldr	r3, [r0, #28]
 800deb4:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800deb8:	b123      	cbz	r3, 800dec4 <_rclc_execute+0x1d8>
 800deba:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800debc:	4628      	mov	r0, r5
 800debe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dec0:	4798      	blx	r3
 800dec2:	6860      	ldr	r0, [r4, #4]
 800dec4:	682d      	ldr	r5, [r5, #0]
 800dec6:	2d00      	cmp	r5, #0
 800dec8:	d1f0      	bne.n	800deac <_rclc_execute+0x1c0>
 800deca:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800dece:	b193      	cbz	r3, 800def6 <_rclc_execute+0x20a>
 800ded0:	68c5      	ldr	r5, [r0, #12]
 800ded2:	b185      	cbz	r5, 800def6 <_rclc_execute+0x20a>
 800ded4:	2600      	movs	r6, #0
 800ded6:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800deda:	b14b      	cbz	r3, 800def0 <_rclc_execute+0x204>
 800dedc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800dede:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800dee2:	b12b      	cbz	r3, 800def0 <_rclc_execute+0x204>
 800dee4:	4628      	mov	r0, r5
 800dee6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dee8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800deec:	4798      	blx	r3
 800deee:	6860      	ldr	r0, [r4, #4]
 800def0:	682d      	ldr	r5, [r5, #0]
 800def2:	2d00      	cmp	r5, #0
 800def4:	d1ef      	bne.n	800ded6 <_rclc_execute+0x1ea>
 800def6:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800defa:	2b00      	cmp	r3, #0
 800defc:	f43f af19 	beq.w	800dd32 <_rclc_execute+0x46>
 800df00:	2700      	movs	r7, #0
 800df02:	e00b      	b.n	800df1c <_rclc_execute+0x230>
 800df04:	6863      	ldr	r3, [r4, #4]
 800df06:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800df08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800df0a:	6a1e      	ldr	r6, [r3, #32]
 800df0c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800df10:	47b0      	blx	r6
 800df12:	6860      	ldr	r0, [r4, #4]
 800df14:	4629      	mov	r1, r5
 800df16:	f007 fe53 	bl	8015bc0 <rclc_action_remove_used_goal_handle>
 800df1a:	6860      	ldr	r0, [r4, #4]
 800df1c:	f007 fed6 	bl	8015ccc <rclc_action_find_first_handle_with_result_response>
 800df20:	4605      	mov	r5, r0
 800df22:	2800      	cmp	r0, #0
 800df24:	d1ee      	bne.n	800df04 <_rclc_execute+0x218>
 800df26:	e704      	b.n	800dd32 <_rclc_execute+0x46>
 800df28:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800df2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800df2e:	2800      	cmp	r0, #0
 800df30:	f43f af69 	beq.w	800de06 <_rclc_execute+0x11a>
 800df34:	e766      	b.n	800de04 <_rclc_execute+0x118>
 800df36:	6840      	ldr	r0, [r0, #4]
 800df38:	e78e      	b.n	800de58 <_rclc_execute+0x16c>
 800df3a:	6840      	ldr	r0, [r0, #4]
 800df3c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	f43f af20 	beq.w	800dd86 <_rclc_execute+0x9a>
 800df46:	e716      	b.n	800dd76 <_rclc_execute+0x8a>
 800df48:	f104 0510 	add.w	r5, r4, #16
 800df4c:	460a      	mov	r2, r1
 800df4e:	4629      	mov	r1, r5
 800df50:	47b0      	blx	r6
 800df52:	e74a      	b.n	800ddea <_rclc_execute+0xfe>
 800df54:	6860      	ldr	r0, [r4, #4]
 800df56:	f880 5020 	strb.w	r5, [r0, #32]
 800df5a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f43f aee7 	beq.w	800dd32 <_rclc_execute+0x46>
 800df64:	68c5      	ldr	r5, [r0, #12]
 800df66:	b325      	cbz	r5, 800dfb2 <_rclc_execute+0x2c6>
 800df68:	2602      	movs	r6, #2
 800df6a:	e001      	b.n	800df70 <_rclc_execute+0x284>
 800df6c:	682d      	ldr	r5, [r5, #0]
 800df6e:	b305      	cbz	r5, 800dfb2 <_rclc_execute+0x2c6>
 800df70:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800df74:	2b03      	cmp	r3, #3
 800df76:	d1f9      	bne.n	800df6c <_rclc_execute+0x280>
 800df78:	69c3      	ldr	r3, [r0, #28]
 800df7a:	4628      	mov	r0, r5
 800df7c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800df7e:	4798      	blx	r3
 800df80:	4603      	mov	r3, r0
 800df82:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800df86:	4628      	mov	r0, r5
 800df88:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800df8c:	b11b      	cbz	r3, 800df96 <_rclc_execute+0x2aa>
 800df8e:	f007 fec7 	bl	8015d20 <rclc_action_server_goal_cancel_accept>
 800df92:	6860      	ldr	r0, [r4, #4]
 800df94:	e7ea      	b.n	800df6c <_rclc_execute+0x280>
 800df96:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800df98:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800df9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dfa0:	2101      	movs	r1, #1
 800dfa2:	6860      	ldr	r0, [r4, #4]
 800dfa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfa8:	f007 fee6 	bl	8015d78 <rclc_action_server_goal_cancel_reject>
 800dfac:	722e      	strb	r6, [r5, #8]
 800dfae:	6860      	ldr	r0, [r4, #4]
 800dfb0:	e7dc      	b.n	800df6c <_rclc_execute+0x280>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800dfb8:	e6bb      	b.n	800dd32 <_rclc_execute+0x46>
 800dfba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dfbc:	f104 0510 	add.w	r5, r4, #16
 800dfc0:	47b0      	blx	r6
 800dfc2:	e712      	b.n	800ddea <_rclc_execute+0xfe>
 800dfc4:	2001      	movs	r0, #1
 800dfc6:	e6b5      	b.n	800dd34 <_rclc_execute+0x48>

0800dfc8 <rclc_executor_init>:
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d066      	beq.n	800e09a <rclc_executor_init+0xd2>
 800dfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd0:	4688      	mov	r8, r1
 800dfd2:	b0b2      	sub	sp, #200	@ 0xc8
 800dfd4:	2900      	cmp	r1, #0
 800dfd6:	d05c      	beq.n	800e092 <rclc_executor_init+0xca>
 800dfd8:	4616      	mov	r6, r2
 800dfda:	4605      	mov	r5, r0
 800dfdc:	4618      	mov	r0, r3
 800dfde:	461f      	mov	r7, r3
 800dfe0:	f000 fb8c 	bl	800e6fc <rcutils_allocator_is_valid>
 800dfe4:	2e00      	cmp	r6, #0
 800dfe6:	d054      	beq.n	800e092 <rclc_executor_init+0xca>
 800dfe8:	f080 0401 	eor.w	r4, r0, #1
 800dfec:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800dff0:	d14f      	bne.n	800e092 <rclc_executor_init+0xca>
 800dff2:	2290      	movs	r2, #144	@ 0x90
 800dff4:	492e      	ldr	r1, [pc, #184]	@ (800e0b0 <rclc_executor_init+0xe8>)
 800dff6:	a80e      	add	r0, sp, #56	@ 0x38
 800dff8:	f00c ff39 	bl	801ae6e <memcpy>
 800dffc:	a90e      	add	r1, sp, #56	@ 0x38
 800dffe:	2290      	movs	r2, #144	@ 0x90
 800e000:	4628      	mov	r0, r5
 800e002:	f00c ff34 	bl	801ae6e <memcpy>
 800e006:	4668      	mov	r0, sp
 800e008:	f8c5 8004 	str.w	r8, [r5, #4]
 800e00c:	60ee      	str	r6, [r5, #12]
 800e00e:	f006 fb0b 	bl	8014628 <rcl_get_zero_initialized_wait_set>
 800e012:	46ec      	mov	ip, sp
 800e014:	f105 0e18 	add.w	lr, r5, #24
 800e018:	f8d7 8000 	ldr.w	r8, [r7]
 800e01c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e020:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e024:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e028:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e02c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e030:	ed9f 7b1d 	vldr	d7, [pc, #116]	@ 800e0a8 <rclc_executor_init+0xe0>
 800e034:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e038:	f8dc 3000 	ldr.w	r3, [ip]
 800e03c:	01b0      	lsls	r0, r6, #6
 800e03e:	6939      	ldr	r1, [r7, #16]
 800e040:	f8ce 3000 	str.w	r3, [lr]
 800e044:	616f      	str	r7, [r5, #20]
 800e046:	ed85 7b1c 	vstr	d7, [r5, #112]	@ 0x70
 800e04a:	47c0      	blx	r8
 800e04c:	60a8      	str	r0, [r5, #8]
 800e04e:	b908      	cbnz	r0, 800e054 <rclc_executor_init+0x8c>
 800e050:	e025      	b.n	800e09e <rclc_executor_init+0xd6>
 800e052:	68a8      	ldr	r0, [r5, #8]
 800e054:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e058:	3401      	adds	r4, #1
 800e05a:	4631      	mov	r1, r6
 800e05c:	f000 fa02 	bl	800e464 <rclc_executor_handle_init>
 800e060:	42a6      	cmp	r6, r4
 800e062:	d8f6      	bhi.n	800e052 <rclc_executor_init+0x8a>
 800e064:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 800e068:	f000 f9f2 	bl	800e450 <rclc_executor_handle_counters_zero_init>
 800e06c:	4911      	ldr	r1, [pc, #68]	@ (800e0b4 <rclc_executor_init+0xec>)
 800e06e:	2200      	movs	r2, #0
 800e070:	68ab      	ldr	r3, [r5, #8]
 800e072:	e9c5 1220 	strd	r1, r2, [r5, #128]	@ 0x80
 800e076:	b143      	cbz	r3, 800e08a <rclc_executor_init+0xc2>
 800e078:	696b      	ldr	r3, [r5, #20]
 800e07a:	b133      	cbz	r3, 800e08a <rclc_executor_init+0xc2>
 800e07c:	68ea      	ldr	r2, [r5, #12]
 800e07e:	fab2 f382 	clz	r3, r2
 800e082:	095b      	lsrs	r3, r3, #5
 800e084:	b10a      	cbz	r2, 800e08a <rclc_executor_init+0xc2>
 800e086:	f885 3088 	strb.w	r3, [r5, #136]	@ 0x88
 800e08a:	2000      	movs	r0, #0
 800e08c:	b032      	add	sp, #200	@ 0xc8
 800e08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e092:	200b      	movs	r0, #11
 800e094:	b032      	add	sp, #200	@ 0xc8
 800e096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09a:	200b      	movs	r0, #11
 800e09c:	4770      	bx	lr
 800e09e:	200a      	movs	r0, #10
 800e0a0:	e7f8      	b.n	800e094 <rclc_executor_init+0xcc>
 800e0a2:	bf00      	nop
 800e0a4:	f3af 8000 	nop.w
 800e0a8:	3b9aca00 	.word	0x3b9aca00
 800e0ac:	00000000 	.word	0x00000000
 800e0b0:	0801bc50 	.word	0x0801bc50
 800e0b4:	0800dc85 	.word	0x0800dc85

0800e0b8 <rclc_executor_add_timer>:
 800e0b8:	b371      	cbz	r1, 800e118 <rclc_executor_add_timer+0x60>
 800e0ba:	fab0 f280 	clz	r2, r0
 800e0be:	b570      	push	{r4, r5, r6, lr}
 800e0c0:	0952      	lsrs	r2, r2, #5
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	b300      	cbz	r0, 800e108 <rclc_executor_add_timer+0x50>
 800e0c6:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800e0ca:	4283      	cmp	r3, r0
 800e0cc:	d301      	bcc.n	800e0d2 <rclc_executor_add_timer+0x1a>
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	bd70      	pop	{r4, r5, r6, pc}
 800e0d2:	68a5      	ldr	r5, [r4, #8]
 800e0d4:	ea4f 1e83 	mov.w	lr, r3, lsl #6
 800e0d8:	f04f 0c01 	mov.w	ip, #1
 800e0dc:	2602      	movs	r6, #2
 800e0de:	eb05 1083 	add.w	r0, r5, r3, lsl #6
 800e0e2:	4463      	add	r3, ip
 800e0e4:	6041      	str	r1, [r0, #4]
 800e0e6:	f825 600e 	strh.w	r6, [r5, lr]
 800e0ea:	f104 0518 	add.w	r5, r4, #24
 800e0ee:	62c2      	str	r2, [r0, #44]	@ 0x2c
 800e0f0:	f8a0 c038 	strh.w	ip, [r0, #56]	@ 0x38
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	6123      	str	r3, [r4, #16]
 800e0f8:	f006 faaa 	bl	8014650 <rcl_wait_set_is_valid>
 800e0fc:	b930      	cbnz	r0, 800e10c <rclc_executor_add_timer+0x54>
 800e0fe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e100:	2000      	movs	r0, #0
 800e102:	3301      	adds	r3, #1
 800e104:	6523      	str	r3, [r4, #80]	@ 0x50
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	200b      	movs	r0, #11
 800e10a:	bd70      	pop	{r4, r5, r6, pc}
 800e10c:	4628      	mov	r0, r5
 800e10e:	f006 faa5 	bl	801465c <rcl_wait_set_fini>
 800e112:	2800      	cmp	r0, #0
 800e114:	d0f3      	beq.n	800e0fe <rclc_executor_add_timer+0x46>
 800e116:	bd70      	pop	{r4, r5, r6, pc}
 800e118:	200b      	movs	r0, #11
 800e11a:	4770      	bx	lr

0800e11c <rclc_executor_prepare>:
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d044      	beq.n	800e1aa <rclc_executor_prepare+0x8e>
 800e120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e122:	f100 0518 	add.w	r5, r0, #24
 800e126:	b09b      	sub	sp, #108	@ 0x6c
 800e128:	4604      	mov	r4, r0
 800e12a:	4628      	mov	r0, r5
 800e12c:	f006 fa90 	bl	8014650 <rcl_wait_set_is_valid>
 800e130:	b110      	cbz	r0, 800e138 <rclc_executor_prepare+0x1c>
 800e132:	2000      	movs	r0, #0
 800e134:	b01b      	add	sp, #108	@ 0x6c
 800e136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e138:	4628      	mov	r0, r5
 800e13a:	f006 fa8f 	bl	801465c <rcl_wait_set_fini>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d130      	bne.n	800e1a4 <rclc_executor_prepare+0x88>
 800e142:	a80c      	add	r0, sp, #48	@ 0x30
 800e144:	ae04      	add	r6, sp, #16
 800e146:	f006 fa6f 	bl	8014628 <rcl_get_zero_initialized_wait_set>
 800e14a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800e14e:	46ae      	mov	lr, r5
 800e150:	6967      	ldr	r7, [r4, #20]
 800e152:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e156:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e15a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e15e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e162:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e166:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e16a:	f8dc 3000 	ldr.w	r3, [ip]
 800e16e:	f8ce 3000 	str.w	r3, [lr]
 800e172:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e174:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	4628      	mov	r0, r5
 800e17a:	6862      	ldr	r2, [r4, #4]
 800e17c:	6033      	str	r3, [r6, #0]
 800e17e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800e180:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800e182:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e186:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800e18a:	e9cd 2100 	strd	r2, r1, [sp]
 800e18e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e190:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800e192:	f006 fd7d 	bl	8014c90 <rcl_wait_set_init>
 800e196:	2800      	cmp	r0, #0
 800e198:	d0cc      	beq.n	800e134 <rclc_executor_prepare+0x18>
 800e19a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e19c:	f000 fad4 	bl	800e748 <rcutils_reset_error>
 800e1a0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e1a2:	e7c7      	b.n	800e134 <rclc_executor_prepare+0x18>
 800e1a4:	f000 fad0 	bl	800e748 <rcutils_reset_error>
 800e1a8:	e7cb      	b.n	800e142 <rclc_executor_prepare+0x26>
 800e1aa:	200b      	movs	r0, #11
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop

0800e1b0 <rclc_executor_spin_some>:
 800e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b4:	b083      	sub	sp, #12
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	f000 8091 	beq.w	800e2de <rclc_executor_spin_some+0x12e>
 800e1bc:	4604      	mov	r4, r0
 800e1be:	6840      	ldr	r0, [r0, #4]
 800e1c0:	4690      	mov	r8, r2
 800e1c2:	4699      	mov	r9, r3
 800e1c4:	f004 ff66 	bl	8013094 <rcl_context_is_valid>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d037      	beq.n	800e23c <rclc_executor_spin_some+0x8c>
 800e1cc:	f104 0718 	add.w	r7, r4, #24
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f7ff ffa3 	bl	800e11c <rclc_executor_prepare>
 800e1d6:	4638      	mov	r0, r7
 800e1d8:	f006 fb10 	bl	80147fc <rcl_wait_set_clear>
 800e1dc:	4606      	mov	r6, r0
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d177      	bne.n	800e2d2 <rclc_executor_spin_some+0x122>
 800e1e2:	68e3      	ldr	r3, [r4, #12]
 800e1e4:	b1f3      	cbz	r3, 800e224 <rclc_executor_spin_some+0x74>
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	68a1      	ldr	r1, [r4, #8]
 800e1ea:	01aa      	lsls	r2, r5, #6
 800e1ec:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800e1f0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800e1f4:	b1b3      	cbz	r3, 800e224 <rclc_executor_spin_some+0x74>
 800e1f6:	5c8b      	ldrb	r3, [r1, r2]
 800e1f8:	2b0a      	cmp	r3, #10
 800e1fa:	d81f      	bhi.n	800e23c <rclc_executor_spin_some+0x8c>
 800e1fc:	e8df f003 	tbb	[pc, r3]
 800e200:	253e3434 	.word	0x253e3434
 800e204:	06060625 	.word	0x06060625
 800e208:	525d      	.short	0x525d
 800e20a:	48          	.byte	0x48
 800e20b:	00          	.byte	0x00
 800e20c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e210:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e214:	4638      	mov	r0, r7
 800e216:	f006 fe53 	bl	8014ec0 <rcl_wait_set_add_service>
 800e21a:	b9f8      	cbnz	r0, 800e25c <rclc_executor_spin_some+0xac>
 800e21c:	3501      	adds	r5, #1
 800e21e:	68e3      	ldr	r3, [r4, #12]
 800e220:	42ab      	cmp	r3, r5
 800e222:	d8e1      	bhi.n	800e1e8 <rclc_executor_spin_some+0x38>
 800e224:	4642      	mov	r2, r8
 800e226:	464b      	mov	r3, r9
 800e228:	4638      	mov	r0, r7
 800e22a:	f006 fe75 	bl	8014f18 <rcl_wait>
 800e22e:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800e232:	2d00      	cmp	r5, #0
 800e234:	f000 80ac 	beq.w	800e390 <rclc_executor_spin_some+0x1e0>
 800e238:	2d01      	cmp	r5, #1
 800e23a:	d055      	beq.n	800e2e8 <rclc_executor_spin_some+0x138>
 800e23c:	2601      	movs	r6, #1
 800e23e:	f000 fa83 	bl	800e748 <rcutils_reset_error>
 800e242:	4630      	mov	r0, r6
 800e244:	b003      	add	sp, #12
 800e246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e24e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e252:	4638      	mov	r0, r7
 800e254:	f006 fe08 	bl	8014e68 <rcl_wait_set_add_client>
 800e258:	2800      	cmp	r0, #0
 800e25a:	d0df      	beq.n	800e21c <rclc_executor_spin_some+0x6c>
 800e25c:	9001      	str	r0, [sp, #4]
 800e25e:	f000 fa73 	bl	800e748 <rcutils_reset_error>
 800e262:	9801      	ldr	r0, [sp, #4]
 800e264:	4606      	mov	r6, r0
 800e266:	e7ec      	b.n	800e242 <rclc_executor_spin_some+0x92>
 800e268:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e26c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e270:	4638      	mov	r0, r7
 800e272:	f006 fa97 	bl	80147a4 <rcl_wait_set_add_subscription>
 800e276:	2800      	cmp	r0, #0
 800e278:	d0d0      	beq.n	800e21c <rclc_executor_spin_some+0x6c>
 800e27a:	e7ef      	b.n	800e25c <rclc_executor_spin_some+0xac>
 800e27c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e280:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e284:	4638      	mov	r0, r7
 800e286:	f006 fdbf 	bl	8014e08 <rcl_wait_set_add_timer>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	d0c6      	beq.n	800e21c <rclc_executor_spin_some+0x6c>
 800e28e:	e7e5      	b.n	800e25c <rclc_executor_spin_some+0xac>
 800e290:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e294:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e298:	4638      	mov	r0, r7
 800e29a:	f006 fd89 	bl	8014db0 <rcl_wait_set_add_guard_condition>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d0bc      	beq.n	800e21c <rclc_executor_spin_some+0x6c>
 800e2a2:	e7db      	b.n	800e25c <rclc_executor_spin_some+0xac>
 800e2a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e2a8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e2ac:	4638      	mov	r0, r7
 800e2ae:	3110      	adds	r1, #16
 800e2b0:	f007 fb56 	bl	8015960 <rcl_action_wait_set_add_action_server>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d0b1      	beq.n	800e21c <rclc_executor_spin_some+0x6c>
 800e2b8:	e7d0      	b.n	800e25c <rclc_executor_spin_some+0xac>
 800e2ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800e2c4:	4638      	mov	r0, r7
 800e2c6:	3110      	adds	r1, #16
 800e2c8:	f007 f936 	bl	8015538 <rcl_action_wait_set_add_action_client>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d0a5      	beq.n	800e21c <rclc_executor_spin_some+0x6c>
 800e2d0:	e7c4      	b.n	800e25c <rclc_executor_spin_some+0xac>
 800e2d2:	f000 fa39 	bl	800e748 <rcutils_reset_error>
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	b003      	add	sp, #12
 800e2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2de:	260b      	movs	r6, #11
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	b003      	add	sp, #12
 800e2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e8:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800e2ec:	4663      	mov	r3, ip
 800e2ee:	2a00      	cmp	r2, #0
 800e2f0:	f000 80a9 	beq.w	800e446 <rclc_executor_spin_some+0x296>
 800e2f4:	2500      	movs	r5, #0
 800e2f6:	f240 1991 	movw	r9, #401	@ 0x191
 800e2fa:	46a8      	mov	r8, r5
 800e2fc:	e00c      	b.n	800e318 <rclc_executor_spin_some+0x168>
 800e2fe:	f7ff fb09 	bl	800d914 <_rclc_check_for_new_data>
 800e302:	f108 0801 	add.w	r8, r8, #1
 800e306:	4605      	mov	r5, r0
 800e308:	b108      	cbz	r0, 800e30e <rclc_executor_spin_some+0x15e>
 800e30a:	4548      	cmp	r0, r9
 800e30c:	d13e      	bne.n	800e38c <rclc_executor_spin_some+0x1dc>
 800e30e:	68e2      	ldr	r2, [r4, #12]
 800e310:	4590      	cmp	r8, r2
 800e312:	f080 808f 	bcs.w	800e434 <rclc_executor_spin_some+0x284>
 800e316:	68a3      	ldr	r3, [r4, #8]
 800e318:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800e31c:	469c      	mov	ip, r3
 800e31e:	4639      	mov	r1, r7
 800e320:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1ea      	bne.n	800e2fe <rclc_executor_spin_some+0x14e>
 800e328:	4611      	mov	r1, r2
 800e32a:	4660      	mov	r0, ip
 800e32c:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800e330:	4798      	blx	r3
 800e332:	b358      	cbz	r0, 800e38c <rclc_executor_spin_some+0x1dc>
 800e334:	68e3      	ldr	r3, [r4, #12]
 800e336:	b34b      	cbz	r3, 800e38c <rclc_executor_spin_some+0x1dc>
 800e338:	f04f 0800 	mov.w	r8, #0
 800e33c:	f240 1991 	movw	r9, #401	@ 0x191
 800e340:	e00a      	b.n	800e358 <rclc_executor_spin_some+0x1a8>
 800e342:	f7ff fb35 	bl	800d9b0 <_rclc_take_new_data>
 800e346:	f108 0801 	add.w	r8, r8, #1
 800e34a:	4605      	mov	r5, r0
 800e34c:	b108      	cbz	r0, 800e352 <rclc_executor_spin_some+0x1a2>
 800e34e:	4548      	cmp	r0, r9
 800e350:	d11c      	bne.n	800e38c <rclc_executor_spin_some+0x1dc>
 800e352:	68e3      	ldr	r3, [r4, #12]
 800e354:	4598      	cmp	r8, r3
 800e356:	d270      	bcs.n	800e43a <rclc_executor_spin_some+0x28a>
 800e358:	68a3      	ldr	r3, [r4, #8]
 800e35a:	4639      	mov	r1, r7
 800e35c:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800e360:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800e364:	2a00      	cmp	r2, #0
 800e366:	d1ec      	bne.n	800e342 <rclc_executor_spin_some+0x192>
 800e368:	2700      	movs	r7, #0
 800e36a:	e009      	b.n	800e380 <rclc_executor_spin_some+0x1d0>
 800e36c:	f7ff fcbe 	bl	800dcec <_rclc_execute>
 800e370:	3701      	adds	r7, #1
 800e372:	4605      	mov	r5, r0
 800e374:	b950      	cbnz	r0, 800e38c <rclc_executor_spin_some+0x1dc>
 800e376:	68e3      	ldr	r3, [r4, #12]
 800e378:	429f      	cmp	r7, r3
 800e37a:	f4bf af62 	bcs.w	800e242 <rclc_executor_spin_some+0x92>
 800e37e:	68a3      	ldr	r3, [r4, #8]
 800e380:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800e384:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d1ef      	bne.n	800e36c <rclc_executor_spin_some+0x1bc>
 800e38c:	462e      	mov	r6, r5
 800e38e:	e758      	b.n	800e242 <rclc_executor_spin_some+0x92>
 800e390:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800e394:	4663      	mov	r3, ip
 800e396:	2a00      	cmp	r2, #0
 800e398:	d057      	beq.n	800e44a <rclc_executor_spin_some+0x29a>
 800e39a:	f240 1991 	movw	r9, #401	@ 0x191
 800e39e:	46a8      	mov	r8, r5
 800e3a0:	e00b      	b.n	800e3ba <rclc_executor_spin_some+0x20a>
 800e3a2:	f7ff fab7 	bl	800d914 <_rclc_check_for_new_data>
 800e3a6:	f108 0801 	add.w	r8, r8, #1
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	b108      	cbz	r0, 800e3b2 <rclc_executor_spin_some+0x202>
 800e3ae:	4548      	cmp	r0, r9
 800e3b0:	d1ec      	bne.n	800e38c <rclc_executor_spin_some+0x1dc>
 800e3b2:	68e2      	ldr	r2, [r4, #12]
 800e3b4:	4590      	cmp	r8, r2
 800e3b6:	d23a      	bcs.n	800e42e <rclc_executor_spin_some+0x27e>
 800e3b8:	68a3      	ldr	r3, [r4, #8]
 800e3ba:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800e3be:	469c      	mov	ip, r3
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1eb      	bne.n	800e3a2 <rclc_executor_spin_some+0x1f2>
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	4660      	mov	r0, ip
 800e3ce:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800e3d2:	4798      	blx	r3
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d0d9      	beq.n	800e38c <rclc_executor_spin_some+0x1dc>
 800e3d8:	68e3      	ldr	r3, [r4, #12]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d0d6      	beq.n	800e38c <rclc_executor_spin_some+0x1dc>
 800e3de:	f04f 0a00 	mov.w	sl, #0
 800e3e2:	f240 1891 	movw	r8, #401	@ 0x191
 800e3e6:	f240 2959 	movw	r9, #601	@ 0x259
 800e3ea:	e014      	b.n	800e416 <rclc_executor_spin_some+0x266>
 800e3ec:	f7ff fae0 	bl	800d9b0 <_rclc_take_new_data>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	bf18      	it	ne
 800e3f4:	4540      	cmpne	r0, r8
 800e3f6:	d001      	beq.n	800e3fc <rclc_executor_spin_some+0x24c>
 800e3f8:	4548      	cmp	r0, r9
 800e3fa:	d122      	bne.n	800e442 <rclc_executor_spin_some+0x292>
 800e3fc:	68a0      	ldr	r0, [r4, #8]
 800e3fe:	f10a 0a01 	add.w	sl, sl, #1
 800e402:	4458      	add	r0, fp
 800e404:	f7ff fc72 	bl	800dcec <_rclc_execute>
 800e408:	4605      	mov	r5, r0
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d1be      	bne.n	800e38c <rclc_executor_spin_some+0x1dc>
 800e40e:	68e3      	ldr	r3, [r4, #12]
 800e410:	459a      	cmp	sl, r3
 800e412:	f4bf af16 	bcs.w	800e242 <rclc_executor_spin_some+0x92>
 800e416:	68a0      	ldr	r0, [r4, #8]
 800e418:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e41c:	4639      	mov	r1, r7
 800e41e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e422:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1e0      	bne.n	800e3ec <rclc_executor_spin_some+0x23c>
 800e42a:	462e      	mov	r6, r5
 800e42c:	e709      	b.n	800e242 <rclc_executor_spin_some+0x92>
 800e42e:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800e432:	e7ca      	b.n	800e3ca <rclc_executor_spin_some+0x21a>
 800e434:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800e438:	e776      	b.n	800e328 <rclc_executor_spin_some+0x178>
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d0a6      	beq.n	800e38c <rclc_executor_spin_some+0x1dc>
 800e43e:	68a3      	ldr	r3, [r4, #8]
 800e440:	e792      	b.n	800e368 <rclc_executor_spin_some+0x1b8>
 800e442:	4606      	mov	r6, r0
 800e444:	e6fd      	b.n	800e242 <rclc_executor_spin_some+0x92>
 800e446:	4615      	mov	r5, r2
 800e448:	e76e      	b.n	800e328 <rclc_executor_spin_some+0x178>
 800e44a:	4615      	mov	r5, r2
 800e44c:	e7bd      	b.n	800e3ca <rclc_executor_spin_some+0x21a>
 800e44e:	bf00      	nop

0800e450 <rclc_executor_handle_counters_zero_init>:
 800e450:	b130      	cbz	r0, 800e460 <rclc_executor_handle_counters_zero_init+0x10>
 800e452:	2220      	movs	r2, #32
 800e454:	2100      	movs	r1, #0
 800e456:	b508      	push	{r3, lr}
 800e458:	f00c fbd0 	bl	801abfc <memset>
 800e45c:	2000      	movs	r0, #0
 800e45e:	bd08      	pop	{r3, pc}
 800e460:	200b      	movs	r0, #11
 800e462:	4770      	bx	lr

0800e464 <rclc_executor_handle_init>:
 800e464:	4603      	mov	r3, r0
 800e466:	b168      	cbz	r0, 800e484 <rclc_executor_handle_init+0x20>
 800e468:	2200      	movs	r2, #0
 800e46a:	f04f 0c0b 	mov.w	ip, #11
 800e46e:	6341      	str	r1, [r0, #52]	@ 0x34
 800e470:	4610      	mov	r0, r2
 800e472:	f8a3 c000 	strh.w	ip, [r3]
 800e476:	631a      	str	r2, [r3, #48]	@ 0x30
 800e478:	871a      	strh	r2, [r3, #56]	@ 0x38
 800e47a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800e47e:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
 800e482:	4770      	bx	lr
 800e484:	200b      	movs	r0, #11
 800e486:	4770      	bx	lr

0800e488 <rclc_support_init>:
 800e488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e48c:	b086      	sub	sp, #24
 800e48e:	b3b8      	cbz	r0, 800e500 <rclc_support_init+0x78>
 800e490:	461c      	mov	r4, r3
 800e492:	b3ab      	cbz	r3, 800e500 <rclc_support_init+0x78>
 800e494:	f104 050c 	add.w	r5, r4, #12
 800e498:	460f      	mov	r7, r1
 800e49a:	4690      	mov	r8, r2
 800e49c:	4606      	mov	r6, r0
 800e49e:	f004 ff81 	bl	80133a4 <rcl_get_zero_initialized_init_options>
 800e4a2:	9005      	str	r0, [sp, #20]
 800e4a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e4a8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e4ac:	a805      	add	r0, sp, #20
 800e4ae:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e4b2:	f004 ff79 	bl	80133a8 <rcl_init_options_init>
 800e4b6:	4605      	mov	r5, r0
 800e4b8:	b9e0      	cbnz	r0, 800e4f4 <rclc_support_init+0x6c>
 800e4ba:	ad02      	add	r5, sp, #8
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f004 fddf 	bl	8013080 <rcl_get_zero_initialized_context>
 800e4c2:	4633      	mov	r3, r6
 800e4c4:	aa05      	add	r2, sp, #20
 800e4c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e4ca:	e886 0003 	stmia.w	r6, {r0, r1}
 800e4ce:	4641      	mov	r1, r8
 800e4d0:	4638      	mov	r0, r7
 800e4d2:	f004 fe45 	bl	8013160 <rcl_init>
 800e4d6:	4605      	mov	r5, r0
 800e4d8:	b9b8      	cbnz	r0, 800e50a <rclc_support_init+0x82>
 800e4da:	4622      	mov	r2, r4
 800e4dc:	f106 010c 	add.w	r1, r6, #12
 800e4e0:	2003      	movs	r0, #3
 800e4e2:	60b4      	str	r4, [r6, #8]
 800e4e4:	f005 fce0 	bl	8013ea8 <rcl_clock_init>
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	b970      	cbnz	r0, 800e50a <rclc_support_init+0x82>
 800e4ec:	a805      	add	r0, sp, #20
 800e4ee:	f004 ffb7 	bl	8013460 <rcl_init_options_fini>
 800e4f2:	b108      	cbz	r0, 800e4f8 <rclc_support_init+0x70>
 800e4f4:	f000 f928 	bl	800e748 <rcutils_reset_error>
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	b006      	add	sp, #24
 800e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e500:	250b      	movs	r5, #11
 800e502:	4628      	mov	r0, r5
 800e504:	b006      	add	sp, #24
 800e506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e50a:	f000 f91d 	bl	800e748 <rcutils_reset_error>
 800e50e:	a805      	add	r0, sp, #20
 800e510:	f004 ffa6 	bl	8013460 <rcl_init_options_fini>
 800e514:	2800      	cmp	r0, #0
 800e516:	d0ef      	beq.n	800e4f8 <rclc_support_init+0x70>
 800e518:	e7ec      	b.n	800e4f4 <rclc_support_init+0x6c>
 800e51a:	bf00      	nop

0800e51c <rclc_node_init_default>:
 800e51c:	2a00      	cmp	r2, #0
 800e51e:	bf18      	it	ne
 800e520:	2b00      	cmpne	r3, #0
 800e522:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e526:	461f      	mov	r7, r3
 800e528:	bf0c      	ite	eq
 800e52a:	2301      	moveq	r3, #1
 800e52c:	2300      	movne	r3, #0
 800e52e:	b0a1      	sub	sp, #132	@ 0x84
 800e530:	2900      	cmp	r1, #0
 800e532:	bf08      	it	eq
 800e534:	f043 0301 	orreq.w	r3, r3, #1
 800e538:	bb23      	cbnz	r3, 800e584 <rclc_node_init_default+0x68>
 800e53a:	4604      	mov	r4, r0
 800e53c:	b310      	cbz	r0, 800e584 <rclc_node_init_default+0x68>
 800e53e:	f10d 0810 	add.w	r8, sp, #16
 800e542:	4616      	mov	r6, r2
 800e544:	460d      	mov	r5, r1
 800e546:	f10d 0918 	add.w	r9, sp, #24
 800e54a:	4640      	mov	r0, r8
 800e54c:	f005 f832 	bl	80135b4 <rcl_get_zero_initialized_node>
 800e550:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e554:	e884 0003 	stmia.w	r4, {r0, r1}
 800e558:	4648      	mov	r0, r9
 800e55a:	f005 f9e9 	bl	8013930 <rcl_node_get_default_options>
 800e55e:	4640      	mov	r0, r8
 800e560:	f005 f828 	bl	80135b4 <rcl_get_zero_initialized_node>
 800e564:	f8cd 9000 	str.w	r9, [sp]
 800e568:	463b      	mov	r3, r7
 800e56a:	4632      	mov	r2, r6
 800e56c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e570:	e884 0003 	stmia.w	r4, {r0, r1}
 800e574:	4629      	mov	r1, r5
 800e576:	4620      	mov	r0, r4
 800e578:	f005 f826 	bl	80135c8 <rcl_node_init>
 800e57c:	b930      	cbnz	r0, 800e58c <rclc_node_init_default+0x70>
 800e57e:	b021      	add	sp, #132	@ 0x84
 800e580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e584:	200b      	movs	r0, #11
 800e586:	b021      	add	sp, #132	@ 0x84
 800e588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e58c:	9003      	str	r0, [sp, #12]
 800e58e:	f000 f8db 	bl	800e748 <rcutils_reset_error>
 800e592:	f000 f8d9 	bl	800e748 <rcutils_reset_error>
 800e596:	9803      	ldr	r0, [sp, #12]
 800e598:	b021      	add	sp, #132	@ 0x84
 800e59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e59e:	bf00      	nop

0800e5a0 <rclc_publisher_init_default>:
 800e5a0:	2a00      	cmp	r2, #0
 800e5a2:	bf18      	it	ne
 800e5a4:	2b00      	cmpne	r3, #0
 800e5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5aa:	bf0c      	ite	eq
 800e5ac:	2501      	moveq	r5, #1
 800e5ae:	2500      	movne	r5, #0
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	b0a0      	sub	sp, #128	@ 0x80
 800e5b4:	2900      	cmp	r1, #0
 800e5b6:	bf14      	ite	ne
 800e5b8:	4628      	movne	r0, r5
 800e5ba:	f045 0001 	orreq.w	r0, r5, #1
 800e5be:	bb18      	cbnz	r0, 800e608 <rclc_publisher_init_default+0x68>
 800e5c0:	b314      	cbz	r4, 800e608 <rclc_publisher_init_default+0x68>
 800e5c2:	f10d 0810 	add.w	r8, sp, #16
 800e5c6:	461f      	mov	r7, r3
 800e5c8:	4616      	mov	r6, r2
 800e5ca:	460d      	mov	r5, r1
 800e5cc:	f7ff f884 	bl	800d6d8 <rcl_get_zero_initialized_publisher>
 800e5d0:	6020      	str	r0, [r4, #0]
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	f7ff f91e 	bl	800d814 <rcl_publisher_get_default_options>
 800e5d8:	2250      	movs	r2, #80	@ 0x50
 800e5da:	490d      	ldr	r1, [pc, #52]	@ (800e610 <rclc_publisher_init_default+0x70>)
 800e5dc:	4640      	mov	r0, r8
 800e5de:	f00c fc46 	bl	801ae6e <memcpy>
 800e5e2:	463b      	mov	r3, r7
 800e5e4:	4632      	mov	r2, r6
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f8cd 8000 	str.w	r8, [sp]
 800e5ee:	f7ff f879 	bl	800d6e4 <rcl_publisher_init>
 800e5f2:	b910      	cbnz	r0, 800e5fa <rclc_publisher_init_default+0x5a>
 800e5f4:	b020      	add	sp, #128	@ 0x80
 800e5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5fa:	9003      	str	r0, [sp, #12]
 800e5fc:	f000 f8a4 	bl	800e748 <rcutils_reset_error>
 800e600:	9803      	ldr	r0, [sp, #12]
 800e602:	b020      	add	sp, #128	@ 0x80
 800e604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e608:	200b      	movs	r0, #11
 800e60a:	b020      	add	sp, #128	@ 0x80
 800e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e610:	0801bce0 	.word	0x0801bce0

0800e614 <rclc_timer_init_default2>:
 800e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e618:	b08c      	sub	sp, #48	@ 0x30
 800e61a:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800e61e:	b331      	cbz	r1, 800e66e <rclc_timer_init_default2+0x5a>
 800e620:	4606      	mov	r6, r0
 800e622:	b320      	cbz	r0, 800e66e <rclc_timer_init_default2+0x5a>
 800e624:	460d      	mov	r5, r1
 800e626:	4690      	mov	r8, r2
 800e628:	461f      	mov	r7, r3
 800e62a:	f005 fe41 	bl	80142b0 <rcl_get_zero_initialized_timer>
 800e62e:	9408      	str	r4, [sp, #32]
 800e630:	f10d 0c0c 	add.w	ip, sp, #12
 800e634:	68ac      	ldr	r4, [r5, #8]
 800e636:	6030      	str	r0, [r6, #0]
 800e638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e63a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	462a      	mov	r2, r5
 800e642:	f105 010c 	add.w	r1, r5, #12
 800e646:	4630      	mov	r0, r6
 800e648:	f8cc 3000 	str.w	r3, [ip]
 800e64c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e64e:	e9cd 8700 	strd	r8, r7, [sp]
 800e652:	9302      	str	r3, [sp, #8]
 800e654:	f005 fe32 	bl	80142bc <rcl_timer_init2>
 800e658:	b910      	cbnz	r0, 800e660 <rclc_timer_init_default2+0x4c>
 800e65a:	b00c      	add	sp, #48	@ 0x30
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e660:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e662:	f000 f871 	bl	800e748 <rcutils_reset_error>
 800e666:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e668:	b00c      	add	sp, #48	@ 0x30
 800e66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e66e:	200b      	movs	r0, #11
 800e670:	b00c      	add	sp, #48	@ 0x30
 800e672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e676:	bf00      	nop

0800e678 <__default_zero_allocate>:
 800e678:	f00b bdd0 	b.w	801a21c <calloc>

0800e67c <__default_reallocate>:
 800e67c:	f00b bf6e 	b.w	801a55c <realloc>

0800e680 <__default_deallocate>:
 800e680:	f00b be4a 	b.w	801a318 <free>

0800e684 <__default_allocate>:
 800e684:	f00b be40 	b.w	801a308 <malloc>

0800e688 <rcutils_get_zero_initialized_allocator>:
 800e688:	b510      	push	{r4, lr}
 800e68a:	4c05      	ldr	r4, [pc, #20]	@ (800e6a0 <rcutils_get_zero_initialized_allocator+0x18>)
 800e68c:	4686      	mov	lr, r0
 800e68e:	4684      	mov	ip, r0
 800e690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e692:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	4670      	mov	r0, lr
 800e69a:	f8cc 3000 	str.w	r3, [ip]
 800e69e:	bd10      	pop	{r4, pc}
 800e6a0:	0801bd30 	.word	0x0801bd30

0800e6a4 <rcutils_get_default_allocator>:
 800e6a4:	b510      	push	{r4, lr}
 800e6a6:	4c05      	ldr	r4, [pc, #20]	@ (800e6bc <rcutils_get_default_allocator+0x18>)
 800e6a8:	4686      	mov	lr, r0
 800e6aa:	4684      	mov	ip, r0
 800e6ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	4670      	mov	r0, lr
 800e6b6:	f8cc 3000 	str.w	r3, [ip]
 800e6ba:	bd10      	pop	{r4, pc}
 800e6bc:	24000018 	.word	0x24000018

0800e6c0 <rcutils_set_default_allocator>:
 800e6c0:	b1a8      	cbz	r0, 800e6ee <rcutils_set_default_allocator+0x2e>
 800e6c2:	6802      	ldr	r2, [r0, #0]
 800e6c4:	b1a2      	cbz	r2, 800e6f0 <rcutils_set_default_allocator+0x30>
 800e6c6:	6841      	ldr	r1, [r0, #4]
 800e6c8:	b1a1      	cbz	r1, 800e6f4 <rcutils_set_default_allocator+0x34>
 800e6ca:	b410      	push	{r4}
 800e6cc:	68c4      	ldr	r4, [r0, #12]
 800e6ce:	b164      	cbz	r4, 800e6ea <rcutils_set_default_allocator+0x2a>
 800e6d0:	6880      	ldr	r0, [r0, #8]
 800e6d2:	b138      	cbz	r0, 800e6e4 <rcutils_set_default_allocator+0x24>
 800e6d4:	4b08      	ldr	r3, [pc, #32]	@ (800e6f8 <rcutils_set_default_allocator+0x38>)
 800e6d6:	601a      	str	r2, [r3, #0]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e6de:	2001      	movs	r0, #1
 800e6e0:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e6e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6e8:	4770      	bx	lr
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	e7fa      	b.n	800e6e4 <rcutils_set_default_allocator+0x24>
 800e6ee:	4770      	bx	lr
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	4770      	bx	lr
 800e6f4:	4608      	mov	r0, r1
 800e6f6:	4770      	bx	lr
 800e6f8:	24000018 	.word	0x24000018

0800e6fc <rcutils_allocator_is_valid>:
 800e6fc:	b158      	cbz	r0, 800e716 <rcutils_allocator_is_valid+0x1a>
 800e6fe:	6803      	ldr	r3, [r0, #0]
 800e700:	b143      	cbz	r3, 800e714 <rcutils_allocator_is_valid+0x18>
 800e702:	6843      	ldr	r3, [r0, #4]
 800e704:	b133      	cbz	r3, 800e714 <rcutils_allocator_is_valid+0x18>
 800e706:	68c3      	ldr	r3, [r0, #12]
 800e708:	b123      	cbz	r3, 800e714 <rcutils_allocator_is_valid+0x18>
 800e70a:	6880      	ldr	r0, [r0, #8]
 800e70c:	3800      	subs	r0, #0
 800e70e:	bf18      	it	ne
 800e710:	2001      	movne	r0, #1
 800e712:	4770      	bx	lr
 800e714:	4618      	mov	r0, r3
 800e716:	4770      	bx	lr

0800e718 <rcutils_get_error_string>:
 800e718:	4b06      	ldr	r3, [pc, #24]	@ (800e734 <rcutils_get_error_string+0x1c>)
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	b13b      	cbz	r3, 800e72e <rcutils_get_error_string+0x16>
 800e71e:	4b06      	ldr	r3, [pc, #24]	@ (800e738 <rcutils_get_error_string+0x20>)
 800e720:	781a      	ldrb	r2, [r3, #0]
 800e722:	b90a      	cbnz	r2, 800e728 <rcutils_get_error_string+0x10>
 800e724:	2201      	movs	r2, #1
 800e726:	701a      	strb	r2, [r3, #0]
 800e728:	4b04      	ldr	r3, [pc, #16]	@ (800e73c <rcutils_get_error_string+0x24>)
 800e72a:	7818      	ldrb	r0, [r3, #0]
 800e72c:	4770      	bx	lr
 800e72e:	4b04      	ldr	r3, [pc, #16]	@ (800e740 <rcutils_get_error_string+0x28>)
 800e730:	7818      	ldrb	r0, [r3, #0]
 800e732:	4770      	bx	lr
 800e734:	24009598 	.word	0x24009598
 800e738:	2400959d 	.word	0x2400959d
 800e73c:	2400959c 	.word	0x2400959c
 800e740:	0801bd44 	.word	0x0801bd44
 800e744:	00000000 	.word	0x00000000

0800e748 <rcutils_reset_error>:
 800e748:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e768 <rcutils_reset_error+0x20>
 800e74c:	2300      	movs	r3, #0
 800e74e:	4a08      	ldr	r2, [pc, #32]	@ (800e770 <rcutils_reset_error+0x28>)
 800e750:	4808      	ldr	r0, [pc, #32]	@ (800e774 <rcutils_reset_error+0x2c>)
 800e752:	8013      	strh	r3, [r2, #0]
 800e754:	4908      	ldr	r1, [pc, #32]	@ (800e778 <rcutils_reset_error+0x30>)
 800e756:	7003      	strb	r3, [r0, #0]
 800e758:	700b      	strb	r3, [r1, #0]
 800e75a:	ed82 7b02 	vstr	d7, [r2, #8]
 800e75e:	4a07      	ldr	r2, [pc, #28]	@ (800e77c <rcutils_reset_error+0x34>)
 800e760:	7013      	strb	r3, [r2, #0]
 800e762:	4770      	bx	lr
 800e764:	f3af 8000 	nop.w
	...
 800e770:	240095a0 	.word	0x240095a0
 800e774:	2400959d 	.word	0x2400959d
 800e778:	2400959c 	.word	0x2400959c
 800e77c:	24009598 	.word	0x24009598

0800e780 <rcutils_system_time_now>:
 800e780:	b310      	cbz	r0, 800e7c8 <rcutils_system_time_now+0x48>
 800e782:	b570      	push	{r4, r5, r6, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	4604      	mov	r4, r0
 800e788:	2001      	movs	r0, #1
 800e78a:	4669      	mov	r1, sp
 800e78c:	f7f2 ffd0 	bl	8001730 <clock_gettime>
 800e790:	2800      	cmp	r0, #0
 800e792:	db16      	blt.n	800e7c2 <rcutils_system_time_now+0x42>
 800e794:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e798:	2a00      	cmp	r2, #0
 800e79a:	db12      	blt.n	800e7c2 <rcutils_system_time_now+0x42>
 800e79c:	ea53 0102 	orrs.w	r1, r3, r2
 800e7a0:	9d02      	ldr	r5, [sp, #8]
 800e7a2:	d101      	bne.n	800e7a8 <rcutils_system_time_now+0x28>
 800e7a4:	2d00      	cmp	r5, #0
 800e7a6:	db0c      	blt.n	800e7c2 <rcutils_system_time_now+0x42>
 800e7a8:	4e08      	ldr	r6, [pc, #32]	@ (800e7cc <rcutils_system_time_now+0x4c>)
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	fba3 3106 	umull	r3, r1, r3, r6
 800e7b0:	195b      	adds	r3, r3, r5
 800e7b2:	fb06 1202 	mla	r2, r6, r2, r1
 800e7b6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800e7ba:	e9c4 3200 	strd	r3, r2, [r4]
 800e7be:	b004      	add	sp, #16
 800e7c0:	bd70      	pop	{r4, r5, r6, pc}
 800e7c2:	2002      	movs	r0, #2
 800e7c4:	b004      	add	sp, #16
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	200b      	movs	r0, #11
 800e7ca:	4770      	bx	lr
 800e7cc:	3b9aca00 	.word	0x3b9aca00

0800e7d0 <rcutils_steady_time_now>:
 800e7d0:	b310      	cbz	r0, 800e818 <rcutils_steady_time_now+0x48>
 800e7d2:	b570      	push	{r4, r5, r6, lr}
 800e7d4:	b084      	sub	sp, #16
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	2000      	movs	r0, #0
 800e7da:	4669      	mov	r1, sp
 800e7dc:	f7f2 ffa8 	bl	8001730 <clock_gettime>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	db16      	blt.n	800e812 <rcutils_steady_time_now+0x42>
 800e7e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e7e8:	2a00      	cmp	r2, #0
 800e7ea:	db12      	blt.n	800e812 <rcutils_steady_time_now+0x42>
 800e7ec:	ea53 0102 	orrs.w	r1, r3, r2
 800e7f0:	9d02      	ldr	r5, [sp, #8]
 800e7f2:	d101      	bne.n	800e7f8 <rcutils_steady_time_now+0x28>
 800e7f4:	2d00      	cmp	r5, #0
 800e7f6:	db0c      	blt.n	800e812 <rcutils_steady_time_now+0x42>
 800e7f8:	4e08      	ldr	r6, [pc, #32]	@ (800e81c <rcutils_steady_time_now+0x4c>)
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	fba3 3106 	umull	r3, r1, r3, r6
 800e800:	195b      	adds	r3, r3, r5
 800e802:	fb06 1202 	mla	r2, r6, r2, r1
 800e806:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800e80a:	e9c4 3200 	strd	r3, r2, [r4]
 800e80e:	b004      	add	sp, #16
 800e810:	bd70      	pop	{r4, r5, r6, pc}
 800e812:	2002      	movs	r0, #2
 800e814:	b004      	add	sp, #16
 800e816:	bd70      	pop	{r4, r5, r6, pc}
 800e818:	200b      	movs	r0, #11
 800e81a:	4770      	bx	lr
 800e81c:	3b9aca00 	.word	0x3b9aca00

0800e820 <rmw_get_default_publisher_options>:
 800e820:	2200      	movs	r2, #0
 800e822:	6002      	str	r2, [r0, #0]
 800e824:	7102      	strb	r2, [r0, #4]
 800e826:	4770      	bx	lr

0800e828 <rmw_uros_set_custom_transport>:
 800e828:	b470      	push	{r4, r5, r6}
 800e82a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e82e:	b162      	cbz	r2, 800e84a <rmw_uros_set_custom_transport+0x22>
 800e830:	b15b      	cbz	r3, 800e84a <rmw_uros_set_custom_transport+0x22>
 800e832:	b155      	cbz	r5, 800e84a <rmw_uros_set_custom_transport+0x22>
 800e834:	b14e      	cbz	r6, 800e84a <rmw_uros_set_custom_transport+0x22>
 800e836:	4c06      	ldr	r4, [pc, #24]	@ (800e850 <rmw_uros_set_custom_transport+0x28>)
 800e838:	7020      	strb	r0, [r4, #0]
 800e83a:	2000      	movs	r0, #0
 800e83c:	6166      	str	r6, [r4, #20]
 800e83e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e842:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e846:	bc70      	pop	{r4, r5, r6}
 800e848:	4770      	bx	lr
 800e84a:	200b      	movs	r0, #11
 800e84c:	bc70      	pop	{r4, r5, r6}
 800e84e:	4770      	bx	lr
 800e850:	240095b0 	.word	0x240095b0

0800e854 <flush_session>:
 800e854:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e856:	f002 bcd3 	b.w	8011200 <uxr_run_session_until_confirm_delivery>
 800e85a:	bf00      	nop

0800e85c <rmw_publish>:
 800e85c:	2800      	cmp	r0, #0
 800e85e:	d053      	beq.n	800e908 <rmw_publish+0xac>
 800e860:	b570      	push	{r4, r5, r6, lr}
 800e862:	460d      	mov	r5, r1
 800e864:	b08e      	sub	sp, #56	@ 0x38
 800e866:	2900      	cmp	r1, #0
 800e868:	d04b      	beq.n	800e902 <rmw_publish+0xa6>
 800e86a:	4604      	mov	r4, r0
 800e86c:	6800      	ldr	r0, [r0, #0]
 800e86e:	f000 fcfb 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 800e872:	2800      	cmp	r0, #0
 800e874:	d045      	beq.n	800e902 <rmw_publish+0xa6>
 800e876:	6866      	ldr	r6, [r4, #4]
 800e878:	2e00      	cmp	r6, #0
 800e87a:	d042      	beq.n	800e902 <rmw_publish+0xa6>
 800e87c:	69b4      	ldr	r4, [r6, #24]
 800e87e:	4628      	mov	r0, r5
 800e880:	6923      	ldr	r3, [r4, #16]
 800e882:	4798      	blx	r3
 800e884:	69f3      	ldr	r3, [r6, #28]
 800e886:	9005      	str	r0, [sp, #20]
 800e888:	b113      	cbz	r3, 800e890 <rmw_publish+0x34>
 800e88a:	a805      	add	r0, sp, #20
 800e88c:	4798      	blx	r3
 800e88e:	9805      	ldr	r0, [sp, #20]
 800e890:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	9000      	str	r0, [sp, #0]
 800e898:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e89c:	6972      	ldr	r2, [r6, #20]
 800e89e:	ab06      	add	r3, sp, #24
 800e8a0:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e8a2:	f003 fa8f 	bl	8011dc4 <uxr_prepare_output_stream>
 800e8a6:	b1d8      	cbz	r0, 800e8e0 <rmw_publish+0x84>
 800e8a8:	68a3      	ldr	r3, [r4, #8]
 800e8aa:	a906      	add	r1, sp, #24
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	4798      	blx	r3
 800e8b0:	6a33      	ldr	r3, [r6, #32]
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	b10b      	cbz	r3, 800e8ba <rmw_publish+0x5e>
 800e8b6:	a806      	add	r0, sp, #24
 800e8b8:	4798      	blx	r3
 800e8ba:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e8be:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	6910      	ldr	r0, [r2, #16]
 800e8c6:	d021      	beq.n	800e90c <rmw_publish+0xb0>
 800e8c8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e8ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8ce:	f002 fc97 	bl	8011200 <uxr_run_session_until_confirm_delivery>
 800e8d2:	4004      	ands	r4, r0
 800e8d4:	b2e4      	uxtb	r4, r4
 800e8d6:	f084 0001 	eor.w	r0, r4, #1
 800e8da:	b2c0      	uxtb	r0, r0
 800e8dc:	b00e      	add	sp, #56	@ 0x38
 800e8de:	bd70      	pop	{r4, r5, r6, pc}
 800e8e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e8e4:	6918      	ldr	r0, [r3, #16]
 800e8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e918 <rmw_publish+0xbc>)
 800e8e8:	9602      	str	r6, [sp, #8]
 800e8ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8ee:	9301      	str	r3, [sp, #4]
 800e8f0:	9b05      	ldr	r3, [sp, #20]
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	ab06      	add	r3, sp, #24
 800e8f6:	6972      	ldr	r2, [r6, #20]
 800e8f8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e8fa:	f003 fa93 	bl	8011e24 <uxr_prepare_output_stream_fragmented>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	d1d2      	bne.n	800e8a8 <rmw_publish+0x4c>
 800e902:	2001      	movs	r0, #1
 800e904:	b00e      	add	sp, #56	@ 0x38
 800e906:	bd70      	pop	{r4, r5, r6, pc}
 800e908:	2001      	movs	r0, #1
 800e90a:	4770      	bx	lr
 800e90c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e910:	f002 f8c8 	bl	8010aa4 <uxr_flash_output_streams>
 800e914:	e7df      	b.n	800e8d6 <rmw_publish+0x7a>
 800e916:	bf00      	nop
 800e918:	0800e855 	.word	0x0800e855

0800e91c <rmw_create_publisher>:
 800e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	b087      	sub	sp, #28
 800e922:	2900      	cmp	r1, #0
 800e924:	f000 80cc 	beq.w	800eac0 <rmw_create_publisher+0x1a4>
 800e928:	4604      	mov	r4, r0
 800e92a:	2800      	cmp	r0, #0
 800e92c:	f000 80c8 	beq.w	800eac0 <rmw_create_publisher+0x1a4>
 800e930:	4615      	mov	r5, r2
 800e932:	6800      	ldr	r0, [r0, #0]
 800e934:	460e      	mov	r6, r1
 800e936:	461f      	mov	r7, r3
 800e938:	f000 fc96 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 800e93c:	2d00      	cmp	r5, #0
 800e93e:	f000 80bf 	beq.w	800eac0 <rmw_create_publisher+0x1a4>
 800e942:	f080 0001 	eor.w	r0, r0, #1
 800e946:	b2c0      	uxtb	r0, r0
 800e948:	2800      	cmp	r0, #0
 800e94a:	f040 80b9 	bne.w	800eac0 <rmw_create_publisher+0x1a4>
 800e94e:	782b      	ldrb	r3, [r5, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	f000 80b5 	beq.w	800eac0 <rmw_create_publisher+0x1a4>
 800e956:	2f00      	cmp	r7, #0
 800e958:	f000 80b2 	beq.w	800eac0 <rmw_create_publisher+0x1a4>
 800e95c:	485b      	ldr	r0, [pc, #364]	@ (800eacc <rmw_create_publisher+0x1b0>)
 800e95e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e962:	f007 ff99 	bl	8016898 <get_memory>
 800e966:	2800      	cmp	r0, #0
 800e968:	f000 80aa 	beq.w	800eac0 <rmw_create_publisher+0x1a4>
 800e96c:	6884      	ldr	r4, [r0, #8]
 800e96e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e972:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e976:	f008 f815 	bl	80169a4 <rmw_get_implementation_identifier>
 800e97a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e97e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e982:	4628      	mov	r0, r5
 800e984:	f7f1 fd14 	bl	80003b0 <strlen>
 800e988:	3001      	adds	r0, #1
 800e98a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800e98e:	283c      	cmp	r0, #60	@ 0x3c
 800e990:	f200 808f 	bhi.w	800eab2 <rmw_create_publisher+0x196>
 800e994:	462b      	mov	r3, r5
 800e996:	4a4e      	ldr	r2, [pc, #312]	@ (800ead0 <rmw_create_publisher+0x1b4>)
 800e998:	213c      	movs	r1, #60	@ 0x3c
 800e99a:	4650      	mov	r0, sl
 800e99c:	f00b ffba 	bl	801a914 <sniprintf>
 800e9a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e9a4:	4639      	mov	r1, r7
 800e9a6:	2250      	movs	r2, #80	@ 0x50
 800e9a8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e9aa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e9ae:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e9b2:	f00c fa5c 	bl	801ae6e <memcpy>
 800e9b6:	7a3b      	ldrb	r3, [r7, #8]
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	4946      	ldr	r1, [pc, #280]	@ (800ead4 <rmw_create_publisher+0x1b8>)
 800e9bc:	2b02      	cmp	r3, #2
 800e9be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9c2:	bf0c      	ite	eq
 800e9c4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e9c8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e9cc:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e9d4:	f000 fc56 	bl	800f284 <get_message_typesupport_handle>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	d06a      	beq.n	800eab2 <rmw_create_publisher+0x196>
 800e9dc:	6842      	ldr	r2, [r0, #4]
 800e9de:	61a2      	str	r2, [r4, #24]
 800e9e0:	2a00      	cmp	r2, #0
 800e9e2:	d066      	beq.n	800eab2 <rmw_create_publisher+0x196>
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	463b      	mov	r3, r7
 800e9e8:	4648      	mov	r0, r9
 800e9ea:	f008 fa41 	bl	8016e70 <create_topic>
 800e9ee:	6260      	str	r0, [r4, #36]	@ 0x24
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d062      	beq.n	800eaba <rmw_create_publisher+0x19e>
 800e9f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9f8:	2103      	movs	r1, #3
 800e9fa:	2506      	movs	r5, #6
 800e9fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea00:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ea04:	1c42      	adds	r2, r0, #1
 800ea06:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ea0a:	f001 ff1b 	bl	8010844 <uxr_object_id>
 800ea0e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ea12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea16:	6120      	str	r0, [r4, #16]
 800ea18:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ea1c:	6910      	ldr	r0, [r2, #16]
 800ea1e:	9500      	str	r5, [sp, #0]
 800ea20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea24:	6819      	ldr	r1, [r3, #0]
 800ea26:	6922      	ldr	r2, [r4, #16]
 800ea28:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ea2c:	f001 fe78 	bl	8010720 <uxr_buffer_create_publisher_bin>
 800ea30:	4602      	mov	r2, r0
 800ea32:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ea36:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ea3a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ea3e:	f000 fb91 	bl	800f164 <run_xrce_session>
 800ea42:	b3b0      	cbz	r0, 800eab2 <rmw_create_publisher+0x196>
 800ea44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea48:	2105      	movs	r1, #5
 800ea4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea4e:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ea52:	1c42      	adds	r2, r0, #1
 800ea54:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ea58:	f001 fef4 	bl	8010844 <uxr_object_id>
 800ea5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ea60:	4639      	mov	r1, r7
 800ea62:	af04      	add	r7, sp, #16
 800ea64:	691e      	ldr	r6, [r3, #16]
 800ea66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea6a:	6160      	str	r0, [r4, #20]
 800ea6c:	4638      	mov	r0, r7
 800ea6e:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800ea72:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800ea76:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ea7a:	f000 fb91 	bl	800f1a0 <convert_qos_profile>
 800ea7e:	9503      	str	r5, [sp, #12]
 800ea80:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ea84:	9001      	str	r0, [sp, #4]
 800ea86:	4630      	mov	r0, r6
 800ea88:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ea8c:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	f8da 1000 	ldr.w	r1, [sl]
 800ea96:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ea9a:	f001 fe6f 	bl	801077c <uxr_buffer_create_datawriter_bin>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eaa4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eaa8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eaac:	f000 fb5a 	bl	800f164 <run_xrce_session>
 800eab0:	b940      	cbnz	r0, 800eac4 <rmw_create_publisher+0x1a8>
 800eab2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800eab4:	b108      	cbz	r0, 800eaba <rmw_create_publisher+0x19e>
 800eab6:	f000 fa49 	bl	800ef4c <rmw_uxrce_fini_topic_memory>
 800eaba:	4640      	mov	r0, r8
 800eabc:	f000 f9ee 	bl	800ee9c <rmw_uxrce_fini_publisher_memory>
 800eac0:	f04f 0800 	mov.w	r8, #0
 800eac4:	4640      	mov	r0, r8
 800eac6:	b007      	add	sp, #28
 800eac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eacc:	2400c8a0 	.word	0x2400c8a0
 800ead0:	0801bd7c 	.word	0x0801bd7c
 800ead4:	0801bd48 	.word	0x0801bd48

0800ead8 <rmw_publisher_get_actual_qos>:
 800ead8:	b179      	cbz	r1, 800eafa <rmw_publisher_get_actual_qos+0x22>
 800eada:	4603      	mov	r3, r0
 800eadc:	b510      	push	{r4, lr}
 800eade:	fab0 f480 	clz	r4, r0
 800eae2:	0964      	lsrs	r4, r4, #5
 800eae4:	b138      	cbz	r0, 800eaf6 <rmw_publisher_get_actual_qos+0x1e>
 800eae6:	4608      	mov	r0, r1
 800eae8:	6859      	ldr	r1, [r3, #4]
 800eaea:	2250      	movs	r2, #80	@ 0x50
 800eaec:	3128      	adds	r1, #40	@ 0x28
 800eaee:	f00c f9be 	bl	801ae6e <memcpy>
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	bd10      	pop	{r4, pc}
 800eaf6:	200b      	movs	r0, #11
 800eaf8:	bd10      	pop	{r4, pc}
 800eafa:	200b      	movs	r0, #11
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop

0800eb00 <rmw_destroy_publisher>:
 800eb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb02:	b128      	cbz	r0, 800eb10 <rmw_destroy_publisher+0x10>
 800eb04:	4604      	mov	r4, r0
 800eb06:	6800      	ldr	r0, [r0, #0]
 800eb08:	460d      	mov	r5, r1
 800eb0a:	f000 fbad 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 800eb0e:	b910      	cbnz	r0, 800eb16 <rmw_destroy_publisher+0x16>
 800eb10:	2401      	movs	r4, #1
 800eb12:	4620      	mov	r0, r4
 800eb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb16:	6863      	ldr	r3, [r4, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d0f9      	beq.n	800eb10 <rmw_destroy_publisher+0x10>
 800eb1c:	2d00      	cmp	r5, #0
 800eb1e:	d0f7      	beq.n	800eb10 <rmw_destroy_publisher+0x10>
 800eb20:	6828      	ldr	r0, [r5, #0]
 800eb22:	f000 fba1 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d0f2      	beq.n	800eb10 <rmw_destroy_publisher+0x10>
 800eb2a:	686c      	ldr	r4, [r5, #4]
 800eb2c:	2c00      	cmp	r4, #0
 800eb2e:	d0ef      	beq.n	800eb10 <rmw_destroy_publisher+0x10>
 800eb30:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800eb32:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800eb36:	f008 f9ef 	bl	8016f18 <destroy_topic>
 800eb3a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eb3e:	6962      	ldr	r2, [r4, #20]
 800eb40:	6918      	ldr	r0, [r3, #16]
 800eb42:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eb46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb4a:	6819      	ldr	r1, [r3, #0]
 800eb4c:	f001 fd38 	bl	80105c0 <uxr_buffer_delete_entity>
 800eb50:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eb54:	6922      	ldr	r2, [r4, #16]
 800eb56:	4604      	mov	r4, r0
 800eb58:	6918      	ldr	r0, [r3, #16]
 800eb5a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eb5e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb62:	6819      	ldr	r1, [r3, #0]
 800eb64:	f001 fd2c 	bl	80105c0 <uxr_buffer_delete_entity>
 800eb68:	4606      	mov	r6, r0
 800eb6a:	6938      	ldr	r0, [r7, #16]
 800eb6c:	4622      	mov	r2, r4
 800eb6e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eb72:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eb76:	f000 faf5 	bl	800f164 <run_xrce_session>
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	6938      	ldr	r0, [r7, #16]
 800eb7e:	4632      	mov	r2, r6
 800eb80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eb84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eb88:	f000 faec 	bl	800f164 <run_xrce_session>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	4628      	mov	r0, r5
 800eb90:	401c      	ands	r4, r3
 800eb92:	f084 0401 	eor.w	r4, r4, #1
 800eb96:	b2e4      	uxtb	r4, r4
 800eb98:	0064      	lsls	r4, r4, #1
 800eb9a:	f000 f97f 	bl	800ee9c <rmw_uxrce_fini_publisher_memory>
 800eb9e:	e7b8      	b.n	800eb12 <rmw_destroy_publisher+0x12>

0800eba0 <rmw_uxrce_init_service_memory>:
 800eba0:	b1e2      	cbz	r2, 800ebdc <rmw_uxrce_init_service_memory+0x3c>
 800eba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eba6:	7b05      	ldrb	r5, [r0, #12]
 800eba8:	4606      	mov	r6, r0
 800ebaa:	b9ad      	cbnz	r5, 800ebd8 <rmw_uxrce_init_service_memory+0x38>
 800ebac:	23c8      	movs	r3, #200	@ 0xc8
 800ebae:	4617      	mov	r7, r2
 800ebb0:	460c      	mov	r4, r1
 800ebb2:	46a8      	mov	r8, r5
 800ebb4:	6083      	str	r3, [r0, #8]
 800ebb6:	f240 1301 	movw	r3, #257	@ 0x101
 800ebba:	e9c0 5500 	strd	r5, r5, [r0]
 800ebbe:	8183      	strh	r3, [r0, #12]
 800ebc0:	3501      	adds	r5, #1
 800ebc2:	4621      	mov	r1, r4
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f007 fe77 	bl	80168b8 <put_memory>
 800ebca:	42af      	cmp	r7, r5
 800ebcc:	60a4      	str	r4, [r4, #8]
 800ebce:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ebd2:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800ebd6:	d1f3      	bne.n	800ebc0 <rmw_uxrce_init_service_memory+0x20>
 800ebd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop

0800ebe0 <rmw_uxrce_init_client_memory>:
 800ebe0:	b1e2      	cbz	r2, 800ec1c <rmw_uxrce_init_client_memory+0x3c>
 800ebe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe6:	7b05      	ldrb	r5, [r0, #12]
 800ebe8:	4606      	mov	r6, r0
 800ebea:	b9ad      	cbnz	r5, 800ec18 <rmw_uxrce_init_client_memory+0x38>
 800ebec:	23c8      	movs	r3, #200	@ 0xc8
 800ebee:	4617      	mov	r7, r2
 800ebf0:	460c      	mov	r4, r1
 800ebf2:	46a8      	mov	r8, r5
 800ebf4:	6083      	str	r3, [r0, #8]
 800ebf6:	f240 1301 	movw	r3, #257	@ 0x101
 800ebfa:	e9c0 5500 	strd	r5, r5, [r0]
 800ebfe:	8183      	strh	r3, [r0, #12]
 800ec00:	3501      	adds	r5, #1
 800ec02:	4621      	mov	r1, r4
 800ec04:	4630      	mov	r0, r6
 800ec06:	f007 fe57 	bl	80168b8 <put_memory>
 800ec0a:	42af      	cmp	r7, r5
 800ec0c:	60a4      	str	r4, [r4, #8]
 800ec0e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ec12:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800ec16:	d1f3      	bne.n	800ec00 <rmw_uxrce_init_client_memory+0x20>
 800ec18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop

0800ec20 <rmw_uxrce_init_publisher_memory>:
 800ec20:	b1e2      	cbz	r2, 800ec5c <rmw_uxrce_init_publisher_memory+0x3c>
 800ec22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec26:	7b05      	ldrb	r5, [r0, #12]
 800ec28:	4606      	mov	r6, r0
 800ec2a:	b9ad      	cbnz	r5, 800ec58 <rmw_uxrce_init_publisher_memory+0x38>
 800ec2c:	23d8      	movs	r3, #216	@ 0xd8
 800ec2e:	4617      	mov	r7, r2
 800ec30:	460c      	mov	r4, r1
 800ec32:	46a8      	mov	r8, r5
 800ec34:	6083      	str	r3, [r0, #8]
 800ec36:	f240 1301 	movw	r3, #257	@ 0x101
 800ec3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ec3e:	8183      	strh	r3, [r0, #12]
 800ec40:	3501      	adds	r5, #1
 800ec42:	4621      	mov	r1, r4
 800ec44:	4630      	mov	r0, r6
 800ec46:	f007 fe37 	bl	80168b8 <put_memory>
 800ec4a:	42af      	cmp	r7, r5
 800ec4c:	60a4      	str	r4, [r4, #8]
 800ec4e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ec52:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ec56:	d1f3      	bne.n	800ec40 <rmw_uxrce_init_publisher_memory+0x20>
 800ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop

0800ec60 <rmw_uxrce_init_subscription_memory>:
 800ec60:	b1e2      	cbz	r2, 800ec9c <rmw_uxrce_init_subscription_memory+0x3c>
 800ec62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec66:	7b05      	ldrb	r5, [r0, #12]
 800ec68:	4606      	mov	r6, r0
 800ec6a:	b9ad      	cbnz	r5, 800ec98 <rmw_uxrce_init_subscription_memory+0x38>
 800ec6c:	23d8      	movs	r3, #216	@ 0xd8
 800ec6e:	4617      	mov	r7, r2
 800ec70:	460c      	mov	r4, r1
 800ec72:	46a8      	mov	r8, r5
 800ec74:	6083      	str	r3, [r0, #8]
 800ec76:	f240 1301 	movw	r3, #257	@ 0x101
 800ec7a:	e9c0 5500 	strd	r5, r5, [r0]
 800ec7e:	8183      	strh	r3, [r0, #12]
 800ec80:	3501      	adds	r5, #1
 800ec82:	4621      	mov	r1, r4
 800ec84:	4630      	mov	r0, r6
 800ec86:	f007 fe17 	bl	80168b8 <put_memory>
 800ec8a:	42af      	cmp	r7, r5
 800ec8c:	60a4      	str	r4, [r4, #8]
 800ec8e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ec92:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800ec96:	d1f3      	bne.n	800ec80 <rmw_uxrce_init_subscription_memory+0x20>
 800ec98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop

0800eca0 <rmw_uxrce_init_node_memory>:
 800eca0:	b1e2      	cbz	r2, 800ecdc <rmw_uxrce_init_node_memory+0x3c>
 800eca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca6:	7b05      	ldrb	r5, [r0, #12]
 800eca8:	4606      	mov	r6, r0
 800ecaa:	b9ad      	cbnz	r5, 800ecd8 <rmw_uxrce_init_node_memory+0x38>
 800ecac:	23a4      	movs	r3, #164	@ 0xa4
 800ecae:	4617      	mov	r7, r2
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	46a8      	mov	r8, r5
 800ecb4:	6083      	str	r3, [r0, #8]
 800ecb6:	f240 1301 	movw	r3, #257	@ 0x101
 800ecba:	e9c0 5500 	strd	r5, r5, [r0]
 800ecbe:	8183      	strh	r3, [r0, #12]
 800ecc0:	3501      	adds	r5, #1
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f007 fdf7 	bl	80168b8 <put_memory>
 800ecca:	42af      	cmp	r7, r5
 800eccc:	60a4      	str	r4, [r4, #8]
 800ecce:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ecd2:	f804 8c98 	strb.w	r8, [r4, #-152]
 800ecd6:	d1f3      	bne.n	800ecc0 <rmw_uxrce_init_node_memory+0x20>
 800ecd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop

0800ece0 <rmw_uxrce_init_session_memory>:
 800ece0:	b1ea      	cbz	r2, 800ed1e <rmw_uxrce_init_session_memory+0x3e>
 800ece2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ece6:	7b05      	ldrb	r5, [r0, #12]
 800ece8:	4606      	mov	r6, r0
 800ecea:	b9b5      	cbnz	r5, 800ed1a <rmw_uxrce_init_session_memory+0x3a>
 800ecec:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ecf0:	f240 1301 	movw	r3, #257	@ 0x101
 800ecf4:	4617      	mov	r7, r2
 800ecf6:	460c      	mov	r4, r1
 800ecf8:	46a9      	mov	r9, r5
 800ecfa:	f8c0 8008 	str.w	r8, [r0, #8]
 800ecfe:	8183      	strh	r3, [r0, #12]
 800ed00:	e9c0 5500 	strd	r5, r5, [r0]
 800ed04:	3501      	adds	r5, #1
 800ed06:	4621      	mov	r1, r4
 800ed08:	4630      	mov	r0, r6
 800ed0a:	f007 fdd5 	bl	80168b8 <put_memory>
 800ed0e:	42af      	cmp	r7, r5
 800ed10:	60a4      	str	r4, [r4, #8]
 800ed12:	f884 900c 	strb.w	r9, [r4, #12]
 800ed16:	4444      	add	r4, r8
 800ed18:	d1f4      	bne.n	800ed04 <rmw_uxrce_init_session_memory+0x24>
 800ed1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed1e:	4770      	bx	lr

0800ed20 <rmw_uxrce_init_topic_memory>:
 800ed20:	b1e2      	cbz	r2, 800ed5c <rmw_uxrce_init_topic_memory+0x3c>
 800ed22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed26:	7b05      	ldrb	r5, [r0, #12]
 800ed28:	4606      	mov	r6, r0
 800ed2a:	b9ad      	cbnz	r5, 800ed58 <rmw_uxrce_init_topic_memory+0x38>
 800ed2c:	231c      	movs	r3, #28
 800ed2e:	4617      	mov	r7, r2
 800ed30:	460c      	mov	r4, r1
 800ed32:	46a8      	mov	r8, r5
 800ed34:	6083      	str	r3, [r0, #8]
 800ed36:	f240 1301 	movw	r3, #257	@ 0x101
 800ed3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ed3e:	8183      	strh	r3, [r0, #12]
 800ed40:	3501      	adds	r5, #1
 800ed42:	4621      	mov	r1, r4
 800ed44:	4630      	mov	r0, r6
 800ed46:	f007 fdb7 	bl	80168b8 <put_memory>
 800ed4a:	42af      	cmp	r7, r5
 800ed4c:	60a4      	str	r4, [r4, #8]
 800ed4e:	f104 041c 	add.w	r4, r4, #28
 800ed52:	f804 8c10 	strb.w	r8, [r4, #-16]
 800ed56:	d1f3      	bne.n	800ed40 <rmw_uxrce_init_topic_memory+0x20>
 800ed58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop

0800ed60 <rmw_uxrce_init_static_input_buffer_memory>:
 800ed60:	b1ea      	cbz	r2, 800ed9e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ed62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed66:	7b05      	ldrb	r5, [r0, #12]
 800ed68:	4606      	mov	r6, r0
 800ed6a:	b9b5      	cbnz	r5, 800ed9a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ed6c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ed70:	4617      	mov	r7, r2
 800ed72:	460c      	mov	r4, r1
 800ed74:	46a8      	mov	r8, r5
 800ed76:	6083      	str	r3, [r0, #8]
 800ed78:	f240 1301 	movw	r3, #257	@ 0x101
 800ed7c:	e9c0 5500 	strd	r5, r5, [r0]
 800ed80:	8183      	strh	r3, [r0, #12]
 800ed82:	3501      	adds	r5, #1
 800ed84:	4621      	mov	r1, r4
 800ed86:	4630      	mov	r0, r6
 800ed88:	f007 fd96 	bl	80168b8 <put_memory>
 800ed8c:	42af      	cmp	r7, r5
 800ed8e:	60a4      	str	r4, [r4, #8]
 800ed90:	f884 800c 	strb.w	r8, [r4, #12]
 800ed94:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ed98:	d1f3      	bne.n	800ed82 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ed9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed9e:	4770      	bx	lr

0800eda0 <rmw_uxrce_init_init_options_impl_memory>:
 800eda0:	b1e2      	cbz	r2, 800eddc <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800eda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda6:	7b05      	ldrb	r5, [r0, #12]
 800eda8:	4606      	mov	r6, r0
 800edaa:	b9ad      	cbnz	r5, 800edd8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800edac:	232c      	movs	r3, #44	@ 0x2c
 800edae:	4617      	mov	r7, r2
 800edb0:	460c      	mov	r4, r1
 800edb2:	46a8      	mov	r8, r5
 800edb4:	6083      	str	r3, [r0, #8]
 800edb6:	f240 1301 	movw	r3, #257	@ 0x101
 800edba:	e9c0 5500 	strd	r5, r5, [r0]
 800edbe:	8183      	strh	r3, [r0, #12]
 800edc0:	3501      	adds	r5, #1
 800edc2:	4621      	mov	r1, r4
 800edc4:	4630      	mov	r0, r6
 800edc6:	f007 fd77 	bl	80168b8 <put_memory>
 800edca:	42af      	cmp	r7, r5
 800edcc:	60a4      	str	r4, [r4, #8]
 800edce:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800edd2:	f804 8c20 	strb.w	r8, [r4, #-32]
 800edd6:	d1f3      	bne.n	800edc0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800edd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop

0800ede0 <rmw_uxrce_init_wait_set_memory>:
 800ede0:	b1e2      	cbz	r2, 800ee1c <rmw_uxrce_init_wait_set_memory+0x3c>
 800ede2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede6:	7b05      	ldrb	r5, [r0, #12]
 800ede8:	4606      	mov	r6, r0
 800edea:	b9ad      	cbnz	r5, 800ee18 <rmw_uxrce_init_wait_set_memory+0x38>
 800edec:	231c      	movs	r3, #28
 800edee:	4617      	mov	r7, r2
 800edf0:	460c      	mov	r4, r1
 800edf2:	46a8      	mov	r8, r5
 800edf4:	6083      	str	r3, [r0, #8]
 800edf6:	f240 1301 	movw	r3, #257	@ 0x101
 800edfa:	e9c0 5500 	strd	r5, r5, [r0]
 800edfe:	8183      	strh	r3, [r0, #12]
 800ee00:	3501      	adds	r5, #1
 800ee02:	4621      	mov	r1, r4
 800ee04:	4630      	mov	r0, r6
 800ee06:	f007 fd57 	bl	80168b8 <put_memory>
 800ee0a:	42af      	cmp	r7, r5
 800ee0c:	60a4      	str	r4, [r4, #8]
 800ee0e:	f104 041c 	add.w	r4, r4, #28
 800ee12:	f804 8c10 	strb.w	r8, [r4, #-16]
 800ee16:	d1f3      	bne.n	800ee00 <rmw_uxrce_init_wait_set_memory+0x20>
 800ee18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop

0800ee20 <rmw_uxrce_init_guard_condition_memory>:
 800ee20:	b1e2      	cbz	r2, 800ee5c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ee22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee26:	7b05      	ldrb	r5, [r0, #12]
 800ee28:	4606      	mov	r6, r0
 800ee2a:	b9ad      	cbnz	r5, 800ee58 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ee2c:	2320      	movs	r3, #32
 800ee2e:	4617      	mov	r7, r2
 800ee30:	460c      	mov	r4, r1
 800ee32:	46a8      	mov	r8, r5
 800ee34:	6083      	str	r3, [r0, #8]
 800ee36:	f240 1301 	movw	r3, #257	@ 0x101
 800ee3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee3e:	8183      	strh	r3, [r0, #12]
 800ee40:	3501      	adds	r5, #1
 800ee42:	4621      	mov	r1, r4
 800ee44:	4630      	mov	r0, r6
 800ee46:	f007 fd37 	bl	80168b8 <put_memory>
 800ee4a:	42af      	cmp	r7, r5
 800ee4c:	60a4      	str	r4, [r4, #8]
 800ee4e:	f104 0420 	add.w	r4, r4, #32
 800ee52:	f804 8c14 	strb.w	r8, [r4, #-20]
 800ee56:	d1f3      	bne.n	800ee40 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ee58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop

0800ee60 <rmw_uxrce_fini_session_memory>:
 800ee60:	4601      	mov	r1, r0
 800ee62:	4801      	ldr	r0, [pc, #4]	@ (800ee68 <rmw_uxrce_fini_session_memory+0x8>)
 800ee64:	f007 bd28 	b.w	80168b8 <put_memory>
 800ee68:	2400df10 	.word	0x2400df10

0800ee6c <rmw_uxrce_fini_node_memory>:
 800ee6c:	b538      	push	{r3, r4, r5, lr}
 800ee6e:	4604      	mov	r4, r0
 800ee70:	6800      	ldr	r0, [r0, #0]
 800ee72:	b128      	cbz	r0, 800ee80 <rmw_uxrce_fini_node_memory+0x14>
 800ee74:	4b07      	ldr	r3, [pc, #28]	@ (800ee94 <rmw_uxrce_fini_node_memory+0x28>)
 800ee76:	6819      	ldr	r1, [r3, #0]
 800ee78:	f7f1 fa3a 	bl	80002f0 <strcmp>
 800ee7c:	b940      	cbnz	r0, 800ee90 <rmw_uxrce_fini_node_memory+0x24>
 800ee7e:	6020      	str	r0, [r4, #0]
 800ee80:	6861      	ldr	r1, [r4, #4]
 800ee82:	b129      	cbz	r1, 800ee90 <rmw_uxrce_fini_node_memory+0x24>
 800ee84:	2500      	movs	r5, #0
 800ee86:	4804      	ldr	r0, [pc, #16]	@ (800ee98 <rmw_uxrce_fini_node_memory+0x2c>)
 800ee88:	610d      	str	r5, [r1, #16]
 800ee8a:	f007 fd15 	bl	80168b8 <put_memory>
 800ee8e:	6065      	str	r5, [r4, #4]
 800ee90:	bd38      	pop	{r3, r4, r5, pc}
 800ee92:	bf00      	nop
 800ee94:	0801c6f0 	.word	0x0801c6f0
 800ee98:	2400c954 	.word	0x2400c954

0800ee9c <rmw_uxrce_fini_publisher_memory>:
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	4604      	mov	r4, r0
 800eea0:	6800      	ldr	r0, [r0, #0]
 800eea2:	b128      	cbz	r0, 800eeb0 <rmw_uxrce_fini_publisher_memory+0x14>
 800eea4:	4b06      	ldr	r3, [pc, #24]	@ (800eec0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800eea6:	6819      	ldr	r1, [r3, #0]
 800eea8:	f7f1 fa22 	bl	80002f0 <strcmp>
 800eeac:	b938      	cbnz	r0, 800eebe <rmw_uxrce_fini_publisher_memory+0x22>
 800eeae:	6020      	str	r0, [r4, #0]
 800eeb0:	6861      	ldr	r1, [r4, #4]
 800eeb2:	b121      	cbz	r1, 800eebe <rmw_uxrce_fini_publisher_memory+0x22>
 800eeb4:	4803      	ldr	r0, [pc, #12]	@ (800eec4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800eeb6:	f007 fcff 	bl	80168b8 <put_memory>
 800eeba:	2300      	movs	r3, #0
 800eebc:	6063      	str	r3, [r4, #4]
 800eebe:	bd10      	pop	{r4, pc}
 800eec0:	0801c6f0 	.word	0x0801c6f0
 800eec4:	2400c8a0 	.word	0x2400c8a0

0800eec8 <rmw_uxrce_fini_subscription_memory>:
 800eec8:	b510      	push	{r4, lr}
 800eeca:	4604      	mov	r4, r0
 800eecc:	6800      	ldr	r0, [r0, #0]
 800eece:	b128      	cbz	r0, 800eedc <rmw_uxrce_fini_subscription_memory+0x14>
 800eed0:	4b06      	ldr	r3, [pc, #24]	@ (800eeec <rmw_uxrce_fini_subscription_memory+0x24>)
 800eed2:	6819      	ldr	r1, [r3, #0]
 800eed4:	f7f1 fa0c 	bl	80002f0 <strcmp>
 800eed8:	b938      	cbnz	r0, 800eeea <rmw_uxrce_fini_subscription_memory+0x22>
 800eeda:	6020      	str	r0, [r4, #0]
 800eedc:	6861      	ldr	r1, [r4, #4]
 800eede:	b121      	cbz	r1, 800eeea <rmw_uxrce_fini_subscription_memory+0x22>
 800eee0:	4803      	ldr	r0, [pc, #12]	@ (800eef0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800eee2:	f007 fce9 	bl	80168b8 <put_memory>
 800eee6:	2300      	movs	r3, #0
 800eee8:	6063      	str	r3, [r4, #4]
 800eeea:	bd10      	pop	{r4, pc}
 800eeec:	0801c6f0 	.word	0x0801c6f0
 800eef0:	2400c020 	.word	0x2400c020

0800eef4 <rmw_uxrce_fini_service_memory>:
 800eef4:	b510      	push	{r4, lr}
 800eef6:	4604      	mov	r4, r0
 800eef8:	6800      	ldr	r0, [r0, #0]
 800eefa:	b128      	cbz	r0, 800ef08 <rmw_uxrce_fini_service_memory+0x14>
 800eefc:	4b06      	ldr	r3, [pc, #24]	@ (800ef18 <rmw_uxrce_fini_service_memory+0x24>)
 800eefe:	6819      	ldr	r1, [r3, #0]
 800ef00:	f7f1 f9f6 	bl	80002f0 <strcmp>
 800ef04:	b938      	cbnz	r0, 800ef16 <rmw_uxrce_fini_service_memory+0x22>
 800ef06:	6020      	str	r0, [r4, #0]
 800ef08:	6861      	ldr	r1, [r4, #4]
 800ef0a:	b121      	cbz	r1, 800ef16 <rmw_uxrce_fini_service_memory+0x22>
 800ef0c:	4803      	ldr	r0, [pc, #12]	@ (800ef1c <rmw_uxrce_fini_service_memory+0x28>)
 800ef0e:	f007 fcd3 	bl	80168b8 <put_memory>
 800ef12:	2300      	movs	r3, #0
 800ef14:	6063      	str	r3, [r4, #4]
 800ef16:	bd10      	pop	{r4, pc}
 800ef18:	0801c6f0 	.word	0x0801c6f0
 800ef1c:	2400bbd8 	.word	0x2400bbd8

0800ef20 <rmw_uxrce_fini_client_memory>:
 800ef20:	b510      	push	{r4, lr}
 800ef22:	4604      	mov	r4, r0
 800ef24:	6800      	ldr	r0, [r0, #0]
 800ef26:	b128      	cbz	r0, 800ef34 <rmw_uxrce_fini_client_memory+0x14>
 800ef28:	4b06      	ldr	r3, [pc, #24]	@ (800ef44 <rmw_uxrce_fini_client_memory+0x24>)
 800ef2a:	6819      	ldr	r1, [r3, #0]
 800ef2c:	f7f1 f9e0 	bl	80002f0 <strcmp>
 800ef30:	b938      	cbnz	r0, 800ef42 <rmw_uxrce_fini_client_memory+0x22>
 800ef32:	6020      	str	r0, [r4, #0]
 800ef34:	6861      	ldr	r1, [r4, #4]
 800ef36:	b121      	cbz	r1, 800ef42 <rmw_uxrce_fini_client_memory+0x22>
 800ef38:	4803      	ldr	r0, [pc, #12]	@ (800ef48 <rmw_uxrce_fini_client_memory+0x28>)
 800ef3a:	f007 fcbd 	bl	80168b8 <put_memory>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	6063      	str	r3, [r4, #4]
 800ef42:	bd10      	pop	{r4, pc}
 800ef44:	0801c6f0 	.word	0x0801c6f0
 800ef48:	2400bb00 	.word	0x2400bb00

0800ef4c <rmw_uxrce_fini_topic_memory>:
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	4604      	mov	r4, r0
 800ef50:	4803      	ldr	r0, [pc, #12]	@ (800ef60 <rmw_uxrce_fini_topic_memory+0x14>)
 800ef52:	4621      	mov	r1, r4
 800ef54:	f007 fcb0 	bl	80168b8 <put_memory>
 800ef58:	2300      	movs	r3, #0
 800ef5a:	61a3      	str	r3, [r4, #24]
 800ef5c:	bd10      	pop	{r4, pc}
 800ef5e:	bf00      	nop
 800ef60:	2400ba24 	.word	0x2400ba24

0800ef64 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ef64:	b082      	sub	sp, #8
 800ef66:	492b      	ldr	r1, [pc, #172]	@ (800f014 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800ef68:	b530      	push	{r4, r5, lr}
 800ef6a:	680d      	ldr	r5, [r1, #0]
 800ef6c:	ac03      	add	r4, sp, #12
 800ef6e:	e884 000c 	stmia.w	r4, {r2, r3}
 800ef72:	2d00      	cmp	r5, #0
 800ef74:	d044      	beq.n	800f000 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>
 800ef76:	4602      	mov	r2, r0
 800ef78:	461c      	mov	r4, r3
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	6883      	ldr	r3, [r0, #8]
 800ef80:	6840      	ldr	r0, [r0, #4]
 800ef82:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800ef86:	429a      	cmp	r2, r3
 800ef88:	bf08      	it	eq
 800ef8a:	3101      	addeq	r1, #1
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d1f6      	bne.n	800ef7e <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800ef90:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ef94:	2b02      	cmp	r3, #2
 800ef96:	d00f      	beq.n	800efb8 <rmw_uxrce_get_static_input_buffer_for_entity+0x54>
 800ef98:	d905      	bls.n	800efa6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ef9a:	2b03      	cmp	r3, #3
 800ef9c:	d003      	beq.n	800efa6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ef9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efa2:	b002      	add	sp, #8
 800efa4:	4770      	bx	lr
 800efa6:	3c01      	subs	r4, #1
 800efa8:	428c      	cmp	r4, r1
 800efaa:	d30e      	bcc.n	800efca <rmw_uxrce_get_static_input_buffer_for_entity+0x66>
 800efac:	4819      	ldr	r0, [pc, #100]	@ (800f014 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800efae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efb2:	b002      	add	sp, #8
 800efb4:	f007 bc70 	b.w	8016898 <get_memory>
 800efb8:	3c01      	subs	r4, #1
 800efba:	428c      	cmp	r4, r1
 800efbc:	d3ef      	bcc.n	800ef9e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800efbe:	4815      	ldr	r0, [pc, #84]	@ (800f014 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800efc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efc4:	b002      	add	sp, #8
 800efc6:	f007 bc67 	b.w	8016898 <get_memory>
 800efca:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800efce:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800efd2:	e002      	b.n	800efda <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800efd4:	686d      	ldr	r5, [r5, #4]
 800efd6:	2d00      	cmp	r5, #0
 800efd8:	d0e1      	beq.n	800ef9e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800efda:	68ab      	ldr	r3, [r5, #8]
 800efdc:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800efe0:	428a      	cmp	r2, r1
 800efe2:	d1f7      	bne.n	800efd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x70>
 800efe4:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800efe8:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800efec:	4561      	cmp	r1, ip
 800efee:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800eff2:	eb73 0e04 	sbcs.w	lr, r3, r4
 800eff6:	daed      	bge.n	800efd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x70>
 800eff8:	468c      	mov	ip, r1
 800effa:	461c      	mov	r4, r3
 800effc:	4628      	mov	r0, r5
 800effe:	e7e9      	b.n	800efd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x70>
 800f000:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f004:	2b02      	cmp	r3, #2
 800f006:	d0d1      	beq.n	800efac <rmw_uxrce_get_static_input_buffer_for_entity+0x48>
 800f008:	d9d0      	bls.n	800efac <rmw_uxrce_get_static_input_buffer_for_entity+0x48>
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d0ce      	beq.n	800efac <rmw_uxrce_get_static_input_buffer_for_entity+0x48>
 800f00e:	4628      	mov	r0, r5
 800f010:	e7c5      	b.n	800ef9e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f012:	bf00      	nop
 800f014:	2400b870 	.word	0x2400b870

0800f018 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f018:	4b12      	ldr	r3, [pc, #72]	@ (800f064 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	b1fb      	cbz	r3, 800f05e <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800f01e:	4684      	mov	ip, r0
 800f020:	2000      	movs	r0, #0
 800f022:	b530      	push	{r4, r5, lr}
 800f024:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f028:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800f02c:	e001      	b.n	800f032 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	b1a3      	cbz	r3, 800f05c <rmw_uxrce_find_static_input_buffer_by_owner+0x44>
 800f032:	689a      	ldr	r2, [r3, #8]
 800f034:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f038:	458c      	cmp	ip, r1
 800f03a:	d1f8      	bne.n	800f02e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800f03c:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f040:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 800f044:	42a1      	cmp	r1, r4
 800f046:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f04a:	eb72 050e 	sbcs.w	r5, r2, lr
 800f04e:	daee      	bge.n	800f02e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800f050:	4618      	mov	r0, r3
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	460c      	mov	r4, r1
 800f056:	4696      	mov	lr, r2
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d1ea      	bne.n	800f032 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800f05c:	bd30      	pop	{r4, r5, pc}
 800f05e:	4618      	mov	r0, r3
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	2400b870 	.word	0x2400b870

0800f068 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f068:	4b3d      	ldr	r3, [pc, #244]	@ (800f160 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f06a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06e:	f8d3 8000 	ldr.w	r8, [r3]
 800f072:	ed2d 8b06 	vpush	{d8-d10}
 800f076:	b08d      	sub	sp, #52	@ 0x34
 800f078:	f008 fc70 	bl	801795c <rmw_uros_epoch_nanos>
 800f07c:	f1b8 0f00 	cmp.w	r8, #0
 800f080:	d05c      	beq.n	800f13c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800f082:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f086:	4683      	mov	fp, r0
 800f088:	ac04      	add	r4, sp, #16
 800f08a:	468a      	mov	sl, r1
 800f08c:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f090:	2b04      	cmp	r3, #4
 800f092:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 800f148 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f096:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 800f150 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f09a:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 800f158 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f09e:	d03f      	beq.n	800f120 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800f0a0:	2b05      	cmp	r3, #5
 800f0a2:	d044      	beq.n	800f12e <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800f0a4:	2b03      	cmp	r3, #3
 800f0a6:	d03b      	beq.n	800f120 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800f0a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f0ac:	ed8d ab06 	vstr	d10, [sp, #24]
 800f0b0:	ab08      	add	r3, sp, #32
 800f0b2:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f0b6:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f0ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f0c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f0c4:	f007 fa32 	bl	801652c <rmw_time_equal>
 800f0c8:	b118      	cbz	r0, 800f0d2 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800f0ca:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f0ce:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f0d2:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800f0d6:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f0da:	f855 6c04 	ldr.w	r6, [r5, #-4]
 800f0de:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800f0e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f0e6:	f007 fa75 	bl	80165d4 <rmw_time_total_nsec>
 800f0ea:	183f      	adds	r7, r7, r0
 800f0ec:	eb46 0601 	adc.w	r6, r6, r1
 800f0f0:	455f      	cmp	r7, fp
 800f0f2:	eb76 060a 	sbcs.w	r6, r6, sl
 800f0f6:	db05      	blt.n	800f104 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800f0f8:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f0fc:	4593      	cmp	fp, r2
 800f0fe:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f102:	da03      	bge.n	800f10c <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800f104:	4641      	mov	r1, r8
 800f106:	4816      	ldr	r0, [pc, #88]	@ (800f160 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f108:	f007 fbd6 	bl	80168b8 <put_memory>
 800f10c:	f1b9 0f00 	cmp.w	r9, #0
 800f110:	d014      	beq.n	800f13c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800f112:	46c8      	mov	r8, r9
 800f114:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f118:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f11c:	2b04      	cmp	r3, #4
 800f11e:	d1bf      	bne.n	800f0a0 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800f120:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f124:	3340      	adds	r3, #64	@ 0x40
 800f126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f12c:	e7c0      	b.n	800f0b0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800f12e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f132:	3348      	adds	r3, #72	@ 0x48
 800f134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f13a:	e7b9      	b.n	800f0b0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800f13c:	b00d      	add	sp, #52	@ 0x34
 800f13e:	ecbd 8b06 	vpop	{d8-d10}
 800f142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f146:	bf00      	nop
	...
 800f150:	00000001 	.word	0x00000001
 800f154:	00000000 	.word	0x00000000
 800f158:	0000001e 	.word	0x0000001e
 800f15c:	00000000 	.word	0x00000000
 800f160:	2400b870 	.word	0x2400b870

0800f164 <run_xrce_session>:
 800f164:	b510      	push	{r4, lr}
 800f166:	f891 c002 	ldrb.w	ip, [r1, #2]
 800f16a:	b086      	sub	sp, #24
 800f16c:	f1bc 0f01 	cmp.w	ip, #1
 800f170:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f174:	d00e      	beq.n	800f194 <run_xrce_session+0x30>
 800f176:	2401      	movs	r4, #1
 800f178:	4619      	mov	r1, r3
 800f17a:	f10d 020e 	add.w	r2, sp, #14
 800f17e:	f10d 0317 	add.w	r3, sp, #23
 800f182:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f186:	9400      	str	r4, [sp, #0]
 800f188:	f002 f862 	bl	8011250 <uxr_run_session_until_all_status>
 800f18c:	b100      	cbz	r0, 800f190 <run_xrce_session+0x2c>
 800f18e:	2001      	movs	r0, #1
 800f190:	b006      	add	sp, #24
 800f192:	bd10      	pop	{r4, pc}
 800f194:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f198:	f001 fc84 	bl	8010aa4 <uxr_flash_output_streams>
 800f19c:	2001      	movs	r0, #1
 800f19e:	e7f7      	b.n	800f190 <run_xrce_session+0x2c>

0800f1a0 <convert_qos_profile>:
 800f1a0:	780a      	ldrb	r2, [r1, #0]
 800f1a2:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f1a6:	f1a2 0202 	sub.w	r2, r2, #2
 800f1aa:	f1ac 0c02 	sub.w	ip, ip, #2
 800f1ae:	fab2 f282 	clz	r2, r2
 800f1b2:	fabc fc8c 	clz	ip, ip
 800f1b6:	0952      	lsrs	r2, r2, #5
 800f1b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f1bc:	7082      	strb	r2, [r0, #2]
 800f1be:	7a4a      	ldrb	r2, [r1, #9]
 800f1c0:	8889      	ldrh	r1, [r1, #4]
 800f1c2:	f1a2 0202 	sub.w	r2, r2, #2
 800f1c6:	f880 c001 	strb.w	ip, [r0, #1]
 800f1ca:	8081      	strh	r1, [r0, #4]
 800f1cc:	fab2 f282 	clz	r2, r2
 800f1d0:	0952      	lsrs	r2, r2, #5
 800f1d2:	0052      	lsls	r2, r2, #1
 800f1d4:	7002      	strb	r2, [r0, #0]
 800f1d6:	4770      	bx	lr

0800f1d8 <generate_type_name>:
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4684      	mov	ip, r0
 800f1dc:	4608      	mov	r0, r1
 800f1de:	b510      	push	{r4, lr}
 800f1e0:	700b      	strb	r3, [r1, #0]
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	f8dc 3000 	ldr.w	r3, [ip]
 800f1e8:	4614      	mov	r4, r2
 800f1ea:	b1bb      	cbz	r3, 800f21c <generate_type_name+0x44>
 800f1ec:	4a0d      	ldr	r2, [pc, #52]	@ (800f224 <generate_type_name+0x4c>)
 800f1ee:	4611      	mov	r1, r2
 800f1f0:	9100      	str	r1, [sp, #0]
 800f1f2:	490d      	ldr	r1, [pc, #52]	@ (800f228 <generate_type_name+0x50>)
 800f1f4:	9203      	str	r2, [sp, #12]
 800f1f6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800f1fa:	9101      	str	r1, [sp, #4]
 800f1fc:	490b      	ldr	r1, [pc, #44]	@ (800f22c <generate_type_name+0x54>)
 800f1fe:	9204      	str	r2, [sp, #16]
 800f200:	9105      	str	r1, [sp, #20]
 800f202:	9102      	str	r1, [sp, #8]
 800f204:	4621      	mov	r1, r4
 800f206:	4a0a      	ldr	r2, [pc, #40]	@ (800f230 <generate_type_name+0x58>)
 800f208:	f00b fb84 	bl	801a914 <sniprintf>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	bfa8      	it	ge
 800f210:	4284      	cmpge	r4, r0
 800f212:	bfcc      	ite	gt
 800f214:	2001      	movgt	r0, #1
 800f216:	2000      	movle	r0, #0
 800f218:	b006      	add	sp, #24
 800f21a:	bd10      	pop	{r4, pc}
 800f21c:	4b05      	ldr	r3, [pc, #20]	@ (800f234 <generate_type_name+0x5c>)
 800f21e:	4a01      	ldr	r2, [pc, #4]	@ (800f224 <generate_type_name+0x4c>)
 800f220:	4619      	mov	r1, r3
 800f222:	e7e5      	b.n	800f1f0 <generate_type_name+0x18>
 800f224:	0801bd6c 	.word	0x0801bd6c
 800f228:	0801bd84 	.word	0x0801bd84
 800f22c:	0801bd80 	.word	0x0801bd80
 800f230:	0801bd70 	.word	0x0801bd70
 800f234:	0801c490 	.word	0x0801c490

0800f238 <generate_topic_name>:
 800f238:	b530      	push	{r4, r5, lr}
 800f23a:	4614      	mov	r4, r2
 800f23c:	b083      	sub	sp, #12
 800f23e:	4605      	mov	r5, r0
 800f240:	4b07      	ldr	r3, [pc, #28]	@ (800f260 <generate_topic_name+0x28>)
 800f242:	4a08      	ldr	r2, [pc, #32]	@ (800f264 <generate_topic_name+0x2c>)
 800f244:	4608      	mov	r0, r1
 800f246:	9500      	str	r5, [sp, #0]
 800f248:	4621      	mov	r1, r4
 800f24a:	f00b fb63 	bl	801a914 <sniprintf>
 800f24e:	2800      	cmp	r0, #0
 800f250:	bfa8      	it	ge
 800f252:	4284      	cmpge	r4, r0
 800f254:	bfcc      	ite	gt
 800f256:	2001      	movgt	r0, #1
 800f258:	2000      	movle	r0, #0
 800f25a:	b003      	add	sp, #12
 800f25c:	bd30      	pop	{r4, r5, pc}
 800f25e:	bf00      	nop
 800f260:	0801c538 	.word	0x0801c538
 800f264:	0801bd88 	.word	0x0801bd88

0800f268 <is_uxrce_rmw_identifier_valid>:
 800f268:	b510      	push	{r4, lr}
 800f26a:	4604      	mov	r4, r0
 800f26c:	b140      	cbz	r0, 800f280 <is_uxrce_rmw_identifier_valid+0x18>
 800f26e:	f007 fb99 	bl	80169a4 <rmw_get_implementation_identifier>
 800f272:	4601      	mov	r1, r0
 800f274:	4620      	mov	r0, r4
 800f276:	f7f1 f83b 	bl	80002f0 <strcmp>
 800f27a:	fab0 f080 	clz	r0, r0
 800f27e:	0940      	lsrs	r0, r0, #5
 800f280:	bd10      	pop	{r4, pc}
 800f282:	bf00      	nop

0800f284 <get_message_typesupport_handle>:
 800f284:	6883      	ldr	r3, [r0, #8]
 800f286:	4718      	bx	r3

0800f288 <get_message_typesupport_handle_function>:
 800f288:	b510      	push	{r4, lr}
 800f28a:	4604      	mov	r4, r0
 800f28c:	6800      	ldr	r0, [r0, #0]
 800f28e:	f7f1 f82f 	bl	80002f0 <strcmp>
 800f292:	2800      	cmp	r0, #0
 800f294:	bf0c      	ite	eq
 800f296:	4620      	moveq	r0, r4
 800f298:	2000      	movne	r0, #0
 800f29a:	bd10      	pop	{r4, pc}

0800f29c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f29c:	4b04      	ldr	r3, [pc, #16]	@ (800f2b0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	b10a      	cbz	r2, 800f2a6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f2a2:	4803      	ldr	r0, [pc, #12]	@ (800f2b0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f2a4:	4770      	bx	lr
 800f2a6:	4a03      	ldr	r2, [pc, #12]	@ (800f2b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f2a8:	4801      	ldr	r0, [pc, #4]	@ (800f2b0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f2aa:	6812      	ldr	r2, [r2, #0]
 800f2ac:	601a      	str	r2, [r3, #0]
 800f2ae:	4770      	bx	lr
 800f2b0:	2400002c 	.word	0x2400002c
 800f2b4:	2400017c 	.word	0x2400017c

0800f2b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f2b8:	4a02      	ldr	r2, [pc, #8]	@ (800f2c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800f2ba:	4b03      	ldr	r3, [pc, #12]	@ (800f2c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800f2bc:	6812      	ldr	r2, [r2, #0]
 800f2be:	601a      	str	r2, [r3, #0]
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	2400017c 	.word	0x2400017c
 800f2c8:	2400002c 	.word	0x2400002c

0800f2cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f2cc:	4a02      	ldr	r2, [pc, #8]	@ (800f2d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800f2ce:	4b03      	ldr	r3, [pc, #12]	@ (800f2dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800f2d0:	6812      	ldr	r2, [r2, #0]
 800f2d2:	601a      	str	r2, [r3, #0]
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	2400017c 	.word	0x2400017c
 800f2dc:	2400004c 	.word	0x2400004c

0800f2e0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800f2e0:	f008 bba6 	b.w	8017a30 <std_msgs__msg__Int32__init>

0800f2e4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800f2e4:	f008 bba8 	b.w	8017a38 <std_msgs__msg__Int32__fini>

0800f2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f2e8:	4b04      	ldr	r3, [pc, #16]	@ (800f2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	b10a      	cbz	r2, 800f2f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f2ee:	4803      	ldr	r0, [pc, #12]	@ (800f2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f2f0:	4770      	bx	lr
 800f2f2:	4a03      	ldr	r2, [pc, #12]	@ (800f300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f2f4:	4801      	ldr	r0, [pc, #4]	@ (800f2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f2f6:	6812      	ldr	r2, [r2, #0]
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	4770      	bx	lr
 800f2fc:	2400006c 	.word	0x2400006c
 800f300:	24000180 	.word	0x24000180

0800f304 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800f304:	f008 bbc6 	b.w	8017a94 <std_msgs__msg__String__init>

0800f308 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800f308:	f008 bbd2 	b.w	8017ab0 <std_msgs__msg__String__fini>

0800f30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f30c:	4b04      	ldr	r3, [pc, #16]	@ (800f320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	b10a      	cbz	r2, 800f316 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800f312:	4803      	ldr	r0, [pc, #12]	@ (800f320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f314:	4770      	bx	lr
 800f316:	4a03      	ldr	r2, [pc, #12]	@ (800f324 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800f318:	4801      	ldr	r0, [pc, #4]	@ (800f320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800f31a:	6812      	ldr	r2, [r2, #0]
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	4770      	bx	lr
 800f320:	240000c0 	.word	0x240000c0
 800f324:	24000180 	.word	0x24000180

0800f328 <_Int32__max_serialized_size>:
 800f328:	2104      	movs	r1, #4
 800f32a:	2000      	movs	r0, #0
 800f32c:	b508      	push	{r3, lr}
 800f32e:	f001 f87b 	bl	8010428 <ucdr_alignment>
 800f332:	3004      	adds	r0, #4
 800f334:	bd08      	pop	{r3, pc}
 800f336:	bf00      	nop

0800f338 <_Int32__cdr_deserialize>:
 800f338:	b109      	cbz	r1, 800f33e <_Int32__cdr_deserialize+0x6>
 800f33a:	f000 bf8d 	b.w	8010258 <ucdr_deserialize_int32_t>
 800f33e:	4608      	mov	r0, r1
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop

0800f344 <get_serialized_size_std_msgs__msg__Int32>:
 800f344:	b508      	push	{r3, lr}
 800f346:	b120      	cbz	r0, 800f352 <get_serialized_size_std_msgs__msg__Int32+0xe>
 800f348:	4608      	mov	r0, r1
 800f34a:	2104      	movs	r1, #4
 800f34c:	f001 f86c 	bl	8010428 <ucdr_alignment>
 800f350:	3004      	adds	r0, #4
 800f352:	bd08      	pop	{r3, pc}

0800f354 <_Int32__cdr_serialize>:
 800f354:	460a      	mov	r2, r1
 800f356:	b118      	cbz	r0, 800f360 <_Int32__cdr_serialize+0xc>
 800f358:	6801      	ldr	r1, [r0, #0]
 800f35a:	4610      	mov	r0, r2
 800f35c:	f000 bedc 	b.w	8010118 <ucdr_serialize_int32_t>
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop

0800f364 <_Int32__get_serialized_size>:
 800f364:	b130      	cbz	r0, 800f374 <_Int32__get_serialized_size+0x10>
 800f366:	2104      	movs	r1, #4
 800f368:	2000      	movs	r0, #0
 800f36a:	b508      	push	{r3, lr}
 800f36c:	f001 f85c 	bl	8010428 <ucdr_alignment>
 800f370:	3004      	adds	r0, #4
 800f372:	bd08      	pop	{r3, pc}
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop

0800f378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f378:	4800      	ldr	r0, [pc, #0]	@ (800f37c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f37a:	4770      	bx	lr
 800f37c:	24000114 	.word	0x24000114

0800f380 <_String__max_serialized_size>:
 800f380:	2000      	movs	r0, #0
 800f382:	4770      	bx	lr

0800f384 <_String__cdr_serialize>:
 800f384:	b1c8      	cbz	r0, 800f3ba <_String__cdr_serialize+0x36>
 800f386:	b570      	push	{r4, r5, r6, lr}
 800f388:	6806      	ldr	r6, [r0, #0]
 800f38a:	4604      	mov	r4, r0
 800f38c:	460d      	mov	r5, r1
 800f38e:	b15e      	cbz	r6, 800f3a8 <_String__cdr_serialize+0x24>
 800f390:	4630      	mov	r0, r6
 800f392:	f7f1 f80d 	bl	80003b0 <strlen>
 800f396:	4603      	mov	r3, r0
 800f398:	1c42      	adds	r2, r0, #1
 800f39a:	4631      	mov	r1, r6
 800f39c:	4628      	mov	r0, r5
 800f39e:	6063      	str	r3, [r4, #4]
 800f3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3a4:	f001 b8b0 	b.w	8010508 <ucdr_serialize_sequence_char>
 800f3a8:	4633      	mov	r3, r6
 800f3aa:	4632      	mov	r2, r6
 800f3ac:	4631      	mov	r1, r6
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	6063      	str	r3, [r4, #4]
 800f3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3b6:	f001 b8a7 	b.w	8010508 <ucdr_serialize_sequence_char>
 800f3ba:	4770      	bx	lr

0800f3bc <get_serialized_size_std_msgs__msg__String>:
 800f3bc:	b510      	push	{r4, lr}
 800f3be:	4604      	mov	r4, r0
 800f3c0:	b130      	cbz	r0, 800f3d0 <get_serialized_size_std_msgs__msg__String+0x14>
 800f3c2:	4608      	mov	r0, r1
 800f3c4:	2104      	movs	r1, #4
 800f3c6:	f001 f82f 	bl	8010428 <ucdr_alignment>
 800f3ca:	6864      	ldr	r4, [r4, #4]
 800f3cc:	3405      	adds	r4, #5
 800f3ce:	4420      	add	r0, r4
 800f3d0:	bd10      	pop	{r4, pc}
 800f3d2:	bf00      	nop

0800f3d4 <_String__cdr_deserialize>:
 800f3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	b083      	sub	sp, #12
 800f3da:	b1a1      	cbz	r1, 800f406 <_String__cdr_deserialize+0x32>
 800f3dc:	688f      	ldr	r7, [r1, #8]
 800f3de:	ab01      	add	r3, sp, #4
 800f3e0:	6809      	ldr	r1, [r1, #0]
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	463a      	mov	r2, r7
 800f3e6:	f001 f8a1 	bl	801052c <ucdr_deserialize_sequence_char>
 800f3ea:	9b01      	ldr	r3, [sp, #4]
 800f3ec:	4605      	mov	r5, r0
 800f3ee:	b920      	cbnz	r0, 800f3fa <_String__cdr_deserialize+0x26>
 800f3f0:	429f      	cmp	r7, r3
 800f3f2:	d30c      	bcc.n	800f40e <_String__cdr_deserialize+0x3a>
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	b003      	add	sp, #12
 800f3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3fa:	b103      	cbz	r3, 800f3fe <_String__cdr_deserialize+0x2a>
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	4628      	mov	r0, r5
 800f400:	6063      	str	r3, [r4, #4]
 800f402:	b003      	add	sp, #12
 800f404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f406:	460d      	mov	r5, r1
 800f408:	4628      	mov	r0, r5
 800f40a:	b003      	add	sp, #12
 800f40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f40e:	2101      	movs	r1, #1
 800f410:	75b0      	strb	r0, [r6, #22]
 800f412:	4630      	mov	r0, r6
 800f414:	7571      	strb	r1, [r6, #21]
 800f416:	6065      	str	r5, [r4, #4]
 800f418:	f001 f81e 	bl	8010458 <ucdr_align_to>
 800f41c:	4630      	mov	r0, r6
 800f41e:	9901      	ldr	r1, [sp, #4]
 800f420:	f001 f852 	bl	80104c8 <ucdr_advance_buffer>
 800f424:	4628      	mov	r0, r5
 800f426:	b003      	add	sp, #12
 800f428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f42a:	bf00      	nop

0800f42c <_String__get_serialized_size>:
 800f42c:	b510      	push	{r4, lr}
 800f42e:	4604      	mov	r4, r0
 800f430:	b130      	cbz	r0, 800f440 <_String__get_serialized_size+0x14>
 800f432:	2104      	movs	r1, #4
 800f434:	2000      	movs	r0, #0
 800f436:	f000 fff7 	bl	8010428 <ucdr_alignment>
 800f43a:	6864      	ldr	r4, [r4, #4]
 800f43c:	3405      	adds	r4, #5
 800f43e:	4420      	add	r0, r4
 800f440:	bd10      	pop	{r4, pc}
 800f442:	bf00      	nop

0800f444 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f444:	4800      	ldr	r0, [pc, #0]	@ (800f448 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800f446:	4770      	bx	lr
 800f448:	24000148 	.word	0x24000148

0800f44c <ucdr_serialize_bool>:
 800f44c:	b538      	push	{r3, r4, r5, lr}
 800f44e:	460d      	mov	r5, r1
 800f450:	2101      	movs	r1, #1
 800f452:	4604      	mov	r4, r0
 800f454:	f000 ff9c 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f458:	b148      	cbz	r0, 800f46e <ucdr_serialize_bool+0x22>
 800f45a:	68a3      	ldr	r3, [r4, #8]
 800f45c:	2101      	movs	r1, #1
 800f45e:	701d      	strb	r5, [r3, #0]
 800f460:	68a2      	ldr	r2, [r4, #8]
 800f462:	6923      	ldr	r3, [r4, #16]
 800f464:	440a      	add	r2, r1
 800f466:	7561      	strb	r1, [r4, #21]
 800f468:	440b      	add	r3, r1
 800f46a:	60a2      	str	r2, [r4, #8]
 800f46c:	6123      	str	r3, [r4, #16]
 800f46e:	7da0      	ldrb	r0, [r4, #22]
 800f470:	f080 0001 	eor.w	r0, r0, #1
 800f474:	bd38      	pop	{r3, r4, r5, pc}
 800f476:	bf00      	nop

0800f478 <ucdr_deserialize_bool>:
 800f478:	b538      	push	{r3, r4, r5, lr}
 800f47a:	460d      	mov	r5, r1
 800f47c:	2101      	movs	r1, #1
 800f47e:	4604      	mov	r4, r0
 800f480:	f000 ff86 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f484:	b160      	cbz	r0, 800f4a0 <ucdr_deserialize_bool+0x28>
 800f486:	68a2      	ldr	r2, [r4, #8]
 800f488:	2101      	movs	r1, #1
 800f48a:	6923      	ldr	r3, [r4, #16]
 800f48c:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f490:	440b      	add	r3, r1
 800f492:	3800      	subs	r0, #0
 800f494:	bf18      	it	ne
 800f496:	2001      	movne	r0, #1
 800f498:	7028      	strb	r0, [r5, #0]
 800f49a:	60a2      	str	r2, [r4, #8]
 800f49c:	6123      	str	r3, [r4, #16]
 800f49e:	7561      	strb	r1, [r4, #21]
 800f4a0:	7da0      	ldrb	r0, [r4, #22]
 800f4a2:	f080 0001 	eor.w	r0, r0, #1
 800f4a6:	bd38      	pop	{r3, r4, r5, pc}

0800f4a8 <ucdr_serialize_uint8_t>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	2101      	movs	r1, #1
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	f000 ff6e 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f4b4:	b148      	cbz	r0, 800f4ca <ucdr_serialize_uint8_t+0x22>
 800f4b6:	68a3      	ldr	r3, [r4, #8]
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	701d      	strb	r5, [r3, #0]
 800f4bc:	68a2      	ldr	r2, [r4, #8]
 800f4be:	6923      	ldr	r3, [r4, #16]
 800f4c0:	440a      	add	r2, r1
 800f4c2:	7561      	strb	r1, [r4, #21]
 800f4c4:	440b      	add	r3, r1
 800f4c6:	60a2      	str	r2, [r4, #8]
 800f4c8:	6123      	str	r3, [r4, #16]
 800f4ca:	7da0      	ldrb	r0, [r4, #22]
 800f4cc:	f080 0001 	eor.w	r0, r0, #1
 800f4d0:	bd38      	pop	{r3, r4, r5, pc}
 800f4d2:	bf00      	nop

0800f4d4 <ucdr_deserialize_uint8_t>:
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	460d      	mov	r5, r1
 800f4d8:	2101      	movs	r1, #1
 800f4da:	4604      	mov	r4, r0
 800f4dc:	f000 ff58 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f4e0:	b150      	cbz	r0, 800f4f8 <ucdr_deserialize_uint8_t+0x24>
 800f4e2:	68a3      	ldr	r3, [r4, #8]
 800f4e4:	2101      	movs	r1, #1
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	702b      	strb	r3, [r5, #0]
 800f4ea:	68a2      	ldr	r2, [r4, #8]
 800f4ec:	6923      	ldr	r3, [r4, #16]
 800f4ee:	440a      	add	r2, r1
 800f4f0:	7561      	strb	r1, [r4, #21]
 800f4f2:	440b      	add	r3, r1
 800f4f4:	60a2      	str	r2, [r4, #8]
 800f4f6:	6123      	str	r3, [r4, #16]
 800f4f8:	7da0      	ldrb	r0, [r4, #22]
 800f4fa:	f080 0001 	eor.w	r0, r0, #1
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}

0800f500 <ucdr_serialize_uint16_t>:
 800f500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f504:	460b      	mov	r3, r1
 800f506:	b082      	sub	sp, #8
 800f508:	4604      	mov	r4, r0
 800f50a:	2102      	movs	r1, #2
 800f50c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f510:	f000 ff92 	bl	8010438 <ucdr_buffer_alignment>
 800f514:	4601      	mov	r1, r0
 800f516:	4620      	mov	r0, r4
 800f518:	7d67      	ldrb	r7, [r4, #21]
 800f51a:	f000 ffd5 	bl	80104c8 <ucdr_advance_buffer>
 800f51e:	2102      	movs	r1, #2
 800f520:	4620      	mov	r0, r4
 800f522:	f000 ff29 	bl	8010378 <ucdr_check_buffer_available_for>
 800f526:	b1c0      	cbz	r0, 800f55a <ucdr_serialize_uint16_t+0x5a>
 800f528:	7d22      	ldrb	r2, [r4, #20]
 800f52a:	68a3      	ldr	r3, [r4, #8]
 800f52c:	2a01      	cmp	r2, #1
 800f52e:	d04e      	beq.n	800f5ce <ucdr_serialize_uint16_t+0xce>
 800f530:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f534:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f538:	7019      	strb	r1, [r3, #0]
 800f53a:	68a3      	ldr	r3, [r4, #8]
 800f53c:	705a      	strb	r2, [r3, #1]
 800f53e:	2102      	movs	r1, #2
 800f540:	68a2      	ldr	r2, [r4, #8]
 800f542:	6923      	ldr	r3, [r4, #16]
 800f544:	440a      	add	r2, r1
 800f546:	7561      	strb	r1, [r4, #21]
 800f548:	440b      	add	r3, r1
 800f54a:	60a2      	str	r2, [r4, #8]
 800f54c:	6123      	str	r3, [r4, #16]
 800f54e:	7da0      	ldrb	r0, [r4, #22]
 800f550:	f080 0001 	eor.w	r0, r0, #1
 800f554:	b002      	add	sp, #8
 800f556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f55a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f55e:	42ab      	cmp	r3, r5
 800f560:	d923      	bls.n	800f5aa <ucdr_serialize_uint16_t+0xaa>
 800f562:	1b5e      	subs	r6, r3, r5
 800f564:	60a3      	str	r3, [r4, #8]
 800f566:	6923      	ldr	r3, [r4, #16]
 800f568:	4620      	mov	r0, r4
 800f56a:	f1c6 0802 	rsb	r8, r6, #2
 800f56e:	4433      	add	r3, r6
 800f570:	4641      	mov	r1, r8
 800f572:	6123      	str	r3, [r4, #16]
 800f574:	f000 ff0c 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f578:	b368      	cbz	r0, 800f5d6 <ucdr_serialize_uint16_t+0xd6>
 800f57a:	7d23      	ldrb	r3, [r4, #20]
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d03b      	beq.n	800f5f8 <ucdr_serialize_uint16_t+0xf8>
 800f580:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f584:	702b      	strb	r3, [r5, #0]
 800f586:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f58a:	706b      	strb	r3, [r5, #1]
 800f58c:	6923      	ldr	r3, [r4, #16]
 800f58e:	2102      	movs	r1, #2
 800f590:	68a2      	ldr	r2, [r4, #8]
 800f592:	7da0      	ldrb	r0, [r4, #22]
 800f594:	3302      	adds	r3, #2
 800f596:	4442      	add	r2, r8
 800f598:	7561      	strb	r1, [r4, #21]
 800f59a:	1b9b      	subs	r3, r3, r6
 800f59c:	f080 0001 	eor.w	r0, r0, #1
 800f5a0:	60a2      	str	r2, [r4, #8]
 800f5a2:	6123      	str	r3, [r4, #16]
 800f5a4:	b002      	add	sp, #8
 800f5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5aa:	2102      	movs	r1, #2
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f000 feef 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	d0cb      	beq.n	800f54e <ucdr_serialize_uint16_t+0x4e>
 800f5b6:	7d23      	ldrb	r3, [r4, #20]
 800f5b8:	68a2      	ldr	r2, [r4, #8]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d018      	beq.n	800f5f0 <ucdr_serialize_uint16_t+0xf0>
 800f5be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5c2:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800f5c6:	7013      	strb	r3, [r2, #0]
 800f5c8:	68a3      	ldr	r3, [r4, #8]
 800f5ca:	7059      	strb	r1, [r3, #1]
 800f5cc:	e7b7      	b.n	800f53e <ucdr_serialize_uint16_t+0x3e>
 800f5ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f5d2:	801a      	strh	r2, [r3, #0]
 800f5d4:	e7b3      	b.n	800f53e <ucdr_serialize_uint16_t+0x3e>
 800f5d6:	68a2      	ldr	r2, [r4, #8]
 800f5d8:	6923      	ldr	r3, [r4, #16]
 800f5da:	7da0      	ldrb	r0, [r4, #22]
 800f5dc:	1b92      	subs	r2, r2, r6
 800f5de:	1b9b      	subs	r3, r3, r6
 800f5e0:	7567      	strb	r7, [r4, #21]
 800f5e2:	f080 0001 	eor.w	r0, r0, #1
 800f5e6:	60a2      	str	r2, [r4, #8]
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	b002      	add	sp, #8
 800f5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f5f4:	8013      	strh	r3, [r2, #0]
 800f5f6:	e7a2      	b.n	800f53e <ucdr_serialize_uint16_t+0x3e>
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	f10d 0506 	add.w	r5, sp, #6
 800f5fe:	4632      	mov	r2, r6
 800f600:	4629      	mov	r1, r5
 800f602:	f00b fc34 	bl	801ae6e <memcpy>
 800f606:	4642      	mov	r2, r8
 800f608:	19a9      	adds	r1, r5, r6
 800f60a:	68a0      	ldr	r0, [r4, #8]
 800f60c:	f00b fc2f 	bl	801ae6e <memcpy>
 800f610:	e7bc      	b.n	800f58c <ucdr_serialize_uint16_t+0x8c>
 800f612:	bf00      	nop

0800f614 <ucdr_serialize_endian_uint16_t>:
 800f614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f618:	4604      	mov	r4, r0
 800f61a:	b083      	sub	sp, #12
 800f61c:	460d      	mov	r5, r1
 800f61e:	2102      	movs	r1, #2
 800f620:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f624:	f000 ff08 	bl	8010438 <ucdr_buffer_alignment>
 800f628:	4601      	mov	r1, r0
 800f62a:	4620      	mov	r0, r4
 800f62c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f630:	f000 ff4a 	bl	80104c8 <ucdr_advance_buffer>
 800f634:	2102      	movs	r1, #2
 800f636:	4620      	mov	r0, r4
 800f638:	f000 fe9e 	bl	8010378 <ucdr_check_buffer_available_for>
 800f63c:	bb60      	cbnz	r0, 800f698 <ucdr_serialize_endian_uint16_t+0x84>
 800f63e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f642:	42be      	cmp	r6, r7
 800f644:	d923      	bls.n	800f68e <ucdr_serialize_endian_uint16_t+0x7a>
 800f646:	6923      	ldr	r3, [r4, #16]
 800f648:	4620      	mov	r0, r4
 800f64a:	60a6      	str	r6, [r4, #8]
 800f64c:	1bf6      	subs	r6, r6, r7
 800f64e:	4433      	add	r3, r6
 800f650:	f1c6 0902 	rsb	r9, r6, #2
 800f654:	6123      	str	r3, [r4, #16]
 800f656:	4649      	mov	r1, r9
 800f658:	f000 fe9a 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d037      	beq.n	800f6d0 <ucdr_serialize_endian_uint16_t+0xbc>
 800f660:	2d01      	cmp	r5, #1
 800f662:	d043      	beq.n	800f6ec <ucdr_serialize_endian_uint16_t+0xd8>
 800f664:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f668:	703b      	strb	r3, [r7, #0]
 800f66a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f66e:	707b      	strb	r3, [r7, #1]
 800f670:	6923      	ldr	r3, [r4, #16]
 800f672:	2102      	movs	r1, #2
 800f674:	68a2      	ldr	r2, [r4, #8]
 800f676:	7da0      	ldrb	r0, [r4, #22]
 800f678:	3302      	adds	r3, #2
 800f67a:	444a      	add	r2, r9
 800f67c:	7561      	strb	r1, [r4, #21]
 800f67e:	1b9b      	subs	r3, r3, r6
 800f680:	f080 0001 	eor.w	r0, r0, #1
 800f684:	60a2      	str	r2, [r4, #8]
 800f686:	6123      	str	r3, [r4, #16]
 800f688:	b003      	add	sp, #12
 800f68a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f68e:	2102      	movs	r1, #2
 800f690:	4620      	mov	r0, r4
 800f692:	f000 fe7d 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f696:	b188      	cbz	r0, 800f6bc <ucdr_serialize_endian_uint16_t+0xa8>
 800f698:	2d01      	cmp	r5, #1
 800f69a:	68a3      	ldr	r3, [r4, #8]
 800f69c:	d014      	beq.n	800f6c8 <ucdr_serialize_endian_uint16_t+0xb4>
 800f69e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f6a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6a6:	7019      	strb	r1, [r3, #0]
 800f6a8:	68a3      	ldr	r3, [r4, #8]
 800f6aa:	705a      	strb	r2, [r3, #1]
 800f6ac:	2102      	movs	r1, #2
 800f6ae:	68a2      	ldr	r2, [r4, #8]
 800f6b0:	6923      	ldr	r3, [r4, #16]
 800f6b2:	440a      	add	r2, r1
 800f6b4:	7561      	strb	r1, [r4, #21]
 800f6b6:	440b      	add	r3, r1
 800f6b8:	60a2      	str	r2, [r4, #8]
 800f6ba:	6123      	str	r3, [r4, #16]
 800f6bc:	7da0      	ldrb	r0, [r4, #22]
 800f6be:	f080 0001 	eor.w	r0, r0, #1
 800f6c2:	b003      	add	sp, #12
 800f6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f6cc:	801a      	strh	r2, [r3, #0]
 800f6ce:	e7ed      	b.n	800f6ac <ucdr_serialize_endian_uint16_t+0x98>
 800f6d0:	68a2      	ldr	r2, [r4, #8]
 800f6d2:	6923      	ldr	r3, [r4, #16]
 800f6d4:	7da0      	ldrb	r0, [r4, #22]
 800f6d6:	1b92      	subs	r2, r2, r6
 800f6d8:	1b9b      	subs	r3, r3, r6
 800f6da:	f884 8015 	strb.w	r8, [r4, #21]
 800f6de:	f080 0001 	eor.w	r0, r0, #1
 800f6e2:	60a2      	str	r2, [r4, #8]
 800f6e4:	6123      	str	r3, [r4, #16]
 800f6e6:	b003      	add	sp, #12
 800f6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ec:	f10d 0506 	add.w	r5, sp, #6
 800f6f0:	4632      	mov	r2, r6
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	f00b fbba 	bl	801ae6e <memcpy>
 800f6fa:	464a      	mov	r2, r9
 800f6fc:	19a9      	adds	r1, r5, r6
 800f6fe:	68a0      	ldr	r0, [r4, #8]
 800f700:	f00b fbb5 	bl	801ae6e <memcpy>
 800f704:	e7b4      	b.n	800f670 <ucdr_serialize_endian_uint16_t+0x5c>
 800f706:	bf00      	nop

0800f708 <ucdr_deserialize_uint16_t>:
 800f708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f70c:	4604      	mov	r4, r0
 800f70e:	460d      	mov	r5, r1
 800f710:	2102      	movs	r1, #2
 800f712:	f000 fe91 	bl	8010438 <ucdr_buffer_alignment>
 800f716:	4601      	mov	r1, r0
 800f718:	4620      	mov	r0, r4
 800f71a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f71e:	f000 fed3 	bl	80104c8 <ucdr_advance_buffer>
 800f722:	2102      	movs	r1, #2
 800f724:	4620      	mov	r0, r4
 800f726:	f000 fe27 	bl	8010378 <ucdr_check_buffer_available_for>
 800f72a:	b1a8      	cbz	r0, 800f758 <ucdr_deserialize_uint16_t+0x50>
 800f72c:	7d22      	ldrb	r2, [r4, #20]
 800f72e:	68a3      	ldr	r3, [r4, #8]
 800f730:	2a01      	cmp	r2, #1
 800f732:	d046      	beq.n	800f7c2 <ucdr_deserialize_uint16_t+0xba>
 800f734:	785b      	ldrb	r3, [r3, #1]
 800f736:	702b      	strb	r3, [r5, #0]
 800f738:	68a3      	ldr	r3, [r4, #8]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	706b      	strb	r3, [r5, #1]
 800f73e:	2102      	movs	r1, #2
 800f740:	68a2      	ldr	r2, [r4, #8]
 800f742:	6923      	ldr	r3, [r4, #16]
 800f744:	440a      	add	r2, r1
 800f746:	7561      	strb	r1, [r4, #21]
 800f748:	440b      	add	r3, r1
 800f74a:	60a2      	str	r2, [r4, #8]
 800f74c:	6123      	str	r3, [r4, #16]
 800f74e:	7da0      	ldrb	r0, [r4, #22]
 800f750:	f080 0001 	eor.w	r0, r0, #1
 800f754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f758:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f75c:	42be      	cmp	r6, r7
 800f75e:	d920      	bls.n	800f7a2 <ucdr_deserialize_uint16_t+0x9a>
 800f760:	6923      	ldr	r3, [r4, #16]
 800f762:	4620      	mov	r0, r4
 800f764:	60a6      	str	r6, [r4, #8]
 800f766:	1bf6      	subs	r6, r6, r7
 800f768:	4433      	add	r3, r6
 800f76a:	f1c6 0902 	rsb	r9, r6, #2
 800f76e:	6123      	str	r3, [r4, #16]
 800f770:	4649      	mov	r1, r9
 800f772:	f000 fe0d 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f776:	b338      	cbz	r0, 800f7c8 <ucdr_deserialize_uint16_t+0xc0>
 800f778:	7d23      	ldrb	r3, [r4, #20]
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d034      	beq.n	800f7e8 <ucdr_deserialize_uint16_t+0xe0>
 800f77e:	787b      	ldrb	r3, [r7, #1]
 800f780:	702b      	strb	r3, [r5, #0]
 800f782:	783b      	ldrb	r3, [r7, #0]
 800f784:	706b      	strb	r3, [r5, #1]
 800f786:	6923      	ldr	r3, [r4, #16]
 800f788:	2102      	movs	r1, #2
 800f78a:	68a2      	ldr	r2, [r4, #8]
 800f78c:	3302      	adds	r3, #2
 800f78e:	7da0      	ldrb	r0, [r4, #22]
 800f790:	444a      	add	r2, r9
 800f792:	7561      	strb	r1, [r4, #21]
 800f794:	1b9b      	subs	r3, r3, r6
 800f796:	f080 0001 	eor.w	r0, r0, #1
 800f79a:	60a2      	str	r2, [r4, #8]
 800f79c:	6123      	str	r3, [r4, #16]
 800f79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7a2:	2102      	movs	r1, #2
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f000 fdf3 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	d0cf      	beq.n	800f74e <ucdr_deserialize_uint16_t+0x46>
 800f7ae:	7d23      	ldrb	r3, [r4, #20]
 800f7b0:	68a2      	ldr	r2, [r4, #8]
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d015      	beq.n	800f7e2 <ucdr_deserialize_uint16_t+0xda>
 800f7b6:	7853      	ldrb	r3, [r2, #1]
 800f7b8:	702b      	strb	r3, [r5, #0]
 800f7ba:	68a3      	ldr	r3, [r4, #8]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	706b      	strb	r3, [r5, #1]
 800f7c0:	e7bd      	b.n	800f73e <ucdr_deserialize_uint16_t+0x36>
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	802b      	strh	r3, [r5, #0]
 800f7c6:	e7ba      	b.n	800f73e <ucdr_deserialize_uint16_t+0x36>
 800f7c8:	68a2      	ldr	r2, [r4, #8]
 800f7ca:	6923      	ldr	r3, [r4, #16]
 800f7cc:	1b92      	subs	r2, r2, r6
 800f7ce:	7da0      	ldrb	r0, [r4, #22]
 800f7d0:	1b9b      	subs	r3, r3, r6
 800f7d2:	f884 8015 	strb.w	r8, [r4, #21]
 800f7d6:	f080 0001 	eor.w	r0, r0, #1
 800f7da:	60a2      	str	r2, [r4, #8]
 800f7dc:	6123      	str	r3, [r4, #16]
 800f7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7e2:	8813      	ldrh	r3, [r2, #0]
 800f7e4:	802b      	strh	r3, [r5, #0]
 800f7e6:	e7aa      	b.n	800f73e <ucdr_deserialize_uint16_t+0x36>
 800f7e8:	4639      	mov	r1, r7
 800f7ea:	4632      	mov	r2, r6
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f00b fb3e 	bl	801ae6e <memcpy>
 800f7f2:	464a      	mov	r2, r9
 800f7f4:	19a8      	adds	r0, r5, r6
 800f7f6:	68a1      	ldr	r1, [r4, #8]
 800f7f8:	f00b fb39 	bl	801ae6e <memcpy>
 800f7fc:	e7c3      	b.n	800f786 <ucdr_deserialize_uint16_t+0x7e>
 800f7fe:	bf00      	nop

0800f800 <ucdr_deserialize_endian_uint16_t>:
 800f800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f804:	4604      	mov	r4, r0
 800f806:	460e      	mov	r6, r1
 800f808:	2102      	movs	r1, #2
 800f80a:	4615      	mov	r5, r2
 800f80c:	f000 fe14 	bl	8010438 <ucdr_buffer_alignment>
 800f810:	4601      	mov	r1, r0
 800f812:	4620      	mov	r0, r4
 800f814:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f818:	f000 fe56 	bl	80104c8 <ucdr_advance_buffer>
 800f81c:	2102      	movs	r1, #2
 800f81e:	4620      	mov	r0, r4
 800f820:	f000 fdaa 	bl	8010378 <ucdr_check_buffer_available_for>
 800f824:	bb60      	cbnz	r0, 800f880 <ucdr_deserialize_endian_uint16_t+0x80>
 800f826:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800f82a:	454f      	cmp	r7, r9
 800f82c:	d923      	bls.n	800f876 <ucdr_deserialize_endian_uint16_t+0x76>
 800f82e:	6923      	ldr	r3, [r4, #16]
 800f830:	4620      	mov	r0, r4
 800f832:	60a7      	str	r7, [r4, #8]
 800f834:	eba7 0709 	sub.w	r7, r7, r9
 800f838:	443b      	add	r3, r7
 800f83a:	f1c7 0a02 	rsb	sl, r7, #2
 800f83e:	6123      	str	r3, [r4, #16]
 800f840:	4651      	mov	r1, sl
 800f842:	f000 fda5 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f846:	2800      	cmp	r0, #0
 800f848:	d032      	beq.n	800f8b0 <ucdr_deserialize_endian_uint16_t+0xb0>
 800f84a:	2e01      	cmp	r6, #1
 800f84c:	d03d      	beq.n	800f8ca <ucdr_deserialize_endian_uint16_t+0xca>
 800f84e:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f852:	702b      	strb	r3, [r5, #0]
 800f854:	f899 3000 	ldrb.w	r3, [r9]
 800f858:	706b      	strb	r3, [r5, #1]
 800f85a:	6923      	ldr	r3, [r4, #16]
 800f85c:	2102      	movs	r1, #2
 800f85e:	68a2      	ldr	r2, [r4, #8]
 800f860:	3302      	adds	r3, #2
 800f862:	7da0      	ldrb	r0, [r4, #22]
 800f864:	4452      	add	r2, sl
 800f866:	7561      	strb	r1, [r4, #21]
 800f868:	1bdb      	subs	r3, r3, r7
 800f86a:	f080 0001 	eor.w	r0, r0, #1
 800f86e:	60a2      	str	r2, [r4, #8]
 800f870:	6123      	str	r3, [r4, #16]
 800f872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f876:	2102      	movs	r1, #2
 800f878:	4620      	mov	r0, r4
 800f87a:	f000 fd89 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f87e:	b178      	cbz	r0, 800f8a0 <ucdr_deserialize_endian_uint16_t+0xa0>
 800f880:	2e01      	cmp	r6, #1
 800f882:	68a3      	ldr	r3, [r4, #8]
 800f884:	d011      	beq.n	800f8aa <ucdr_deserialize_endian_uint16_t+0xaa>
 800f886:	785b      	ldrb	r3, [r3, #1]
 800f888:	702b      	strb	r3, [r5, #0]
 800f88a:	68a3      	ldr	r3, [r4, #8]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	706b      	strb	r3, [r5, #1]
 800f890:	2102      	movs	r1, #2
 800f892:	68a2      	ldr	r2, [r4, #8]
 800f894:	6923      	ldr	r3, [r4, #16]
 800f896:	440a      	add	r2, r1
 800f898:	7561      	strb	r1, [r4, #21]
 800f89a:	440b      	add	r3, r1
 800f89c:	60a2      	str	r2, [r4, #8]
 800f89e:	6123      	str	r3, [r4, #16]
 800f8a0:	7da0      	ldrb	r0, [r4, #22]
 800f8a2:	f080 0001 	eor.w	r0, r0, #1
 800f8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	802b      	strh	r3, [r5, #0]
 800f8ae:	e7ef      	b.n	800f890 <ucdr_deserialize_endian_uint16_t+0x90>
 800f8b0:	68a2      	ldr	r2, [r4, #8]
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	1bd2      	subs	r2, r2, r7
 800f8b6:	7da0      	ldrb	r0, [r4, #22]
 800f8b8:	1bdb      	subs	r3, r3, r7
 800f8ba:	f884 8015 	strb.w	r8, [r4, #21]
 800f8be:	f080 0001 	eor.w	r0, r0, #1
 800f8c2:	60a2      	str	r2, [r4, #8]
 800f8c4:	6123      	str	r3, [r4, #16]
 800f8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	463a      	mov	r2, r7
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	f00b facd 	bl	801ae6e <memcpy>
 800f8d4:	4652      	mov	r2, sl
 800f8d6:	19e8      	adds	r0, r5, r7
 800f8d8:	68a1      	ldr	r1, [r4, #8]
 800f8da:	f00b fac8 	bl	801ae6e <memcpy>
 800f8de:	e7bc      	b.n	800f85a <ucdr_deserialize_endian_uint16_t+0x5a>

0800f8e0 <ucdr_serialize_uint32_t>:
 800f8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	9101      	str	r1, [sp, #4]
 800f8ea:	2104      	movs	r1, #4
 800f8ec:	f000 fda4 	bl	8010438 <ucdr_buffer_alignment>
 800f8f0:	4601      	mov	r1, r0
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	7d67      	ldrb	r7, [r4, #21]
 800f8f6:	f000 fde7 	bl	80104c8 <ucdr_advance_buffer>
 800f8fa:	2104      	movs	r1, #4
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	f000 fd3b 	bl	8010378 <ucdr_check_buffer_available_for>
 800f902:	b300      	cbz	r0, 800f946 <ucdr_serialize_uint32_t+0x66>
 800f904:	7d22      	ldrb	r2, [r4, #20]
 800f906:	68a3      	ldr	r3, [r4, #8]
 800f908:	2a01      	cmp	r2, #1
 800f90a:	d064      	beq.n	800f9d6 <ucdr_serialize_uint32_t+0xf6>
 800f90c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f910:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f914:	7018      	strb	r0, [r3, #0]
 800f916:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f91a:	68a3      	ldr	r3, [r4, #8]
 800f91c:	705a      	strb	r2, [r3, #1]
 800f91e:	68a3      	ldr	r3, [r4, #8]
 800f920:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f924:	7099      	strb	r1, [r3, #2]
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	70da      	strb	r2, [r3, #3]
 800f92a:	2104      	movs	r1, #4
 800f92c:	68a2      	ldr	r2, [r4, #8]
 800f92e:	6923      	ldr	r3, [r4, #16]
 800f930:	440a      	add	r2, r1
 800f932:	7561      	strb	r1, [r4, #21]
 800f934:	440b      	add	r3, r1
 800f936:	60a2      	str	r2, [r4, #8]
 800f938:	6123      	str	r3, [r4, #16]
 800f93a:	7da0      	ldrb	r0, [r4, #22]
 800f93c:	f080 0001 	eor.w	r0, r0, #1
 800f940:	b002      	add	sp, #8
 800f942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f946:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f94a:	42ab      	cmp	r3, r5
 800f94c:	d92f      	bls.n	800f9ae <ucdr_serialize_uint32_t+0xce>
 800f94e:	1b5e      	subs	r6, r3, r5
 800f950:	60a3      	str	r3, [r4, #8]
 800f952:	6923      	ldr	r3, [r4, #16]
 800f954:	4620      	mov	r0, r4
 800f956:	f1c6 0804 	rsb	r8, r6, #4
 800f95a:	4433      	add	r3, r6
 800f95c:	4641      	mov	r1, r8
 800f95e:	6123      	str	r3, [r4, #16]
 800f960:	f000 fd16 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f964:	2800      	cmp	r0, #0
 800f966:	d039      	beq.n	800f9dc <ucdr_serialize_uint32_t+0xfc>
 800f968:	7d23      	ldrb	r3, [r4, #20]
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d04c      	beq.n	800fa08 <ucdr_serialize_uint32_t+0x128>
 800f96e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f972:	2e01      	cmp	r6, #1
 800f974:	702b      	strb	r3, [r5, #0]
 800f976:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f97a:	706b      	strb	r3, [r5, #1]
 800f97c:	d03b      	beq.n	800f9f6 <ucdr_serialize_uint32_t+0x116>
 800f97e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f982:	2e02      	cmp	r6, #2
 800f984:	70ab      	strb	r3, [r5, #2]
 800f986:	d03a      	beq.n	800f9fe <ucdr_serialize_uint32_t+0x11e>
 800f988:	3503      	adds	r5, #3
 800f98a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f98e:	702b      	strb	r3, [r5, #0]
 800f990:	6923      	ldr	r3, [r4, #16]
 800f992:	2104      	movs	r1, #4
 800f994:	68a2      	ldr	r2, [r4, #8]
 800f996:	7da0      	ldrb	r0, [r4, #22]
 800f998:	3304      	adds	r3, #4
 800f99a:	4442      	add	r2, r8
 800f99c:	7561      	strb	r1, [r4, #21]
 800f99e:	1b9b      	subs	r3, r3, r6
 800f9a0:	f080 0001 	eor.w	r0, r0, #1
 800f9a4:	60a2      	str	r2, [r4, #8]
 800f9a6:	6123      	str	r3, [r4, #16]
 800f9a8:	b002      	add	sp, #8
 800f9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ae:	2104      	movs	r1, #4
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f000 fced 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d0bf      	beq.n	800f93a <ucdr_serialize_uint32_t+0x5a>
 800f9ba:	7d23      	ldrb	r3, [r4, #20]
 800f9bc:	68a2      	ldr	r2, [r4, #8]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d01f      	beq.n	800fa02 <ucdr_serialize_uint32_t+0x122>
 800f9c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f9c6:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800f9ca:	7013      	strb	r3, [r2, #0]
 800f9cc:	68a3      	ldr	r3, [r4, #8]
 800f9ce:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f9d2:	7058      	strb	r0, [r3, #1]
 800f9d4:	e7a3      	b.n	800f91e <ucdr_serialize_uint32_t+0x3e>
 800f9d6:	9a01      	ldr	r2, [sp, #4]
 800f9d8:	601a      	str	r2, [r3, #0]
 800f9da:	e7a6      	b.n	800f92a <ucdr_serialize_uint32_t+0x4a>
 800f9dc:	68a2      	ldr	r2, [r4, #8]
 800f9de:	6923      	ldr	r3, [r4, #16]
 800f9e0:	7da0      	ldrb	r0, [r4, #22]
 800f9e2:	1b92      	subs	r2, r2, r6
 800f9e4:	1b9b      	subs	r3, r3, r6
 800f9e6:	7567      	strb	r7, [r4, #21]
 800f9e8:	f080 0001 	eor.w	r0, r0, #1
 800f9ec:	60a2      	str	r2, [r4, #8]
 800f9ee:	6123      	str	r3, [r4, #16]
 800f9f0:	b002      	add	sp, #8
 800f9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f6:	68a3      	ldr	r3, [r4, #8]
 800f9f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f9fc:	701a      	strb	r2, [r3, #0]
 800f9fe:	68a5      	ldr	r5, [r4, #8]
 800fa00:	e7c3      	b.n	800f98a <ucdr_serialize_uint32_t+0xaa>
 800fa02:	9b01      	ldr	r3, [sp, #4]
 800fa04:	6013      	str	r3, [r2, #0]
 800fa06:	e790      	b.n	800f92a <ucdr_serialize_uint32_t+0x4a>
 800fa08:	4628      	mov	r0, r5
 800fa0a:	ad01      	add	r5, sp, #4
 800fa0c:	4632      	mov	r2, r6
 800fa0e:	4629      	mov	r1, r5
 800fa10:	f00b fa2d 	bl	801ae6e <memcpy>
 800fa14:	4642      	mov	r2, r8
 800fa16:	19a9      	adds	r1, r5, r6
 800fa18:	68a0      	ldr	r0, [r4, #8]
 800fa1a:	f00b fa28 	bl	801ae6e <memcpy>
 800fa1e:	e7b7      	b.n	800f990 <ucdr_serialize_uint32_t+0xb0>

0800fa20 <ucdr_serialize_endian_uint32_t>:
 800fa20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa24:	4604      	mov	r4, r0
 800fa26:	b083      	sub	sp, #12
 800fa28:	460d      	mov	r5, r1
 800fa2a:	2104      	movs	r1, #4
 800fa2c:	9201      	str	r2, [sp, #4]
 800fa2e:	f000 fd03 	bl	8010438 <ucdr_buffer_alignment>
 800fa32:	4601      	mov	r1, r0
 800fa34:	4620      	mov	r0, r4
 800fa36:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa3a:	f000 fd45 	bl	80104c8 <ucdr_advance_buffer>
 800fa3e:	2104      	movs	r1, #4
 800fa40:	4620      	mov	r0, r4
 800fa42:	f000 fc99 	bl	8010378 <ucdr_check_buffer_available_for>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	d137      	bne.n	800faba <ucdr_serialize_endian_uint32_t+0x9a>
 800fa4a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fa4e:	42b7      	cmp	r7, r6
 800fa50:	d92e      	bls.n	800fab0 <ucdr_serialize_endian_uint32_t+0x90>
 800fa52:	6923      	ldr	r3, [r4, #16]
 800fa54:	4620      	mov	r0, r4
 800fa56:	60a7      	str	r7, [r4, #8]
 800fa58:	1bbf      	subs	r7, r7, r6
 800fa5a:	443b      	add	r3, r7
 800fa5c:	f1c7 0904 	rsb	r9, r7, #4
 800fa60:	6123      	str	r3, [r4, #16]
 800fa62:	4649      	mov	r1, r9
 800fa64:	f000 fc94 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d049      	beq.n	800fb00 <ucdr_serialize_endian_uint32_t+0xe0>
 800fa6c:	2d01      	cmp	r5, #1
 800fa6e:	d05b      	beq.n	800fb28 <ucdr_serialize_endian_uint32_t+0x108>
 800fa70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa74:	2f01      	cmp	r7, #1
 800fa76:	7033      	strb	r3, [r6, #0]
 800fa78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa7c:	7073      	strb	r3, [r6, #1]
 800fa7e:	d04d      	beq.n	800fb1c <ucdr_serialize_endian_uint32_t+0xfc>
 800fa80:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa84:	2f02      	cmp	r7, #2
 800fa86:	70b3      	strb	r3, [r6, #2]
 800fa88:	d04c      	beq.n	800fb24 <ucdr_serialize_endian_uint32_t+0x104>
 800fa8a:	3603      	adds	r6, #3
 800fa8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa90:	7033      	strb	r3, [r6, #0]
 800fa92:	6923      	ldr	r3, [r4, #16]
 800fa94:	2104      	movs	r1, #4
 800fa96:	68a2      	ldr	r2, [r4, #8]
 800fa98:	7da0      	ldrb	r0, [r4, #22]
 800fa9a:	3304      	adds	r3, #4
 800fa9c:	444a      	add	r2, r9
 800fa9e:	7561      	strb	r1, [r4, #21]
 800faa0:	1bdb      	subs	r3, r3, r7
 800faa2:	f080 0001 	eor.w	r0, r0, #1
 800faa6:	60a2      	str	r2, [r4, #8]
 800faa8:	6123      	str	r3, [r4, #16]
 800faaa:	b003      	add	sp, #12
 800faac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fab0:	2104      	movs	r1, #4
 800fab2:	4620      	mov	r0, r4
 800fab4:	f000 fc6c 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800fab8:	b1c8      	cbz	r0, 800faee <ucdr_serialize_endian_uint32_t+0xce>
 800faba:	2d01      	cmp	r5, #1
 800fabc:	68a3      	ldr	r3, [r4, #8]
 800fabe:	d01c      	beq.n	800fafa <ucdr_serialize_endian_uint32_t+0xda>
 800fac0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fac4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fac8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800facc:	7018      	strb	r0, [r3, #0]
 800face:	68a3      	ldr	r3, [r4, #8]
 800fad0:	705a      	strb	r2, [r3, #1]
 800fad2:	68a3      	ldr	r3, [r4, #8]
 800fad4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fad8:	7099      	strb	r1, [r3, #2]
 800fada:	68a3      	ldr	r3, [r4, #8]
 800fadc:	70da      	strb	r2, [r3, #3]
 800fade:	2104      	movs	r1, #4
 800fae0:	68a2      	ldr	r2, [r4, #8]
 800fae2:	6923      	ldr	r3, [r4, #16]
 800fae4:	440a      	add	r2, r1
 800fae6:	7561      	strb	r1, [r4, #21]
 800fae8:	440b      	add	r3, r1
 800faea:	60a2      	str	r2, [r4, #8]
 800faec:	6123      	str	r3, [r4, #16]
 800faee:	7da0      	ldrb	r0, [r4, #22]
 800faf0:	f080 0001 	eor.w	r0, r0, #1
 800faf4:	b003      	add	sp, #12
 800faf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fafa:	9a01      	ldr	r2, [sp, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	e7ee      	b.n	800fade <ucdr_serialize_endian_uint32_t+0xbe>
 800fb00:	68a2      	ldr	r2, [r4, #8]
 800fb02:	6923      	ldr	r3, [r4, #16]
 800fb04:	7da0      	ldrb	r0, [r4, #22]
 800fb06:	1bd2      	subs	r2, r2, r7
 800fb08:	1bdb      	subs	r3, r3, r7
 800fb0a:	f884 8015 	strb.w	r8, [r4, #21]
 800fb0e:	f080 0001 	eor.w	r0, r0, #1
 800fb12:	60a2      	str	r2, [r4, #8]
 800fb14:	6123      	str	r3, [r4, #16]
 800fb16:	b003      	add	sp, #12
 800fb18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb1c:	68a3      	ldr	r3, [r4, #8]
 800fb1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb22:	701a      	strb	r2, [r3, #0]
 800fb24:	68a6      	ldr	r6, [r4, #8]
 800fb26:	e7b1      	b.n	800fa8c <ucdr_serialize_endian_uint32_t+0x6c>
 800fb28:	ad01      	add	r5, sp, #4
 800fb2a:	463a      	mov	r2, r7
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	4629      	mov	r1, r5
 800fb30:	f00b f99d 	bl	801ae6e <memcpy>
 800fb34:	464a      	mov	r2, r9
 800fb36:	19e9      	adds	r1, r5, r7
 800fb38:	68a0      	ldr	r0, [r4, #8]
 800fb3a:	f00b f998 	bl	801ae6e <memcpy>
 800fb3e:	e7a8      	b.n	800fa92 <ucdr_serialize_endian_uint32_t+0x72>

0800fb40 <ucdr_deserialize_uint32_t>:
 800fb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb44:	4604      	mov	r4, r0
 800fb46:	460d      	mov	r5, r1
 800fb48:	2104      	movs	r1, #4
 800fb4a:	f000 fc75 	bl	8010438 <ucdr_buffer_alignment>
 800fb4e:	4601      	mov	r1, r0
 800fb50:	4620      	mov	r0, r4
 800fb52:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb56:	f000 fcb7 	bl	80104c8 <ucdr_advance_buffer>
 800fb5a:	2104      	movs	r1, #4
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f000 fc0b 	bl	8010378 <ucdr_check_buffer_available_for>
 800fb62:	b1d8      	cbz	r0, 800fb9c <ucdr_deserialize_uint32_t+0x5c>
 800fb64:	7d22      	ldrb	r2, [r4, #20]
 800fb66:	68a3      	ldr	r3, [r4, #8]
 800fb68:	2a01      	cmp	r2, #1
 800fb6a:	d053      	beq.n	800fc14 <ucdr_deserialize_uint32_t+0xd4>
 800fb6c:	78db      	ldrb	r3, [r3, #3]
 800fb6e:	702b      	strb	r3, [r5, #0]
 800fb70:	68a3      	ldr	r3, [r4, #8]
 800fb72:	789b      	ldrb	r3, [r3, #2]
 800fb74:	706b      	strb	r3, [r5, #1]
 800fb76:	68a3      	ldr	r3, [r4, #8]
 800fb78:	785b      	ldrb	r3, [r3, #1]
 800fb7a:	70ab      	strb	r3, [r5, #2]
 800fb7c:	68a3      	ldr	r3, [r4, #8]
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	70eb      	strb	r3, [r5, #3]
 800fb82:	2104      	movs	r1, #4
 800fb84:	68a2      	ldr	r2, [r4, #8]
 800fb86:	6923      	ldr	r3, [r4, #16]
 800fb88:	440a      	add	r2, r1
 800fb8a:	7561      	strb	r1, [r4, #21]
 800fb8c:	440b      	add	r3, r1
 800fb8e:	60a2      	str	r2, [r4, #8]
 800fb90:	6123      	str	r3, [r4, #16]
 800fb92:	7da0      	ldrb	r0, [r4, #22]
 800fb94:	f080 0001 	eor.w	r0, r0, #1
 800fb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb9c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fba0:	42b7      	cmp	r7, r6
 800fba2:	d92b      	bls.n	800fbfc <ucdr_deserialize_uint32_t+0xbc>
 800fba4:	6923      	ldr	r3, [r4, #16]
 800fba6:	4620      	mov	r0, r4
 800fba8:	60a7      	str	r7, [r4, #8]
 800fbaa:	1bbf      	subs	r7, r7, r6
 800fbac:	443b      	add	r3, r7
 800fbae:	f1c7 0904 	rsb	r9, r7, #4
 800fbb2:	6123      	str	r3, [r4, #16]
 800fbb4:	4649      	mov	r1, r9
 800fbb6:	f000 fbeb 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800fbba:	b370      	cbz	r0, 800fc1a <ucdr_deserialize_uint32_t+0xda>
 800fbbc:	7d23      	ldrb	r3, [r4, #20]
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d042      	beq.n	800fc48 <ucdr_deserialize_uint32_t+0x108>
 800fbc2:	78f3      	ldrb	r3, [r6, #3]
 800fbc4:	2f01      	cmp	r7, #1
 800fbc6:	702b      	strb	r3, [r5, #0]
 800fbc8:	78b3      	ldrb	r3, [r6, #2]
 800fbca:	706b      	strb	r3, [r5, #1]
 800fbcc:	d032      	beq.n	800fc34 <ucdr_deserialize_uint32_t+0xf4>
 800fbce:	7873      	ldrb	r3, [r6, #1]
 800fbd0:	2f02      	cmp	r7, #2
 800fbd2:	f105 0503 	add.w	r5, r5, #3
 800fbd6:	f805 3c01 	strb.w	r3, [r5, #-1]
 800fbda:	d030      	beq.n	800fc3e <ucdr_deserialize_uint32_t+0xfe>
 800fbdc:	7833      	ldrb	r3, [r6, #0]
 800fbde:	702b      	strb	r3, [r5, #0]
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	2104      	movs	r1, #4
 800fbe4:	68a2      	ldr	r2, [r4, #8]
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	7da0      	ldrb	r0, [r4, #22]
 800fbea:	444a      	add	r2, r9
 800fbec:	7561      	strb	r1, [r4, #21]
 800fbee:	1bdb      	subs	r3, r3, r7
 800fbf0:	f080 0001 	eor.w	r0, r0, #1
 800fbf4:	60a2      	str	r2, [r4, #8]
 800fbf6:	6123      	str	r3, [r4, #16]
 800fbf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbfc:	2104      	movs	r1, #4
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f000 fbc6 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d0c4      	beq.n	800fb92 <ucdr_deserialize_uint32_t+0x52>
 800fc08:	7d23      	ldrb	r3, [r4, #20]
 800fc0a:	68a2      	ldr	r2, [r4, #8]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d018      	beq.n	800fc42 <ucdr_deserialize_uint32_t+0x102>
 800fc10:	78d3      	ldrb	r3, [r2, #3]
 800fc12:	e7ac      	b.n	800fb6e <ucdr_deserialize_uint32_t+0x2e>
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	602b      	str	r3, [r5, #0]
 800fc18:	e7b3      	b.n	800fb82 <ucdr_deserialize_uint32_t+0x42>
 800fc1a:	68a2      	ldr	r2, [r4, #8]
 800fc1c:	6923      	ldr	r3, [r4, #16]
 800fc1e:	1bd2      	subs	r2, r2, r7
 800fc20:	7da0      	ldrb	r0, [r4, #22]
 800fc22:	1bdb      	subs	r3, r3, r7
 800fc24:	f884 8015 	strb.w	r8, [r4, #21]
 800fc28:	f080 0001 	eor.w	r0, r0, #1
 800fc2c:	60a2      	str	r2, [r4, #8]
 800fc2e:	6123      	str	r3, [r4, #16]
 800fc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc34:	68a3      	ldr	r3, [r4, #8]
 800fc36:	3503      	adds	r5, #3
 800fc38:	785b      	ldrb	r3, [r3, #1]
 800fc3a:	f805 3c01 	strb.w	r3, [r5, #-1]
 800fc3e:	68a6      	ldr	r6, [r4, #8]
 800fc40:	e7cc      	b.n	800fbdc <ucdr_deserialize_uint32_t+0x9c>
 800fc42:	6813      	ldr	r3, [r2, #0]
 800fc44:	602b      	str	r3, [r5, #0]
 800fc46:	e79c      	b.n	800fb82 <ucdr_deserialize_uint32_t+0x42>
 800fc48:	4631      	mov	r1, r6
 800fc4a:	463a      	mov	r2, r7
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	f00b f90e 	bl	801ae6e <memcpy>
 800fc52:	464a      	mov	r2, r9
 800fc54:	19e8      	adds	r0, r5, r7
 800fc56:	68a1      	ldr	r1, [r4, #8]
 800fc58:	f00b f909 	bl	801ae6e <memcpy>
 800fc5c:	e7c0      	b.n	800fbe0 <ucdr_deserialize_uint32_t+0xa0>
 800fc5e:	bf00      	nop

0800fc60 <ucdr_deserialize_endian_uint32_t>:
 800fc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc64:	4604      	mov	r4, r0
 800fc66:	460e      	mov	r6, r1
 800fc68:	2104      	movs	r1, #4
 800fc6a:	4615      	mov	r5, r2
 800fc6c:	f000 fbe4 	bl	8010438 <ucdr_buffer_alignment>
 800fc70:	4601      	mov	r1, r0
 800fc72:	4620      	mov	r0, r4
 800fc74:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc78:	f000 fc26 	bl	80104c8 <ucdr_advance_buffer>
 800fc7c:	2104      	movs	r1, #4
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f000 fb7a 	bl	8010378 <ucdr_check_buffer_available_for>
 800fc84:	2800      	cmp	r0, #0
 800fc86:	d138      	bne.n	800fcfa <ucdr_deserialize_endian_uint32_t+0x9a>
 800fc88:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fc8c:	42bb      	cmp	r3, r7
 800fc8e:	d92f      	bls.n	800fcf0 <ucdr_deserialize_endian_uint32_t+0x90>
 800fc90:	eba3 0907 	sub.w	r9, r3, r7
 800fc94:	60a3      	str	r3, [r4, #8]
 800fc96:	6923      	ldr	r3, [r4, #16]
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f1c9 0a04 	rsb	sl, r9, #4
 800fc9e:	444b      	add	r3, r9
 800fca0:	4651      	mov	r1, sl
 800fca2:	6123      	str	r3, [r4, #16]
 800fca4:	f000 fb74 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d044      	beq.n	800fd36 <ucdr_deserialize_endian_uint32_t+0xd6>
 800fcac:	2e01      	cmp	r6, #1
 800fcae:	d058      	beq.n	800fd62 <ucdr_deserialize_endian_uint32_t+0x102>
 800fcb0:	78fb      	ldrb	r3, [r7, #3]
 800fcb2:	f1b9 0f01 	cmp.w	r9, #1
 800fcb6:	702b      	strb	r3, [r5, #0]
 800fcb8:	78bb      	ldrb	r3, [r7, #2]
 800fcba:	706b      	strb	r3, [r5, #1]
 800fcbc:	d04a      	beq.n	800fd54 <ucdr_deserialize_endian_uint32_t+0xf4>
 800fcbe:	787b      	ldrb	r3, [r7, #1]
 800fcc0:	f1b9 0f02 	cmp.w	r9, #2
 800fcc4:	f105 0503 	add.w	r5, r5, #3
 800fcc8:	f805 3c01 	strb.w	r3, [r5, #-1]
 800fccc:	d047      	beq.n	800fd5e <ucdr_deserialize_endian_uint32_t+0xfe>
 800fcce:	783b      	ldrb	r3, [r7, #0]
 800fcd0:	702b      	strb	r3, [r5, #0]
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	2104      	movs	r1, #4
 800fcd6:	68a2      	ldr	r2, [r4, #8]
 800fcd8:	3304      	adds	r3, #4
 800fcda:	7da0      	ldrb	r0, [r4, #22]
 800fcdc:	4452      	add	r2, sl
 800fcde:	7561      	strb	r1, [r4, #21]
 800fce0:	eba3 0309 	sub.w	r3, r3, r9
 800fce4:	f080 0001 	eor.w	r0, r0, #1
 800fce8:	60a2      	str	r2, [r4, #8]
 800fcea:	6123      	str	r3, [r4, #16]
 800fcec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf0:	2104      	movs	r1, #4
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f000 fb4c 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800fcf8:	b1a8      	cbz	r0, 800fd26 <ucdr_deserialize_endian_uint32_t+0xc6>
 800fcfa:	2e01      	cmp	r6, #1
 800fcfc:	68a3      	ldr	r3, [r4, #8]
 800fcfe:	d017      	beq.n	800fd30 <ucdr_deserialize_endian_uint32_t+0xd0>
 800fd00:	78db      	ldrb	r3, [r3, #3]
 800fd02:	702b      	strb	r3, [r5, #0]
 800fd04:	68a3      	ldr	r3, [r4, #8]
 800fd06:	789b      	ldrb	r3, [r3, #2]
 800fd08:	706b      	strb	r3, [r5, #1]
 800fd0a:	68a3      	ldr	r3, [r4, #8]
 800fd0c:	785b      	ldrb	r3, [r3, #1]
 800fd0e:	70ab      	strb	r3, [r5, #2]
 800fd10:	68a3      	ldr	r3, [r4, #8]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	70eb      	strb	r3, [r5, #3]
 800fd16:	2104      	movs	r1, #4
 800fd18:	68a2      	ldr	r2, [r4, #8]
 800fd1a:	6923      	ldr	r3, [r4, #16]
 800fd1c:	440a      	add	r2, r1
 800fd1e:	7561      	strb	r1, [r4, #21]
 800fd20:	440b      	add	r3, r1
 800fd22:	60a2      	str	r2, [r4, #8]
 800fd24:	6123      	str	r3, [r4, #16]
 800fd26:	7da0      	ldrb	r0, [r4, #22]
 800fd28:	f080 0001 	eor.w	r0, r0, #1
 800fd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	602b      	str	r3, [r5, #0]
 800fd34:	e7ef      	b.n	800fd16 <ucdr_deserialize_endian_uint32_t+0xb6>
 800fd36:	68a2      	ldr	r2, [r4, #8]
 800fd38:	6923      	ldr	r3, [r4, #16]
 800fd3a:	eba2 0209 	sub.w	r2, r2, r9
 800fd3e:	7da0      	ldrb	r0, [r4, #22]
 800fd40:	eba3 0309 	sub.w	r3, r3, r9
 800fd44:	f884 8015 	strb.w	r8, [r4, #21]
 800fd48:	f080 0001 	eor.w	r0, r0, #1
 800fd4c:	60a2      	str	r2, [r4, #8]
 800fd4e:	6123      	str	r3, [r4, #16]
 800fd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd54:	68a3      	ldr	r3, [r4, #8]
 800fd56:	3503      	adds	r5, #3
 800fd58:	785b      	ldrb	r3, [r3, #1]
 800fd5a:	f805 3c01 	strb.w	r3, [r5, #-1]
 800fd5e:	68a7      	ldr	r7, [r4, #8]
 800fd60:	e7b5      	b.n	800fcce <ucdr_deserialize_endian_uint32_t+0x6e>
 800fd62:	4639      	mov	r1, r7
 800fd64:	464a      	mov	r2, r9
 800fd66:	4628      	mov	r0, r5
 800fd68:	f00b f881 	bl	801ae6e <memcpy>
 800fd6c:	4652      	mov	r2, sl
 800fd6e:	eb05 0009 	add.w	r0, r5, r9
 800fd72:	68a1      	ldr	r1, [r4, #8]
 800fd74:	f00b f87b 	bl	801ae6e <memcpy>
 800fd78:	e7ab      	b.n	800fcd2 <ucdr_deserialize_endian_uint32_t+0x72>
 800fd7a:	bf00      	nop

0800fd7c <ucdr_serialize_uint64_t>:
 800fd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd80:	4604      	mov	r4, r0
 800fd82:	b082      	sub	sp, #8
 800fd84:	2108      	movs	r1, #8
 800fd86:	e9cd 2300 	strd	r2, r3, [sp]
 800fd8a:	f000 fb55 	bl	8010438 <ucdr_buffer_alignment>
 800fd8e:	4601      	mov	r1, r0
 800fd90:	4620      	mov	r0, r4
 800fd92:	7d67      	ldrb	r7, [r4, #21]
 800fd94:	f000 fb98 	bl	80104c8 <ucdr_advance_buffer>
 800fd98:	2108      	movs	r1, #8
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f000 faec 	bl	8010378 <ucdr_check_buffer_available_for>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d14d      	bne.n	800fe40 <ucdr_serialize_uint64_t+0xc4>
 800fda4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fda8:	42ab      	cmp	r3, r5
 800fdaa:	d944      	bls.n	800fe36 <ucdr_serialize_uint64_t+0xba>
 800fdac:	1b5e      	subs	r6, r3, r5
 800fdae:	60a3      	str	r3, [r4, #8]
 800fdb0:	6923      	ldr	r3, [r4, #16]
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f1c6 0808 	rsb	r8, r6, #8
 800fdb8:	4433      	add	r3, r6
 800fdba:	4641      	mov	r1, r8
 800fdbc:	6123      	str	r3, [r4, #16]
 800fdbe:	f000 fae7 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d072      	beq.n	800feac <ucdr_serialize_uint64_t+0x130>
 800fdc6:	7d23      	ldrb	r3, [r4, #20]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	f000 8092 	beq.w	800fef2 <ucdr_serialize_uint64_t+0x176>
 800fdce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fdd2:	2e01      	cmp	r6, #1
 800fdd4:	702b      	strb	r3, [r5, #0]
 800fdd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fdda:	706b      	strb	r3, [r5, #1]
 800fddc:	d073      	beq.n	800fec6 <ucdr_serialize_uint64_t+0x14a>
 800fdde:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fde2:	2e02      	cmp	r6, #2
 800fde4:	70ab      	strb	r3, [r5, #2]
 800fde6:	d072      	beq.n	800fece <ucdr_serialize_uint64_t+0x152>
 800fde8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fdec:	2e03      	cmp	r6, #3
 800fdee:	70eb      	strb	r3, [r5, #3]
 800fdf0:	d071      	beq.n	800fed6 <ucdr_serialize_uint64_t+0x15a>
 800fdf2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fdf6:	2e04      	cmp	r6, #4
 800fdf8:	712b      	strb	r3, [r5, #4]
 800fdfa:	d070      	beq.n	800fede <ucdr_serialize_uint64_t+0x162>
 800fdfc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fe00:	2e05      	cmp	r6, #5
 800fe02:	716b      	strb	r3, [r5, #5]
 800fe04:	d06f      	beq.n	800fee6 <ucdr_serialize_uint64_t+0x16a>
 800fe06:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fe0a:	2e06      	cmp	r6, #6
 800fe0c:	71ab      	strb	r3, [r5, #6]
 800fe0e:	d06e      	beq.n	800feee <ucdr_serialize_uint64_t+0x172>
 800fe10:	3507      	adds	r5, #7
 800fe12:	f89d 3000 	ldrb.w	r3, [sp]
 800fe16:	702b      	strb	r3, [r5, #0]
 800fe18:	6923      	ldr	r3, [r4, #16]
 800fe1a:	2108      	movs	r1, #8
 800fe1c:	68a2      	ldr	r2, [r4, #8]
 800fe1e:	7da0      	ldrb	r0, [r4, #22]
 800fe20:	3308      	adds	r3, #8
 800fe22:	4442      	add	r2, r8
 800fe24:	7561      	strb	r1, [r4, #21]
 800fe26:	1b9b      	subs	r3, r3, r6
 800fe28:	f080 0001 	eor.w	r0, r0, #1
 800fe2c:	60a2      	str	r2, [r4, #8]
 800fe2e:	6123      	str	r3, [r4, #16]
 800fe30:	b002      	add	sp, #8
 800fe32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe36:	2108      	movs	r1, #8
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f000 faa9 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800fe3e:	b350      	cbz	r0, 800fe96 <ucdr_serialize_uint64_t+0x11a>
 800fe40:	7d22      	ldrb	r2, [r4, #20]
 800fe42:	68a3      	ldr	r3, [r4, #8]
 800fe44:	2a01      	cmp	r2, #1
 800fe46:	d02c      	beq.n	800fea2 <ucdr_serialize_uint64_t+0x126>
 800fe48:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fe4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe50:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fe54:	7018      	strb	r0, [r3, #0]
 800fe56:	68a3      	ldr	r3, [r4, #8]
 800fe58:	705a      	strb	r2, [r3, #1]
 800fe5a:	68a3      	ldr	r3, [r4, #8]
 800fe5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe60:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fe64:	7099      	strb	r1, [r3, #2]
 800fe66:	68a3      	ldr	r3, [r4, #8]
 800fe68:	70da      	strb	r2, [r3, #3]
 800fe6a:	68a3      	ldr	r3, [r4, #8]
 800fe6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fe70:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fe74:	7118      	strb	r0, [r3, #4]
 800fe76:	68a3      	ldr	r3, [r4, #8]
 800fe78:	715a      	strb	r2, [r3, #5]
 800fe7a:	68a3      	ldr	r3, [r4, #8]
 800fe7c:	f89d 2000 	ldrb.w	r2, [sp]
 800fe80:	7199      	strb	r1, [r3, #6]
 800fe82:	68a3      	ldr	r3, [r4, #8]
 800fe84:	71da      	strb	r2, [r3, #7]
 800fe86:	2108      	movs	r1, #8
 800fe88:	68a2      	ldr	r2, [r4, #8]
 800fe8a:	6923      	ldr	r3, [r4, #16]
 800fe8c:	440a      	add	r2, r1
 800fe8e:	7561      	strb	r1, [r4, #21]
 800fe90:	440b      	add	r3, r1
 800fe92:	60a2      	str	r2, [r4, #8]
 800fe94:	6123      	str	r3, [r4, #16]
 800fe96:	7da0      	ldrb	r0, [r4, #22]
 800fe98:	f080 0001 	eor.w	r0, r0, #1
 800fe9c:	b002      	add	sp, #8
 800fe9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fea6:	6019      	str	r1, [r3, #0]
 800fea8:	605a      	str	r2, [r3, #4]
 800feaa:	e7ec      	b.n	800fe86 <ucdr_serialize_uint64_t+0x10a>
 800feac:	68a2      	ldr	r2, [r4, #8]
 800feae:	6923      	ldr	r3, [r4, #16]
 800feb0:	7da0      	ldrb	r0, [r4, #22]
 800feb2:	1b92      	subs	r2, r2, r6
 800feb4:	1b9b      	subs	r3, r3, r6
 800feb6:	7567      	strb	r7, [r4, #21]
 800feb8:	f080 0001 	eor.w	r0, r0, #1
 800febc:	60a2      	str	r2, [r4, #8]
 800febe:	6123      	str	r3, [r4, #16]
 800fec0:	b002      	add	sp, #8
 800fec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fec6:	68a3      	ldr	r3, [r4, #8]
 800fec8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fecc:	701a      	strb	r2, [r3, #0]
 800fece:	68a3      	ldr	r3, [r4, #8]
 800fed0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fed4:	701a      	strb	r2, [r3, #0]
 800fed6:	68a3      	ldr	r3, [r4, #8]
 800fed8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fedc:	701a      	strb	r2, [r3, #0]
 800fede:	68a3      	ldr	r3, [r4, #8]
 800fee0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fee4:	701a      	strb	r2, [r3, #0]
 800fee6:	68a3      	ldr	r3, [r4, #8]
 800fee8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800feec:	701a      	strb	r2, [r3, #0]
 800feee:	68a5      	ldr	r5, [r4, #8]
 800fef0:	e78f      	b.n	800fe12 <ucdr_serialize_uint64_t+0x96>
 800fef2:	4628      	mov	r0, r5
 800fef4:	466d      	mov	r5, sp
 800fef6:	4632      	mov	r2, r6
 800fef8:	4629      	mov	r1, r5
 800fefa:	f00a ffb8 	bl	801ae6e <memcpy>
 800fefe:	4642      	mov	r2, r8
 800ff00:	19a9      	adds	r1, r5, r6
 800ff02:	68a0      	ldr	r0, [r4, #8]
 800ff04:	f00a ffb3 	bl	801ae6e <memcpy>
 800ff08:	e786      	b.n	800fe18 <ucdr_serialize_uint64_t+0x9c>
 800ff0a:	bf00      	nop

0800ff0c <ucdr_serialize_int16_t>:
 800ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff10:	460b      	mov	r3, r1
 800ff12:	b082      	sub	sp, #8
 800ff14:	4604      	mov	r4, r0
 800ff16:	2102      	movs	r1, #2
 800ff18:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ff1c:	f000 fa8c 	bl	8010438 <ucdr_buffer_alignment>
 800ff20:	4601      	mov	r1, r0
 800ff22:	4620      	mov	r0, r4
 800ff24:	7d67      	ldrb	r7, [r4, #21]
 800ff26:	f000 facf 	bl	80104c8 <ucdr_advance_buffer>
 800ff2a:	2102      	movs	r1, #2
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	f000 fa23 	bl	8010378 <ucdr_check_buffer_available_for>
 800ff32:	b1c0      	cbz	r0, 800ff66 <ucdr_serialize_int16_t+0x5a>
 800ff34:	7d22      	ldrb	r2, [r4, #20]
 800ff36:	68a3      	ldr	r3, [r4, #8]
 800ff38:	2a01      	cmp	r2, #1
 800ff3a:	d04e      	beq.n	800ffda <ucdr_serialize_int16_t+0xce>
 800ff3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ff40:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff44:	7019      	strb	r1, [r3, #0]
 800ff46:	68a3      	ldr	r3, [r4, #8]
 800ff48:	705a      	strb	r2, [r3, #1]
 800ff4a:	2102      	movs	r1, #2
 800ff4c:	68a2      	ldr	r2, [r4, #8]
 800ff4e:	6923      	ldr	r3, [r4, #16]
 800ff50:	440a      	add	r2, r1
 800ff52:	7561      	strb	r1, [r4, #21]
 800ff54:	440b      	add	r3, r1
 800ff56:	60a2      	str	r2, [r4, #8]
 800ff58:	6123      	str	r3, [r4, #16]
 800ff5a:	7da0      	ldrb	r0, [r4, #22]
 800ff5c:	f080 0001 	eor.w	r0, r0, #1
 800ff60:	b002      	add	sp, #8
 800ff62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff66:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ff6a:	42ab      	cmp	r3, r5
 800ff6c:	d923      	bls.n	800ffb6 <ucdr_serialize_int16_t+0xaa>
 800ff6e:	1b5e      	subs	r6, r3, r5
 800ff70:	60a3      	str	r3, [r4, #8]
 800ff72:	6923      	ldr	r3, [r4, #16]
 800ff74:	4620      	mov	r0, r4
 800ff76:	f1c6 0802 	rsb	r8, r6, #2
 800ff7a:	4433      	add	r3, r6
 800ff7c:	4641      	mov	r1, r8
 800ff7e:	6123      	str	r3, [r4, #16]
 800ff80:	f000 fa06 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800ff84:	b368      	cbz	r0, 800ffe2 <ucdr_serialize_int16_t+0xd6>
 800ff86:	7d23      	ldrb	r3, [r4, #20]
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d03b      	beq.n	8010004 <ucdr_serialize_int16_t+0xf8>
 800ff8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff90:	702b      	strb	r3, [r5, #0]
 800ff92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff96:	706b      	strb	r3, [r5, #1]
 800ff98:	6923      	ldr	r3, [r4, #16]
 800ff9a:	2102      	movs	r1, #2
 800ff9c:	68a2      	ldr	r2, [r4, #8]
 800ff9e:	7da0      	ldrb	r0, [r4, #22]
 800ffa0:	3302      	adds	r3, #2
 800ffa2:	4442      	add	r2, r8
 800ffa4:	7561      	strb	r1, [r4, #21]
 800ffa6:	1b9b      	subs	r3, r3, r6
 800ffa8:	f080 0001 	eor.w	r0, r0, #1
 800ffac:	60a2      	str	r2, [r4, #8]
 800ffae:	6123      	str	r3, [r4, #16]
 800ffb0:	b002      	add	sp, #8
 800ffb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb6:	2102      	movs	r1, #2
 800ffb8:	4620      	mov	r0, r4
 800ffba:	f000 f9e9 	bl	8010390 <ucdr_check_final_buffer_behavior>
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d0cb      	beq.n	800ff5a <ucdr_serialize_int16_t+0x4e>
 800ffc2:	7d23      	ldrb	r3, [r4, #20]
 800ffc4:	68a2      	ldr	r2, [r4, #8]
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d018      	beq.n	800fffc <ucdr_serialize_int16_t+0xf0>
 800ffca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ffce:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800ffd2:	7013      	strb	r3, [r2, #0]
 800ffd4:	68a3      	ldr	r3, [r4, #8]
 800ffd6:	7059      	strb	r1, [r3, #1]
 800ffd8:	e7b7      	b.n	800ff4a <ucdr_serialize_int16_t+0x3e>
 800ffda:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ffde:	801a      	strh	r2, [r3, #0]
 800ffe0:	e7b3      	b.n	800ff4a <ucdr_serialize_int16_t+0x3e>
 800ffe2:	68a2      	ldr	r2, [r4, #8]
 800ffe4:	6923      	ldr	r3, [r4, #16]
 800ffe6:	7da0      	ldrb	r0, [r4, #22]
 800ffe8:	1b92      	subs	r2, r2, r6
 800ffea:	1b9b      	subs	r3, r3, r6
 800ffec:	7567      	strb	r7, [r4, #21]
 800ffee:	f080 0001 	eor.w	r0, r0, #1
 800fff2:	60a2      	str	r2, [r4, #8]
 800fff4:	6123      	str	r3, [r4, #16]
 800fff6:	b002      	add	sp, #8
 800fff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fffc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010000:	8013      	strh	r3, [r2, #0]
 8010002:	e7a2      	b.n	800ff4a <ucdr_serialize_int16_t+0x3e>
 8010004:	4628      	mov	r0, r5
 8010006:	f10d 0506 	add.w	r5, sp, #6
 801000a:	4632      	mov	r2, r6
 801000c:	4629      	mov	r1, r5
 801000e:	f00a ff2e 	bl	801ae6e <memcpy>
 8010012:	4642      	mov	r2, r8
 8010014:	19a9      	adds	r1, r5, r6
 8010016:	68a0      	ldr	r0, [r4, #8]
 8010018:	f00a ff29 	bl	801ae6e <memcpy>
 801001c:	e7bc      	b.n	800ff98 <ucdr_serialize_int16_t+0x8c>
 801001e:	bf00      	nop

08010020 <ucdr_deserialize_int16_t>:
 8010020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010024:	4604      	mov	r4, r0
 8010026:	460d      	mov	r5, r1
 8010028:	2102      	movs	r1, #2
 801002a:	f000 fa05 	bl	8010438 <ucdr_buffer_alignment>
 801002e:	4601      	mov	r1, r0
 8010030:	4620      	mov	r0, r4
 8010032:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010036:	f000 fa47 	bl	80104c8 <ucdr_advance_buffer>
 801003a:	2102      	movs	r1, #2
 801003c:	4620      	mov	r0, r4
 801003e:	f000 f99b 	bl	8010378 <ucdr_check_buffer_available_for>
 8010042:	b1a8      	cbz	r0, 8010070 <ucdr_deserialize_int16_t+0x50>
 8010044:	7d22      	ldrb	r2, [r4, #20]
 8010046:	68a3      	ldr	r3, [r4, #8]
 8010048:	2a01      	cmp	r2, #1
 801004a:	d046      	beq.n	80100da <ucdr_deserialize_int16_t+0xba>
 801004c:	785b      	ldrb	r3, [r3, #1]
 801004e:	702b      	strb	r3, [r5, #0]
 8010050:	68a3      	ldr	r3, [r4, #8]
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	706b      	strb	r3, [r5, #1]
 8010056:	2102      	movs	r1, #2
 8010058:	68a2      	ldr	r2, [r4, #8]
 801005a:	6923      	ldr	r3, [r4, #16]
 801005c:	440a      	add	r2, r1
 801005e:	7561      	strb	r1, [r4, #21]
 8010060:	440b      	add	r3, r1
 8010062:	60a2      	str	r2, [r4, #8]
 8010064:	6123      	str	r3, [r4, #16]
 8010066:	7da0      	ldrb	r0, [r4, #22]
 8010068:	f080 0001 	eor.w	r0, r0, #1
 801006c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010070:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010074:	42be      	cmp	r6, r7
 8010076:	d920      	bls.n	80100ba <ucdr_deserialize_int16_t+0x9a>
 8010078:	6923      	ldr	r3, [r4, #16]
 801007a:	4620      	mov	r0, r4
 801007c:	60a6      	str	r6, [r4, #8]
 801007e:	1bf6      	subs	r6, r6, r7
 8010080:	4433      	add	r3, r6
 8010082:	f1c6 0902 	rsb	r9, r6, #2
 8010086:	6123      	str	r3, [r4, #16]
 8010088:	4649      	mov	r1, r9
 801008a:	f000 f981 	bl	8010390 <ucdr_check_final_buffer_behavior>
 801008e:	b338      	cbz	r0, 80100e0 <ucdr_deserialize_int16_t+0xc0>
 8010090:	7d23      	ldrb	r3, [r4, #20]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d034      	beq.n	8010100 <ucdr_deserialize_int16_t+0xe0>
 8010096:	787b      	ldrb	r3, [r7, #1]
 8010098:	702b      	strb	r3, [r5, #0]
 801009a:	783b      	ldrb	r3, [r7, #0]
 801009c:	706b      	strb	r3, [r5, #1]
 801009e:	6923      	ldr	r3, [r4, #16]
 80100a0:	2102      	movs	r1, #2
 80100a2:	68a2      	ldr	r2, [r4, #8]
 80100a4:	3302      	adds	r3, #2
 80100a6:	7da0      	ldrb	r0, [r4, #22]
 80100a8:	444a      	add	r2, r9
 80100aa:	7561      	strb	r1, [r4, #21]
 80100ac:	1b9b      	subs	r3, r3, r6
 80100ae:	f080 0001 	eor.w	r0, r0, #1
 80100b2:	60a2      	str	r2, [r4, #8]
 80100b4:	6123      	str	r3, [r4, #16]
 80100b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100ba:	2102      	movs	r1, #2
 80100bc:	4620      	mov	r0, r4
 80100be:	f000 f967 	bl	8010390 <ucdr_check_final_buffer_behavior>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	d0cf      	beq.n	8010066 <ucdr_deserialize_int16_t+0x46>
 80100c6:	7d23      	ldrb	r3, [r4, #20]
 80100c8:	68a2      	ldr	r2, [r4, #8]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d015      	beq.n	80100fa <ucdr_deserialize_int16_t+0xda>
 80100ce:	7853      	ldrb	r3, [r2, #1]
 80100d0:	702b      	strb	r3, [r5, #0]
 80100d2:	68a3      	ldr	r3, [r4, #8]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	706b      	strb	r3, [r5, #1]
 80100d8:	e7bd      	b.n	8010056 <ucdr_deserialize_int16_t+0x36>
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	802b      	strh	r3, [r5, #0]
 80100de:	e7ba      	b.n	8010056 <ucdr_deserialize_int16_t+0x36>
 80100e0:	68a2      	ldr	r2, [r4, #8]
 80100e2:	6923      	ldr	r3, [r4, #16]
 80100e4:	1b92      	subs	r2, r2, r6
 80100e6:	7da0      	ldrb	r0, [r4, #22]
 80100e8:	1b9b      	subs	r3, r3, r6
 80100ea:	f884 8015 	strb.w	r8, [r4, #21]
 80100ee:	f080 0001 	eor.w	r0, r0, #1
 80100f2:	60a2      	str	r2, [r4, #8]
 80100f4:	6123      	str	r3, [r4, #16]
 80100f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100fa:	8813      	ldrh	r3, [r2, #0]
 80100fc:	802b      	strh	r3, [r5, #0]
 80100fe:	e7aa      	b.n	8010056 <ucdr_deserialize_int16_t+0x36>
 8010100:	4639      	mov	r1, r7
 8010102:	4632      	mov	r2, r6
 8010104:	4628      	mov	r0, r5
 8010106:	f00a feb2 	bl	801ae6e <memcpy>
 801010a:	464a      	mov	r2, r9
 801010c:	19a8      	adds	r0, r5, r6
 801010e:	68a1      	ldr	r1, [r4, #8]
 8010110:	f00a fead 	bl	801ae6e <memcpy>
 8010114:	e7c3      	b.n	801009e <ucdr_deserialize_int16_t+0x7e>
 8010116:	bf00      	nop

08010118 <ucdr_serialize_int32_t>:
 8010118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801011c:	b082      	sub	sp, #8
 801011e:	4604      	mov	r4, r0
 8010120:	9101      	str	r1, [sp, #4]
 8010122:	2104      	movs	r1, #4
 8010124:	f000 f988 	bl	8010438 <ucdr_buffer_alignment>
 8010128:	4601      	mov	r1, r0
 801012a:	4620      	mov	r0, r4
 801012c:	7d67      	ldrb	r7, [r4, #21]
 801012e:	f000 f9cb 	bl	80104c8 <ucdr_advance_buffer>
 8010132:	2104      	movs	r1, #4
 8010134:	4620      	mov	r0, r4
 8010136:	f000 f91f 	bl	8010378 <ucdr_check_buffer_available_for>
 801013a:	b300      	cbz	r0, 801017e <ucdr_serialize_int32_t+0x66>
 801013c:	7d22      	ldrb	r2, [r4, #20]
 801013e:	68a3      	ldr	r3, [r4, #8]
 8010140:	2a01      	cmp	r2, #1
 8010142:	d064      	beq.n	801020e <ucdr_serialize_int32_t+0xf6>
 8010144:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010148:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801014c:	7018      	strb	r0, [r3, #0]
 801014e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010152:	68a3      	ldr	r3, [r4, #8]
 8010154:	705a      	strb	r2, [r3, #1]
 8010156:	68a3      	ldr	r3, [r4, #8]
 8010158:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801015c:	7099      	strb	r1, [r3, #2]
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	70da      	strb	r2, [r3, #3]
 8010162:	2104      	movs	r1, #4
 8010164:	68a2      	ldr	r2, [r4, #8]
 8010166:	6923      	ldr	r3, [r4, #16]
 8010168:	440a      	add	r2, r1
 801016a:	7561      	strb	r1, [r4, #21]
 801016c:	440b      	add	r3, r1
 801016e:	60a2      	str	r2, [r4, #8]
 8010170:	6123      	str	r3, [r4, #16]
 8010172:	7da0      	ldrb	r0, [r4, #22]
 8010174:	f080 0001 	eor.w	r0, r0, #1
 8010178:	b002      	add	sp, #8
 801017a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801017e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010182:	42ab      	cmp	r3, r5
 8010184:	d92f      	bls.n	80101e6 <ucdr_serialize_int32_t+0xce>
 8010186:	1b5e      	subs	r6, r3, r5
 8010188:	60a3      	str	r3, [r4, #8]
 801018a:	6923      	ldr	r3, [r4, #16]
 801018c:	4620      	mov	r0, r4
 801018e:	f1c6 0804 	rsb	r8, r6, #4
 8010192:	4433      	add	r3, r6
 8010194:	4641      	mov	r1, r8
 8010196:	6123      	str	r3, [r4, #16]
 8010198:	f000 f8fa 	bl	8010390 <ucdr_check_final_buffer_behavior>
 801019c:	2800      	cmp	r0, #0
 801019e:	d039      	beq.n	8010214 <ucdr_serialize_int32_t+0xfc>
 80101a0:	7d23      	ldrb	r3, [r4, #20]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d04c      	beq.n	8010240 <ucdr_serialize_int32_t+0x128>
 80101a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101aa:	2e01      	cmp	r6, #1
 80101ac:	702b      	strb	r3, [r5, #0]
 80101ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101b2:	706b      	strb	r3, [r5, #1]
 80101b4:	d03b      	beq.n	801022e <ucdr_serialize_int32_t+0x116>
 80101b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101ba:	2e02      	cmp	r6, #2
 80101bc:	70ab      	strb	r3, [r5, #2]
 80101be:	d03a      	beq.n	8010236 <ucdr_serialize_int32_t+0x11e>
 80101c0:	3503      	adds	r5, #3
 80101c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80101c6:	702b      	strb	r3, [r5, #0]
 80101c8:	6923      	ldr	r3, [r4, #16]
 80101ca:	2104      	movs	r1, #4
 80101cc:	68a2      	ldr	r2, [r4, #8]
 80101ce:	7da0      	ldrb	r0, [r4, #22]
 80101d0:	3304      	adds	r3, #4
 80101d2:	4442      	add	r2, r8
 80101d4:	7561      	strb	r1, [r4, #21]
 80101d6:	1b9b      	subs	r3, r3, r6
 80101d8:	f080 0001 	eor.w	r0, r0, #1
 80101dc:	60a2      	str	r2, [r4, #8]
 80101de:	6123      	str	r3, [r4, #16]
 80101e0:	b002      	add	sp, #8
 80101e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e6:	2104      	movs	r1, #4
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 f8d1 	bl	8010390 <ucdr_check_final_buffer_behavior>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d0bf      	beq.n	8010172 <ucdr_serialize_int32_t+0x5a>
 80101f2:	7d23      	ldrb	r3, [r4, #20]
 80101f4:	68a2      	ldr	r2, [r4, #8]
 80101f6:	2b01      	cmp	r3, #1
 80101f8:	d01f      	beq.n	801023a <ucdr_serialize_int32_t+0x122>
 80101fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101fe:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8010202:	7013      	strb	r3, [r2, #0]
 8010204:	68a3      	ldr	r3, [r4, #8]
 8010206:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801020a:	7058      	strb	r0, [r3, #1]
 801020c:	e7a3      	b.n	8010156 <ucdr_serialize_int32_t+0x3e>
 801020e:	9a01      	ldr	r2, [sp, #4]
 8010210:	601a      	str	r2, [r3, #0]
 8010212:	e7a6      	b.n	8010162 <ucdr_serialize_int32_t+0x4a>
 8010214:	68a2      	ldr	r2, [r4, #8]
 8010216:	6923      	ldr	r3, [r4, #16]
 8010218:	7da0      	ldrb	r0, [r4, #22]
 801021a:	1b92      	subs	r2, r2, r6
 801021c:	1b9b      	subs	r3, r3, r6
 801021e:	7567      	strb	r7, [r4, #21]
 8010220:	f080 0001 	eor.w	r0, r0, #1
 8010224:	60a2      	str	r2, [r4, #8]
 8010226:	6123      	str	r3, [r4, #16]
 8010228:	b002      	add	sp, #8
 801022a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801022e:	68a3      	ldr	r3, [r4, #8]
 8010230:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010234:	701a      	strb	r2, [r3, #0]
 8010236:	68a5      	ldr	r5, [r4, #8]
 8010238:	e7c3      	b.n	80101c2 <ucdr_serialize_int32_t+0xaa>
 801023a:	9b01      	ldr	r3, [sp, #4]
 801023c:	6013      	str	r3, [r2, #0]
 801023e:	e790      	b.n	8010162 <ucdr_serialize_int32_t+0x4a>
 8010240:	4628      	mov	r0, r5
 8010242:	ad01      	add	r5, sp, #4
 8010244:	4632      	mov	r2, r6
 8010246:	4629      	mov	r1, r5
 8010248:	f00a fe11 	bl	801ae6e <memcpy>
 801024c:	4642      	mov	r2, r8
 801024e:	19a9      	adds	r1, r5, r6
 8010250:	68a0      	ldr	r0, [r4, #8]
 8010252:	f00a fe0c 	bl	801ae6e <memcpy>
 8010256:	e7b7      	b.n	80101c8 <ucdr_serialize_int32_t+0xb0>

08010258 <ucdr_deserialize_int32_t>:
 8010258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801025c:	4604      	mov	r4, r0
 801025e:	460d      	mov	r5, r1
 8010260:	2104      	movs	r1, #4
 8010262:	f000 f8e9 	bl	8010438 <ucdr_buffer_alignment>
 8010266:	4601      	mov	r1, r0
 8010268:	4620      	mov	r0, r4
 801026a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801026e:	f000 f92b 	bl	80104c8 <ucdr_advance_buffer>
 8010272:	2104      	movs	r1, #4
 8010274:	4620      	mov	r0, r4
 8010276:	f000 f87f 	bl	8010378 <ucdr_check_buffer_available_for>
 801027a:	b1d8      	cbz	r0, 80102b4 <ucdr_deserialize_int32_t+0x5c>
 801027c:	7d22      	ldrb	r2, [r4, #20]
 801027e:	68a3      	ldr	r3, [r4, #8]
 8010280:	2a01      	cmp	r2, #1
 8010282:	d053      	beq.n	801032c <ucdr_deserialize_int32_t+0xd4>
 8010284:	78db      	ldrb	r3, [r3, #3]
 8010286:	702b      	strb	r3, [r5, #0]
 8010288:	68a3      	ldr	r3, [r4, #8]
 801028a:	789b      	ldrb	r3, [r3, #2]
 801028c:	706b      	strb	r3, [r5, #1]
 801028e:	68a3      	ldr	r3, [r4, #8]
 8010290:	785b      	ldrb	r3, [r3, #1]
 8010292:	70ab      	strb	r3, [r5, #2]
 8010294:	68a3      	ldr	r3, [r4, #8]
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	70eb      	strb	r3, [r5, #3]
 801029a:	2104      	movs	r1, #4
 801029c:	68a2      	ldr	r2, [r4, #8]
 801029e:	6923      	ldr	r3, [r4, #16]
 80102a0:	440a      	add	r2, r1
 80102a2:	7561      	strb	r1, [r4, #21]
 80102a4:	440b      	add	r3, r1
 80102a6:	60a2      	str	r2, [r4, #8]
 80102a8:	6123      	str	r3, [r4, #16]
 80102aa:	7da0      	ldrb	r0, [r4, #22]
 80102ac:	f080 0001 	eor.w	r0, r0, #1
 80102b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80102b8:	42b7      	cmp	r7, r6
 80102ba:	d92b      	bls.n	8010314 <ucdr_deserialize_int32_t+0xbc>
 80102bc:	6923      	ldr	r3, [r4, #16]
 80102be:	4620      	mov	r0, r4
 80102c0:	60a7      	str	r7, [r4, #8]
 80102c2:	1bbf      	subs	r7, r7, r6
 80102c4:	443b      	add	r3, r7
 80102c6:	f1c7 0904 	rsb	r9, r7, #4
 80102ca:	6123      	str	r3, [r4, #16]
 80102cc:	4649      	mov	r1, r9
 80102ce:	f000 f85f 	bl	8010390 <ucdr_check_final_buffer_behavior>
 80102d2:	b370      	cbz	r0, 8010332 <ucdr_deserialize_int32_t+0xda>
 80102d4:	7d23      	ldrb	r3, [r4, #20]
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	d042      	beq.n	8010360 <ucdr_deserialize_int32_t+0x108>
 80102da:	78f3      	ldrb	r3, [r6, #3]
 80102dc:	2f01      	cmp	r7, #1
 80102de:	702b      	strb	r3, [r5, #0]
 80102e0:	78b3      	ldrb	r3, [r6, #2]
 80102e2:	706b      	strb	r3, [r5, #1]
 80102e4:	d032      	beq.n	801034c <ucdr_deserialize_int32_t+0xf4>
 80102e6:	7873      	ldrb	r3, [r6, #1]
 80102e8:	2f02      	cmp	r7, #2
 80102ea:	f105 0503 	add.w	r5, r5, #3
 80102ee:	f805 3c01 	strb.w	r3, [r5, #-1]
 80102f2:	d030      	beq.n	8010356 <ucdr_deserialize_int32_t+0xfe>
 80102f4:	7833      	ldrb	r3, [r6, #0]
 80102f6:	702b      	strb	r3, [r5, #0]
 80102f8:	6923      	ldr	r3, [r4, #16]
 80102fa:	2104      	movs	r1, #4
 80102fc:	68a2      	ldr	r2, [r4, #8]
 80102fe:	3304      	adds	r3, #4
 8010300:	7da0      	ldrb	r0, [r4, #22]
 8010302:	444a      	add	r2, r9
 8010304:	7561      	strb	r1, [r4, #21]
 8010306:	1bdb      	subs	r3, r3, r7
 8010308:	f080 0001 	eor.w	r0, r0, #1
 801030c:	60a2      	str	r2, [r4, #8]
 801030e:	6123      	str	r3, [r4, #16]
 8010310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010314:	2104      	movs	r1, #4
 8010316:	4620      	mov	r0, r4
 8010318:	f000 f83a 	bl	8010390 <ucdr_check_final_buffer_behavior>
 801031c:	2800      	cmp	r0, #0
 801031e:	d0c4      	beq.n	80102aa <ucdr_deserialize_int32_t+0x52>
 8010320:	7d23      	ldrb	r3, [r4, #20]
 8010322:	68a2      	ldr	r2, [r4, #8]
 8010324:	2b01      	cmp	r3, #1
 8010326:	d018      	beq.n	801035a <ucdr_deserialize_int32_t+0x102>
 8010328:	78d3      	ldrb	r3, [r2, #3]
 801032a:	e7ac      	b.n	8010286 <ucdr_deserialize_int32_t+0x2e>
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	602b      	str	r3, [r5, #0]
 8010330:	e7b3      	b.n	801029a <ucdr_deserialize_int32_t+0x42>
 8010332:	68a2      	ldr	r2, [r4, #8]
 8010334:	6923      	ldr	r3, [r4, #16]
 8010336:	1bd2      	subs	r2, r2, r7
 8010338:	7da0      	ldrb	r0, [r4, #22]
 801033a:	1bdb      	subs	r3, r3, r7
 801033c:	f884 8015 	strb.w	r8, [r4, #21]
 8010340:	f080 0001 	eor.w	r0, r0, #1
 8010344:	60a2      	str	r2, [r4, #8]
 8010346:	6123      	str	r3, [r4, #16]
 8010348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801034c:	68a3      	ldr	r3, [r4, #8]
 801034e:	3503      	adds	r5, #3
 8010350:	785b      	ldrb	r3, [r3, #1]
 8010352:	f805 3c01 	strb.w	r3, [r5, #-1]
 8010356:	68a6      	ldr	r6, [r4, #8]
 8010358:	e7cc      	b.n	80102f4 <ucdr_deserialize_int32_t+0x9c>
 801035a:	6813      	ldr	r3, [r2, #0]
 801035c:	602b      	str	r3, [r5, #0]
 801035e:	e79c      	b.n	801029a <ucdr_deserialize_int32_t+0x42>
 8010360:	4631      	mov	r1, r6
 8010362:	463a      	mov	r2, r7
 8010364:	4628      	mov	r0, r5
 8010366:	f00a fd82 	bl	801ae6e <memcpy>
 801036a:	464a      	mov	r2, r9
 801036c:	19e8      	adds	r0, r5, r7
 801036e:	68a1      	ldr	r1, [r4, #8]
 8010370:	f00a fd7d 	bl	801ae6e <memcpy>
 8010374:	e7c0      	b.n	80102f8 <ucdr_deserialize_int32_t+0xa0>
 8010376:	bf00      	nop

08010378 <ucdr_check_buffer_available_for>:
 8010378:	7d83      	ldrb	r3, [r0, #22]
 801037a:	b93b      	cbnz	r3, 801038c <ucdr_check_buffer_available_for+0x14>
 801037c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010380:	440b      	add	r3, r1
 8010382:	4298      	cmp	r0, r3
 8010384:	bf34      	ite	cc
 8010386:	2000      	movcc	r0, #0
 8010388:	2001      	movcs	r0, #1
 801038a:	4770      	bx	lr
 801038c:	2000      	movs	r0, #0
 801038e:	4770      	bx	lr

08010390 <ucdr_check_final_buffer_behavior>:
 8010390:	7d83      	ldrb	r3, [r0, #22]
 8010392:	b943      	cbnz	r3, 80103a6 <ucdr_check_final_buffer_behavior+0x16>
 8010394:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010398:	b510      	push	{r4, lr}
 801039a:	4291      	cmp	r1, r2
 801039c:	4604      	mov	r4, r0
 801039e:	d205      	bcs.n	80103ac <ucdr_check_final_buffer_behavior+0x1c>
 80103a0:	2301      	movs	r3, #1
 80103a2:	4618      	mov	r0, r3
 80103a4:	bd10      	pop	{r4, pc}
 80103a6:	2300      	movs	r3, #0
 80103a8:	4618      	mov	r0, r3
 80103aa:	4770      	bx	lr
 80103ac:	6982      	ldr	r2, [r0, #24]
 80103ae:	b13a      	cbz	r2, 80103c0 <ucdr_check_final_buffer_behavior+0x30>
 80103b0:	69c1      	ldr	r1, [r0, #28]
 80103b2:	4790      	blx	r2
 80103b4:	f080 0301 	eor.w	r3, r0, #1
 80103b8:	75a0      	strb	r0, [r4, #22]
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	4618      	mov	r0, r3
 80103be:	bd10      	pop	{r4, pc}
 80103c0:	2001      	movs	r0, #1
 80103c2:	75a0      	strb	r0, [r4, #22]
 80103c4:	e7fa      	b.n	80103bc <ucdr_check_final_buffer_behavior+0x2c>
 80103c6:	bf00      	nop

080103c8 <ucdr_set_on_full_buffer_callback>:
 80103c8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop

080103d0 <ucdr_init_buffer_origin_offset_endian>:
 80103d0:	b410      	push	{r4}
 80103d2:	9c01      	ldr	r4, [sp, #4]
 80103d4:	440a      	add	r2, r1
 80103d6:	6001      	str	r1, [r0, #0]
 80103d8:	6042      	str	r2, [r0, #4]
 80103da:	190a      	adds	r2, r1, r4
 80103dc:	441c      	add	r4, r3
 80103de:	6082      	str	r2, [r0, #8]
 80103e0:	2200      	movs	r2, #0
 80103e2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80103e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80103ea:	7542      	strb	r2, [r0, #21]
 80103ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103f0:	7582      	strb	r2, [r0, #22]
 80103f2:	7503      	strb	r3, [r0, #20]
 80103f4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop

080103fc <ucdr_init_buffer_origin_offset>:
 80103fc:	b510      	push	{r4, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	9c04      	ldr	r4, [sp, #16]
 8010402:	9400      	str	r4, [sp, #0]
 8010404:	2401      	movs	r4, #1
 8010406:	9401      	str	r4, [sp, #4]
 8010408:	f7ff ffe2 	bl	80103d0 <ucdr_init_buffer_origin_offset_endian>
 801040c:	b002      	add	sp, #8
 801040e:	bd10      	pop	{r4, pc}

08010410 <ucdr_init_buffer_origin>:
 8010410:	b510      	push	{r4, lr}
 8010412:	2400      	movs	r4, #0
 8010414:	b082      	sub	sp, #8
 8010416:	9400      	str	r4, [sp, #0]
 8010418:	f7ff fff0 	bl	80103fc <ucdr_init_buffer_origin_offset>
 801041c:	b002      	add	sp, #8
 801041e:	bd10      	pop	{r4, pc}

08010420 <ucdr_init_buffer>:
 8010420:	2300      	movs	r3, #0
 8010422:	f7ff bff5 	b.w	8010410 <ucdr_init_buffer_origin>
 8010426:	bf00      	nop

08010428 <ucdr_alignment>:
 8010428:	fbb0 f2f1 	udiv	r2, r0, r1
 801042c:	fb02 0011 	mls	r0, r2, r1, r0
 8010430:	1e4b      	subs	r3, r1, #1
 8010432:	1a08      	subs	r0, r1, r0
 8010434:	4018      	ands	r0, r3
 8010436:	4770      	bx	lr

08010438 <ucdr_buffer_alignment>:
 8010438:	7d43      	ldrb	r3, [r0, #21]
 801043a:	428b      	cmp	r3, r1
 801043c:	d209      	bcs.n	8010452 <ucdr_buffer_alignment+0x1a>
 801043e:	6903      	ldr	r3, [r0, #16]
 8010440:	1e4a      	subs	r2, r1, #1
 8010442:	fbb3 f0f1 	udiv	r0, r3, r1
 8010446:	fb01 3310 	mls	r3, r1, r0, r3
 801044a:	1ac9      	subs	r1, r1, r3
 801044c:	ea01 0002 	and.w	r0, r1, r2
 8010450:	4770      	bx	lr
 8010452:	2000      	movs	r0, #0
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop

08010458 <ucdr_align_to>:
 8010458:	b538      	push	{r3, r4, r5, lr}
 801045a:	4604      	mov	r4, r0
 801045c:	460d      	mov	r5, r1
 801045e:	f7ff ffeb 	bl	8010438 <ucdr_buffer_alignment>
 8010462:	68a3      	ldr	r3, [r4, #8]
 8010464:	6861      	ldr	r1, [r4, #4]
 8010466:	4403      	add	r3, r0
 8010468:	6922      	ldr	r2, [r4, #16]
 801046a:	7565      	strb	r5, [r4, #21]
 801046c:	428b      	cmp	r3, r1
 801046e:	4402      	add	r2, r0
 8010470:	bf28      	it	cs
 8010472:	460b      	movcs	r3, r1
 8010474:	6122      	str	r2, [r4, #16]
 8010476:	60a3      	str	r3, [r4, #8]
 8010478:	bd38      	pop	{r3, r4, r5, pc}
 801047a:	bf00      	nop

0801047c <ucdr_buffer_length>:
 801047c:	6882      	ldr	r2, [r0, #8]
 801047e:	6800      	ldr	r0, [r0, #0]
 8010480:	1a10      	subs	r0, r2, r0
 8010482:	4770      	bx	lr

08010484 <ucdr_buffer_remaining>:
 8010484:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010488:	1a10      	subs	r0, r2, r0
 801048a:	4770      	bx	lr

0801048c <ucdr_check_final_buffer_behavior_array>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	7d83      	ldrb	r3, [r0, #22]
 8010490:	b9a3      	cbnz	r3, 80104bc <ucdr_check_final_buffer_behavior_array+0x30>
 8010492:	4604      	mov	r4, r0
 8010494:	460d      	mov	r5, r1
 8010496:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801049a:	429a      	cmp	r2, r3
 801049c:	d300      	bcc.n	80104a0 <ucdr_check_final_buffer_behavior_array+0x14>
 801049e:	b931      	cbnz	r1, 80104ae <ucdr_check_final_buffer_behavior_array+0x22>
 80104a0:	4620      	mov	r0, r4
 80104a2:	f7ff ffef 	bl	8010484 <ucdr_buffer_remaining>
 80104a6:	42a8      	cmp	r0, r5
 80104a8:	bf28      	it	cs
 80104aa:	4628      	movcs	r0, r5
 80104ac:	bd38      	pop	{r3, r4, r5, pc}
 80104ae:	6983      	ldr	r3, [r0, #24]
 80104b0:	b133      	cbz	r3, 80104c0 <ucdr_check_final_buffer_behavior_array+0x34>
 80104b2:	69c1      	ldr	r1, [r0, #28]
 80104b4:	4798      	blx	r3
 80104b6:	75a0      	strb	r0, [r4, #22]
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d0f1      	beq.n	80104a0 <ucdr_check_final_buffer_behavior_array+0x14>
 80104bc:	2000      	movs	r0, #0
 80104be:	bd38      	pop	{r3, r4, r5, pc}
 80104c0:	2301      	movs	r3, #1
 80104c2:	7583      	strb	r3, [r0, #22]
 80104c4:	e7fa      	b.n	80104bc <ucdr_check_final_buffer_behavior_array+0x30>
 80104c6:	bf00      	nop

080104c8 <ucdr_advance_buffer>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4604      	mov	r4, r0
 80104cc:	460d      	mov	r5, r1
 80104ce:	f7ff ff53 	bl	8010378 <ucdr_check_buffer_available_for>
 80104d2:	b178      	cbz	r0, 80104f4 <ucdr_advance_buffer+0x2c>
 80104d4:	6923      	ldr	r3, [r4, #16]
 80104d6:	68a2      	ldr	r2, [r4, #8]
 80104d8:	442b      	add	r3, r5
 80104da:	442a      	add	r2, r5
 80104dc:	6123      	str	r3, [r4, #16]
 80104de:	2301      	movs	r3, #1
 80104e0:	60a2      	str	r2, [r4, #8]
 80104e2:	7563      	strb	r3, [r4, #21]
 80104e4:	bd38      	pop	{r3, r4, r5, pc}
 80104e6:	68a2      	ldr	r2, [r4, #8]
 80104e8:	1a2d      	subs	r5, r5, r0
 80104ea:	6923      	ldr	r3, [r4, #16]
 80104ec:	4402      	add	r2, r0
 80104ee:	4403      	add	r3, r0
 80104f0:	60a2      	str	r2, [r4, #8]
 80104f2:	6123      	str	r3, [r4, #16]
 80104f4:	2201      	movs	r2, #1
 80104f6:	4629      	mov	r1, r5
 80104f8:	4620      	mov	r0, r4
 80104fa:	f7ff ffc7 	bl	801048c <ucdr_check_final_buffer_behavior_array>
 80104fe:	2800      	cmp	r0, #0
 8010500:	d1f1      	bne.n	80104e6 <ucdr_advance_buffer+0x1e>
 8010502:	2301      	movs	r3, #1
 8010504:	7563      	strb	r3, [r4, #21]
 8010506:	bd38      	pop	{r3, r4, r5, pc}

08010508 <ucdr_serialize_sequence_char>:
 8010508:	b570      	push	{r4, r5, r6, lr}
 801050a:	4615      	mov	r5, r2
 801050c:	460e      	mov	r6, r1
 801050e:	7d01      	ldrb	r1, [r0, #20]
 8010510:	4604      	mov	r4, r0
 8010512:	f7ff fa85 	bl	800fa20 <ucdr_serialize_endian_uint32_t>
 8010516:	b90d      	cbnz	r5, 801051c <ucdr_serialize_sequence_char+0x14>
 8010518:	2001      	movs	r0, #1
 801051a:	bd70      	pop	{r4, r5, r6, pc}
 801051c:	462b      	mov	r3, r5
 801051e:	4632      	mov	r2, r6
 8010520:	7d21      	ldrb	r1, [r4, #20]
 8010522:	4620      	mov	r0, r4
 8010524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010528:	f007 bac6 	b.w	8017ab8 <ucdr_serialize_endian_array_char>

0801052c <ucdr_deserialize_sequence_char>:
 801052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010530:	461d      	mov	r5, r3
 8010532:	4616      	mov	r6, r2
 8010534:	460f      	mov	r7, r1
 8010536:	461a      	mov	r2, r3
 8010538:	7d01      	ldrb	r1, [r0, #20]
 801053a:	4604      	mov	r4, r0
 801053c:	f7ff fb90 	bl	800fc60 <ucdr_deserialize_endian_uint32_t>
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	429e      	cmp	r6, r3
 8010544:	d208      	bcs.n	8010558 <ucdr_deserialize_sequence_char+0x2c>
 8010546:	2201      	movs	r2, #1
 8010548:	75a2      	strb	r2, [r4, #22]
 801054a:	463a      	mov	r2, r7
 801054c:	7d21      	ldrb	r1, [r4, #20]
 801054e:	4620      	mov	r0, r4
 8010550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010554:	f007 bae2 	b.w	8017b1c <ucdr_deserialize_endian_array_char>
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1f6      	bne.n	801054a <ucdr_deserialize_sequence_char+0x1e>
 801055c:	2001      	movs	r0, #1
 801055e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010562:	bf00      	nop

08010564 <ucdr_serialize_sequence_uint8_t>:
 8010564:	b570      	push	{r4, r5, r6, lr}
 8010566:	4615      	mov	r5, r2
 8010568:	460e      	mov	r6, r1
 801056a:	7d01      	ldrb	r1, [r0, #20]
 801056c:	4604      	mov	r4, r0
 801056e:	f7ff fa57 	bl	800fa20 <ucdr_serialize_endian_uint32_t>
 8010572:	b90d      	cbnz	r5, 8010578 <ucdr_serialize_sequence_uint8_t+0x14>
 8010574:	2001      	movs	r0, #1
 8010576:	bd70      	pop	{r4, r5, r6, pc}
 8010578:	462b      	mov	r3, r5
 801057a:	4632      	mov	r2, r6
 801057c:	7d21      	ldrb	r1, [r4, #20]
 801057e:	4620      	mov	r0, r4
 8010580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010584:	f007 bb30 	b.w	8017be8 <ucdr_serialize_endian_array_uint8_t>

08010588 <ucdr_deserialize_sequence_uint8_t>:
 8010588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058c:	461d      	mov	r5, r3
 801058e:	4616      	mov	r6, r2
 8010590:	460f      	mov	r7, r1
 8010592:	461a      	mov	r2, r3
 8010594:	7d01      	ldrb	r1, [r0, #20]
 8010596:	4604      	mov	r4, r0
 8010598:	f7ff fb62 	bl	800fc60 <ucdr_deserialize_endian_uint32_t>
 801059c:	682b      	ldr	r3, [r5, #0]
 801059e:	429e      	cmp	r6, r3
 80105a0:	d208      	bcs.n	80105b4 <ucdr_deserialize_sequence_uint8_t+0x2c>
 80105a2:	2201      	movs	r2, #1
 80105a4:	75a2      	strb	r2, [r4, #22]
 80105a6:	463a      	mov	r2, r7
 80105a8:	7d21      	ldrb	r1, [r4, #20]
 80105aa:	4620      	mov	r0, r4
 80105ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105b0:	f007 bb80 	b.w	8017cb4 <ucdr_deserialize_endian_array_uint8_t>
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d1f6      	bne.n	80105a6 <ucdr_deserialize_sequence_uint8_t+0x1e>
 80105b8:	2001      	movs	r0, #1
 80105ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105be:	bf00      	nop

080105c0 <uxr_buffer_delete_entity>:
 80105c0:	b510      	push	{r4, lr}
 80105c2:	2300      	movs	r3, #0
 80105c4:	b08e      	sub	sp, #56	@ 0x38
 80105c6:	4604      	mov	r4, r0
 80105c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80105cc:	2303      	movs	r3, #3
 80105ce:	2204      	movs	r2, #4
 80105d0:	9300      	str	r3, [sp, #0]
 80105d2:	ab06      	add	r3, sp, #24
 80105d4:	f001 f86e 	bl	80116b4 <uxr_prepare_stream_to_write_submessage>
 80105d8:	b918      	cbnz	r0, 80105e2 <uxr_buffer_delete_entity+0x22>
 80105da:	4604      	mov	r4, r0
 80105dc:	4620      	mov	r0, r4
 80105de:	b00e      	add	sp, #56	@ 0x38
 80105e0:	bd10      	pop	{r4, pc}
 80105e2:	9902      	ldr	r1, [sp, #8]
 80105e4:	aa05      	add	r2, sp, #20
 80105e6:	4620      	mov	r0, r4
 80105e8:	f001 f99c 	bl	8011924 <uxr_init_base_object_request>
 80105ec:	4604      	mov	r4, r0
 80105ee:	a905      	add	r1, sp, #20
 80105f0:	a806      	add	r0, sp, #24
 80105f2:	f002 fabf 	bl	8012b74 <uxr_serialize_DELETE_Payload>
 80105f6:	4620      	mov	r0, r4
 80105f8:	b00e      	add	sp, #56	@ 0x38
 80105fa:	bd10      	pop	{r4, pc}

080105fc <uxr_common_create_entity>:
 80105fc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010600:	b510      	push	{r4, lr}
 8010602:	f1bc 0f01 	cmp.w	ip, #1
 8010606:	b08c      	sub	sp, #48	@ 0x30
 8010608:	4604      	mov	r4, r0
 801060a:	9202      	str	r2, [sp, #8]
 801060c:	bf0c      	ite	eq
 801060e:	f003 0201 	andeq.w	r2, r3, #1
 8010612:	2200      	movne	r2, #0
 8010614:	330e      	adds	r3, #14
 8010616:	9103      	str	r1, [sp, #12]
 8010618:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801061c:	441a      	add	r2, r3
 801061e:	ab04      	add	r3, sp, #16
 8010620:	9101      	str	r1, [sp, #4]
 8010622:	2101      	movs	r1, #1
 8010624:	b292      	uxth	r2, r2
 8010626:	9100      	str	r1, [sp, #0]
 8010628:	9903      	ldr	r1, [sp, #12]
 801062a:	f001 f843 	bl	80116b4 <uxr_prepare_stream_to_write_submessage>
 801062e:	b918      	cbnz	r0, 8010638 <uxr_common_create_entity+0x3c>
 8010630:	4604      	mov	r4, r0
 8010632:	4620      	mov	r0, r4
 8010634:	b00c      	add	sp, #48	@ 0x30
 8010636:	bd10      	pop	{r4, pc}
 8010638:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801063a:	4620      	mov	r0, r4
 801063c:	9902      	ldr	r1, [sp, #8]
 801063e:	f001 f971 	bl	8011924 <uxr_init_base_object_request>
 8010642:	4604      	mov	r4, r0
 8010644:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010646:	a804      	add	r0, sp, #16
 8010648:	f002 f9f0 	bl	8012a2c <uxr_serialize_CREATE_Payload>
 801064c:	4620      	mov	r0, r4
 801064e:	b00c      	add	sp, #48	@ 0x30
 8010650:	bd10      	pop	{r4, pc}
 8010652:	bf00      	nop

08010654 <uxr_buffer_create_participant_bin>:
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801065a:	4605      	mov	r5, r0
 801065c:	ac11      	add	r4, sp, #68	@ 0x44
 801065e:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010662:	2303      	movs	r3, #3
 8010664:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010668:	7223      	strb	r3, [r4, #8]
 801066a:	2300      	movs	r3, #0
 801066c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010670:	f88d 3014 	strb.w	r3, [sp, #20]
 8010674:	2201      	movs	r2, #1
 8010676:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010678:	7122      	strb	r2, [r4, #4]
 801067a:	b1cb      	cbz	r3, 80106b0 <uxr_buffer_create_participant_bin+0x5c>
 801067c:	f88d 201c 	strb.w	r2, [sp, #28]
 8010680:	9308      	str	r3, [sp, #32]
 8010682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010686:	a915      	add	r1, sp, #84	@ 0x54
 8010688:	a809      	add	r0, sp, #36	@ 0x24
 801068a:	f7ff fec9 	bl	8010420 <ucdr_init_buffer>
 801068e:	a905      	add	r1, sp, #20
 8010690:	a809      	add	r0, sp, #36	@ 0x24
 8010692:	f001 fec3 	bl	801241c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010698:	9600      	str	r6, [sp, #0]
 801069a:	4628      	mov	r0, r5
 801069c:	9401      	str	r4, [sp, #4]
 801069e:	60e3      	str	r3, [r4, #12]
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80106a6:	f7ff ffa9 	bl	80105fc <uxr_common_create_entity>
 80106aa:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80106ae:	bd70      	pop	{r4, r5, r6, pc}
 80106b0:	f88d 301c 	strb.w	r3, [sp, #28]
 80106b4:	e7e5      	b.n	8010682 <uxr_buffer_create_participant_bin+0x2e>
 80106b6:	bf00      	nop

080106b8 <uxr_buffer_create_topic_bin>:
 80106b8:	b570      	push	{r4, r5, r6, lr}
 80106ba:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80106be:	4605      	mov	r5, r0
 80106c0:	4618      	mov	r0, r3
 80106c2:	2302      	movs	r3, #2
 80106c4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80106c8:	ac13      	add	r4, sp, #76	@ 0x4c
 80106ca:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80106ce:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80106d2:	a997      	add	r1, sp, #604	@ 0x25c
 80106d4:	f000 f8d8 	bl	8010888 <uxr_object_id_to_raw>
 80106d8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80106da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106de:	a917      	add	r1, sp, #92	@ 0x5c
 80106e0:	9306      	str	r3, [sp, #24]
 80106e2:	a80b      	add	r0, sp, #44	@ 0x2c
 80106e4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80106e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80106e8:	2303      	movs	r3, #3
 80106ea:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80106ee:	2301      	movs	r3, #1
 80106f0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80106f4:	2300      	movs	r3, #0
 80106f6:	f88d 301c 	strb.w	r3, [sp, #28]
 80106fa:	f7ff fe91 	bl	8010420 <ucdr_init_buffer>
 80106fe:	a906      	add	r1, sp, #24
 8010700:	a80b      	add	r0, sp, #44	@ 0x2c
 8010702:	f001 fead 	bl	8012460 <uxr_serialize_OBJK_Topic_Binary>
 8010706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010708:	4628      	mov	r0, r5
 801070a:	9600      	str	r6, [sp, #0]
 801070c:	9316      	str	r3, [sp, #88]	@ 0x58
 801070e:	b29b      	uxth	r3, r3
 8010710:	9401      	str	r4, [sp, #4]
 8010712:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010716:	f7ff ff71 	bl	80105fc <uxr_common_create_entity>
 801071a:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 801071e:	bd70      	pop	{r4, r5, r6, pc}

08010720 <uxr_buffer_create_publisher_bin>:
 8010720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010722:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010726:	2603      	movs	r6, #3
 8010728:	4605      	mov	r5, r0
 801072a:	4618      	mov	r0, r3
 801072c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010730:	ac0e      	add	r4, sp, #56	@ 0x38
 8010732:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010736:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801073a:	a992      	add	r1, sp, #584	@ 0x248
 801073c:	f000 f8a4 	bl	8010888 <uxr_object_id_to_raw>
 8010740:	2300      	movs	r3, #0
 8010742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010746:	a912      	add	r1, sp, #72	@ 0x48
 8010748:	a806      	add	r0, sp, #24
 801074a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801074e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010752:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010756:	f7ff fe63 	bl	8010420 <ucdr_init_buffer>
 801075a:	a993      	add	r1, sp, #588	@ 0x24c
 801075c:	a806      	add	r0, sp, #24
 801075e:	f001 ff35 	bl	80125cc <uxr_serialize_OBJK_Publisher_Binary>
 8010762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010764:	4628      	mov	r0, r5
 8010766:	9700      	str	r7, [sp, #0]
 8010768:	9311      	str	r3, [sp, #68]	@ 0x44
 801076a:	b29b      	uxth	r3, r3
 801076c:	9401      	str	r4, [sp, #4]
 801076e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010772:	f7ff ff43 	bl	80105fc <uxr_common_create_entity>
 8010776:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801077a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801077c <uxr_buffer_create_datawriter_bin>:
 801077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801077e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8010782:	4605      	mov	r5, r0
 8010784:	4618      	mov	r0, r3
 8010786:	2305      	movs	r3, #5
 8010788:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 801078c:	ac1d      	add	r4, sp, #116	@ 0x74
 801078e:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 8010792:	7123      	strb	r3, [r4, #4]
 8010794:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010798:	a9a1      	add	r1, sp, #644	@ 0x284
 801079a:	f000 f875 	bl	8010888 <uxr_object_id_to_raw>
 801079e:	2303      	movs	r3, #3
 80107a0:	a90e      	add	r1, sp, #56	@ 0x38
 80107a2:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80107a4:	7223      	strb	r3, [r4, #8]
 80107a6:	f000 f86f 	bl	8010888 <uxr_object_id_to_raw>
 80107aa:	2200      	movs	r2, #0
 80107ac:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 80107b0:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 80107b4:	3f00      	subs	r7, #0
 80107b6:	fab3 f383 	clz	r3, r3
 80107ba:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 80107be:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 80107c2:	bf18      	it	ne
 80107c4:	2701      	movne	r7, #1
 80107c6:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 80107ca:	095b      	lsrs	r3, r3, #5
 80107cc:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 80107d0:	2201      	movs	r2, #1
 80107d2:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 80107d6:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 80107da:	f89d 22a6 	ldrb.w	r2, [sp, #678]	@ 0x2a6
 80107de:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80107e2:	b91a      	cbnz	r2, 80107ec <uxr_buffer_create_datawriter_bin+0x70>
 80107e4:	f043 0302 	orr.w	r3, r3, #2
 80107e8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80107ec:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 80107f0:	2a01      	cmp	r2, #1
 80107f2:	d022      	beq.n	801083a <uxr_buffer_create_datawriter_bin+0xbe>
 80107f4:	2a03      	cmp	r2, #3
 80107f6:	d01b      	beq.n	8010830 <uxr_buffer_create_datawriter_bin+0xb4>
 80107f8:	b91a      	cbnz	r2, 8010802 <uxr_buffer_create_datawriter_bin+0x86>
 80107fa:	f043 0308 	orr.w	r3, r3, #8
 80107fe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010806:	a921      	add	r1, sp, #132	@ 0x84
 8010808:	a806      	add	r0, sp, #24
 801080a:	f7ff fe09 	bl	8010420 <ucdr_init_buffer>
 801080e:	a90e      	add	r1, sp, #56	@ 0x38
 8010810:	a806      	add	r0, sp, #24
 8010812:	f001 ff41 	bl	8012698 <uxr_serialize_OBJK_DataWriter_Binary>
 8010816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010818:	9600      	str	r6, [sp, #0]
 801081a:	4628      	mov	r0, r5
 801081c:	9401      	str	r4, [sp, #4]
 801081e:	60e3      	str	r3, [r4, #12]
 8010820:	b29b      	uxth	r3, r3
 8010822:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010826:	f7ff fee9 	bl	80105fc <uxr_common_create_entity>
 801082a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010830:	f043 0320 	orr.w	r3, r3, #32
 8010834:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010838:	e7e3      	b.n	8010802 <uxr_buffer_create_datawriter_bin+0x86>
 801083a:	f043 0310 	orr.w	r3, r3, #16
 801083e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010842:	e7de      	b.n	8010802 <uxr_buffer_create_datawriter_bin+0x86>

08010844 <uxr_object_id>:
 8010844:	b082      	sub	sp, #8
 8010846:	2300      	movs	r3, #0
 8010848:	f88d 1006 	strb.w	r1, [sp, #6]
 801084c:	f360 030f 	bfi	r3, r0, #0, #16
 8010850:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010854:	f362 431f 	bfi	r3, r2, #16, #16
 8010858:	4618      	mov	r0, r3
 801085a:	b002      	add	sp, #8
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop

08010860 <uxr_object_id_from_raw>:
 8010860:	7843      	ldrb	r3, [r0, #1]
 8010862:	b082      	sub	sp, #8
 8010864:	7801      	ldrb	r1, [r0, #0]
 8010866:	2000      	movs	r0, #0
 8010868:	091a      	lsrs	r2, r3, #4
 801086a:	f003 030f 	and.w	r3, r3, #15
 801086e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010872:	f88d 3006 	strb.w	r3, [sp, #6]
 8010876:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801087a:	f362 000f 	bfi	r0, r2, #0, #16
 801087e:	f363 401f 	bfi	r0, r3, #16, #16
 8010882:	b002      	add	sp, #8
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop

08010888 <uxr_object_id_to_raw>:
 8010888:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801088c:	b082      	sub	sp, #8
 801088e:	f3c0 120b 	ubfx	r2, r0, #4, #12
 8010892:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8010896:	700a      	strb	r2, [r1, #0]
 8010898:	704b      	strb	r3, [r1, #1]
 801089a:	b002      	add	sp, #8
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop

080108a0 <on_get_fragmentation_info>:
 80108a0:	b500      	push	{lr}
 80108a2:	b08b      	sub	sp, #44	@ 0x2c
 80108a4:	4601      	mov	r1, r0
 80108a6:	2204      	movs	r2, #4
 80108a8:	a802      	add	r0, sp, #8
 80108aa:	f7ff fdb9 	bl	8010420 <ucdr_init_buffer>
 80108ae:	f10d 0305 	add.w	r3, sp, #5
 80108b2:	f10d 0206 	add.w	r2, sp, #6
 80108b6:	a901      	add	r1, sp, #4
 80108b8:	a802      	add	r0, sp, #8
 80108ba:	f001 f999 	bl	8011bf0 <uxr_read_submessage_header>
 80108be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80108c2:	2b0d      	cmp	r3, #13
 80108c4:	d003      	beq.n	80108ce <on_get_fragmentation_info+0x2e>
 80108c6:	2000      	movs	r0, #0
 80108c8:	b00b      	add	sp, #44	@ 0x2c
 80108ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80108ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80108d2:	f013 0f02 	tst.w	r3, #2
 80108d6:	bf0c      	ite	eq
 80108d8:	2001      	moveq	r0, #1
 80108da:	2002      	movne	r0, #2
 80108dc:	b00b      	add	sp, #44	@ 0x2c
 80108de:	f85d fb04 	ldr.w	pc, [sp], #4
 80108e2:	bf00      	nop

080108e4 <read_submessage_get_info>:
 80108e4:	b570      	push	{r4, r5, r6, lr}
 80108e6:	2500      	movs	r5, #0
 80108e8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80108ec:	460e      	mov	r6, r1
 80108ee:	4604      	mov	r4, r0
 80108f0:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80108f4:	4629      	mov	r1, r5
 80108f6:	a810      	add	r0, sp, #64	@ 0x40
 80108f8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80108fc:	f00a f97e 	bl	801abfc <memset>
 8010900:	a903      	add	r1, sp, #12
 8010902:	4630      	mov	r0, r6
 8010904:	f002 f920 	bl	8012b48 <uxr_deserialize_GET_INFO_Payload>
 8010908:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801090c:	4620      	mov	r0, r4
 801090e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010912:	f000 ffff 	bl	8011914 <uxr_session_header_offset>
 8010916:	462b      	mov	r3, r5
 8010918:	220c      	movs	r2, #12
 801091a:	a905      	add	r1, sp, #20
 801091c:	9000      	str	r0, [sp, #0]
 801091e:	a808      	add	r0, sp, #32
 8010920:	f7ff fd6c 	bl	80103fc <ucdr_init_buffer_origin_offset>
 8010924:	a910      	add	r1, sp, #64	@ 0x40
 8010926:	a808      	add	r0, sp, #32
 8010928:	f002 f982 	bl	8012c30 <uxr_serialize_INFO_Payload>
 801092c:	9b08      	ldr	r3, [sp, #32]
 801092e:	462a      	mov	r2, r5
 8010930:	4629      	mov	r1, r5
 8010932:	4620      	mov	r0, r4
 8010934:	f000 ff9c 	bl	8011870 <uxr_stamp_session_header>
 8010938:	a808      	add	r0, sp, #32
 801093a:	f7ff fd9f 	bl	801047c <ucdr_buffer_length>
 801093e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010940:	4602      	mov	r2, r0
 8010942:	a905      	add	r1, sp, #20
 8010944:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010948:	47a0      	blx	r4
 801094a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801094e:	bd70      	pop	{r4, r5, r6, pc}

08010950 <write_submessage_acknack.isra.0>:
 8010950:	b570      	push	{r4, r5, r6, lr}
 8010952:	b092      	sub	sp, #72	@ 0x48
 8010954:	4605      	mov	r5, r0
 8010956:	460e      	mov	r6, r1
 8010958:	4614      	mov	r4, r2
 801095a:	f000 ffdb 	bl	8011914 <uxr_session_header_offset>
 801095e:	a905      	add	r1, sp, #20
 8010960:	9000      	str	r0, [sp, #0]
 8010962:	2300      	movs	r3, #0
 8010964:	a80a      	add	r0, sp, #40	@ 0x28
 8010966:	2211      	movs	r2, #17
 8010968:	f7ff fd48 	bl	80103fc <ucdr_init_buffer_origin_offset>
 801096c:	2318      	movs	r3, #24
 801096e:	2205      	movs	r2, #5
 8010970:	210a      	movs	r1, #10
 8010972:	fb03 5404 	mla	r4, r3, r4, r5
 8010976:	a80a      	add	r0, sp, #40	@ 0x28
 8010978:	2300      	movs	r3, #0
 801097a:	3450      	adds	r4, #80	@ 0x50
 801097c:	f001 f91e 	bl	8011bbc <uxr_buffer_submessage_header>
 8010980:	a903      	add	r1, sp, #12
 8010982:	4620      	mov	r0, r4
 8010984:	f007 fc2c 	bl	80181e0 <uxr_compute_acknack>
 8010988:	ba40      	rev16	r0, r0
 801098a:	a903      	add	r1, sp, #12
 801098c:	f88d 6010 	strb.w	r6, [sp, #16]
 8010990:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010994:	a80a      	add	r0, sp, #40	@ 0x28
 8010996:	f002 f9bd 	bl	8012d14 <uxr_serialize_ACKNACK_Payload>
 801099a:	2200      	movs	r2, #0
 801099c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801099e:	4628      	mov	r0, r5
 80109a0:	4611      	mov	r1, r2
 80109a2:	f000 ff65 	bl	8011870 <uxr_stamp_session_header>
 80109a6:	a80a      	add	r0, sp, #40	@ 0x28
 80109a8:	f7ff fd68 	bl	801047c <ucdr_buffer_length>
 80109ac:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80109ae:	4602      	mov	r2, r0
 80109b0:	a905      	add	r1, sp, #20
 80109b2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80109b6:	47a0      	blx	r4
 80109b8:	b012      	add	sp, #72	@ 0x48
 80109ba:	bd70      	pop	{r4, r5, r6, pc}
 80109bc:	0000      	movs	r0, r0
	...

080109c0 <uxr_init_session>:
 80109c0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80109f8 <uxr_init_session+0x38>
 80109c4:	2300      	movs	r3, #0
 80109c6:	b510      	push	{r4, lr}
 80109c8:	4604      	mov	r4, r0
 80109ca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80109ce:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80109d2:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80109d6:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80109da:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80109de:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80109e2:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80109e6:	2181      	movs	r1, #129	@ 0x81
 80109e8:	f000 fea6 	bl	8011738 <uxr_init_session_info>
 80109ec:	f104 0008 	add.w	r0, r4, #8
 80109f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109f4:	f000 bffe 	b.w	80119f4 <uxr_init_stream_storage>
	...

08010a00 <uxr_set_status_callback>:
 8010a00:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop

08010a08 <uxr_set_topic_callback>:
 8010a08:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop

08010a10 <uxr_set_request_callback>:
 8010a10:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010a14:	4770      	bx	lr
 8010a16:	bf00      	nop

08010a18 <uxr_set_reply_callback>:
 8010a18:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop

08010a20 <uxr_create_output_best_effort_stream>:
 8010a20:	b570      	push	{r4, r5, r6, lr}
 8010a22:	4604      	mov	r4, r0
 8010a24:	460d      	mov	r5, r1
 8010a26:	4616      	mov	r6, r2
 8010a28:	b082      	sub	sp, #8
 8010a2a:	f000 ff73 	bl	8011914 <uxr_session_header_offset>
 8010a2e:	4629      	mov	r1, r5
 8010a30:	4603      	mov	r3, r0
 8010a32:	4632      	mov	r2, r6
 8010a34:	f104 0008 	add.w	r0, r4, #8
 8010a38:	b002      	add	sp, #8
 8010a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a3e:	f001 b81f 	b.w	8011a80 <uxr_add_output_best_effort_buffer>
 8010a42:	bf00      	nop

08010a44 <uxr_create_output_reliable_stream>:
 8010a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a46:	460d      	mov	r5, r1
 8010a48:	b085      	sub	sp, #20
 8010a4a:	4616      	mov	r6, r2
 8010a4c:	461f      	mov	r7, r3
 8010a4e:	4604      	mov	r4, r0
 8010a50:	f000 ff60 	bl	8011914 <uxr_session_header_offset>
 8010a54:	4684      	mov	ip, r0
 8010a56:	463b      	mov	r3, r7
 8010a58:	4632      	mov	r2, r6
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	f104 0008 	add.w	r0, r4, #8
 8010a60:	f8cd c000 	str.w	ip, [sp]
 8010a64:	f001 f820 	bl	8011aa8 <uxr_add_output_reliable_buffer>
 8010a68:	b005      	add	sp, #20
 8010a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a6c <uxr_create_input_best_effort_stream>:
 8010a6c:	b082      	sub	sp, #8
 8010a6e:	3008      	adds	r0, #8
 8010a70:	b002      	add	sp, #8
 8010a72:	f001 b833 	b.w	8011adc <uxr_add_input_best_effort_buffer>
 8010a76:	bf00      	nop

08010a78 <uxr_create_input_reliable_stream>:
 8010a78:	b510      	push	{r4, lr}
 8010a7a:	4c04      	ldr	r4, [pc, #16]	@ (8010a8c <uxr_create_input_reliable_stream+0x14>)
 8010a7c:	b084      	sub	sp, #16
 8010a7e:	3008      	adds	r0, #8
 8010a80:	9400      	str	r4, [sp, #0]
 8010a82:	f001 f841 	bl	8011b08 <uxr_add_input_reliable_buffer>
 8010a86:	b004      	add	sp, #16
 8010a88:	bd10      	pop	{r4, pc}
 8010a8a:	bf00      	nop
 8010a8c:	080108a1 	.word	0x080108a1

08010a90 <uxr_epoch_nanos>:
 8010a90:	b510      	push	{r4, lr}
 8010a92:	4604      	mov	r4, r0
 8010a94:	f001 f8f4 	bl	8011c80 <uxr_nanos>
 8010a98:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010a9c:	1ac0      	subs	r0, r0, r3
 8010a9e:	eb61 0102 	sbc.w	r1, r1, r2
 8010aa2:	bd10      	pop	{r4, pc}

08010aa4 <uxr_flash_output_streams>:
 8010aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa8:	7e03      	ldrb	r3, [r0, #24]
 8010aaa:	b084      	sub	sp, #16
 8010aac:	4604      	mov	r4, r0
 8010aae:	b36b      	cbz	r3, 8010b0c <uxr_flash_output_streams+0x68>
 8010ab0:	2500      	movs	r5, #0
 8010ab2:	f100 0908 	add.w	r9, r0, #8
 8010ab6:	f10d 0802 	add.w	r8, sp, #2
 8010aba:	af03      	add	r7, sp, #12
 8010abc:	4628      	mov	r0, r5
 8010abe:	ae02      	add	r6, sp, #8
 8010ac0:	e006      	b.n	8010ad0 <uxr_flash_output_streams+0x2c>
 8010ac2:	3501      	adds	r5, #1
 8010ac4:	7e23      	ldrb	r3, [r4, #24]
 8010ac6:	f109 0910 	add.w	r9, r9, #16
 8010aca:	b2e8      	uxtb	r0, r5
 8010acc:	4283      	cmp	r3, r0
 8010ace:	d91d      	bls.n	8010b0c <uxr_flash_output_streams+0x68>
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	4611      	mov	r1, r2
 8010ad4:	f000 ff56 	bl	8011984 <uxr_stream_id>
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4643      	mov	r3, r8
 8010adc:	463a      	mov	r2, r7
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4648      	mov	r0, r9
 8010ae2:	f8cd c004 	str.w	ip, [sp, #4]
 8010ae6:	f007 fc01 	bl	80182ec <uxr_prepare_best_effort_buffer_to_send>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d0e9      	beq.n	8010ac2 <uxr_flash_output_streams+0x1e>
 8010aee:	9b02      	ldr	r3, [sp, #8]
 8010af0:	4620      	mov	r0, r4
 8010af2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010af6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010afa:	f000 feb9 	bl	8011870 <uxr_stamp_session_header>
 8010afe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b00:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010b04:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010b08:	47d0      	blx	sl
 8010b0a:	e7da      	b.n	8010ac2 <uxr_flash_output_streams+0x1e>
 8010b0c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010b10:	b373      	cbz	r3, 8010b70 <uxr_flash_output_streams+0xcc>
 8010b12:	f04f 0900 	mov.w	r9, #0
 8010b16:	f104 0520 	add.w	r5, r4, #32
 8010b1a:	f10d 0802 	add.w	r8, sp, #2
 8010b1e:	af03      	add	r7, sp, #12
 8010b20:	ae02      	add	r6, sp, #8
 8010b22:	4648      	mov	r0, r9
 8010b24:	2201      	movs	r2, #1
 8010b26:	2102      	movs	r1, #2
 8010b28:	f000 ff2c 	bl	8011984 <uxr_stream_id>
 8010b2c:	9001      	str	r0, [sp, #4]
 8010b2e:	e00c      	b.n	8010b4a <uxr_flash_output_streams+0xa6>
 8010b30:	9b02      	ldr	r3, [sp, #8]
 8010b32:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010b36:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010b3a:	f000 fe99 	bl	8011870 <uxr_stamp_session_header>
 8010b3e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b40:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010b44:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010b48:	47d0      	blx	sl
 8010b4a:	4643      	mov	r3, r8
 8010b4c:	463a      	mov	r2, r7
 8010b4e:	4631      	mov	r1, r6
 8010b50:	4628      	mov	r0, r5
 8010b52:	f007 fde9 	bl	8018728 <uxr_prepare_next_reliable_buffer_to_send>
 8010b56:	4603      	mov	r3, r0
 8010b58:	4620      	mov	r0, r4
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d1e8      	bne.n	8010b30 <uxr_flash_output_streams+0x8c>
 8010b5e:	f109 0901 	add.w	r9, r9, #1
 8010b62:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010b66:	3528      	adds	r5, #40	@ 0x28
 8010b68:	fa5f f089 	uxtb.w	r0, r9
 8010b6c:	4283      	cmp	r3, r0
 8010b6e:	d8d9      	bhi.n	8010b24 <uxr_flash_output_streams+0x80>
 8010b70:	b004      	add	sp, #16
 8010b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b76:	bf00      	nop

08010b78 <read_submessage_info>:
 8010b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7c:	460d      	mov	r5, r1
 8010b7e:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010b82:	4606      	mov	r6, r0
 8010b84:	4669      	mov	r1, sp
 8010b86:	4628      	mov	r0, r5
 8010b88:	f001 fef0 	bl	801296c <uxr_deserialize_BaseObjectReply>
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	a902      	add	r1, sp, #8
 8010b90:	4628      	mov	r0, r5
 8010b92:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8010b96:	f7fe fc6f 	bl	800f478 <ucdr_deserialize_bool>
 8010b9a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010b9e:	4004      	ands	r4, r0
 8010ba0:	b2e4      	uxtb	r4, r4
 8010ba2:	b95b      	cbnz	r3, 8010bbc <read_submessage_info+0x44>
 8010ba4:	a987      	add	r1, sp, #540	@ 0x21c
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f7fe fc66 	bl	800f478 <ucdr_deserialize_bool>
 8010bac:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010bb0:	4680      	mov	r8, r0
 8010bb2:	b94b      	cbnz	r3, 8010bc8 <read_submessage_info+0x50>
 8010bb4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bbc:	a903      	add	r1, sp, #12
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	f001 fd96 	bl	80126f0 <uxr_deserialize_ObjectVariant>
 8010bc4:	4004      	ands	r4, r0
 8010bc6:	e7ed      	b.n	8010ba4 <read_submessage_info+0x2c>
 8010bc8:	a988      	add	r1, sp, #544	@ 0x220
 8010bca:	4628      	mov	r0, r5
 8010bcc:	f7fe fc82 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8010bd0:	ea14 0f08 	tst.w	r4, r8
 8010bd4:	d0ee      	beq.n	8010bb4 <read_submessage_info+0x3c>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	d0ec      	beq.n	8010bb4 <read_submessage_info+0x3c>
 8010bda:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010bde:	2b0d      	cmp	r3, #13
 8010be0:	d1e8      	bne.n	8010bb4 <read_submessage_info+0x3c>
 8010be2:	a98a      	add	r1, sp, #552	@ 0x228
 8010be4:	4628      	mov	r0, r5
 8010be6:	f7ff fa1b 	bl	8010020 <ucdr_deserialize_int16_t>
 8010bea:	b138      	cbz	r0, 8010bfc <read_submessage_info+0x84>
 8010bec:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	dd06      	ble.n	8010c02 <read_submessage_info+0x8a>
 8010bf4:	2f00      	cmp	r7, #0
 8010bf6:	bf0c      	ite	eq
 8010bf8:	2002      	moveq	r0, #2
 8010bfa:	2001      	movne	r0, #1
 8010bfc:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8010c00:	e7d8      	b.n	8010bb4 <read_submessage_info+0x3c>
 8010c02:	2000      	movs	r0, #0
 8010c04:	e7fa      	b.n	8010bfc <read_submessage_info+0x84>
 8010c06:	bf00      	nop

08010c08 <read_submessage_list>:
 8010c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	b097      	sub	sp, #92	@ 0x5c
 8010c10:	460d      	mov	r5, r1
 8010c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c14:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010c18:	aa0c      	add	r2, sp, #48	@ 0x30
 8010c1a:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f000 ffe6 	bl	8011bf0 <uxr_read_submessage_header>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	f000 8131 	beq.w	8010e8c <read_submessage_list+0x284>
 8010c2a:	f89d c02e 	ldrb.w	ip, [sp, #46]	@ 0x2e
 8010c2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c30:	f1ac 0c02 	sub.w	ip, ip, #2
 8010c34:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8010c38:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8010c3c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010c40:	f1bc 0f0d 	cmp.w	ip, #13
 8010c44:	d8e6      	bhi.n	8010c14 <read_submessage_list+0xc>
 8010c46:	a201      	add	r2, pc, #4	@ (adr r2, 8010c4c <read_submessage_list+0x44>)
 8010c48:	f852 f02c 	ldr.w	pc, [r2, ip, lsl #2]
 8010c4c:	08010e83 	.word	0x08010e83
 8010c50:	08010c15 	.word	0x08010c15
 8010c54:	08010e73 	.word	0x08010e73
 8010c58:	08010e15 	.word	0x08010e15
 8010c5c:	08010e0b 	.word	0x08010e0b
 8010c60:	08010c15 	.word	0x08010c15
 8010c64:	08010c15 	.word	0x08010c15
 8010c68:	08010d87 	.word	0x08010d87
 8010c6c:	08010d1f 	.word	0x08010d1f
 8010c70:	08010cdf 	.word	0x08010cdf
 8010c74:	08010c15 	.word	0x08010c15
 8010c78:	08010c15 	.word	0x08010c15
 8010c7c:	08010c15 	.word	0x08010c15
 8010c80:	08010c85 	.word	0x08010c85
 8010c84:	a910      	add	r1, sp, #64	@ 0x40
 8010c86:	4628      	mov	r0, r5
 8010c88:	f002 f898 	bl	8012dbc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010c8c:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8010c90:	2e00      	cmp	r6, #0
 8010c92:	f000 8103 	beq.w	8010e9c <read_submessage_list+0x294>
 8010c96:	f000 fff3 	bl	8011c80 <uxr_nanos>
 8010c9a:	f8d4 7094 	ldr.w	r7, [r4, #148]	@ 0x94
 8010c9e:	f04f 0e00 	mov.w	lr, #0
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	4894      	ldr	r0, [pc, #592]	@ (8010ef8 <read_submessage_list+0x2f0>)
 8010ca8:	46f4      	mov	ip, lr
 8010caa:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010cac:	9706      	str	r7, [sp, #24]
 8010cae:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010cb0:	fbc1 7c00 	smlal	r7, ip, r1, r0
 8010cb4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010cb6:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010cba:	46f4      	mov	ip, lr
 8010cbc:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010cbe:	fbc1 7c00 	smlal	r7, ip, r1, r0
 8010cc2:	e9cd 7c02 	strd	r7, ip, [sp, #8]
 8010cc6:	e9dd 1712 	ldrd	r1, r7, [sp, #72]	@ 0x48
 8010cca:	fbc1 7e00 	smlal	r7, lr, r1, r0
 8010cce:	4620      	mov	r0, r4
 8010cd0:	e9cd 7e00 	strd	r7, lr, [sp]
 8010cd4:	47b0      	blx	r6
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010cdc:	e79a      	b.n	8010c14 <read_submessage_list+0xc>
 8010cde:	a910      	add	r1, sp, #64	@ 0x40
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	f002 f857 	bl	8012d94 <uxr_deserialize_HEARTBEAT_Payload>
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010cec:	f000 fe66 	bl	80119bc <uxr_stream_id_from_raw>
 8010cf0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010cf4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010cf6:	f104 0008 	add.w	r0, r4, #8
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	f000 ff3c 	bl	8011b78 <uxr_get_input_reliable_stream>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	d087      	beq.n	8010c14 <read_submessage_list+0xc>
 8010d04:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010d08:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010d0c:	f007 fa5c 	bl	80181c8 <uxr_process_heartbeat>
 8010d10:	4632      	mov	r2, r6
 8010d12:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010d16:	4620      	mov	r0, r4
 8010d18:	f7ff fe1a 	bl	8010950 <write_submessage_acknack.isra.0>
 8010d1c:	e77a      	b.n	8010c14 <read_submessage_list+0xc>
 8010d1e:	a910      	add	r1, sp, #64	@ 0x40
 8010d20:	4628      	mov	r0, r5
 8010d22:	f002 f80f 	bl	8012d44 <uxr_deserialize_ACKNACK_Payload>
 8010d26:	2100      	movs	r1, #0
 8010d28:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010d2c:	f000 fe46 	bl	80119bc <uxr_stream_id_from_raw>
 8010d30:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010d34:	900d      	str	r0, [sp, #52]	@ 0x34
 8010d36:	f104 0008 	add.w	r0, r4, #8
 8010d3a:	f000 ff07 	bl	8011b4c <uxr_get_output_reliable_stream>
 8010d3e:	4606      	mov	r6, r0
 8010d40:	2800      	cmp	r0, #0
 8010d42:	f43f af67 	beq.w	8010c14 <read_submessage_list+0xc>
 8010d46:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8010d4a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8010d4e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010d52:	ba49      	rev16	r1, r1
 8010d54:	b289      	uxth	r1, r1
 8010d56:	f007 fd8f 	bl	8018878 <uxr_process_acknack>
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	f007 fd52 	bl	8018804 <uxr_begin_output_nack_buffer_it>
 8010d60:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010d64:	e005      	b.n	8010d72 <read_submessage_list+0x16a>
 8010d66:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d68:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8010d6c:	e9d3 0700 	ldrd	r0, r7, [r3]
 8010d70:	47b8      	blx	r7
 8010d72:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010d76:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010d78:	4641      	mov	r1, r8
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	f007 fd44 	bl	8018808 <uxr_next_reliable_nack_buffer_to_send>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	d1f0      	bne.n	8010d66 <read_submessage_list+0x15e>
 8010d84:	e746      	b.n	8010c14 <read_submessage_list+0xc>
 8010d86:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8010d8a:	910d      	str	r1, [sp, #52]	@ 0x34
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	3e04      	subs	r6, #4
 8010d90:	4641      	mov	r1, r8
 8010d92:	f007 070e 	and.w	r7, r7, #14
 8010d96:	f001 fd4b 	bl	8012830 <uxr_deserialize_BaseObjectRequest>
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	a90f      	add	r1, sp, #60	@ 0x3c
 8010d9e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010da2:	f000 fddf 	bl	8011964 <uxr_parse_base_object_request>
 8010da6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010da8:	f8d4 9080 	ldr.w	r9, [r4, #128]	@ 0x80
 8010dac:	b2b6      	uxth	r6, r6
 8010dae:	f8bd 8032 	ldrh.w	r8, [sp, #50]	@ 0x32
 8010db2:	9110      	str	r1, [sp, #64]	@ 0x40
 8010db4:	f1b9 0f00 	cmp.w	r9, #0
 8010db8:	d006      	beq.n	8010dc8 <read_submessage_list+0x1c0>
 8010dba:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010dbe:	4642      	mov	r2, r8
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	47c8      	blx	r9
 8010dc8:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8010dca:	b183      	cbz	r3, 8010dee <read_submessage_list+0x1e6>
 8010dcc:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8010dce:	f04f 0c00 	mov.w	ip, #0
 8010dd2:	3902      	subs	r1, #2
 8010dd4:	e003      	b.n	8010dde <read_submessage_list+0x1d6>
 8010dd6:	f10c 0c01 	add.w	ip, ip, #1
 8010dda:	4563      	cmp	r3, ip
 8010ddc:	d007      	beq.n	8010dee <read_submessage_list+0x1e6>
 8010dde:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 8010de2:	4540      	cmp	r0, r8
 8010de4:	d1f7      	bne.n	8010dd6 <read_submessage_list+0x1ce>
 8010de6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010de8:	2200      	movs	r2, #0
 8010dea:	f803 200c 	strb.w	r2, [r3, ip]
 8010dee:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010df2:	463b      	mov	r3, r7
 8010df4:	4632      	mov	r2, r6
 8010df6:	4620      	mov	r0, r4
 8010df8:	9102      	str	r1, [sp, #8]
 8010dfa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010dfc:	9101      	str	r1, [sp, #4]
 8010dfe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010e00:	9100      	str	r1, [sp, #0]
 8010e02:	4629      	mov	r1, r5
 8010e04:	f007 fdba 	bl	801897c <read_submessage_format>
 8010e08:	e704      	b.n	8010c14 <read_submessage_list+0xc>
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f7ff feb3 	bl	8010b78 <read_submessage_info>
 8010e12:	e6ff      	b.n	8010c14 <read_submessage_list+0xc>
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d03c      	beq.n	8010e92 <read_submessage_list+0x28a>
 8010e18:	a910      	add	r1, sp, #64	@ 0x40
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f001 feea 	bl	8012bf4 <uxr_deserialize_STATUS_Payload>
 8010e20:	a90e      	add	r1, sp, #56	@ 0x38
 8010e22:	a810      	add	r0, sp, #64	@ 0x40
 8010e24:	aa0d      	add	r2, sp, #52	@ 0x34
 8010e26:	f000 fd9d 	bl	8011964 <uxr_parse_base_object_request>
 8010e2a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010e2c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8010e30:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010e34:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8010e38:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010e3a:	b136      	cbz	r6, 8010e4a <read_submessage_list+0x242>
 8010e3c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010e40:	4642      	mov	r2, r8
 8010e42:	4620      	mov	r0, r4
 8010e44:	9300      	str	r3, [sp, #0]
 8010e46:	464b      	mov	r3, r9
 8010e48:	47b0      	blx	r6
 8010e4a:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
 8010e4c:	2f00      	cmp	r7, #0
 8010e4e:	f43f aee1 	beq.w	8010c14 <read_submessage_list+0xc>
 8010e52:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010e54:	2100      	movs	r1, #0
 8010e56:	3802      	subs	r0, #2
 8010e58:	e003      	b.n	8010e62 <read_submessage_list+0x25a>
 8010e5a:	3101      	adds	r1, #1
 8010e5c:	42b9      	cmp	r1, r7
 8010e5e:	f43f aed9 	beq.w	8010c14 <read_submessage_list+0xc>
 8010e62:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8010e66:	4546      	cmp	r6, r8
 8010e68:	d1f7      	bne.n	8010e5a <read_submessage_list+0x252>
 8010e6a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010e6c:	f803 9001 	strb.w	r9, [r3, r1]
 8010e70:	e6d0      	b.n	8010c14 <read_submessage_list+0xc>
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f47f aece 	bne.w	8010c14 <read_submessage_list+0xc>
 8010e78:	4629      	mov	r1, r5
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f000 fcba 	bl	80117f4 <uxr_read_create_session_status>
 8010e80:	e6c8      	b.n	8010c14 <read_submessage_list+0xc>
 8010e82:	4629      	mov	r1, r5
 8010e84:	4620      	mov	r0, r4
 8010e86:	f7ff fd2d 	bl	80108e4 <read_submessage_get_info>
 8010e8a:	e6c3      	b.n	8010c14 <read_submessage_list+0xc>
 8010e8c:	b017      	add	sp, #92	@ 0x5c
 8010e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e92:	4629      	mov	r1, r5
 8010e94:	4620      	mov	r0, r4
 8010e96:	f000 fcbb 	bl	8011810 <uxr_read_delete_session_status>
 8010e9a:	e6bb      	b.n	8010c14 <read_submessage_list+0xc>
 8010e9c:	f000 fef0 	bl	8011c80 <uxr_nanos>
 8010ea0:	f8df c054 	ldr.w	ip, [pc, #84]	@ 8010ef8 <read_submessage_list+0x2f0>
 8010ea4:	4632      	mov	r2, r6
 8010ea6:	46b6      	mov	lr, r6
 8010ea8:	e9dd 7314 	ldrd	r7, r3, [sp, #80]	@ 0x50
 8010eac:	fbc7 320c 	smlal	r3, r2, r7, ip
 8010eb0:	1818      	adds	r0, r3, r0
 8010eb2:	e9dd 3712 	ldrd	r3, r7, [sp, #72]	@ 0x48
 8010eb6:	eb42 0201 	adc.w	r2, r2, r1
 8010eba:	fbc3 7e0c 	smlal	r7, lr, r3, ip
 8010ebe:	e9dd 1310 	ldrd	r1, r3, [sp, #64]	@ 0x40
 8010ec2:	4698      	mov	r8, r3
 8010ec4:	4633      	mov	r3, r6
 8010ec6:	fbc1 830c 	smlal	r8, r3, r1, ip
 8010eca:	4646      	mov	r6, r8
 8010ecc:	19bf      	adds	r7, r7, r6
 8010ece:	eb4e 0103 	adc.w	r1, lr, r3
 8010ed2:	1bc3      	subs	r3, r0, r7
 8010ed4:	eb62 0201 	sbc.w	r2, r2, r1
 8010ed8:	2a00      	cmp	r2, #0
 8010eda:	db08      	blt.n	8010eee <read_submessage_list+0x2e6>
 8010edc:	085b      	lsrs	r3, r3, #1
 8010ede:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010ee2:	1052      	asrs	r2, r2, #1
 8010ee4:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8010ee8:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8010eec:	e6f3      	b.n	8010cd6 <read_submessage_list+0xce>
 8010eee:	3301      	adds	r3, #1
 8010ef0:	f142 0200 	adc.w	r2, r2, #0
 8010ef4:	e7f2      	b.n	8010edc <read_submessage_list+0x2d4>
 8010ef6:	bf00      	nop
 8010ef8:	3b9aca00 	.word	0x3b9aca00

08010efc <listen_message_reliably>:
 8010efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f00:	f1b1 0b00 	subs.w	fp, r1, #0
 8010f04:	4606      	mov	r6, r0
 8010f06:	b09f      	sub	sp, #124	@ 0x7c
 8010f08:	bfb8      	it	lt
 8010f0a:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 8010f0e:	f000 fe9b 	bl	8011c48 <uxr_millis>
 8010f12:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010f16:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8010f1a:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 8010f1e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f000 80b0 	beq.w	8011088 <listen_message_reliably+0x18c>
 8010f28:	2500      	movs	r5, #0
 8010f2a:	f106 0420 	add.w	r4, r6, #32
 8010f2e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010f32:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 8010f36:	4628      	mov	r0, r5
 8010f38:	e9cd b806 	strd	fp, r8, [sp, #24]
 8010f3c:	e00e      	b.n	8010f5c <listen_message_reliably+0x60>
 8010f3e:	69a2      	ldr	r2, [r4, #24]
 8010f40:	3501      	adds	r5, #1
 8010f42:	69e3      	ldr	r3, [r4, #28]
 8010f44:	3428      	adds	r4, #40	@ 0x28
 8010f46:	42ba      	cmp	r2, r7
 8010f48:	b2e8      	uxtb	r0, r5
 8010f4a:	eb73 0109 	sbcs.w	r1, r3, r9
 8010f4e:	da01      	bge.n	8010f54 <listen_message_reliably+0x58>
 8010f50:	4617      	mov	r7, r2
 8010f52:	4699      	mov	r9, r3
 8010f54:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010f58:	4283      	cmp	r3, r0
 8010f5a:	d958      	bls.n	801100e <listen_message_reliably+0x112>
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	2102      	movs	r1, #2
 8010f60:	f000 fd10 	bl	8011984 <uxr_stream_id>
 8010f64:	4601      	mov	r1, r0
 8010f66:	4620      	mov	r0, r4
 8010f68:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010f6a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8010f6e:	f007 fc19 	bl	80187a4 <uxr_update_output_stream_heartbeat_timestamp>
 8010f72:	2800      	cmp	r0, #0
 8010f74:	d0e3      	beq.n	8010f3e <listen_message_reliably+0x42>
 8010f76:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8010f7a:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8010f7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8010f82:	4630      	mov	r0, r6
 8010f84:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8010f88:	3501      	adds	r5, #1
 8010f8a:	9305      	str	r3, [sp, #20]
 8010f8c:	f000 fcc2 	bl	8011914 <uxr_session_header_offset>
 8010f90:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8010f94:	2300      	movs	r3, #0
 8010f96:	2211      	movs	r2, #17
 8010f98:	a90e      	add	r1, sp, #56	@ 0x38
 8010f9a:	9000      	str	r0, [sp, #0]
 8010f9c:	4640      	mov	r0, r8
 8010f9e:	f7ff fa2d 	bl	80103fc <ucdr_init_buffer_origin_offset>
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	2205      	movs	r2, #5
 8010fa6:	210b      	movs	r1, #11
 8010fa8:	4640      	mov	r0, r8
 8010faa:	3428      	adds	r4, #40	@ 0x28
 8010fac:	f000 fe06 	bl	8011bbc <uxr_buffer_submessage_header>
 8010fb0:	2101      	movs	r1, #1
 8010fb2:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 8010fb6:	f007 fdb5 	bl	8018b24 <uxr_seq_num_add>
 8010fba:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	a90c      	add	r1, sp, #48	@ 0x30
 8010fc2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010fc6:	4640      	mov	r0, r8
 8010fc8:	9b05      	ldr	r3, [sp, #20]
 8010fca:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8010fce:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010fd2:	f001 fecb 	bl	8012d6c <uxr_serialize_HEARTBEAT_Payload>
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010fda:	4630      	mov	r0, r6
 8010fdc:	4611      	mov	r1, r2
 8010fde:	f000 fc47 	bl	8011870 <uxr_stamp_session_header>
 8010fe2:	4640      	mov	r0, r8
 8010fe4:	f7ff fa4a 	bl	801047c <ucdr_buffer_length>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8010fec:	a90e      	add	r1, sp, #56	@ 0x38
 8010fee:	e9d0 0300 	ldrd	r0, r3, [r0]
 8010ff2:	4798      	blx	r3
 8010ff4:	f854 2c10 	ldr.w	r2, [r4, #-16]
 8010ff8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8010ffc:	b2e8      	uxtb	r0, r5
 8010ffe:	42ba      	cmp	r2, r7
 8011000:	eb73 0109 	sbcs.w	r1, r3, r9
 8011004:	dba4      	blt.n	8010f50 <listen_message_reliably+0x54>
 8011006:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 801100a:	4283      	cmp	r3, r0
 801100c:	d8a6      	bhi.n	8010f5c <listen_message_reliably+0x60>
 801100e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011012:	4599      	cmp	r9, r3
 8011014:	bf08      	it	eq
 8011016:	f1b7 3fff 	cmpeq.w	r7, #4294967295	@ 0xffffffff
 801101a:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 801101e:	d033      	beq.n	8011088 <listen_message_reliably+0x18c>
 8011020:	9b03      	ldr	r3, [sp, #12]
 8011022:	1aff      	subs	r7, r7, r3
 8011024:	2f00      	cmp	r7, #0
 8011026:	bf08      	it	eq
 8011028:	2701      	moveq	r7, #1
 801102a:	455f      	cmp	r7, fp
 801102c:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 801102e:	4642      	mov	r2, r8
 8011030:	4651      	mov	r1, sl
 8011032:	bfa8      	it	ge
 8011034:	465f      	movge	r7, fp
 8011036:	6884      	ldr	r4, [r0, #8]
 8011038:	6800      	ldr	r0, [r0, #0]
 801103a:	463b      	mov	r3, r7
 801103c:	ebab 0b07 	sub.w	fp, fp, r7
 8011040:	47a0      	blx	r4
 8011042:	b960      	cbnz	r0, 801105e <listen_message_reliably+0x162>
 8011044:	f1bb 0f00 	cmp.w	fp, #0
 8011048:	f340 8092 	ble.w	8011170 <listen_message_reliably+0x274>
 801104c:	f000 fdfc 	bl	8011c48 <uxr_millis>
 8011050:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011054:	2b00      	cmp	r3, #0
 8011056:	d03c      	beq.n	80110d2 <listen_message_reliably+0x1d6>
 8011058:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801105c:	e764      	b.n	8010f28 <listen_message_reliably+0x2c>
 801105e:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 8011062:	4604      	mov	r4, r0
 8011064:	2500      	movs	r5, #0
 8011066:	a80e      	add	r0, sp, #56	@ 0x38
 8011068:	f7ff f9da 	bl	8010420 <ucdr_init_buffer>
 801106c:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 8011070:	aa08      	add	r2, sp, #32
 8011072:	a90e      	add	r1, sp, #56	@ 0x38
 8011074:	4630      	mov	r0, r6
 8011076:	f88d 5020 	strb.w	r5, [sp, #32]
 801107a:	f000 fc0f 	bl	801189c <uxr_read_session_header>
 801107e:	b928      	cbnz	r0, 801108c <listen_message_reliably+0x190>
 8011080:	4620      	mov	r0, r4
 8011082:	b01f      	add	sp, #124	@ 0x7c
 8011084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011088:	465f      	mov	r7, fp
 801108a:	e7cb      	b.n	8011024 <listen_message_reliably+0x128>
 801108c:	4629      	mov	r1, r5
 801108e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8011092:	f000 fc93 	bl	80119bc <uxr_stream_id_from_raw>
 8011096:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801109a:	f8bd 9022 	ldrh.w	r9, [sp, #34]	@ 0x22
 801109e:	fa5f f880 	uxtb.w	r8, r0
 80110a2:	2f01      	cmp	r7, #1
 80110a4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80110a8:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 80110ac:	d04c      	beq.n	8011148 <listen_message_reliably+0x24c>
 80110ae:	2f02      	cmp	r7, #2
 80110b0:	d011      	beq.n	80110d6 <listen_message_reliably+0x1da>
 80110b2:	2f00      	cmp	r7, #0
 80110b4:	d1e4      	bne.n	8011080 <listen_message_reliably+0x184>
 80110b6:	4639      	mov	r1, r7
 80110b8:	4638      	mov	r0, r7
 80110ba:	f000 fc7f 	bl	80119bc <uxr_stream_id_from_raw>
 80110be:	4602      	mov	r2, r0
 80110c0:	a90e      	add	r1, sp, #56	@ 0x38
 80110c2:	4630      	mov	r0, r6
 80110c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80110c6:	f7ff fd9f 	bl	8010c08 <read_submessage_list>
 80110ca:	4620      	mov	r0, r4
 80110cc:	b01f      	add	sp, #124	@ 0x7c
 80110ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d2:	465f      	mov	r7, fp
 80110d4:	e7a9      	b.n	801102a <listen_message_reliably+0x12e>
 80110d6:	4629      	mov	r1, r5
 80110d8:	f106 0008 	add.w	r0, r6, #8
 80110dc:	f000 fd4c 	bl	8011b78 <uxr_get_input_reliable_stream>
 80110e0:	4682      	mov	sl, r0
 80110e2:	b340      	cbz	r0, 8011136 <listen_message_reliably+0x23a>
 80110e4:	a80e      	add	r0, sp, #56	@ 0x38
 80110e6:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 80110ea:	f7ff f9cb 	bl	8010484 <ucdr_buffer_remaining>
 80110ee:	4603      	mov	r3, r0
 80110f0:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 80110f4:	465a      	mov	r2, fp
 80110f6:	4649      	mov	r1, r9
 80110f8:	9000      	str	r0, [sp, #0]
 80110fa:	4650      	mov	r0, sl
 80110fc:	f006 ff72 	bl	8017fe4 <uxr_receive_reliable_message>
 8011100:	b1c8      	cbz	r0, 8011136 <listen_message_reliably+0x23a>
 8011102:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8011106:	2b00      	cmp	r3, #0
 8011108:	d037      	beq.n	801117a <listen_message_reliably+0x27e>
 801110a:	af16      	add	r7, sp, #88	@ 0x58
 801110c:	f04f 0902 	mov.w	r9, #2
 8011110:	e00a      	b.n	8011128 <listen_message_reliably+0x22c>
 8011112:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 8011116:	4639      	mov	r1, r7
 8011118:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 801111c:	4630      	mov	r0, r6
 801111e:	f88d 9032 	strb.w	r9, [sp, #50]	@ 0x32
 8011122:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011124:	f7ff fd70 	bl	8010c08 <read_submessage_list>
 8011128:	2204      	movs	r2, #4
 801112a:	4639      	mov	r1, r7
 801112c:	4650      	mov	r0, sl
 801112e:	f006 ffd3 	bl	80180d8 <uxr_next_input_reliable_buffer_available>
 8011132:	2800      	cmp	r0, #0
 8011134:	d1ed      	bne.n	8011112 <listen_message_reliably+0x216>
 8011136:	4630      	mov	r0, r6
 8011138:	462a      	mov	r2, r5
 801113a:	4641      	mov	r1, r8
 801113c:	f7ff fc08 	bl	8010950 <write_submessage_acknack.isra.0>
 8011140:	4620      	mov	r0, r4
 8011142:	b01f      	add	sp, #124	@ 0x7c
 8011144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011148:	4629      	mov	r1, r5
 801114a:	f106 0008 	add.w	r0, r6, #8
 801114e:	f000 fd09 	bl	8011b64 <uxr_get_input_best_effort_stream>
 8011152:	2800      	cmp	r0, #0
 8011154:	d094      	beq.n	8011080 <listen_message_reliably+0x184>
 8011156:	4649      	mov	r1, r9
 8011158:	f006 febe 	bl	8017ed8 <uxr_receive_best_effort_message>
 801115c:	2800      	cmp	r0, #0
 801115e:	d08f      	beq.n	8011080 <listen_message_reliably+0x184>
 8011160:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8011164:	a90e      	add	r1, sp, #56	@ 0x38
 8011166:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011168:	4630      	mov	r0, r6
 801116a:	f7ff fd4d 	bl	8010c08 <read_submessage_list>
 801116e:	e787      	b.n	8011080 <listen_message_reliably+0x184>
 8011170:	4604      	mov	r4, r0
 8011172:	4620      	mov	r0, r4
 8011174:	b01f      	add	sp, #124	@ 0x7c
 8011176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117a:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 801117e:	a90e      	add	r1, sp, #56	@ 0x38
 8011180:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011182:	4630      	mov	r0, r6
 8011184:	f7ff fd40 	bl	8010c08 <read_submessage_list>
 8011188:	e7bf      	b.n	801110a <listen_message_reliably+0x20e>
 801118a:	bf00      	nop

0801118c <uxr_run_session_timeout>:
 801118c:	b570      	push	{r4, r5, r6, lr}
 801118e:	4604      	mov	r4, r0
 8011190:	460d      	mov	r5, r1
 8011192:	f000 fd59 	bl	8011c48 <uxr_millis>
 8011196:	4606      	mov	r6, r0
 8011198:	4620      	mov	r0, r4
 801119a:	f7ff fc83 	bl	8010aa4 <uxr_flash_output_streams>
 801119e:	4629      	mov	r1, r5
 80111a0:	4620      	mov	r0, r4
 80111a2:	f7ff feab 	bl	8010efc <listen_message_reliably>
 80111a6:	f000 fd4f 	bl	8011c48 <uxr_millis>
 80111aa:	1b81      	subs	r1, r0, r6
 80111ac:	1a69      	subs	r1, r5, r1
 80111ae:	2900      	cmp	r1, #0
 80111b0:	dcf6      	bgt.n	80111a0 <uxr_run_session_timeout+0x14>
 80111b2:	f104 0008 	add.w	r0, r4, #8
 80111b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111ba:	f000 bce9 	b.w	8011b90 <uxr_output_streams_confirmed>
 80111be:	bf00      	nop

080111c0 <uxr_run_session_until_data>:
 80111c0:	b570      	push	{r4, r5, r6, lr}
 80111c2:	4604      	mov	r4, r0
 80111c4:	460d      	mov	r5, r1
 80111c6:	f000 fd3f 	bl	8011c48 <uxr_millis>
 80111ca:	4606      	mov	r6, r0
 80111cc:	4620      	mov	r0, r4
 80111ce:	f7ff fc69 	bl	8010aa4 <uxr_flash_output_streams>
 80111d2:	2300      	movs	r3, #0
 80111d4:	4629      	mov	r1, r5
 80111d6:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80111da:	e005      	b.n	80111e8 <uxr_run_session_until_data+0x28>
 80111dc:	f000 fd34 	bl	8011c48 <uxr_millis>
 80111e0:	1b81      	subs	r1, r0, r6
 80111e2:	1a69      	subs	r1, r5, r1
 80111e4:	2900      	cmp	r1, #0
 80111e6:	dd07      	ble.n	80111f8 <uxr_run_session_until_data+0x38>
 80111e8:	4620      	mov	r0, r4
 80111ea:	f7ff fe87 	bl	8010efc <listen_message_reliably>
 80111ee:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80111f2:	2800      	cmp	r0, #0
 80111f4:	d0f2      	beq.n	80111dc <uxr_run_session_until_data+0x1c>
 80111f6:	bd70      	pop	{r4, r5, r6, pc}
 80111f8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80111fc:	bd70      	pop	{r4, r5, r6, pc}
 80111fe:	bf00      	nop

08011200 <uxr_run_session_until_confirm_delivery>:
 8011200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011204:	4606      	mov	r6, r0
 8011206:	460d      	mov	r5, r1
 8011208:	f000 fd1e 	bl	8011c48 <uxr_millis>
 801120c:	4607      	mov	r7, r0
 801120e:	4630      	mov	r0, r6
 8011210:	f7ff fc48 	bl	8010aa4 <uxr_flash_output_streams>
 8011214:	2d00      	cmp	r5, #0
 8011216:	db17      	blt.n	8011248 <uxr_run_session_until_confirm_delivery+0x48>
 8011218:	462c      	mov	r4, r5
 801121a:	f106 0808 	add.w	r8, r6, #8
 801121e:	e006      	b.n	801122e <uxr_run_session_until_confirm_delivery+0x2e>
 8011220:	f7ff fe6c 	bl	8010efc <listen_message_reliably>
 8011224:	f000 fd10 	bl	8011c48 <uxr_millis>
 8011228:	1bc1      	subs	r1, r0, r7
 801122a:	1a6c      	subs	r4, r5, r1
 801122c:	d407      	bmi.n	801123e <uxr_run_session_until_confirm_delivery+0x3e>
 801122e:	4640      	mov	r0, r8
 8011230:	f000 fcae 	bl	8011b90 <uxr_output_streams_confirmed>
 8011234:	4603      	mov	r3, r0
 8011236:	4621      	mov	r1, r4
 8011238:	4630      	mov	r0, r6
 801123a:	2b00      	cmp	r3, #0
 801123c:	d0f0      	beq.n	8011220 <uxr_run_session_until_confirm_delivery+0x20>
 801123e:	4640      	mov	r0, r8
 8011240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011244:	f000 bca4 	b.w	8011b90 <uxr_output_streams_confirmed>
 8011248:	f106 0808 	add.w	r8, r6, #8
 801124c:	e7f7      	b.n	801123e <uxr_run_session_until_confirm_delivery+0x3e>
 801124e:	bf00      	nop

08011250 <uxr_run_session_until_all_status>:
 8011250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011254:	9c08      	ldr	r4, [sp, #32]
 8011256:	4606      	mov	r6, r0
 8011258:	460f      	mov	r7, r1
 801125a:	4691      	mov	r9, r2
 801125c:	461d      	mov	r5, r3
 801125e:	f7ff fc21 	bl	8010aa4 <uxr_flash_output_streams>
 8011262:	b124      	cbz	r4, 801126e <uxr_run_session_until_all_status+0x1e>
 8011264:	4622      	mov	r2, r4
 8011266:	21ff      	movs	r1, #255	@ 0xff
 8011268:	4628      	mov	r0, r5
 801126a:	f009 fcc7 	bl	801abfc <memset>
 801126e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011270:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011274:	f000 fce8 	bl	8011c48 <uxr_millis>
 8011278:	4639      	mov	r1, r7
 801127a:	4680      	mov	r8, r0
 801127c:	4630      	mov	r0, r6
 801127e:	f7ff fe3d 	bl	8010efc <listen_message_reliably>
 8011282:	f000 fce1 	bl	8011c48 <uxr_millis>
 8011286:	eba0 0108 	sub.w	r1, r0, r8
 801128a:	1a79      	subs	r1, r7, r1
 801128c:	b34c      	cbz	r4, 80112e2 <uxr_run_session_until_all_status+0x92>
 801128e:	1e6a      	subs	r2, r5, #1
 8011290:	f04f 0c00 	mov.w	ip, #0
 8011294:	4696      	mov	lr, r2
 8011296:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 801129a:	2bff      	cmp	r3, #255	@ 0xff
 801129c:	d015      	beq.n	80112ca <uxr_run_session_until_all_status+0x7a>
 801129e:	f10c 0c01 	add.w	ip, ip, #1
 80112a2:	4564      	cmp	r4, ip
 80112a4:	d8f7      	bhi.n	8011296 <uxr_run_session_until_all_status+0x46>
 80112a6:	2300      	movs	r3, #0
 80112a8:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80112aa:	e000      	b.n	80112ae <uxr_run_session_until_all_status+0x5e>
 80112ac:	b158      	cbz	r0, 80112c6 <uxr_run_session_until_all_status+0x76>
 80112ae:	4613      	mov	r3, r2
 80112b0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80112b4:	3302      	adds	r3, #2
 80112b6:	2801      	cmp	r0, #1
 80112b8:	eba3 0305 	sub.w	r3, r3, r5
 80112bc:	bf8c      	ite	hi
 80112be:	2000      	movhi	r0, #0
 80112c0:	2001      	movls	r0, #1
 80112c2:	429c      	cmp	r4, r3
 80112c4:	d8f2      	bhi.n	80112ac <uxr_run_session_until_all_status+0x5c>
 80112c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ca:	f839 301c 	ldrh.w	r3, [r9, ip, lsl #1]
 80112ce:	f10c 0c01 	add.w	ip, ip, #1
 80112d2:	b90b      	cbnz	r3, 80112d8 <uxr_run_session_until_all_status+0x88>
 80112d4:	4564      	cmp	r4, ip
 80112d6:	d8de      	bhi.n	8011296 <uxr_run_session_until_all_status+0x46>
 80112d8:	2900      	cmp	r1, #0
 80112da:	dde4      	ble.n	80112a6 <uxr_run_session_until_all_status+0x56>
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d1cd      	bne.n	801127c <uxr_run_session_until_all_status+0x2c>
 80112e0:	e7e1      	b.n	80112a6 <uxr_run_session_until_all_status+0x56>
 80112e2:	2001      	movs	r0, #1
 80112e4:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80112e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ea:	bf00      	nop

080112ec <wait_session_status>:
 80112ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f0:	4604      	mov	r4, r0
 80112f2:	20ff      	movs	r0, #255	@ 0xff
 80112f4:	b09f      	sub	sp, #124	@ 0x7c
 80112f6:	7160      	strb	r0, [r4, #5]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 80bc 	beq.w	8011476 <wait_session_status+0x18a>
 80112fe:	469b      	mov	fp, r3
 8011300:	f04f 0800 	mov.w	r8, #0
 8011304:	4692      	mov	sl, r2
 8011306:	9105      	str	r1, [sp, #20]
 8011308:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801130a:	4652      	mov	r2, sl
 801130c:	9905      	ldr	r1, [sp, #20]
 801130e:	2700      	movs	r7, #0
 8011310:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011314:	47a8      	blx	r5
 8011316:	f000 fc97 	bl	8011c48 <uxr_millis>
 801131a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801131e:	4605      	mov	r5, r0
 8011320:	e009      	b.n	8011336 <wait_session_status+0x4a>
 8011322:	f000 fc91 	bl	8011c48 <uxr_millis>
 8011326:	1b43      	subs	r3, r0, r5
 8011328:	7962      	ldrb	r2, [r4, #5]
 801132a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801132e:	2b00      	cmp	r3, #0
 8011330:	dd3d      	ble.n	80113ae <wait_session_status+0xc2>
 8011332:	2aff      	cmp	r2, #255	@ 0xff
 8011334:	d13b      	bne.n	80113ae <wait_session_status+0xc2>
 8011336:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8011338:	aa0b      	add	r2, sp, #44	@ 0x2c
 801133a:	a90a      	add	r1, sp, #40	@ 0x28
 801133c:	6886      	ldr	r6, [r0, #8]
 801133e:	6800      	ldr	r0, [r0, #0]
 8011340:	47b0      	blx	r6
 8011342:	2800      	cmp	r0, #0
 8011344:	d0ed      	beq.n	8011322 <wait_session_status+0x36>
 8011346:	a80e      	add	r0, sp, #56	@ 0x38
 8011348:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801134c:	f7ff f868 	bl	8010420 <ucdr_init_buffer>
 8011350:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8011354:	aa09      	add	r2, sp, #36	@ 0x24
 8011356:	a90e      	add	r1, sp, #56	@ 0x38
 8011358:	4620      	mov	r0, r4
 801135a:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 801135e:	f000 fa9d 	bl	801189c <uxr_read_session_header>
 8011362:	2800      	cmp	r0, #0
 8011364:	d0dd      	beq.n	8011322 <wait_session_status+0x36>
 8011366:	2100      	movs	r1, #0
 8011368:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 801136c:	f000 fb26 	bl	80119bc <uxr_stream_id_from_raw>
 8011370:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8011374:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8011378:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801137c:	9304      	str	r3, [sp, #16]
 801137e:	b2c3      	uxtb	r3, r0
 8011380:	f1b9 0f01 	cmp.w	r9, #1
 8011384:	9303      	str	r3, [sp, #12]
 8011386:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 801138a:	d05e      	beq.n	801144a <wait_session_status+0x15e>
 801138c:	f1b9 0f02 	cmp.w	r9, #2
 8011390:	d01a      	beq.n	80113c8 <wait_session_status+0xdc>
 8011392:	f1b9 0f00 	cmp.w	r9, #0
 8011396:	d1c4      	bne.n	8011322 <wait_session_status+0x36>
 8011398:	4649      	mov	r1, r9
 801139a:	4648      	mov	r0, r9
 801139c:	f000 fb0e 	bl	80119bc <uxr_stream_id_from_raw>
 80113a0:	a90e      	add	r1, sp, #56	@ 0x38
 80113a2:	4602      	mov	r2, r0
 80113a4:	900d      	str	r0, [sp, #52]	@ 0x34
 80113a6:	4620      	mov	r0, r4
 80113a8:	f7ff fc2e 	bl	8010c08 <read_submessage_list>
 80113ac:	e7b9      	b.n	8011322 <wait_session_status+0x36>
 80113ae:	f108 0801 	add.w	r8, r8, #1
 80113b2:	45c3      	cmp	fp, r8
 80113b4:	d001      	beq.n	80113ba <wait_session_status+0xce>
 80113b6:	2aff      	cmp	r2, #255	@ 0xff
 80113b8:	d0a6      	beq.n	8011308 <wait_session_status+0x1c>
 80113ba:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 80113be:	bf18      	it	ne
 80113c0:	2001      	movne	r0, #1
 80113c2:	b01f      	add	sp, #124	@ 0x7c
 80113c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c8:	4631      	mov	r1, r6
 80113ca:	f104 0008 	add.w	r0, r4, #8
 80113ce:	f000 fbd3 	bl	8011b78 <uxr_get_input_reliable_stream>
 80113d2:	9006      	str	r0, [sp, #24]
 80113d4:	2800      	cmp	r0, #0
 80113d6:	d032      	beq.n	801143e <wait_session_status+0x152>
 80113d8:	aa0e      	add	r2, sp, #56	@ 0x38
 80113da:	4610      	mov	r0, r2
 80113dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80113de:	9207      	str	r2, [sp, #28]
 80113e0:	f7ff f850 	bl	8010484 <ucdr_buffer_remaining>
 80113e4:	4603      	mov	r3, r0
 80113e6:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 80113ea:	9a07      	ldr	r2, [sp, #28]
 80113ec:	9000      	str	r0, [sp, #0]
 80113ee:	9904      	ldr	r1, [sp, #16]
 80113f0:	9806      	ldr	r0, [sp, #24]
 80113f2:	f006 fdf7 	bl	8017fe4 <uxr_receive_reliable_message>
 80113f6:	b310      	cbz	r0, 801143e <wait_session_status+0x152>
 80113f8:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d042      	beq.n	8011486 <wait_session_status+0x19a>
 8011400:	f8cd 8010 	str.w	r8, [sp, #16]
 8011404:	f04f 0902 	mov.w	r9, #2
 8011408:	9507      	str	r5, [sp, #28]
 801140a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801140e:	9d06      	ldr	r5, [sp, #24]
 8011410:	e008      	b.n	8011424 <wait_session_status+0x138>
 8011412:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8011416:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 801141a:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 801141e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011420:	f7ff fbf2 	bl	8010c08 <read_submessage_list>
 8011424:	a916      	add	r1, sp, #88	@ 0x58
 8011426:	2204      	movs	r2, #4
 8011428:	4628      	mov	r0, r5
 801142a:	f006 fe55 	bl	80180d8 <uxr_next_input_reliable_buffer_available>
 801142e:	4603      	mov	r3, r0
 8011430:	a916      	add	r1, sp, #88	@ 0x58
 8011432:	4620      	mov	r0, r4
 8011434:	2b00      	cmp	r3, #0
 8011436:	d1ec      	bne.n	8011412 <wait_session_status+0x126>
 8011438:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801143c:	9d07      	ldr	r5, [sp, #28]
 801143e:	4632      	mov	r2, r6
 8011440:	9903      	ldr	r1, [sp, #12]
 8011442:	4620      	mov	r0, r4
 8011444:	f7ff fa84 	bl	8010950 <write_submessage_acknack.isra.0>
 8011448:	e76b      	b.n	8011322 <wait_session_status+0x36>
 801144a:	4631      	mov	r1, r6
 801144c:	f104 0008 	add.w	r0, r4, #8
 8011450:	f000 fb88 	bl	8011b64 <uxr_get_input_best_effort_stream>
 8011454:	2800      	cmp	r0, #0
 8011456:	f43f af64 	beq.w	8011322 <wait_session_status+0x36>
 801145a:	9904      	ldr	r1, [sp, #16]
 801145c:	f006 fd3c 	bl	8017ed8 <uxr_receive_best_effort_message>
 8011460:	2800      	cmp	r0, #0
 8011462:	f43f af5e 	beq.w	8011322 <wait_session_status+0x36>
 8011466:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 801146a:	a90e      	add	r1, sp, #56	@ 0x38
 801146c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801146e:	4620      	mov	r0, r4
 8011470:	f7ff fbca 	bl	8010c08 <read_submessage_list>
 8011474:	e755      	b.n	8011322 <wait_session_status+0x36>
 8011476:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011478:	e9d3 0400 	ldrd	r0, r4, [r3]
 801147c:	47a0      	blx	r4
 801147e:	2001      	movs	r0, #1
 8011480:	b01f      	add	sp, #124	@ 0x7c
 8011482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011486:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 801148a:	a90e      	add	r1, sp, #56	@ 0x38
 801148c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801148e:	4620      	mov	r0, r4
 8011490:	f7ff fbba 	bl	8010c08 <read_submessage_list>
 8011494:	e7b4      	b.n	8011400 <wait_session_status+0x114>
 8011496:	bf00      	nop

08011498 <uxr_delete_session_retries>:
 8011498:	b530      	push	{r4, r5, lr}
 801149a:	b08f      	sub	sp, #60	@ 0x3c
 801149c:	4604      	mov	r4, r0
 801149e:	460d      	mov	r5, r1
 80114a0:	f000 fa38 	bl	8011914 <uxr_session_header_offset>
 80114a4:	2300      	movs	r3, #0
 80114a6:	2210      	movs	r2, #16
 80114a8:	a902      	add	r1, sp, #8
 80114aa:	9000      	str	r0, [sp, #0]
 80114ac:	a806      	add	r0, sp, #24
 80114ae:	f7fe ffa5 	bl	80103fc <ucdr_init_buffer_origin_offset>
 80114b2:	a906      	add	r1, sp, #24
 80114b4:	4620      	mov	r0, r4
 80114b6:	f000 f981 	bl	80117bc <uxr_buffer_delete_session>
 80114ba:	2200      	movs	r2, #0
 80114bc:	9b06      	ldr	r3, [sp, #24]
 80114be:	4620      	mov	r0, r4
 80114c0:	4611      	mov	r1, r2
 80114c2:	f000 f9d5 	bl	8011870 <uxr_stamp_session_header>
 80114c6:	a806      	add	r0, sp, #24
 80114c8:	f7fe ffd8 	bl	801047c <ucdr_buffer_length>
 80114cc:	462b      	mov	r3, r5
 80114ce:	4602      	mov	r2, r0
 80114d0:	a902      	add	r1, sp, #8
 80114d2:	4620      	mov	r0, r4
 80114d4:	f7ff ff0a 	bl	80112ec <wait_session_status>
 80114d8:	b118      	cbz	r0, 80114e2 <uxr_delete_session_retries+0x4a>
 80114da:	7960      	ldrb	r0, [r4, #5]
 80114dc:	fab0 f080 	clz	r0, r0
 80114e0:	0940      	lsrs	r0, r0, #5
 80114e2:	b00f      	add	sp, #60	@ 0x3c
 80114e4:	bd30      	pop	{r4, r5, pc}
 80114e6:	bf00      	nop

080114e8 <uxr_create_session>:
 80114e8:	f100 0308 	add.w	r3, r0, #8
 80114ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f0:	4604      	mov	r4, r0
 80114f2:	b0ab      	sub	sp, #172	@ 0xac
 80114f4:	4618      	mov	r0, r3
 80114f6:	f04f 080a 	mov.w	r8, #10
 80114fa:	9303      	str	r3, [sp, #12]
 80114fc:	f000 fa84 	bl	8011a08 <uxr_reset_stream_storage>
 8011500:	4620      	mov	r0, r4
 8011502:	f000 fa07 	bl	8011914 <uxr_session_header_offset>
 8011506:	2300      	movs	r3, #0
 8011508:	221c      	movs	r2, #28
 801150a:	a90b      	add	r1, sp, #44	@ 0x2c
 801150c:	9000      	str	r0, [sp, #0]
 801150e:	a812      	add	r0, sp, #72	@ 0x48
 8011510:	f7fe ff74 	bl	80103fc <ucdr_init_buffer_origin_offset>
 8011514:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011516:	a912      	add	r1, sp, #72	@ 0x48
 8011518:	4620      	mov	r0, r4
 801151a:	8a1a      	ldrh	r2, [r3, #16]
 801151c:	3a04      	subs	r2, #4
 801151e:	b292      	uxth	r2, r2
 8011520:	f000 f922 	bl	8011768 <uxr_buffer_create_session>
 8011524:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011526:	4620      	mov	r0, r4
 8011528:	f000 f98e 	bl	8011848 <uxr_stamp_create_session_header>
 801152c:	a812      	add	r0, sp, #72	@ 0x48
 801152e:	f7fe ffa5 	bl	801047c <ucdr_buffer_length>
 8011532:	23ff      	movs	r3, #255	@ 0xff
 8011534:	4683      	mov	fp, r0
 8011536:	7163      	strb	r3, [r4, #5]
 8011538:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801153a:	465a      	mov	r2, fp
 801153c:	a90b      	add	r1, sp, #44	@ 0x2c
 801153e:	2700      	movs	r7, #0
 8011540:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011544:	47a8      	blx	r5
 8011546:	f000 fb7f 	bl	8011c48 <uxr_millis>
 801154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801154e:	4605      	mov	r5, r0
 8011550:	e009      	b.n	8011566 <uxr_create_session+0x7e>
 8011552:	f000 fb79 	bl	8011c48 <uxr_millis>
 8011556:	1b43      	subs	r3, r0, r5
 8011558:	7962      	ldrb	r2, [r4, #5]
 801155a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801155e:	2b00      	cmp	r3, #0
 8011560:	dd3d      	ble.n	80115de <uxr_create_session+0xf6>
 8011562:	2aff      	cmp	r2, #255	@ 0xff
 8011564:	d13b      	bne.n	80115de <uxr_create_session+0xf6>
 8011566:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8011568:	aa08      	add	r2, sp, #32
 801156a:	a907      	add	r1, sp, #28
 801156c:	6886      	ldr	r6, [r0, #8]
 801156e:	6800      	ldr	r0, [r0, #0]
 8011570:	47b0      	blx	r6
 8011572:	2800      	cmp	r0, #0
 8011574:	d0ed      	beq.n	8011552 <uxr_create_session+0x6a>
 8011576:	a81a      	add	r0, sp, #104	@ 0x68
 8011578:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801157c:	f7fe ff50 	bl	8010420 <ucdr_init_buffer>
 8011580:	f10d 031a 	add.w	r3, sp, #26
 8011584:	aa06      	add	r2, sp, #24
 8011586:	a91a      	add	r1, sp, #104	@ 0x68
 8011588:	4620      	mov	r0, r4
 801158a:	f88d 7018 	strb.w	r7, [sp, #24]
 801158e:	f000 f985 	bl	801189c <uxr_read_session_header>
 8011592:	2800      	cmp	r0, #0
 8011594:	d0dd      	beq.n	8011552 <uxr_create_session+0x6a>
 8011596:	2100      	movs	r1, #0
 8011598:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801159c:	f000 fa0e 	bl	80119bc <uxr_stream_id_from_raw>
 80115a0:	f3c0 4907 	ubfx	r9, r0, #16, #8
 80115a4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80115a8:	fa5f fa80 	uxtb.w	sl, r0
 80115ac:	f1b9 0f01 	cmp.w	r9, #1
 80115b0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80115b4:	9302      	str	r3, [sp, #8]
 80115b6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80115ba:	d057      	beq.n	801166c <uxr_create_session+0x184>
 80115bc:	f1b9 0f02 	cmp.w	r9, #2
 80115c0:	d018      	beq.n	80115f4 <uxr_create_session+0x10c>
 80115c2:	f1b9 0f00 	cmp.w	r9, #0
 80115c6:	d1c4      	bne.n	8011552 <uxr_create_session+0x6a>
 80115c8:	4649      	mov	r1, r9
 80115ca:	4648      	mov	r0, r9
 80115cc:	f000 f9f6 	bl	80119bc <uxr_stream_id_from_raw>
 80115d0:	a91a      	add	r1, sp, #104	@ 0x68
 80115d2:	4602      	mov	r2, r0
 80115d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80115d6:	4620      	mov	r0, r4
 80115d8:	f7ff fb16 	bl	8010c08 <read_submessage_list>
 80115dc:	e7b9      	b.n	8011552 <uxr_create_session+0x6a>
 80115de:	f1b8 0801 	subs.w	r8, r8, #1
 80115e2:	d001      	beq.n	80115e8 <uxr_create_session+0x100>
 80115e4:	2aff      	cmp	r2, #255	@ 0xff
 80115e6:	d0a7      	beq.n	8011538 <uxr_create_session+0x50>
 80115e8:	2a00      	cmp	r2, #0
 80115ea:	d05c      	beq.n	80116a6 <uxr_create_session+0x1be>
 80115ec:	2000      	movs	r0, #0
 80115ee:	b02b      	add	sp, #172	@ 0xac
 80115f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115f4:	4631      	mov	r1, r6
 80115f6:	9803      	ldr	r0, [sp, #12]
 80115f8:	f000 fabe 	bl	8011b78 <uxr_get_input_reliable_stream>
 80115fc:	9004      	str	r0, [sp, #16]
 80115fe:	b378      	cbz	r0, 8011660 <uxr_create_session+0x178>
 8011600:	aa1a      	add	r2, sp, #104	@ 0x68
 8011602:	4610      	mov	r0, r2
 8011604:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011606:	9205      	str	r2, [sp, #20]
 8011608:	f7fe ff3c 	bl	8010484 <ucdr_buffer_remaining>
 801160c:	4603      	mov	r3, r0
 801160e:	f10d 0019 	add.w	r0, sp, #25
 8011612:	9a05      	ldr	r2, [sp, #20]
 8011614:	9000      	str	r0, [sp, #0]
 8011616:	9902      	ldr	r1, [sp, #8]
 8011618:	9804      	ldr	r0, [sp, #16]
 801161a:	f006 fce3 	bl	8017fe4 <uxr_receive_reliable_message>
 801161e:	b1f8      	cbz	r0, 8011660 <uxr_create_session+0x178>
 8011620:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d036      	beq.n	8011696 <uxr_create_session+0x1ae>
 8011628:	f8cd b008 	str.w	fp, [sp, #8]
 801162c:	f04f 0902 	mov.w	r9, #2
 8011630:	f8dd b010 	ldr.w	fp, [sp, #16]
 8011634:	e008      	b.n	8011648 <uxr_create_session+0x160>
 8011636:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801163a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801163e:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8011642:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011644:	f7ff fae0 	bl	8010c08 <read_submessage_list>
 8011648:	a922      	add	r1, sp, #136	@ 0x88
 801164a:	2204      	movs	r2, #4
 801164c:	4658      	mov	r0, fp
 801164e:	f006 fd43 	bl	80180d8 <uxr_next_input_reliable_buffer_available>
 8011652:	4603      	mov	r3, r0
 8011654:	a922      	add	r1, sp, #136	@ 0x88
 8011656:	4620      	mov	r0, r4
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1ec      	bne.n	8011636 <uxr_create_session+0x14e>
 801165c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011660:	4632      	mov	r2, r6
 8011662:	4651      	mov	r1, sl
 8011664:	4620      	mov	r0, r4
 8011666:	f7ff f973 	bl	8010950 <write_submessage_acknack.isra.0>
 801166a:	e772      	b.n	8011552 <uxr_create_session+0x6a>
 801166c:	4631      	mov	r1, r6
 801166e:	9803      	ldr	r0, [sp, #12]
 8011670:	f000 fa78 	bl	8011b64 <uxr_get_input_best_effort_stream>
 8011674:	2800      	cmp	r0, #0
 8011676:	f43f af6c 	beq.w	8011552 <uxr_create_session+0x6a>
 801167a:	9902      	ldr	r1, [sp, #8]
 801167c:	f006 fc2c 	bl	8017ed8 <uxr_receive_best_effort_message>
 8011680:	2800      	cmp	r0, #0
 8011682:	f43f af66 	beq.w	8011552 <uxr_create_session+0x6a>
 8011686:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801168a:	a91a      	add	r1, sp, #104	@ 0x68
 801168c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801168e:	4620      	mov	r0, r4
 8011690:	f7ff faba 	bl	8010c08 <read_submessage_list>
 8011694:	e75d      	b.n	8011552 <uxr_create_session+0x6a>
 8011696:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 801169a:	a91a      	add	r1, sp, #104	@ 0x68
 801169c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801169e:	4620      	mov	r0, r4
 80116a0:	f7ff fab2 	bl	8010c08 <read_submessage_list>
 80116a4:	e7c0      	b.n	8011628 <uxr_create_session+0x140>
 80116a6:	9803      	ldr	r0, [sp, #12]
 80116a8:	f000 f9ae 	bl	8011a08 <uxr_reset_stream_storage>
 80116ac:	2001      	movs	r0, #1
 80116ae:	b02b      	add	sp, #172	@ 0xac
 80116b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116b4 <uxr_prepare_stream_to_write_submessage>:
 80116b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b8:	b082      	sub	sp, #8
 80116ba:	4605      	mov	r5, r0
 80116bc:	4610      	mov	r0, r2
 80116be:	4614      	mov	r4, r2
 80116c0:	461e      	mov	r6, r3
 80116c2:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80116c6:	9101      	str	r1, [sp, #4]
 80116c8:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80116cc:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80116d0:	f000 fab4 	bl	8011c3c <uxr_submessage_padding>
 80116d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116d8:	1d21      	adds	r1, r4, #4
 80116da:	2b01      	cmp	r3, #1
 80116dc:	eb01 0a00 	add.w	sl, r1, r0
 80116e0:	d012      	beq.n	8011708 <uxr_prepare_stream_to_write_submessage+0x54>
 80116e2:	2b02      	cmp	r3, #2
 80116e4:	d003      	beq.n	80116ee <uxr_prepare_stream_to_write_submessage+0x3a>
 80116e6:	2000      	movs	r0, #0
 80116e8:	b002      	add	sp, #8
 80116ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ee:	4639      	mov	r1, r7
 80116f0:	f105 0008 	add.w	r0, r5, #8
 80116f4:	f000 fa2a 	bl	8011b4c <uxr_get_output_reliable_stream>
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d0f4      	beq.n	80116e6 <uxr_prepare_stream_to_write_submessage+0x32>
 80116fc:	4651      	mov	r1, sl
 80116fe:	4632      	mov	r2, r6
 8011700:	f006 fea8 	bl	8018454 <uxr_prepare_reliable_buffer_to_write>
 8011704:	b968      	cbnz	r0, 8011722 <uxr_prepare_stream_to_write_submessage+0x6e>
 8011706:	e7ee      	b.n	80116e6 <uxr_prepare_stream_to_write_submessage+0x32>
 8011708:	4639      	mov	r1, r7
 801170a:	f105 0008 	add.w	r0, r5, #8
 801170e:	f000 fa15 	bl	8011b3c <uxr_get_output_best_effort_stream>
 8011712:	2800      	cmp	r0, #0
 8011714:	d0e7      	beq.n	80116e6 <uxr_prepare_stream_to_write_submessage+0x32>
 8011716:	4651      	mov	r1, sl
 8011718:	4632      	mov	r2, r6
 801171a:	f006 fdc7 	bl	80182ac <uxr_prepare_best_effort_buffer_to_write>
 801171e:	2800      	cmp	r0, #0
 8011720:	d0e1      	beq.n	80116e6 <uxr_prepare_stream_to_write_submessage+0x32>
 8011722:	464b      	mov	r3, r9
 8011724:	b2a2      	uxth	r2, r4
 8011726:	4641      	mov	r1, r8
 8011728:	4630      	mov	r0, r6
 801172a:	f000 fa47 	bl	8011bbc <uxr_buffer_submessage_header>
 801172e:	2001      	movs	r0, #1
 8011730:	b002      	add	sp, #8
 8011732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011736:	bf00      	nop

08011738 <uxr_init_session_info>:
 8011738:	2300      	movs	r3, #0
 801173a:	f04f 0c09 	mov.w	ip, #9
 801173e:	7102      	strb	r2, [r0, #4]
 8011740:	f361 0307 	bfi	r3, r1, #0, #8
 8011744:	0e11      	lsrs	r1, r2, #24
 8011746:	f8a0 c006 	strh.w	ip, [r0, #6]
 801174a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801174e:	f361 230f 	bfi	r3, r1, #8, #8
 8011752:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011756:	21ff      	movs	r1, #255	@ 0xff
 8011758:	f36c 4317 	bfi	r3, ip, #16, #8
 801175c:	7141      	strb	r1, [r0, #5]
 801175e:	f362 631f 	bfi	r3, r2, #24, #8
 8011762:	6003      	str	r3, [r0, #0]
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop

08011768 <uxr_buffer_create_session>:
 8011768:	b530      	push	{r4, r5, lr}
 801176a:	2300      	movs	r3, #0
 801176c:	b089      	sub	sp, #36	@ 0x24
 801176e:	4d12      	ldr	r5, [pc, #72]	@ (80117b8 <uxr_buffer_create_session+0x50>)
 8011770:	460c      	mov	r4, r1
 8011772:	9307      	str	r3, [sp, #28]
 8011774:	88a9      	ldrh	r1, [r5, #4]
 8011776:	f8ad 201c 	strh.w	r2, [sp, #28]
 801177a:	682a      	ldr	r2, [r5, #0]
 801177c:	9301      	str	r3, [sp, #4]
 801177e:	9200      	str	r2, [sp, #0]
 8011780:	2201      	movs	r2, #1
 8011782:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011786:	f8d0 1001 	ldr.w	r1, [r0, #1]
 801178a:	7805      	ldrb	r5, [r0, #0]
 801178c:	9102      	str	r1, [sp, #8]
 801178e:	4619      	mov	r1, r3
 8011790:	80c2      	strh	r2, [r0, #6]
 8011792:	4620      	mov	r0, r4
 8011794:	f88d 2004 	strb.w	r2, [sp, #4]
 8011798:	2210      	movs	r2, #16
 801179a:	9303      	str	r3, [sp, #12]
 801179c:	9306      	str	r3, [sp, #24]
 801179e:	f88d 500c 	strb.w	r5, [sp, #12]
 80117a2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80117a6:	f000 fa09 	bl	8011bbc <uxr_buffer_submessage_header>
 80117aa:	4669      	mov	r1, sp
 80117ac:	4620      	mov	r0, r4
 80117ae:	f001 f93b 	bl	8012a28 <uxr_serialize_CREATE_CLIENT_Payload>
 80117b2:	b009      	add	sp, #36	@ 0x24
 80117b4:	bd30      	pop	{r4, r5, pc}
 80117b6:	bf00      	nop
 80117b8:	0801bb78 	.word	0x0801bb78

080117bc <uxr_buffer_delete_session>:
 80117bc:	4a0c      	ldr	r2, [pc, #48]	@ (80117f0 <uxr_buffer_delete_session+0x34>)
 80117be:	2302      	movs	r3, #2
 80117c0:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80117c4:	b510      	push	{r4, lr}
 80117c6:	460c      	mov	r4, r1
 80117c8:	b082      	sub	sp, #8
 80117ca:	8911      	ldrh	r1, [r2, #8]
 80117cc:	2204      	movs	r2, #4
 80117ce:	80c3      	strh	r3, [r0, #6]
 80117d0:	2300      	movs	r3, #0
 80117d2:	f8ad 1006 	strh.w	r1, [sp, #6]
 80117d6:	4620      	mov	r0, r4
 80117d8:	2103      	movs	r1, #3
 80117da:	f8ad c004 	strh.w	ip, [sp, #4]
 80117de:	f000 f9ed 	bl	8011bbc <uxr_buffer_submessage_header>
 80117e2:	a901      	add	r1, sp, #4
 80117e4:	4620      	mov	r0, r4
 80117e6:	f001 f9c5 	bl	8012b74 <uxr_serialize_DELETE_Payload>
 80117ea:	b002      	add	sp, #8
 80117ec:	bd10      	pop	{r4, pc}
 80117ee:	bf00      	nop
 80117f0:	0801bb78 	.word	0x0801bb78

080117f4 <uxr_read_create_session_status>:
 80117f4:	b510      	push	{r4, lr}
 80117f6:	460b      	mov	r3, r1
 80117f8:	b088      	sub	sp, #32
 80117fa:	4604      	mov	r4, r0
 80117fc:	a901      	add	r1, sp, #4
 80117fe:	4618      	mov	r0, r3
 8011800:	f001 f9c8 	bl	8012b94 <uxr_deserialize_STATUS_AGENT_Payload>
 8011804:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011808:	7163      	strb	r3, [r4, #5]
 801180a:	b008      	add	sp, #32
 801180c:	bd10      	pop	{r4, pc}
 801180e:	bf00      	nop

08011810 <uxr_read_delete_session_status>:
 8011810:	460b      	mov	r3, r1
 8011812:	b510      	push	{r4, lr}
 8011814:	b082      	sub	sp, #8
 8011816:	4604      	mov	r4, r0
 8011818:	4618      	mov	r0, r3
 801181a:	4669      	mov	r1, sp
 801181c:	f001 f9ea 	bl	8012bf4 <uxr_deserialize_STATUS_Payload>
 8011820:	88e3      	ldrh	r3, [r4, #6]
 8011822:	2b02      	cmp	r3, #2
 8011824:	d001      	beq.n	801182a <uxr_read_delete_session_status+0x1a>
 8011826:	b002      	add	sp, #8
 8011828:	bd10      	pop	{r4, pc}
 801182a:	f10d 0002 	add.w	r0, sp, #2
 801182e:	f7ff f817 	bl	8010860 <uxr_object_id_from_raw>
 8011832:	f8bd 3000 	ldrh.w	r3, [sp]
 8011836:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801183a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801183e:	bf08      	it	eq
 8011840:	7162      	strbeq	r2, [r4, #5]
 8011842:	b002      	add	sp, #8
 8011844:	bd10      	pop	{r4, pc}
 8011846:	bf00      	nop

08011848 <uxr_stamp_create_session_header>:
 8011848:	b510      	push	{r4, lr}
 801184a:	2208      	movs	r2, #8
 801184c:	b08a      	sub	sp, #40	@ 0x28
 801184e:	4604      	mov	r4, r0
 8011850:	eb0d 0002 	add.w	r0, sp, r2
 8011854:	f7fe fde4 	bl	8010420 <ucdr_init_buffer>
 8011858:	f814 1b01 	ldrb.w	r1, [r4], #1
 801185c:	2300      	movs	r3, #0
 801185e:	a802      	add	r0, sp, #8
 8011860:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011864:	9400      	str	r4, [sp, #0]
 8011866:	461a      	mov	r2, r3
 8011868:	f000 fba8 	bl	8011fbc <uxr_serialize_message_header>
 801186c:	b00a      	add	sp, #40	@ 0x28
 801186e:	bd10      	pop	{r4, pc}

08011870 <uxr_stamp_session_header>:
 8011870:	b570      	push	{r4, r5, r6, lr}
 8011872:	4616      	mov	r6, r2
 8011874:	b08a      	sub	sp, #40	@ 0x28
 8011876:	2208      	movs	r2, #8
 8011878:	4604      	mov	r4, r0
 801187a:	460d      	mov	r5, r1
 801187c:	4619      	mov	r1, r3
 801187e:	eb0d 0002 	add.w	r0, sp, r2
 8011882:	f7fe fdcd 	bl	8010420 <ucdr_init_buffer>
 8011886:	f814 1b01 	ldrb.w	r1, [r4], #1
 801188a:	4633      	mov	r3, r6
 801188c:	462a      	mov	r2, r5
 801188e:	a802      	add	r0, sp, #8
 8011890:	9400      	str	r4, [sp, #0]
 8011892:	f000 fb93 	bl	8011fbc <uxr_serialize_message_header>
 8011896:	b00a      	add	sp, #40	@ 0x28
 8011898:	bd70      	pop	{r4, r5, r6, pc}
 801189a:	bf00      	nop

0801189c <uxr_read_session_header>:
 801189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801189e:	4607      	mov	r7, r0
 80118a0:	b085      	sub	sp, #20
 80118a2:	4608      	mov	r0, r1
 80118a4:	460c      	mov	r4, r1
 80118a6:	4615      	mov	r5, r2
 80118a8:	461e      	mov	r6, r3
 80118aa:	f7fe fdeb 	bl	8010484 <ucdr_buffer_remaining>
 80118ae:	2808      	cmp	r0, #8
 80118b0:	d802      	bhi.n	80118b8 <uxr_read_session_header+0x1c>
 80118b2:	2000      	movs	r0, #0
 80118b4:	b005      	add	sp, #20
 80118b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b8:	a903      	add	r1, sp, #12
 80118ba:	4633      	mov	r3, r6
 80118bc:	462a      	mov	r2, r5
 80118be:	4620      	mov	r0, r4
 80118c0:	9100      	str	r1, [sp, #0]
 80118c2:	f10d 010b 	add.w	r1, sp, #11
 80118c6:	f000 fb97 	bl	8011ff8 <uxr_deserialize_message_header>
 80118ca:	783a      	ldrb	r2, [r7, #0]
 80118cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d1ee      	bne.n	80118b2 <uxr_read_session_header+0x16>
 80118d4:	061b      	lsls	r3, r3, #24
 80118d6:	d41b      	bmi.n	8011910 <uxr_read_session_header+0x74>
 80118d8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80118dc:	787b      	ldrb	r3, [r7, #1]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d003      	beq.n	80118ea <uxr_read_session_header+0x4e>
 80118e2:	2001      	movs	r0, #1
 80118e4:	f080 0001 	eor.w	r0, r0, #1
 80118e8:	e7e4      	b.n	80118b4 <uxr_read_session_header+0x18>
 80118ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80118ee:	1cb8      	adds	r0, r7, #2
 80118f0:	78bb      	ldrb	r3, [r7, #2]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d1f5      	bne.n	80118e2 <uxr_read_session_header+0x46>
 80118f6:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80118fa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80118fe:	429a      	cmp	r2, r3
 8011900:	d1ef      	bne.n	80118e2 <uxr_read_session_header+0x46>
 8011902:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011906:	7843      	ldrb	r3, [r0, #1]
 8011908:	429a      	cmp	r2, r3
 801190a:	d1ea      	bne.n	80118e2 <uxr_read_session_header+0x46>
 801190c:	2000      	movs	r0, #0
 801190e:	e7e9      	b.n	80118e4 <uxr_read_session_header+0x48>
 8011910:	2001      	movs	r0, #1
 8011912:	e7cf      	b.n	80118b4 <uxr_read_session_header+0x18>

08011914 <uxr_session_header_offset>:
 8011914:	f990 3000 	ldrsb.w	r3, [r0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	bfb4      	ite	lt
 801191c:	2004      	movlt	r0, #4
 801191e:	2008      	movge	r0, #8
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop

08011924 <uxr_init_base_object_request>:
 8011924:	b510      	push	{r4, lr}
 8011926:	88c3      	ldrh	r3, [r0, #6]
 8011928:	b082      	sub	sp, #8
 801192a:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801192e:	9101      	str	r1, [sp, #4]
 8011930:	f1a3 010a 	sub.w	r1, r3, #10
 8011934:	b289      	uxth	r1, r1
 8011936:	42a1      	cmp	r1, r4
 8011938:	d80f      	bhi.n	801195a <uxr_init_base_object_request+0x36>
 801193a:	3301      	adds	r3, #1
 801193c:	b29c      	uxth	r4, r3
 801193e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011942:	b2db      	uxtb	r3, r3
 8011944:	80c4      	strh	r4, [r0, #6]
 8011946:	1c91      	adds	r1, r2, #2
 8011948:	9801      	ldr	r0, [sp, #4]
 801194a:	f882 c000 	strb.w	ip, [r2]
 801194e:	7053      	strb	r3, [r2, #1]
 8011950:	f7fe ff9a 	bl	8010888 <uxr_object_id_to_raw>
 8011954:	4620      	mov	r0, r4
 8011956:	b002      	add	sp, #8
 8011958:	bd10      	pop	{r4, pc}
 801195a:	230a      	movs	r3, #10
 801195c:	f04f 0c00 	mov.w	ip, #0
 8011960:	461c      	mov	r4, r3
 8011962:	e7ef      	b.n	8011944 <uxr_init_base_object_request+0x20>

08011964 <uxr_parse_base_object_request>:
 8011964:	b570      	push	{r4, r5, r6, lr}
 8011966:	4604      	mov	r4, r0
 8011968:	3002      	adds	r0, #2
 801196a:	460d      	mov	r5, r1
 801196c:	4616      	mov	r6, r2
 801196e:	f7fe ff77 	bl	8010860 <uxr_object_id_from_raw>
 8011972:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011976:	8028      	strh	r0, [r5, #0]
 8011978:	806b      	strh	r3, [r5, #2]
 801197a:	8823      	ldrh	r3, [r4, #0]
 801197c:	ba5b      	rev16	r3, r3
 801197e:	8033      	strh	r3, [r6, #0]
 8011980:	bd70      	pop	{r4, r5, r6, pc}
 8011982:	bf00      	nop

08011984 <uxr_stream_id>:
 8011984:	2901      	cmp	r1, #1
 8011986:	b082      	sub	sp, #8
 8011988:	4603      	mov	r3, r0
 801198a:	d011      	beq.n	80119b0 <uxr_stream_id+0x2c>
 801198c:	2902      	cmp	r1, #2
 801198e:	f04f 0c00 	mov.w	ip, #0
 8011992:	d00a      	beq.n	80119aa <uxr_stream_id+0x26>
 8011994:	2000      	movs	r0, #0
 8011996:	f36c 0007 	bfi	r0, ip, #0, #8
 801199a:	f363 200f 	bfi	r0, r3, #8, #8
 801199e:	f361 4017 	bfi	r0, r1, #16, #8
 80119a2:	f362 601f 	bfi	r0, r2, #24, #8
 80119a6:	b002      	add	sp, #8
 80119a8:	4770      	bx	lr
 80119aa:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80119ae:	e7f1      	b.n	8011994 <uxr_stream_id+0x10>
 80119b0:	f100 0c01 	add.w	ip, r0, #1
 80119b4:	fa5f fc8c 	uxtb.w	ip, ip
 80119b8:	e7ec      	b.n	8011994 <uxr_stream_id+0x10>
 80119ba:	bf00      	nop

080119bc <uxr_stream_id_from_raw>:
 80119bc:	b082      	sub	sp, #8
 80119be:	4603      	mov	r3, r0
 80119c0:	b130      	cbz	r0, 80119d0 <uxr_stream_id_from_raw+0x14>
 80119c2:	0602      	lsls	r2, r0, #24
 80119c4:	d411      	bmi.n	80119ea <uxr_stream_id_from_raw+0x2e>
 80119c6:	1e42      	subs	r2, r0, #1
 80119c8:	f04f 0c01 	mov.w	ip, #1
 80119cc:	b2d2      	uxtb	r2, r2
 80119ce:	e001      	b.n	80119d4 <uxr_stream_id_from_raw+0x18>
 80119d0:	4684      	mov	ip, r0
 80119d2:	4602      	mov	r2, r0
 80119d4:	2000      	movs	r0, #0
 80119d6:	f363 0007 	bfi	r0, r3, #0, #8
 80119da:	f362 200f 	bfi	r0, r2, #8, #8
 80119de:	f36c 4017 	bfi	r0, ip, #16, #8
 80119e2:	f361 601f 	bfi	r0, r1, #24, #8
 80119e6:	b002      	add	sp, #8
 80119e8:	4770      	bx	lr
 80119ea:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80119ee:	f04f 0c02 	mov.w	ip, #2
 80119f2:	e7ef      	b.n	80119d4 <uxr_stream_id_from_raw+0x18>

080119f4 <uxr_init_stream_storage>:
 80119f4:	2300      	movs	r3, #0
 80119f6:	7403      	strb	r3, [r0, #16]
 80119f8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80119fc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011a00:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop

08011a08 <uxr_reset_stream_storage>:
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	7c03      	ldrb	r3, [r0, #16]
 8011a0c:	4604      	mov	r4, r0
 8011a0e:	b14b      	cbz	r3, 8011a24 <uxr_reset_stream_storage+0x1c>
 8011a10:	4606      	mov	r6, r0
 8011a12:	2500      	movs	r5, #0
 8011a14:	4630      	mov	r0, r6
 8011a16:	3501      	adds	r5, #1
 8011a18:	f006 fc42 	bl	80182a0 <uxr_reset_output_best_effort_stream>
 8011a1c:	7c23      	ldrb	r3, [r4, #16]
 8011a1e:	3610      	adds	r6, #16
 8011a20:	42ab      	cmp	r3, r5
 8011a22:	d8f7      	bhi.n	8011a14 <uxr_reset_stream_storage+0xc>
 8011a24:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011a28:	b15b      	cbz	r3, 8011a42 <uxr_reset_stream_storage+0x3a>
 8011a2a:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a2e:	2500      	movs	r5, #0
 8011a30:	4630      	mov	r0, r6
 8011a32:	3501      	adds	r5, #1
 8011a34:	f006 fa4c 	bl	8017ed0 <uxr_reset_input_best_effort_stream>
 8011a38:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011a3c:	3602      	adds	r6, #2
 8011a3e:	42ab      	cmp	r3, r5
 8011a40:	d8f6      	bhi.n	8011a30 <uxr_reset_stream_storage+0x28>
 8011a42:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011a46:	b15b      	cbz	r3, 8011a60 <uxr_reset_stream_storage+0x58>
 8011a48:	f104 0618 	add.w	r6, r4, #24
 8011a4c:	2500      	movs	r5, #0
 8011a4e:	4630      	mov	r0, r6
 8011a50:	3501      	adds	r5, #1
 8011a52:	f006 fcd1 	bl	80183f8 <uxr_reset_output_reliable_stream>
 8011a56:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011a5a:	3628      	adds	r6, #40	@ 0x28
 8011a5c:	42ab      	cmp	r3, r5
 8011a5e:	d8f6      	bhi.n	8011a4e <uxr_reset_stream_storage+0x46>
 8011a60:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011a64:	b15b      	cbz	r3, 8011a7e <uxr_reset_stream_storage+0x76>
 8011a66:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011a6a:	2500      	movs	r5, #0
 8011a6c:	4630      	mov	r0, r6
 8011a6e:	3501      	adds	r5, #1
 8011a70:	f006 fa96 	bl	8017fa0 <uxr_reset_input_reliable_stream>
 8011a74:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011a78:	3618      	adds	r6, #24
 8011a7a:	42ab      	cmp	r3, r5
 8011a7c:	d8f6      	bhi.n	8011a6c <uxr_reset_stream_storage+0x64>
 8011a7e:	bd70      	pop	{r4, r5, r6, pc}

08011a80 <uxr_add_output_best_effort_buffer>:
 8011a80:	b510      	push	{r4, lr}
 8011a82:	7c04      	ldrb	r4, [r0, #16]
 8011a84:	b082      	sub	sp, #8
 8011a86:	f104 0c01 	add.w	ip, r4, #1
 8011a8a:	f880 c010 	strb.w	ip, [r0, #16]
 8011a8e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011a92:	f006 fbfb 	bl	801828c <uxr_init_output_best_effort_stream>
 8011a96:	2201      	movs	r2, #1
 8011a98:	4620      	mov	r0, r4
 8011a9a:	4611      	mov	r1, r2
 8011a9c:	b002      	add	sp, #8
 8011a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aa2:	f7ff bf6f 	b.w	8011984 <uxr_stream_id>
 8011aa6:	bf00      	nop

08011aa8 <uxr_add_output_reliable_buffer>:
 8011aa8:	b510      	push	{r4, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	4684      	mov	ip, r0
 8011aae:	2028      	movs	r0, #40	@ 0x28
 8011ab0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8011ab4:	9400      	str	r4, [sp, #0]
 8011ab6:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011aba:	fb00 c004 	mla	r0, r0, r4, ip
 8011abe:	f104 0e01 	add.w	lr, r4, #1
 8011ac2:	3018      	adds	r0, #24
 8011ac4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011ac8:	f006 fc5e 	bl	8018388 <uxr_init_output_reliable_stream>
 8011acc:	2201      	movs	r2, #1
 8011ace:	2102      	movs	r1, #2
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	b004      	add	sp, #16
 8011ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ad8:	f7ff bf54 	b.w	8011984 <uxr_stream_id>

08011adc <uxr_add_input_best_effort_buffer>:
 8011adc:	b510      	push	{r4, lr}
 8011ade:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	1c62      	adds	r2, r4, #1
 8011ae6:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8011aea:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011aee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011af2:	f006 f9e9 	bl	8017ec8 <uxr_init_input_best_effort_stream>
 8011af6:	2200      	movs	r2, #0
 8011af8:	2101      	movs	r1, #1
 8011afa:	4620      	mov	r0, r4
 8011afc:	b002      	add	sp, #8
 8011afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b02:	f7ff bf3f 	b.w	8011984 <uxr_stream_id>
 8011b06:	bf00      	nop

08011b08 <uxr_add_input_reliable_buffer>:
 8011b08:	b510      	push	{r4, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	4684      	mov	ip, r0
 8011b0e:	2018      	movs	r0, #24
 8011b10:	9c06      	ldr	r4, [sp, #24]
 8011b12:	9400      	str	r4, [sp, #0]
 8011b14:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011b18:	fb00 c004 	mla	r0, r0, r4, ip
 8011b1c:	f104 0e01 	add.w	lr, r4, #1
 8011b20:	3048      	adds	r0, #72	@ 0x48
 8011b22:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011b26:	f006 fa15 	bl	8017f54 <uxr_init_input_reliable_stream>
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	2102      	movs	r1, #2
 8011b2e:	4620      	mov	r0, r4
 8011b30:	b004      	add	sp, #16
 8011b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b36:	f7ff bf25 	b.w	8011984 <uxr_stream_id>
 8011b3a:	bf00      	nop

08011b3c <uxr_get_output_best_effort_stream>:
 8011b3c:	7c03      	ldrb	r3, [r0, #16]
 8011b3e:	428b      	cmp	r3, r1
 8011b40:	bf8c      	ite	hi
 8011b42:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011b46:	2000      	movls	r0, #0
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop

08011b4c <uxr_get_output_reliable_stream>:
 8011b4c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011b50:	428b      	cmp	r3, r1
 8011b52:	d904      	bls.n	8011b5e <uxr_get_output_reliable_stream+0x12>
 8011b54:	2328      	movs	r3, #40	@ 0x28
 8011b56:	fb03 0001 	mla	r0, r3, r1, r0
 8011b5a:	3018      	adds	r0, #24
 8011b5c:	4770      	bx	lr
 8011b5e:	2000      	movs	r0, #0
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop

08011b64 <uxr_get_input_best_effort_stream>:
 8011b64:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011b68:	428b      	cmp	r3, r1
 8011b6a:	d903      	bls.n	8011b74 <uxr_get_input_best_effort_stream+0x10>
 8011b6c:	3121      	adds	r1, #33	@ 0x21
 8011b6e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011b72:	4770      	bx	lr
 8011b74:	2000      	movs	r0, #0
 8011b76:	4770      	bx	lr

08011b78 <uxr_get_input_reliable_stream>:
 8011b78:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011b7c:	428b      	cmp	r3, r1
 8011b7e:	d904      	bls.n	8011b8a <uxr_get_input_reliable_stream+0x12>
 8011b80:	2318      	movs	r3, #24
 8011b82:	fb03 0001 	mla	r0, r3, r1, r0
 8011b86:	3048      	adds	r0, #72	@ 0x48
 8011b88:	4770      	bx	lr
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop

08011b90 <uxr_output_streams_confirmed>:
 8011b90:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011b94:	b183      	cbz	r3, 8011bb8 <uxr_output_streams_confirmed+0x28>
 8011b96:	b570      	push	{r4, r5, r6, lr}
 8011b98:	4606      	mov	r6, r0
 8011b9a:	f100 0518 	add.w	r5, r0, #24
 8011b9e:	2400      	movs	r4, #0
 8011ba0:	e000      	b.n	8011ba4 <uxr_output_streams_confirmed+0x14>
 8011ba2:	b140      	cbz	r0, 8011bb6 <uxr_output_streams_confirmed+0x26>
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	3401      	adds	r4, #1
 8011ba8:	f006 fe96 	bl	80188d8 <uxr_is_output_up_to_date>
 8011bac:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011bb0:	3528      	adds	r5, #40	@ 0x28
 8011bb2:	42a3      	cmp	r3, r4
 8011bb4:	d8f5      	bhi.n	8011ba2 <uxr_output_streams_confirmed+0x12>
 8011bb6:	bd70      	pop	{r4, r5, r6, pc}
 8011bb8:	2001      	movs	r0, #1
 8011bba:	4770      	bx	lr

08011bbc <uxr_buffer_submessage_header>:
 8011bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bbe:	460e      	mov	r6, r1
 8011bc0:	2104      	movs	r1, #4
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	4615      	mov	r5, r2
 8011bc6:	461f      	mov	r7, r3
 8011bc8:	f7fe fc46 	bl	8010458 <ucdr_align_to>
 8011bcc:	2301      	movs	r3, #1
 8011bce:	4631      	mov	r1, r6
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	ea47 0203 	orr.w	r2, r7, r3
 8011bd6:	7523      	strb	r3, [r4, #20]
 8011bd8:	462b      	mov	r3, r5
 8011bda:	f000 fa2d 	bl	8012038 <uxr_serialize_submessage_header>
 8011bde:	4620      	mov	r0, r4
 8011be0:	f7fe fc50 	bl	8010484 <ucdr_buffer_remaining>
 8011be4:	42a8      	cmp	r0, r5
 8011be6:	bf34      	ite	cc
 8011be8:	2000      	movcc	r0, #0
 8011bea:	2001      	movcs	r0, #1
 8011bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bee:	bf00      	nop

08011bf0 <uxr_read_submessage_header>:
 8011bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	460d      	mov	r5, r1
 8011bf8:	2104      	movs	r1, #4
 8011bfa:	4616      	mov	r6, r2
 8011bfc:	4698      	mov	r8, r3
 8011bfe:	f7fe fc2b 	bl	8010458 <ucdr_align_to>
 8011c02:	4620      	mov	r0, r4
 8011c04:	f7fe fc3e 	bl	8010484 <ucdr_buffer_remaining>
 8011c08:	2803      	cmp	r0, #3
 8011c0a:	bf8c      	ite	hi
 8011c0c:	2701      	movhi	r7, #1
 8011c0e:	2700      	movls	r7, #0
 8011c10:	d802      	bhi.n	8011c18 <uxr_read_submessage_header+0x28>
 8011c12:	4638      	mov	r0, r7
 8011c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c18:	4633      	mov	r3, r6
 8011c1a:	4642      	mov	r2, r8
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	4629      	mov	r1, r5
 8011c20:	f000 fa1c 	bl	801205c <uxr_deserialize_submessage_header>
 8011c24:	f898 3000 	ldrb.w	r3, [r8]
 8011c28:	4638      	mov	r0, r7
 8011c2a:	f003 0201 	and.w	r2, r3, #1
 8011c2e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011c32:	f888 3000 	strb.w	r3, [r8]
 8011c36:	7522      	strb	r2, [r4, #20]
 8011c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c3c <uxr_submessage_padding>:
 8011c3c:	f010 0003 	ands.w	r0, r0, #3
 8011c40:	bf18      	it	ne
 8011c42:	f1c0 0004 	rsbne	r0, r0, #4
 8011c46:	4770      	bx	lr

08011c48 <uxr_millis>:
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	2001      	movs	r0, #1
 8011c4e:	4669      	mov	r1, sp
 8011c50:	f7ef fd6e 	bl	8001730 <clock_gettime>
 8011c54:	4b08      	ldr	r3, [pc, #32]	@ (8011c78 <uxr_millis+0x30>)
 8011c56:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011c5a:	fba0 0103 	umull	r0, r1, r0, r3
 8011c5e:	1900      	adds	r0, r0, r4
 8011c60:	fb03 1102 	mla	r1, r3, r2, r1
 8011c64:	4a05      	ldr	r2, [pc, #20]	@ (8011c7c <uxr_millis+0x34>)
 8011c66:	f04f 0300 	mov.w	r3, #0
 8011c6a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011c6e:	f7ee fba7 	bl	80003c0 <__aeabi_ldivmod>
 8011c72:	b004      	add	sp, #16
 8011c74:	bd10      	pop	{r4, pc}
 8011c76:	bf00      	nop
 8011c78:	3b9aca00 	.word	0x3b9aca00
 8011c7c:	000f4240 	.word	0x000f4240

08011c80 <uxr_nanos>:
 8011c80:	b510      	push	{r4, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	2001      	movs	r0, #1
 8011c86:	4669      	mov	r1, sp
 8011c88:	f7ef fd52 	bl	8001730 <clock_gettime>
 8011c8c:	4a06      	ldr	r2, [pc, #24]	@ (8011ca8 <uxr_nanos+0x28>)
 8011c8e:	9800      	ldr	r0, [sp, #0]
 8011c90:	9902      	ldr	r1, [sp, #8]
 8011c92:	fba0 0302 	umull	r0, r3, r0, r2
 8011c96:	9c01      	ldr	r4, [sp, #4]
 8011c98:	1840      	adds	r0, r0, r1
 8011c9a:	fb02 3304 	mla	r3, r2, r4, r3
 8011c9e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011ca2:	b004      	add	sp, #16
 8011ca4:	bd10      	pop	{r4, pc}
 8011ca6:	bf00      	nop
 8011ca8:	3b9aca00 	.word	0x3b9aca00

08011cac <on_full_output_buffer_fragmented>:
 8011cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb0:	460c      	mov	r4, r1
 8011cb2:	b08a      	sub	sp, #40	@ 0x28
 8011cb4:	4606      	mov	r6, r0
 8011cb6:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011cba:	f104 0008 	add.w	r0, r4, #8
 8011cbe:	f7ff ff45 	bl	8011b4c <uxr_get_output_reliable_stream>
 8011cc2:	4605      	mov	r5, r0
 8011cc4:	f006 fe12 	bl	80188ec <get_available_free_slots>
 8011cc8:	b968      	cbnz	r0, 8011ce6 <on_full_output_buffer_fragmented+0x3a>
 8011cca:	4620      	mov	r0, r4
 8011ccc:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011cd0:	4798      	blx	r3
 8011cd2:	b918      	cbnz	r0, 8011cdc <on_full_output_buffer_fragmented+0x30>
 8011cd4:	2001      	movs	r0, #1
 8011cd6:	b00a      	add	sp, #40	@ 0x28
 8011cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cdc:	4628      	mov	r0, r5
 8011cde:	f006 fe05 	bl	80188ec <get_available_free_slots>
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	d0f6      	beq.n	8011cd4 <on_full_output_buffer_fragmented+0x28>
 8011ce6:	8929      	ldrh	r1, [r5, #8]
 8011ce8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8011cec:	89eb      	ldrh	r3, [r5, #14]
 8011cee:	7b28      	ldrb	r0, [r5, #12]
 8011cf0:	686f      	ldr	r7, [r5, #4]
 8011cf2:	1a12      	subs	r2, r2, r0
 8011cf4:	fbb3 f0f1 	udiv	r0, r3, r1
 8011cf8:	fbb7 f7f1 	udiv	r7, r7, r1
 8011cfc:	fb01 3310 	mls	r3, r1, r0, r3
 8011d00:	6829      	ldr	r1, [r5, #0]
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	fb07 f303 	mul.w	r3, r7, r3
 8011d08:	3f04      	subs	r7, #4
 8011d0a:	443a      	add	r2, r7
 8011d0c:	3304      	adds	r3, #4
 8011d0e:	fa1f f882 	uxth.w	r8, r2
 8011d12:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011d16:	4419      	add	r1, r3
 8011d18:	2300      	movs	r3, #0
 8011d1a:	eba2 0208 	sub.w	r2, r2, r8
 8011d1e:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8011d22:	463a      	mov	r2, r7
 8011d24:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8011d28:	9000      	str	r0, [sp, #0]
 8011d2a:	a802      	add	r0, sp, #8
 8011d2c:	f7fe fb66 	bl	80103fc <ucdr_init_buffer_origin_offset>
 8011d30:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011d34:	f102 0308 	add.w	r3, r2, #8
 8011d38:	42bb      	cmp	r3, r7
 8011d3a:	d927      	bls.n	8011d8c <on_full_output_buffer_fragmented+0xe0>
 8011d3c:	4642      	mov	r2, r8
 8011d3e:	2300      	movs	r3, #0
 8011d40:	210d      	movs	r1, #13
 8011d42:	a802      	add	r0, sp, #8
 8011d44:	f7ff ff3a 	bl	8011bbc <uxr_buffer_submessage_header>
 8011d48:	8929      	ldrh	r1, [r5, #8]
 8011d4a:	89eb      	ldrh	r3, [r5, #14]
 8011d4c:	686a      	ldr	r2, [r5, #4]
 8011d4e:	fbb3 f0f1 	udiv	r0, r3, r1
 8011d52:	fbb2 f2f1 	udiv	r2, r2, r1
 8011d56:	fb01 3310 	mls	r3, r1, r0, r3
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	fb02 f303 	mul.w	r3, r2, r3
 8011d60:	682a      	ldr	r2, [r5, #0]
 8011d62:	50d7      	str	r7, [r2, r3]
 8011d64:	2101      	movs	r1, #1
 8011d66:	89e8      	ldrh	r0, [r5, #14]
 8011d68:	f006 fedc 	bl	8018b24 <uxr_seq_num_add>
 8011d6c:	9904      	ldr	r1, [sp, #16]
 8011d6e:	9a03      	ldr	r2, [sp, #12]
 8011d70:	81e8      	strh	r0, [r5, #14]
 8011d72:	4630      	mov	r0, r6
 8011d74:	1a52      	subs	r2, r2, r1
 8011d76:	f7fe fb53 	bl	8010420 <ucdr_init_buffer>
 8011d7a:	4630      	mov	r0, r6
 8011d7c:	4622      	mov	r2, r4
 8011d7e:	4910      	ldr	r1, [pc, #64]	@ (8011dc0 <on_full_output_buffer_fragmented+0x114>)
 8011d80:	f7fe fb22 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 8011d84:	2000      	movs	r0, #0
 8011d86:	b00a      	add	sp, #40	@ 0x28
 8011d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d8c:	b292      	uxth	r2, r2
 8011d8e:	2302      	movs	r3, #2
 8011d90:	210d      	movs	r1, #13
 8011d92:	a802      	add	r0, sp, #8
 8011d94:	f7ff ff12 	bl	8011bbc <uxr_buffer_submessage_header>
 8011d98:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011d9c:	8928      	ldrh	r0, [r5, #8]
 8011d9e:	f103 0208 	add.w	r2, r3, #8
 8011da2:	89eb      	ldrh	r3, [r5, #14]
 8011da4:	6869      	ldr	r1, [r5, #4]
 8011da6:	fbb3 f7f0 	udiv	r7, r3, r0
 8011daa:	fbb1 f1f0 	udiv	r1, r1, r0
 8011dae:	fb00 3317 	mls	r3, r0, r7, r3
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	fb01 f303 	mul.w	r3, r1, r3
 8011db8:	6829      	ldr	r1, [r5, #0]
 8011dba:	50ca      	str	r2, [r1, r3]
 8011dbc:	e7d2      	b.n	8011d64 <on_full_output_buffer_fragmented+0xb8>
 8011dbe:	bf00      	nop
 8011dc0:	08011cad 	.word	0x08011cad

08011dc4 <uxr_prepare_output_stream>:
 8011dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dc6:	b087      	sub	sp, #28
 8011dc8:	2707      	movs	r7, #7
 8011dca:	2500      	movs	r5, #0
 8011dcc:	461c      	mov	r4, r3
 8011dce:	9202      	str	r2, [sp, #8]
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011dd4:	e9cd 7500 	strd	r7, r5, [sp]
 8011dd8:	3204      	adds	r2, #4
 8011dda:	f7ff fc6b 	bl	80116b4 <uxr_prepare_stream_to_write_submessage>
 8011dde:	f080 0201 	eor.w	r2, r0, #1
 8011de2:	b2d2      	uxtb	r2, r2
 8011de4:	75a2      	strb	r2, [r4, #22]
 8011de6:	b112      	cbz	r2, 8011dee <uxr_prepare_output_stream+0x2a>
 8011de8:	4628      	mov	r0, r5
 8011dea:	b007      	add	sp, #28
 8011dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dee:	aa05      	add	r2, sp, #20
 8011df0:	9902      	ldr	r1, [sp, #8]
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ff fd96 	bl	8011924 <uxr_init_base_object_request>
 8011df8:	a905      	add	r1, sp, #20
 8011dfa:	4605      	mov	r5, r0
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f000 ff79 	bl	8012cf4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011e02:	69a6      	ldr	r6, [r4, #24]
 8011e04:	69e7      	ldr	r7, [r4, #28]
 8011e06:	4620      	mov	r0, r4
 8011e08:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011e0c:	1a52      	subs	r2, r2, r1
 8011e0e:	f7fe fb07 	bl	8010420 <ucdr_init_buffer>
 8011e12:	4620      	mov	r0, r4
 8011e14:	463a      	mov	r2, r7
 8011e16:	4631      	mov	r1, r6
 8011e18:	f7fe fad6 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	b007      	add	sp, #28
 8011e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e22:	bf00      	nop

08011e24 <uxr_prepare_output_stream_fragmented>:
 8011e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e28:	b093      	sub	sp, #76	@ 0x4c
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	3008      	adds	r0, #8
 8011e2e:	9107      	str	r1, [sp, #28]
 8011e30:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011e34:	9303      	str	r3, [sp, #12]
 8011e36:	9206      	str	r2, [sp, #24]
 8011e38:	f7ff fe88 	bl	8011b4c <uxr_get_output_reliable_stream>
 8011e3c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	f000 8095 	beq.w	8011f70 <uxr_prepare_output_stream_fragmented+0x14c>
 8011e46:	4604      	mov	r4, r0
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	f000 8091 	beq.w	8011f70 <uxr_prepare_output_stream_fragmented+0x14c>
 8011e4e:	f006 fd4d 	bl	80188ec <get_available_free_slots>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	f000 8087 	beq.w	8011f66 <uxr_prepare_output_stream_fragmented+0x142>
 8011e58:	8922      	ldrh	r2, [r4, #8]
 8011e5a:	89e7      	ldrh	r7, [r4, #14]
 8011e5c:	6863      	ldr	r3, [r4, #4]
 8011e5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e62:	fbb7 f3f2 	udiv	r3, r7, r2
 8011e66:	fb02 7313 	mls	r3, r2, r3, r7
 8011e6a:	6822      	ldr	r2, [r4, #0]
 8011e6c:	f1a1 0b04 	sub.w	fp, r1, #4
 8011e70:	9105      	str	r1, [sp, #20]
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	fb01 f303 	mul.w	r3, r1, r3
 8011e78:	3304      	adds	r3, #4
 8011e7a:	eb02 0903 	add.w	r9, r2, r3
 8011e7e:	7b23      	ldrb	r3, [r4, #12]
 8011e80:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011e84:	4543      	cmp	r3, r8
 8011e86:	d37f      	bcc.n	8011f88 <uxr_prepare_output_stream_fragmented+0x164>
 8011e88:	f1ab 0a04 	sub.w	sl, fp, #4
 8011e8c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011e8e:	465a      	mov	r2, fp
 8011e90:	4649      	mov	r1, r9
 8011e92:	ebaa 0a03 	sub.w	sl, sl, r3
 8011e96:	a80a      	add	r0, sp, #40	@ 0x28
 8011e98:	f8cd 8000 	str.w	r8, [sp]
 8011e9c:	fa1f f38a 	uxth.w	r3, sl
 8011ea0:	f106 0a08 	add.w	sl, r6, #8
 8011ea4:	9304      	str	r3, [sp, #16]
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	f7fe faa8 	bl	80103fc <ucdr_init_buffer_origin_offset>
 8011eac:	45da      	cmp	sl, fp
 8011eae:	9a04      	ldr	r2, [sp, #16]
 8011eb0:	f04f 010d 	mov.w	r1, #13
 8011eb4:	bf2c      	ite	cs
 8011eb6:	2300      	movcs	r3, #0
 8011eb8:	2301      	movcc	r3, #1
 8011eba:	a80a      	add	r0, sp, #40	@ 0x28
 8011ebc:	005b      	lsls	r3, r3, #1
 8011ebe:	f7ff fe7d 	bl	8011bbc <uxr_buffer_submessage_header>
 8011ec2:	8921      	ldrh	r1, [r4, #8]
 8011ec4:	6863      	ldr	r3, [r4, #4]
 8011ec6:	4638      	mov	r0, r7
 8011ec8:	fbb7 f2f1 	udiv	r2, r7, r1
 8011ecc:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ed0:	fb01 7212 	mls	r2, r1, r2, r7
 8011ed4:	2101      	movs	r1, #1
 8011ed6:	b292      	uxth	r2, r2
 8011ed8:	fb02 f303 	mul.w	r3, r2, r3
 8011edc:	6822      	ldr	r2, [r4, #0]
 8011ede:	f842 b003 	str.w	fp, [r2, r3]
 8011ee2:	f006 fe1f 	bl	8018b24 <uxr_seq_num_add>
 8011ee6:	9b05      	ldr	r3, [sp, #20]
 8011ee8:	9e03      	ldr	r6, [sp, #12]
 8011eea:	f108 0104 	add.w	r1, r8, #4
 8011eee:	f1a3 0208 	sub.w	r2, r3, #8
 8011ef2:	4607      	mov	r7, r0
 8011ef4:	4449      	add	r1, r9
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	eba2 0208 	sub.w	r2, r2, r8
 8011efc:	f7fe fa90 	bl	8010420 <ucdr_init_buffer>
 8011f00:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011f02:	2107      	movs	r1, #7
 8011f04:	81e7      	strh	r7, [r4, #14]
 8011f06:	1d1a      	adds	r2, r3, #4
 8011f08:	2300      	movs	r3, #0
 8011f0a:	4630      	mov	r0, r6
 8011f0c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011f10:	bf28      	it	cs
 8011f12:	461a      	movcs	r2, r3
 8011f14:	b292      	uxth	r2, r2
 8011f16:	f7ff fe51 	bl	8011bbc <uxr_buffer_submessage_header>
 8011f1a:	aa09      	add	r2, sp, #36	@ 0x24
 8011f1c:	9906      	ldr	r1, [sp, #24]
 8011f1e:	4628      	mov	r0, r5
 8011f20:	f7ff fd00 	bl	8011924 <uxr_init_base_object_request>
 8011f24:	4604      	mov	r4, r0
 8011f26:	b320      	cbz	r0, 8011f72 <uxr_prepare_output_stream_fragmented+0x14e>
 8011f28:	9e03      	ldr	r6, [sp, #12]
 8011f2a:	a909      	add	r1, sp, #36	@ 0x24
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	f000 fee1 	bl	8012cf4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011f32:	4630      	mov	r0, r6
 8011f34:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011f38:	1a52      	subs	r2, r2, r1
 8011f3a:	f7fe fa71 	bl	8010420 <ucdr_init_buffer>
 8011f3e:	9b07      	ldr	r3, [sp, #28]
 8011f40:	4630      	mov	r0, r6
 8011f42:	462a      	mov	r2, r5
 8011f44:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8011f48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011f4a:	491b      	ldr	r1, [pc, #108]	@ (8011fb8 <uxr_prepare_output_stream_fragmented+0x194>)
 8011f4c:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8011f50:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011f52:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8011f56:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011f5a:	f7fe fa35 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 8011f5e:	4620      	mov	r0, r4
 8011f60:	b013      	add	sp, #76	@ 0x4c
 8011f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f66:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8011f68:	4628      	mov	r0, r5
 8011f6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011f6c:	4798      	blx	r3
 8011f6e:	b920      	cbnz	r0, 8011f7a <uxr_prepare_output_stream_fragmented+0x156>
 8011f70:	2400      	movs	r4, #0
 8011f72:	4620      	mov	r0, r4
 8011f74:	b013      	add	sp, #76	@ 0x4c
 8011f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f7a:	4620      	mov	r0, r4
 8011f7c:	f006 fcb6 	bl	80188ec <get_available_free_slots>
 8011f80:	2800      	cmp	r0, #0
 8011f82:	f47f af69 	bne.w	8011e58 <uxr_prepare_output_stream_fragmented+0x34>
 8011f86:	e7f3      	b.n	8011f70 <uxr_prepare_output_stream_fragmented+0x14c>
 8011f88:	4638      	mov	r0, r7
 8011f8a:	2101      	movs	r1, #1
 8011f8c:	f006 fdca 	bl	8018b24 <uxr_seq_num_add>
 8011f90:	8921      	ldrh	r1, [r4, #8]
 8011f92:	6863      	ldr	r3, [r4, #4]
 8011f94:	4607      	mov	r7, r0
 8011f96:	fbb0 f2f1 	udiv	r2, r0, r1
 8011f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f9e:	fb01 0212 	mls	r2, r1, r2, r0
 8011fa2:	b292      	uxth	r2, r2
 8011fa4:	fb02 f303 	mul.w	r3, r2, r3
 8011fa8:	6822      	ldr	r2, [r4, #0]
 8011faa:	3304      	adds	r3, #4
 8011fac:	eb02 0903 	add.w	r9, r2, r3
 8011fb0:	7b23      	ldrb	r3, [r4, #12]
 8011fb2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011fb6:	e767      	b.n	8011e88 <uxr_prepare_output_stream_fragmented+0x64>
 8011fb8:	08011cad 	.word	0x08011cad

08011fbc <uxr_serialize_message_header>:
 8011fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc0:	4617      	mov	r7, r2
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	461e      	mov	r6, r3
 8011fc6:	460d      	mov	r5, r1
 8011fc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011fcc:	f7fd fa6c 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8011fd0:	4639      	mov	r1, r7
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	f7fd fa68 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8011fd8:	4632      	mov	r2, r6
 8011fda:	2101      	movs	r1, #1
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f7fd fb19 	bl	800f614 <ucdr_serialize_endian_uint16_t>
 8011fe2:	062b      	lsls	r3, r5, #24
 8011fe4:	d501      	bpl.n	8011fea <uxr_serialize_message_header+0x2e>
 8011fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fea:	4641      	mov	r1, r8
 8011fec:	4620      	mov	r0, r4
 8011fee:	2204      	movs	r2, #4
 8011ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff4:	f005 bdc6 	b.w	8017b84 <ucdr_serialize_array_uint8_t>

08011ff8 <uxr_deserialize_message_header>:
 8011ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffc:	4617      	mov	r7, r2
 8011ffe:	4604      	mov	r4, r0
 8012000:	461e      	mov	r6, r3
 8012002:	460d      	mov	r5, r1
 8012004:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012008:	f7fd fa64 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 801200c:	4639      	mov	r1, r7
 801200e:	4620      	mov	r0, r4
 8012010:	f7fd fa60 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012014:	4632      	mov	r2, r6
 8012016:	2101      	movs	r1, #1
 8012018:	4620      	mov	r0, r4
 801201a:	f7fd fbf1 	bl	800f800 <ucdr_deserialize_endian_uint16_t>
 801201e:	f995 3000 	ldrsb.w	r3, [r5]
 8012022:	2b00      	cmp	r3, #0
 8012024:	da01      	bge.n	801202a <uxr_deserialize_message_header+0x32>
 8012026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801202a:	4641      	mov	r1, r8
 801202c:	4620      	mov	r0, r4
 801202e:	2204      	movs	r2, #4
 8012030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012034:	f005 be0a 	b.w	8017c4c <ucdr_deserialize_array_uint8_t>

08012038 <uxr_serialize_submessage_header>:
 8012038:	b570      	push	{r4, r5, r6, lr}
 801203a:	4616      	mov	r6, r2
 801203c:	4604      	mov	r4, r0
 801203e:	461d      	mov	r5, r3
 8012040:	f7fd fa32 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012044:	4631      	mov	r1, r6
 8012046:	4620      	mov	r0, r4
 8012048:	f7fd fa2e 	bl	800f4a8 <ucdr_serialize_uint8_t>
 801204c:	462a      	mov	r2, r5
 801204e:	4620      	mov	r0, r4
 8012050:	2101      	movs	r1, #1
 8012052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012056:	f7fd badd 	b.w	800f614 <ucdr_serialize_endian_uint16_t>
 801205a:	bf00      	nop

0801205c <uxr_deserialize_submessage_header>:
 801205c:	b570      	push	{r4, r5, r6, lr}
 801205e:	4616      	mov	r6, r2
 8012060:	4604      	mov	r4, r0
 8012062:	461d      	mov	r5, r3
 8012064:	f7fd fa36 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012068:	4631      	mov	r1, r6
 801206a:	4620      	mov	r0, r4
 801206c:	f7fd fa32 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012070:	462a      	mov	r2, r5
 8012072:	4620      	mov	r0, r4
 8012074:	2101      	movs	r1, #1
 8012076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801207a:	f7fd bbc1 	b.w	800f800 <ucdr_deserialize_endian_uint16_t>
 801207e:	bf00      	nop

08012080 <uxr_serialize_CLIENT_Representation>:
 8012080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012084:	2204      	movs	r2, #4
 8012086:	460e      	mov	r6, r1
 8012088:	4605      	mov	r5, r0
 801208a:	f005 fd7b 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 801208e:	4604      	mov	r4, r0
 8012090:	2202      	movs	r2, #2
 8012092:	1d31      	adds	r1, r6, #4
 8012094:	4628      	mov	r0, r5
 8012096:	f005 fd75 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 801209a:	4004      	ands	r4, r0
 801209c:	2202      	movs	r2, #2
 801209e:	1db1      	adds	r1, r6, #6
 80120a0:	b2e4      	uxtb	r4, r4
 80120a2:	4628      	mov	r0, r5
 80120a4:	f005 fd6e 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 80120a8:	2204      	movs	r2, #4
 80120aa:	4004      	ands	r4, r0
 80120ac:	f106 0108 	add.w	r1, r6, #8
 80120b0:	4628      	mov	r0, r5
 80120b2:	f005 fd67 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 80120b6:	ea00 0804 	and.w	r8, r0, r4
 80120ba:	7b31      	ldrb	r1, [r6, #12]
 80120bc:	4628      	mov	r0, r5
 80120be:	f7fd f9f3 	bl	800f4a8 <ucdr_serialize_uint8_t>
 80120c2:	7b71      	ldrb	r1, [r6, #13]
 80120c4:	ea08 0800 	and.w	r8, r8, r0
 80120c8:	4628      	mov	r0, r5
 80120ca:	f7fd f9bf 	bl	800f44c <ucdr_serialize_bool>
 80120ce:	7b73      	ldrb	r3, [r6, #13]
 80120d0:	ea08 0800 	and.w	r8, r8, r0
 80120d4:	b93b      	cbnz	r3, 80120e6 <uxr_serialize_CLIENT_Representation+0x66>
 80120d6:	8bb1      	ldrh	r1, [r6, #28]
 80120d8:	4628      	mov	r0, r5
 80120da:	f7fd fa11 	bl	800f500 <ucdr_serialize_uint16_t>
 80120de:	ea08 0000 	and.w	r0, r8, r0
 80120e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120e6:	6931      	ldr	r1, [r6, #16]
 80120e8:	4628      	mov	r0, r5
 80120ea:	f7fd fbf9 	bl	800f8e0 <ucdr_serialize_uint32_t>
 80120ee:	6933      	ldr	r3, [r6, #16]
 80120f0:	b1e3      	cbz	r3, 801212c <uxr_serialize_CLIENT_Representation+0xac>
 80120f2:	b1c0      	cbz	r0, 8012126 <uxr_serialize_CLIENT_Representation+0xa6>
 80120f4:	4637      	mov	r7, r6
 80120f6:	f04f 0900 	mov.w	r9, #0
 80120fa:	e000      	b.n	80120fe <uxr_serialize_CLIENT_Representation+0x7e>
 80120fc:	b19c      	cbz	r4, 8012126 <uxr_serialize_CLIENT_Representation+0xa6>
 80120fe:	6979      	ldr	r1, [r7, #20]
 8012100:	4628      	mov	r0, r5
 8012102:	f005 fe0b 	bl	8017d1c <ucdr_serialize_string>
 8012106:	69b9      	ldr	r1, [r7, #24]
 8012108:	4604      	mov	r4, r0
 801210a:	4628      	mov	r0, r5
 801210c:	f005 fe06 	bl	8017d1c <ucdr_serialize_string>
 8012110:	f109 0901 	add.w	r9, r9, #1
 8012114:	6933      	ldr	r3, [r6, #16]
 8012116:	4004      	ands	r4, r0
 8012118:	3708      	adds	r7, #8
 801211a:	4599      	cmp	r9, r3
 801211c:	b2e4      	uxtb	r4, r4
 801211e:	d3ed      	bcc.n	80120fc <uxr_serialize_CLIENT_Representation+0x7c>
 8012120:	ea08 0804 	and.w	r8, r8, r4
 8012124:	e7d7      	b.n	80120d6 <uxr_serialize_CLIENT_Representation+0x56>
 8012126:	f04f 0800 	mov.w	r8, #0
 801212a:	e7d4      	b.n	80120d6 <uxr_serialize_CLIENT_Representation+0x56>
 801212c:	ea08 0800 	and.w	r8, r8, r0
 8012130:	e7d1      	b.n	80120d6 <uxr_serialize_CLIENT_Representation+0x56>
 8012132:	bf00      	nop

08012134 <uxr_deserialize_CLIENT_Representation>:
 8012134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012138:	2204      	movs	r2, #4
 801213a:	460c      	mov	r4, r1
 801213c:	4605      	mov	r5, r0
 801213e:	f005 fd85 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012142:	4606      	mov	r6, r0
 8012144:	2202      	movs	r2, #2
 8012146:	1d21      	adds	r1, r4, #4
 8012148:	4628      	mov	r0, r5
 801214a:	f005 fd7f 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 801214e:	4006      	ands	r6, r0
 8012150:	2202      	movs	r2, #2
 8012152:	1da1      	adds	r1, r4, #6
 8012154:	b2f6      	uxtb	r6, r6
 8012156:	4628      	mov	r0, r5
 8012158:	f005 fd78 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 801215c:	2204      	movs	r2, #4
 801215e:	4006      	ands	r6, r0
 8012160:	f104 0108 	add.w	r1, r4, #8
 8012164:	4628      	mov	r0, r5
 8012166:	f005 fd71 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 801216a:	ea00 0706 	and.w	r7, r0, r6
 801216e:	f104 010c 	add.w	r1, r4, #12
 8012172:	4628      	mov	r0, r5
 8012174:	f7fd f9ae 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012178:	f104 010d 	add.w	r1, r4, #13
 801217c:	4007      	ands	r7, r0
 801217e:	4628      	mov	r0, r5
 8012180:	f7fd f97a 	bl	800f478 <ucdr_deserialize_bool>
 8012184:	7b63      	ldrb	r3, [r4, #13]
 8012186:	4007      	ands	r7, r0
 8012188:	b93b      	cbnz	r3, 801219a <uxr_deserialize_CLIENT_Representation+0x66>
 801218a:	f104 011c 	add.w	r1, r4, #28
 801218e:	4628      	mov	r0, r5
 8012190:	f7fd faba 	bl	800f708 <ucdr_deserialize_uint16_t>
 8012194:	4038      	ands	r0, r7
 8012196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801219a:	f104 0110 	add.w	r1, r4, #16
 801219e:	4628      	mov	r0, r5
 80121a0:	f7fd fcce 	bl	800fb40 <ucdr_deserialize_uint32_t>
 80121a4:	6923      	ldr	r3, [r4, #16]
 80121a6:	2b01      	cmp	r3, #1
 80121a8:	d903      	bls.n	80121b2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80121aa:	2301      	movs	r3, #1
 80121ac:	75ab      	strb	r3, [r5, #22]
 80121ae:	2700      	movs	r7, #0
 80121b0:	e7eb      	b.n	801218a <uxr_deserialize_CLIENT_Representation+0x56>
 80121b2:	b30b      	cbz	r3, 80121f8 <uxr_deserialize_CLIENT_Representation+0xc4>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d0fa      	beq.n	80121ae <uxr_deserialize_CLIENT_Representation+0x7a>
 80121b8:	46a0      	mov	r8, r4
 80121ba:	f04f 0900 	mov.w	r9, #0
 80121be:	e001      	b.n	80121c4 <uxr_deserialize_CLIENT_Representation+0x90>
 80121c0:	2e00      	cmp	r6, #0
 80121c2:	d0f4      	beq.n	80121ae <uxr_deserialize_CLIENT_Representation+0x7a>
 80121c4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80121c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121cc:	4628      	mov	r0, r5
 80121ce:	f109 0901 	add.w	r9, r9, #1
 80121d2:	f005 fdb1 	bl	8017d38 <ucdr_deserialize_string>
 80121d6:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80121da:	4606      	mov	r6, r0
 80121dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121e0:	4628      	mov	r0, r5
 80121e2:	f108 0808 	add.w	r8, r8, #8
 80121e6:	f005 fda7 	bl	8017d38 <ucdr_deserialize_string>
 80121ea:	6923      	ldr	r3, [r4, #16]
 80121ec:	4006      	ands	r6, r0
 80121ee:	4599      	cmp	r9, r3
 80121f0:	b2f6      	uxtb	r6, r6
 80121f2:	d3e5      	bcc.n	80121c0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80121f4:	4037      	ands	r7, r6
 80121f6:	e7c8      	b.n	801218a <uxr_deserialize_CLIENT_Representation+0x56>
 80121f8:	4007      	ands	r7, r0
 80121fa:	e7c6      	b.n	801218a <uxr_deserialize_CLIENT_Representation+0x56>

080121fc <uxr_serialize_AGENT_Representation>:
 80121fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012200:	2204      	movs	r2, #4
 8012202:	460f      	mov	r7, r1
 8012204:	4605      	mov	r5, r0
 8012206:	f005 fcbd 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 801220a:	4604      	mov	r4, r0
 801220c:	2202      	movs	r2, #2
 801220e:	1d39      	adds	r1, r7, #4
 8012210:	4628      	mov	r0, r5
 8012212:	f005 fcb7 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012216:	4020      	ands	r0, r4
 8012218:	2202      	movs	r2, #2
 801221a:	1db9      	adds	r1, r7, #6
 801221c:	b2c4      	uxtb	r4, r0
 801221e:	4628      	mov	r0, r5
 8012220:	f005 fcb0 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012224:	7a39      	ldrb	r1, [r7, #8]
 8012226:	4004      	ands	r4, r0
 8012228:	4628      	mov	r0, r5
 801222a:	f7fd f90f 	bl	800f44c <ucdr_serialize_bool>
 801222e:	7a3b      	ldrb	r3, [r7, #8]
 8012230:	ea00 0804 	and.w	r8, r0, r4
 8012234:	b913      	cbnz	r3, 801223c <uxr_serialize_AGENT_Representation+0x40>
 8012236:	4640      	mov	r0, r8
 8012238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801223c:	68f9      	ldr	r1, [r7, #12]
 801223e:	4628      	mov	r0, r5
 8012240:	f7fd fb4e 	bl	800f8e0 <ucdr_serialize_uint32_t>
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	b303      	cbz	r3, 801228a <uxr_serialize_AGENT_Representation+0x8e>
 8012248:	b1d0      	cbz	r0, 8012280 <uxr_serialize_AGENT_Representation+0x84>
 801224a:	463e      	mov	r6, r7
 801224c:	f04f 0900 	mov.w	r9, #0
 8012250:	e000      	b.n	8012254 <uxr_serialize_AGENT_Representation+0x58>
 8012252:	b1ac      	cbz	r4, 8012280 <uxr_serialize_AGENT_Representation+0x84>
 8012254:	6931      	ldr	r1, [r6, #16]
 8012256:	4628      	mov	r0, r5
 8012258:	f005 fd60 	bl	8017d1c <ucdr_serialize_string>
 801225c:	6971      	ldr	r1, [r6, #20]
 801225e:	4604      	mov	r4, r0
 8012260:	4628      	mov	r0, r5
 8012262:	f005 fd5b 	bl	8017d1c <ucdr_serialize_string>
 8012266:	f109 0901 	add.w	r9, r9, #1
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	4004      	ands	r4, r0
 801226e:	3608      	adds	r6, #8
 8012270:	4599      	cmp	r9, r3
 8012272:	b2e4      	uxtb	r4, r4
 8012274:	d3ed      	bcc.n	8012252 <uxr_serialize_AGENT_Representation+0x56>
 8012276:	ea08 0804 	and.w	r8, r8, r4
 801227a:	4640      	mov	r0, r8
 801227c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012280:	f04f 0800 	mov.w	r8, #0
 8012284:	4640      	mov	r0, r8
 8012286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801228a:	ea08 0800 	and.w	r8, r8, r0
 801228e:	e7d2      	b.n	8012236 <uxr_serialize_AGENT_Representation+0x3a>

08012290 <uxr_serialize_DATAWRITER_Representation>:
 8012290:	b570      	push	{r4, r5, r6, lr}
 8012292:	460d      	mov	r5, r1
 8012294:	7809      	ldrb	r1, [r1, #0]
 8012296:	4606      	mov	r6, r0
 8012298:	f7fd f906 	bl	800f4a8 <ucdr_serialize_uint8_t>
 801229c:	4604      	mov	r4, r0
 801229e:	b130      	cbz	r0, 80122ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80122a0:	782b      	ldrb	r3, [r5, #0]
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	d00c      	beq.n	80122c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80122a6:	2b03      	cmp	r3, #3
 80122a8:	d010      	beq.n	80122cc <uxr_serialize_DATAWRITER_Representation+0x3c>
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d008      	beq.n	80122c0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80122ae:	2202      	movs	r2, #2
 80122b0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80122b4:	4630      	mov	r0, r6
 80122b6:	f005 fc65 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 80122ba:	4020      	ands	r0, r4
 80122bc:	b2c0      	uxtb	r0, r0
 80122be:	bd70      	pop	{r4, r5, r6, pc}
 80122c0:	6869      	ldr	r1, [r5, #4]
 80122c2:	4630      	mov	r0, r6
 80122c4:	f005 fd2a 	bl	8017d1c <ucdr_serialize_string>
 80122c8:	4604      	mov	r4, r0
 80122ca:	e7f0      	b.n	80122ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80122cc:	4629      	mov	r1, r5
 80122ce:	4630      	mov	r0, r6
 80122d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80122d4:	3104      	adds	r1, #4
 80122d6:	f7fe f945 	bl	8010564 <ucdr_serialize_sequence_uint8_t>
 80122da:	4604      	mov	r4, r0
 80122dc:	e7e7      	b.n	80122ae <uxr_serialize_DATAWRITER_Representation+0x1e>
 80122de:	bf00      	nop

080122e0 <uxr_serialize_ObjectVariant.part.0>:
 80122e0:	b570      	push	{r4, r5, r6, lr}
 80122e2:	780b      	ldrb	r3, [r1, #0]
 80122e4:	460c      	mov	r4, r1
 80122e6:	4605      	mov	r5, r0
 80122e8:	3b01      	subs	r3, #1
 80122ea:	2b0d      	cmp	r3, #13
 80122ec:	d816      	bhi.n	801231c <uxr_serialize_ObjectVariant.part.0+0x3c>
 80122ee:	e8df f003 	tbb	[pc, r3]
 80122f2:	0733      	.short	0x0733
 80122f4:	07071717 	.word	0x07071717
 80122f8:	0c150707 	.word	0x0c150707
 80122fc:	4c510c0c 	.word	0x4c510c0c
 8012300:	3104      	adds	r1, #4
 8012302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012306:	f7ff bfc3 	b.w	8012290 <uxr_serialize_DATAWRITER_Representation>
 801230a:	7909      	ldrb	r1, [r1, #4]
 801230c:	f7fd f8cc 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012310:	b300      	cbz	r0, 8012354 <uxr_serialize_ObjectVariant.part.0+0x74>
 8012312:	7923      	ldrb	r3, [r4, #4]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d042      	beq.n	801239e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8012318:	2b02      	cmp	r3, #2
 801231a:	d040      	beq.n	801239e <uxr_serialize_ObjectVariant.part.0+0xbe>
 801231c:	2001      	movs	r0, #1
 801231e:	bd70      	pop	{r4, r5, r6, pc}
 8012320:	7909      	ldrb	r1, [r1, #4]
 8012322:	f7fd f8c1 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012326:	4606      	mov	r6, r0
 8012328:	b158      	cbz	r0, 8012342 <uxr_serialize_ObjectVariant.part.0+0x62>
 801232a:	7923      	ldrb	r3, [r4, #4]
 801232c:	2b02      	cmp	r3, #2
 801232e:	d03c      	beq.n	80123aa <uxr_serialize_ObjectVariant.part.0+0xca>
 8012330:	2b03      	cmp	r3, #3
 8012332:	d106      	bne.n	8012342 <uxr_serialize_ObjectVariant.part.0+0x62>
 8012334:	68a2      	ldr	r2, [r4, #8]
 8012336:	f104 010c 	add.w	r1, r4, #12
 801233a:	4628      	mov	r0, r5
 801233c:	f7fe f912 	bl	8010564 <ucdr_serialize_sequence_uint8_t>
 8012340:	4606      	mov	r6, r0
 8012342:	2202      	movs	r2, #2
 8012344:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8012348:	4628      	mov	r0, r5
 801234a:	f005 fc1b 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 801234e:	4030      	ands	r0, r6
 8012350:	b2c0      	uxtb	r0, r0
 8012352:	bd70      	pop	{r4, r5, r6, pc}
 8012354:	2000      	movs	r0, #0
 8012356:	bd70      	pop	{r4, r5, r6, pc}
 8012358:	7909      	ldrb	r1, [r1, #4]
 801235a:	f7fd f8a5 	bl	800f4a8 <ucdr_serialize_uint8_t>
 801235e:	4606      	mov	r6, r0
 8012360:	b158      	cbz	r0, 801237a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8012362:	7923      	ldrb	r3, [r4, #4]
 8012364:	2b02      	cmp	r3, #2
 8012366:	d003      	beq.n	8012370 <uxr_serialize_ObjectVariant.part.0+0x90>
 8012368:	2b03      	cmp	r3, #3
 801236a:	d024      	beq.n	80123b6 <uxr_serialize_ObjectVariant.part.0+0xd6>
 801236c:	2b01      	cmp	r3, #1
 801236e:	d104      	bne.n	801237a <uxr_serialize_ObjectVariant.part.0+0x9a>
 8012370:	68a1      	ldr	r1, [r4, #8]
 8012372:	4628      	mov	r0, r5
 8012374:	f005 fcd2 	bl	8017d1c <ucdr_serialize_string>
 8012378:	4606      	mov	r6, r0
 801237a:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801237e:	4628      	mov	r0, r5
 8012380:	f7fd fdc4 	bl	800ff0c <ucdr_serialize_int16_t>
 8012384:	4030      	ands	r0, r6
 8012386:	b2c0      	uxtb	r0, r0
 8012388:	bd70      	pop	{r4, r5, r6, pc}
 801238a:	3104      	adds	r1, #4
 801238c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012390:	f7ff be76 	b.w	8012080 <uxr_serialize_CLIENT_Representation>
 8012394:	3104      	adds	r1, #4
 8012396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801239a:	f7ff bf2f 	b.w	80121fc <uxr_serialize_AGENT_Representation>
 801239e:	68a1      	ldr	r1, [r4, #8]
 80123a0:	4628      	mov	r0, r5
 80123a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123a6:	f005 bcb9 	b.w	8017d1c <ucdr_serialize_string>
 80123aa:	68a1      	ldr	r1, [r4, #8]
 80123ac:	4628      	mov	r0, r5
 80123ae:	f005 fcb5 	bl	8017d1c <ucdr_serialize_string>
 80123b2:	4606      	mov	r6, r0
 80123b4:	e7c5      	b.n	8012342 <uxr_serialize_ObjectVariant.part.0+0x62>
 80123b6:	68a2      	ldr	r2, [r4, #8]
 80123b8:	f104 010c 	add.w	r1, r4, #12
 80123bc:	4628      	mov	r0, r5
 80123be:	f7fe f8d1 	bl	8010564 <ucdr_serialize_sequence_uint8_t>
 80123c2:	4606      	mov	r6, r0
 80123c4:	e7d9      	b.n	801237a <uxr_serialize_ObjectVariant.part.0+0x9a>
 80123c6:	bf00      	nop

080123c8 <uxr_deserialize_DATAWRITER_Representation>:
 80123c8:	b570      	push	{r4, r5, r6, lr}
 80123ca:	4606      	mov	r6, r0
 80123cc:	460d      	mov	r5, r1
 80123ce:	f7fd f881 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 80123d2:	4604      	mov	r4, r0
 80123d4:	b130      	cbz	r0, 80123e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80123d6:	782b      	ldrb	r3, [r5, #0]
 80123d8:	2b02      	cmp	r3, #2
 80123da:	d00c      	beq.n	80123f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80123dc:	2b03      	cmp	r3, #3
 80123de:	d012      	beq.n	8012406 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d008      	beq.n	80123f6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80123e4:	2202      	movs	r2, #2
 80123e6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80123ea:	4630      	mov	r0, r6
 80123ec:	f005 fc2e 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 80123f0:	4020      	ands	r0, r4
 80123f2:	b2c0      	uxtb	r0, r0
 80123f4:	bd70      	pop	{r4, r5, r6, pc}
 80123f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123fa:	6869      	ldr	r1, [r5, #4]
 80123fc:	4630      	mov	r0, r6
 80123fe:	f005 fc9b 	bl	8017d38 <ucdr_deserialize_string>
 8012402:	4604      	mov	r4, r0
 8012404:	e7ee      	b.n	80123e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012406:	1d2b      	adds	r3, r5, #4
 8012408:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801240c:	f105 0108 	add.w	r1, r5, #8
 8012410:	4630      	mov	r0, r6
 8012412:	f7fe f8b9 	bl	8010588 <ucdr_deserialize_sequence_uint8_t>
 8012416:	4604      	mov	r4, r0
 8012418:	e7e4      	b.n	80123e4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801241a:	bf00      	nop

0801241c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801241c:	b570      	push	{r4, r5, r6, lr}
 801241e:	460d      	mov	r5, r1
 8012420:	7809      	ldrb	r1, [r1, #0]
 8012422:	4606      	mov	r6, r0
 8012424:	f7fd f812 	bl	800f44c <ucdr_serialize_bool>
 8012428:	782b      	ldrb	r3, [r5, #0]
 801242a:	4604      	mov	r4, r0
 801242c:	b94b      	cbnz	r3, 8012442 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801242e:	7a29      	ldrb	r1, [r5, #8]
 8012430:	4630      	mov	r0, r6
 8012432:	f7fd f80b 	bl	800f44c <ucdr_serialize_bool>
 8012436:	7a2b      	ldrb	r3, [r5, #8]
 8012438:	4004      	ands	r4, r0
 801243a:	b2e4      	uxtb	r4, r4
 801243c:	b943      	cbnz	r3, 8012450 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801243e:	4620      	mov	r0, r4
 8012440:	bd70      	pop	{r4, r5, r6, pc}
 8012442:	6869      	ldr	r1, [r5, #4]
 8012444:	4630      	mov	r0, r6
 8012446:	f005 fc69 	bl	8017d1c <ucdr_serialize_string>
 801244a:	4004      	ands	r4, r0
 801244c:	b2e4      	uxtb	r4, r4
 801244e:	e7ee      	b.n	801242e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012450:	68e9      	ldr	r1, [r5, #12]
 8012452:	4630      	mov	r0, r6
 8012454:	f005 fc62 	bl	8017d1c <ucdr_serialize_string>
 8012458:	4004      	ands	r4, r0
 801245a:	4620      	mov	r0, r4
 801245c:	bd70      	pop	{r4, r5, r6, pc}
 801245e:	bf00      	nop

08012460 <uxr_serialize_OBJK_Topic_Binary>:
 8012460:	b570      	push	{r4, r5, r6, lr}
 8012462:	460d      	mov	r5, r1
 8012464:	4606      	mov	r6, r0
 8012466:	6809      	ldr	r1, [r1, #0]
 8012468:	f005 fc58 	bl	8017d1c <ucdr_serialize_string>
 801246c:	4604      	mov	r4, r0
 801246e:	7929      	ldrb	r1, [r5, #4]
 8012470:	4630      	mov	r0, r6
 8012472:	f7fc ffeb 	bl	800f44c <ucdr_serialize_bool>
 8012476:	792b      	ldrb	r3, [r5, #4]
 8012478:	4004      	ands	r4, r0
 801247a:	b2e4      	uxtb	r4, r4
 801247c:	b943      	cbnz	r3, 8012490 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801247e:	7b29      	ldrb	r1, [r5, #12]
 8012480:	4630      	mov	r0, r6
 8012482:	f7fc ffe3 	bl	800f44c <ucdr_serialize_bool>
 8012486:	7b2b      	ldrb	r3, [r5, #12]
 8012488:	4004      	ands	r4, r0
 801248a:	b93b      	cbnz	r3, 801249c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801248c:	4620      	mov	r0, r4
 801248e:	bd70      	pop	{r4, r5, r6, pc}
 8012490:	68a9      	ldr	r1, [r5, #8]
 8012492:	4630      	mov	r0, r6
 8012494:	f005 fc42 	bl	8017d1c <ucdr_serialize_string>
 8012498:	4004      	ands	r4, r0
 801249a:	e7f0      	b.n	801247e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801249c:	6929      	ldr	r1, [r5, #16]
 801249e:	4630      	mov	r0, r6
 80124a0:	f005 fc3c 	bl	8017d1c <ucdr_serialize_string>
 80124a4:	4004      	ands	r4, r0
 80124a6:	b2e4      	uxtb	r4, r4
 80124a8:	4620      	mov	r0, r4
 80124aa:	bd70      	pop	{r4, r5, r6, pc}

080124ac <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80124ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124b0:	460c      	mov	r4, r1
 80124b2:	7809      	ldrb	r1, [r1, #0]
 80124b4:	4606      	mov	r6, r0
 80124b6:	f7fc ffc9 	bl	800f44c <ucdr_serialize_bool>
 80124ba:	7823      	ldrb	r3, [r4, #0]
 80124bc:	4605      	mov	r5, r0
 80124be:	b96b      	cbnz	r3, 80124dc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80124c0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80124c4:	4630      	mov	r0, r6
 80124c6:	f7fc ffc1 	bl	800f44c <ucdr_serialize_bool>
 80124ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80124ce:	4005      	ands	r5, r0
 80124d0:	b2ed      	uxtb	r5, r5
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d16a      	bne.n	80125ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 80124d6:	4628      	mov	r0, r5
 80124d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124dc:	6861      	ldr	r1, [r4, #4]
 80124de:	4630      	mov	r0, r6
 80124e0:	f7fd f9fe 	bl	800f8e0 <ucdr_serialize_uint32_t>
 80124e4:	6863      	ldr	r3, [r4, #4]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d06c      	beq.n	80125c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d068      	beq.n	80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80124ee:	68a1      	ldr	r1, [r4, #8]
 80124f0:	4630      	mov	r0, r6
 80124f2:	f005 fc13 	bl	8017d1c <ucdr_serialize_string>
 80124f6:	6862      	ldr	r2, [r4, #4]
 80124f8:	2a01      	cmp	r2, #1
 80124fa:	d953      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124fc:	2800      	cmp	r0, #0
 80124fe:	d05f      	beq.n	80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012500:	68e1      	ldr	r1, [r4, #12]
 8012502:	4630      	mov	r0, r6
 8012504:	f005 fc0a 	bl	8017d1c <ucdr_serialize_string>
 8012508:	6862      	ldr	r2, [r4, #4]
 801250a:	2a02      	cmp	r2, #2
 801250c:	d94a      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801250e:	2800      	cmp	r0, #0
 8012510:	d056      	beq.n	80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012512:	6921      	ldr	r1, [r4, #16]
 8012514:	4630      	mov	r0, r6
 8012516:	f005 fc01 	bl	8017d1c <ucdr_serialize_string>
 801251a:	6862      	ldr	r2, [r4, #4]
 801251c:	2a03      	cmp	r2, #3
 801251e:	d941      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012520:	2800      	cmp	r0, #0
 8012522:	d04d      	beq.n	80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012524:	6961      	ldr	r1, [r4, #20]
 8012526:	4630      	mov	r0, r6
 8012528:	f005 fbf8 	bl	8017d1c <ucdr_serialize_string>
 801252c:	6862      	ldr	r2, [r4, #4]
 801252e:	2a04      	cmp	r2, #4
 8012530:	d938      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012532:	2800      	cmp	r0, #0
 8012534:	d044      	beq.n	80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012536:	69a1      	ldr	r1, [r4, #24]
 8012538:	4630      	mov	r0, r6
 801253a:	f005 fbef 	bl	8017d1c <ucdr_serialize_string>
 801253e:	6862      	ldr	r2, [r4, #4]
 8012540:	2a05      	cmp	r2, #5
 8012542:	d92f      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012544:	2800      	cmp	r0, #0
 8012546:	d03b      	beq.n	80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012548:	69e1      	ldr	r1, [r4, #28]
 801254a:	4630      	mov	r0, r6
 801254c:	f005 fbe6 	bl	8017d1c <ucdr_serialize_string>
 8012550:	6862      	ldr	r2, [r4, #4]
 8012552:	2a06      	cmp	r2, #6
 8012554:	d926      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012556:	b398      	cbz	r0, 80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012558:	6a21      	ldr	r1, [r4, #32]
 801255a:	4630      	mov	r0, r6
 801255c:	f005 fbde 	bl	8017d1c <ucdr_serialize_string>
 8012560:	6862      	ldr	r2, [r4, #4]
 8012562:	2a07      	cmp	r2, #7
 8012564:	d91e      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012566:	b358      	cbz	r0, 80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012568:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801256a:	4630      	mov	r0, r6
 801256c:	f005 fbd6 	bl	8017d1c <ucdr_serialize_string>
 8012570:	6862      	ldr	r2, [r4, #4]
 8012572:	2a08      	cmp	r2, #8
 8012574:	d916      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012576:	b318      	cbz	r0, 80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012578:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801257a:	4630      	mov	r0, r6
 801257c:	f005 fbce 	bl	8017d1c <ucdr_serialize_string>
 8012580:	6862      	ldr	r2, [r4, #4]
 8012582:	2a09      	cmp	r2, #9
 8012584:	d90e      	bls.n	80125a4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012586:	b1d8      	cbz	r0, 80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012588:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 801258c:	2709      	movs	r7, #9
 801258e:	e000      	b.n	8012592 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012590:	b1b0      	cbz	r0, 80125c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8012592:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8012596:	4630      	mov	r0, r6
 8012598:	f005 fbc0 	bl	8017d1c <ucdr_serialize_string>
 801259c:	3701      	adds	r7, #1
 801259e:	6862      	ldr	r2, [r4, #4]
 80125a0:	4297      	cmp	r7, r2
 80125a2:	d3f5      	bcc.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80125a4:	ea05 0300 	and.w	r3, r5, r0
 80125a8:	b2dd      	uxtb	r5, r3
 80125aa:	e789      	b.n	80124c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80125ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80125ae:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80125b2:	4630      	mov	r0, r6
 80125b4:	f7fd ffd6 	bl	8010564 <ucdr_serialize_sequence_uint8_t>
 80125b8:	4005      	ands	r5, r0
 80125ba:	4628      	mov	r0, r5
 80125bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125c0:	2500      	movs	r5, #0
 80125c2:	e77d      	b.n	80124c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80125c4:	4028      	ands	r0, r5
 80125c6:	b2c5      	uxtb	r5, r0
 80125c8:	e77a      	b.n	80124c0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80125ca:	bf00      	nop

080125cc <uxr_serialize_OBJK_Publisher_Binary>:
 80125cc:	b570      	push	{r4, r5, r6, lr}
 80125ce:	460d      	mov	r5, r1
 80125d0:	7809      	ldrb	r1, [r1, #0]
 80125d2:	4606      	mov	r6, r0
 80125d4:	f7fc ff3a 	bl	800f44c <ucdr_serialize_bool>
 80125d8:	782b      	ldrb	r3, [r5, #0]
 80125da:	4604      	mov	r4, r0
 80125dc:	b94b      	cbnz	r3, 80125f2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80125de:	7a29      	ldrb	r1, [r5, #8]
 80125e0:	4630      	mov	r0, r6
 80125e2:	f7fc ff33 	bl	800f44c <ucdr_serialize_bool>
 80125e6:	7a2b      	ldrb	r3, [r5, #8]
 80125e8:	4004      	ands	r4, r0
 80125ea:	b2e4      	uxtb	r4, r4
 80125ec:	b943      	cbnz	r3, 8012600 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80125ee:	4620      	mov	r0, r4
 80125f0:	bd70      	pop	{r4, r5, r6, pc}
 80125f2:	6869      	ldr	r1, [r5, #4]
 80125f4:	4630      	mov	r0, r6
 80125f6:	f005 fb91 	bl	8017d1c <ucdr_serialize_string>
 80125fa:	4004      	ands	r4, r0
 80125fc:	b2e4      	uxtb	r4, r4
 80125fe:	e7ee      	b.n	80125de <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012600:	f105 010c 	add.w	r1, r5, #12
 8012604:	4630      	mov	r0, r6
 8012606:	f7ff ff51 	bl	80124ac <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801260a:	4004      	ands	r4, r0
 801260c:	4620      	mov	r0, r4
 801260e:	bd70      	pop	{r4, r5, r6, pc}

08012610 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012610:	b570      	push	{r4, r5, r6, lr}
 8012612:	460d      	mov	r5, r1
 8012614:	4606      	mov	r6, r0
 8012616:	8809      	ldrh	r1, [r1, #0]
 8012618:	f7fc ff72 	bl	800f500 <ucdr_serialize_uint16_t>
 801261c:	4604      	mov	r4, r0
 801261e:	78a9      	ldrb	r1, [r5, #2]
 8012620:	4630      	mov	r0, r6
 8012622:	f7fc ff13 	bl	800f44c <ucdr_serialize_bool>
 8012626:	78ab      	ldrb	r3, [r5, #2]
 8012628:	4004      	ands	r4, r0
 801262a:	b2e4      	uxtb	r4, r4
 801262c:	b9b3      	cbnz	r3, 801265c <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 801262e:	79a9      	ldrb	r1, [r5, #6]
 8012630:	4630      	mov	r0, r6
 8012632:	f7fc ff0b 	bl	800f44c <ucdr_serialize_bool>
 8012636:	79ab      	ldrb	r3, [r5, #6]
 8012638:	4004      	ands	r4, r0
 801263a:	bb33      	cbnz	r3, 801268a <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 801263c:	7b29      	ldrb	r1, [r5, #12]
 801263e:	4630      	mov	r0, r6
 8012640:	f7fc ff04 	bl	800f44c <ucdr_serialize_bool>
 8012644:	7b2b      	ldrb	r3, [r5, #12]
 8012646:	4004      	ands	r4, r0
 8012648:	b9c3      	cbnz	r3, 801267c <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 801264a:	7d29      	ldrb	r1, [r5, #20]
 801264c:	4630      	mov	r0, r6
 801264e:	f7fc fefd 	bl	800f44c <ucdr_serialize_bool>
 8012652:	7d2b      	ldrb	r3, [r5, #20]
 8012654:	4004      	ands	r4, r0
 8012656:	b93b      	cbnz	r3, 8012668 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8012658:	4620      	mov	r0, r4
 801265a:	bd70      	pop	{r4, r5, r6, pc}
 801265c:	88a9      	ldrh	r1, [r5, #4]
 801265e:	4630      	mov	r0, r6
 8012660:	f7fc ff4e 	bl	800f500 <ucdr_serialize_uint16_t>
 8012664:	4004      	ands	r4, r0
 8012666:	e7e2      	b.n	801262e <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8012668:	69aa      	ldr	r2, [r5, #24]
 801266a:	f105 011c 	add.w	r1, r5, #28
 801266e:	4630      	mov	r0, r6
 8012670:	f7fd ff78 	bl	8010564 <ucdr_serialize_sequence_uint8_t>
 8012674:	4004      	ands	r4, r0
 8012676:	b2e4      	uxtb	r4, r4
 8012678:	4620      	mov	r0, r4
 801267a:	bd70      	pop	{r4, r5, r6, pc}
 801267c:	6929      	ldr	r1, [r5, #16]
 801267e:	4630      	mov	r0, r6
 8012680:	f7fd f92e 	bl	800f8e0 <ucdr_serialize_uint32_t>
 8012684:	4004      	ands	r4, r0
 8012686:	b2e4      	uxtb	r4, r4
 8012688:	e7df      	b.n	801264a <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 801268a:	68a9      	ldr	r1, [r5, #8]
 801268c:	4630      	mov	r0, r6
 801268e:	f7fd f927 	bl	800f8e0 <ucdr_serialize_uint32_t>
 8012692:	4004      	ands	r4, r0
 8012694:	b2e4      	uxtb	r4, r4
 8012696:	e7d1      	b.n	801263c <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08012698 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801269a:	2202      	movs	r2, #2
 801269c:	460d      	mov	r5, r1
 801269e:	4606      	mov	r6, r0
 80126a0:	f005 fa70 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 80126a4:	4604      	mov	r4, r0
 80126a6:	78a9      	ldrb	r1, [r5, #2]
 80126a8:	4630      	mov	r0, r6
 80126aa:	f7fc fecf 	bl	800f44c <ucdr_serialize_bool>
 80126ae:	78ab      	ldrb	r3, [r5, #2]
 80126b0:	4004      	ands	r4, r0
 80126b2:	b2e4      	uxtb	r4, r4
 80126b4:	b90b      	cbnz	r3, 80126ba <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80126b6:	4620      	mov	r0, r4
 80126b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ba:	f105 0108 	add.w	r1, r5, #8
 80126be:	4630      	mov	r0, r6
 80126c0:	f7ff ffa6 	bl	8012610 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80126c4:	4607      	mov	r7, r0
 80126c6:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80126ca:	4630      	mov	r0, r6
 80126cc:	f7fc febe 	bl	800f44c <ucdr_serialize_bool>
 80126d0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80126d4:	4007      	ands	r7, r0
 80126d6:	b2ff      	uxtb	r7, r7
 80126d8:	b913      	cbnz	r3, 80126e0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80126da:	403c      	ands	r4, r7
 80126dc:	4620      	mov	r0, r4
 80126de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126e0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80126e4:	4630      	mov	r0, r6
 80126e6:	f7fd fb49 	bl	800fd7c <ucdr_serialize_uint64_t>
 80126ea:	4007      	ands	r7, r0
 80126ec:	e7f5      	b.n	80126da <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80126ee:	bf00      	nop

080126f0 <uxr_deserialize_ObjectVariant>:
 80126f0:	b570      	push	{r4, r5, r6, lr}
 80126f2:	4605      	mov	r5, r0
 80126f4:	460e      	mov	r6, r1
 80126f6:	f7fc feed 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 80126fa:	b168      	cbz	r0, 8012718 <uxr_deserialize_ObjectVariant+0x28>
 80126fc:	7833      	ldrb	r3, [r6, #0]
 80126fe:	4604      	mov	r4, r0
 8012700:	3b01      	subs	r3, #1
 8012702:	2b0d      	cmp	r3, #13
 8012704:	d809      	bhi.n	801271a <uxr_deserialize_ObjectVariant+0x2a>
 8012706:	e8df f003 	tbb	[pc, r3]
 801270a:	0a64      	.short	0x0a64
 801270c:	0a0a2323 	.word	0x0a0a2323
 8012710:	10080a0a 	.word	0x10080a0a
 8012714:	5e411010 	.word	0x5e411010
 8012718:	2400      	movs	r4, #0
 801271a:	4620      	mov	r0, r4
 801271c:	bd70      	pop	{r4, r5, r6, pc}
 801271e:	1d31      	adds	r1, r6, #4
 8012720:	4628      	mov	r0, r5
 8012722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012726:	f7ff be4f 	b.w	80123c8 <uxr_deserialize_DATAWRITER_Representation>
 801272a:	1d31      	adds	r1, r6, #4
 801272c:	4628      	mov	r0, r5
 801272e:	f7fc fed1 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012732:	2800      	cmp	r0, #0
 8012734:	d0f0      	beq.n	8012718 <uxr_deserialize_ObjectVariant+0x28>
 8012736:	7933      	ldrb	r3, [r6, #4]
 8012738:	2b01      	cmp	r3, #1
 801273a:	d001      	beq.n	8012740 <uxr_deserialize_ObjectVariant+0x50>
 801273c:	2b02      	cmp	r3, #2
 801273e:	d1ec      	bne.n	801271a <uxr_deserialize_ObjectVariant+0x2a>
 8012740:	68b1      	ldr	r1, [r6, #8]
 8012742:	4628      	mov	r0, r5
 8012744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801274c:	f005 baf4 	b.w	8017d38 <ucdr_deserialize_string>
 8012750:	1d31      	adds	r1, r6, #4
 8012752:	4628      	mov	r0, r5
 8012754:	f7fc febe 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012758:	4604      	mov	r4, r0
 801275a:	b170      	cbz	r0, 801277a <uxr_deserialize_ObjectVariant+0x8a>
 801275c:	7933      	ldrb	r3, [r6, #4]
 801275e:	2b02      	cmp	r3, #2
 8012760:	d053      	beq.n	801280a <uxr_deserialize_ObjectVariant+0x11a>
 8012762:	2b03      	cmp	r3, #3
 8012764:	d109      	bne.n	801277a <uxr_deserialize_ObjectVariant+0x8a>
 8012766:	f106 0308 	add.w	r3, r6, #8
 801276a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801276e:	f106 010c 	add.w	r1, r6, #12
 8012772:	4628      	mov	r0, r5
 8012774:	f7fd ff08 	bl	8010588 <ucdr_deserialize_sequence_uint8_t>
 8012778:	4604      	mov	r4, r0
 801277a:	2202      	movs	r2, #2
 801277c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012780:	4628      	mov	r0, r5
 8012782:	f005 fa63 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012786:	4004      	ands	r4, r0
 8012788:	b2e4      	uxtb	r4, r4
 801278a:	e7c6      	b.n	801271a <uxr_deserialize_ObjectVariant+0x2a>
 801278c:	2204      	movs	r2, #4
 801278e:	4628      	mov	r0, r5
 8012790:	18b1      	adds	r1, r6, r2
 8012792:	f005 fa5b 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012796:	4604      	mov	r4, r0
 8012798:	2202      	movs	r2, #2
 801279a:	f106 0108 	add.w	r1, r6, #8
 801279e:	4628      	mov	r0, r5
 80127a0:	f005 fa54 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 80127a4:	4004      	ands	r4, r0
 80127a6:	2202      	movs	r2, #2
 80127a8:	f106 010a 	add.w	r1, r6, #10
 80127ac:	4628      	mov	r0, r5
 80127ae:	b2e4      	uxtb	r4, r4
 80127b0:	f005 fa4c 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 80127b4:	4603      	mov	r3, r0
 80127b6:	f106 010c 	add.w	r1, r6, #12
 80127ba:	4628      	mov	r0, r5
 80127bc:	401c      	ands	r4, r3
 80127be:	f7fc fe5b 	bl	800f478 <ucdr_deserialize_bool>
 80127c2:	4004      	ands	r4, r0
 80127c4:	e7a9      	b.n	801271a <uxr_deserialize_ObjectVariant+0x2a>
 80127c6:	1d31      	adds	r1, r6, #4
 80127c8:	4628      	mov	r0, r5
 80127ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127ce:	f7ff bcb1 	b.w	8012134 <uxr_deserialize_CLIENT_Representation>
 80127d2:	1d31      	adds	r1, r6, #4
 80127d4:	4628      	mov	r0, r5
 80127d6:	f7fc fe7d 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 80127da:	4604      	mov	r4, r0
 80127dc:	b168      	cbz	r0, 80127fa <uxr_deserialize_ObjectVariant+0x10a>
 80127de:	7933      	ldrb	r3, [r6, #4]
 80127e0:	2b02      	cmp	r3, #2
 80127e2:	d003      	beq.n	80127ec <uxr_deserialize_ObjectVariant+0xfc>
 80127e4:	2b03      	cmp	r3, #3
 80127e6:	d018      	beq.n	801281a <uxr_deserialize_ObjectVariant+0x12a>
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d106      	bne.n	80127fa <uxr_deserialize_ObjectVariant+0x10a>
 80127ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127f0:	68b1      	ldr	r1, [r6, #8]
 80127f2:	4628      	mov	r0, r5
 80127f4:	f005 faa0 	bl	8017d38 <ucdr_deserialize_string>
 80127f8:	4604      	mov	r4, r0
 80127fa:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80127fe:	4628      	mov	r0, r5
 8012800:	f7fd fc0e 	bl	8010020 <ucdr_deserialize_int16_t>
 8012804:	4004      	ands	r4, r0
 8012806:	b2e4      	uxtb	r4, r4
 8012808:	e787      	b.n	801271a <uxr_deserialize_ObjectVariant+0x2a>
 801280a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801280e:	68b1      	ldr	r1, [r6, #8]
 8012810:	4628      	mov	r0, r5
 8012812:	f005 fa91 	bl	8017d38 <ucdr_deserialize_string>
 8012816:	4604      	mov	r4, r0
 8012818:	e7af      	b.n	801277a <uxr_deserialize_ObjectVariant+0x8a>
 801281a:	f106 0308 	add.w	r3, r6, #8
 801281e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012822:	f106 010c 	add.w	r1, r6, #12
 8012826:	4628      	mov	r0, r5
 8012828:	f7fd feae 	bl	8010588 <ucdr_deserialize_sequence_uint8_t>
 801282c:	4604      	mov	r4, r0
 801282e:	e7e4      	b.n	80127fa <uxr_deserialize_ObjectVariant+0x10a>

08012830 <uxr_deserialize_BaseObjectRequest>:
 8012830:	b570      	push	{r4, r5, r6, lr}
 8012832:	2202      	movs	r2, #2
 8012834:	4605      	mov	r5, r0
 8012836:	460e      	mov	r6, r1
 8012838:	f005 fa08 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 801283c:	2202      	movs	r2, #2
 801283e:	4604      	mov	r4, r0
 8012840:	4628      	mov	r0, r5
 8012842:	18b1      	adds	r1, r6, r2
 8012844:	f005 fa02 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012848:	4020      	ands	r0, r4
 801284a:	b2c0      	uxtb	r0, r0
 801284c:	bd70      	pop	{r4, r5, r6, pc}
 801284e:	bf00      	nop

08012850 <uxr_serialize_ActivityInfoVariant>:
 8012850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012854:	460d      	mov	r5, r1
 8012856:	7809      	ldrb	r1, [r1, #0]
 8012858:	4606      	mov	r6, r0
 801285a:	f7fc fe25 	bl	800f4a8 <ucdr_serialize_uint8_t>
 801285e:	b130      	cbz	r0, 801286e <uxr_serialize_ActivityInfoVariant+0x1e>
 8012860:	782b      	ldrb	r3, [r5, #0]
 8012862:	2b06      	cmp	r3, #6
 8012864:	d014      	beq.n	8012890 <uxr_serialize_ActivityInfoVariant+0x40>
 8012866:	2b0d      	cmp	r3, #13
 8012868:	d019      	beq.n	801289e <uxr_serialize_ActivityInfoVariant+0x4e>
 801286a:	2b05      	cmp	r3, #5
 801286c:	d001      	beq.n	8012872 <uxr_serialize_ActivityInfoVariant+0x22>
 801286e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012872:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012876:	4630      	mov	r0, r6
 8012878:	f7fd fb48 	bl	800ff0c <ucdr_serialize_int16_t>
 801287c:	4604      	mov	r4, r0
 801287e:	4630      	mov	r0, r6
 8012880:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012884:	f7fd fa7a 	bl	800fd7c <ucdr_serialize_uint64_t>
 8012888:	4020      	ands	r0, r4
 801288a:	b2c0      	uxtb	r0, r0
 801288c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012890:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012894:	4630      	mov	r0, r6
 8012896:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801289a:	f7fd bb37 	b.w	800ff0c <ucdr_serialize_int16_t>
 801289e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80128a2:	4630      	mov	r0, r6
 80128a4:	f7fd fb32 	bl	800ff0c <ucdr_serialize_int16_t>
 80128a8:	68e9      	ldr	r1, [r5, #12]
 80128aa:	4681      	mov	r9, r0
 80128ac:	4630      	mov	r0, r6
 80128ae:	f7fd f817 	bl	800f8e0 <ucdr_serialize_uint32_t>
 80128b2:	68eb      	ldr	r3, [r5, #12]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d051      	beq.n	801295c <uxr_serialize_ActivityInfoVariant+0x10c>
 80128b8:	b1e8      	cbz	r0, 80128f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 80128ba:	f105 0714 	add.w	r7, r5, #20
 80128be:	f04f 0800 	mov.w	r8, #0
 80128c2:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 80128c6:	4630      	mov	r0, r6
 80128c8:	f7fc fdee 	bl	800f4a8 <ucdr_serialize_uint8_t>
 80128cc:	b198      	cbz	r0, 80128f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 80128ce:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80128d2:	2b03      	cmp	r3, #3
 80128d4:	d839      	bhi.n	801294a <uxr_serialize_ActivityInfoVariant+0xfa>
 80128d6:	e8df f003 	tbb	[pc, r3]
 80128da:	1e2b      	.short	0x1e2b
 80128dc:	0211      	.short	0x0211
 80128de:	6839      	ldr	r1, [r7, #0]
 80128e0:	4630      	mov	r0, r6
 80128e2:	f005 fa1b 	bl	8017d1c <ucdr_serialize_string>
 80128e6:	f108 0801 	add.w	r8, r8, #1
 80128ea:	68eb      	ldr	r3, [r5, #12]
 80128ec:	3718      	adds	r7, #24
 80128ee:	4598      	cmp	r8, r3
 80128f0:	d230      	bcs.n	8012954 <uxr_serialize_ActivityInfoVariant+0x104>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d1e5      	bne.n	80128c2 <uxr_serialize_ActivityInfoVariant+0x72>
 80128f6:	2000      	movs	r0, #0
 80128f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128fc:	2210      	movs	r2, #16
 80128fe:	4639      	mov	r1, r7
 8012900:	4630      	mov	r0, r6
 8012902:	f005 f93f 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012906:	4604      	mov	r4, r0
 8012908:	6939      	ldr	r1, [r7, #16]
 801290a:	4630      	mov	r0, r6
 801290c:	f7fc ffe8 	bl	800f8e0 <ucdr_serialize_uint32_t>
 8012910:	4020      	ands	r0, r4
 8012912:	b2c0      	uxtb	r0, r0
 8012914:	e7e7      	b.n	80128e6 <uxr_serialize_ActivityInfoVariant+0x96>
 8012916:	2204      	movs	r2, #4
 8012918:	4639      	mov	r1, r7
 801291a:	4630      	mov	r0, r6
 801291c:	f005 f932 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012920:	4604      	mov	r4, r0
 8012922:	88b9      	ldrh	r1, [r7, #4]
 8012924:	4630      	mov	r0, r6
 8012926:	f7fc fdeb 	bl	800f500 <ucdr_serialize_uint16_t>
 801292a:	4020      	ands	r0, r4
 801292c:	b2c0      	uxtb	r0, r0
 801292e:	e7da      	b.n	80128e6 <uxr_serialize_ActivityInfoVariant+0x96>
 8012930:	2202      	movs	r2, #2
 8012932:	4639      	mov	r1, r7
 8012934:	4630      	mov	r0, r6
 8012936:	f005 f925 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 801293a:	4604      	mov	r4, r0
 801293c:	78b9      	ldrb	r1, [r7, #2]
 801293e:	4630      	mov	r0, r6
 8012940:	f7fc fdb2 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012944:	4020      	ands	r0, r4
 8012946:	b2c0      	uxtb	r0, r0
 8012948:	e7cd      	b.n	80128e6 <uxr_serialize_ActivityInfoVariant+0x96>
 801294a:	f108 0801 	add.w	r8, r8, #1
 801294e:	68eb      	ldr	r3, [r5, #12]
 8012950:	4598      	cmp	r8, r3
 8012952:	d308      	bcc.n	8012966 <uxr_serialize_ActivityInfoVariant+0x116>
 8012954:	ea09 0000 	and.w	r0, r9, r0
 8012958:	b2c0      	uxtb	r0, r0
 801295a:	e788      	b.n	801286e <uxr_serialize_ActivityInfoVariant+0x1e>
 801295c:	ea09 0900 	and.w	r9, r9, r0
 8012960:	fa5f f089 	uxtb.w	r0, r9
 8012964:	e783      	b.n	801286e <uxr_serialize_ActivityInfoVariant+0x1e>
 8012966:	3718      	adds	r7, #24
 8012968:	e7ab      	b.n	80128c2 <uxr_serialize_ActivityInfoVariant+0x72>
 801296a:	bf00      	nop

0801296c <uxr_deserialize_BaseObjectReply>:
 801296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012970:	2202      	movs	r2, #2
 8012972:	4606      	mov	r6, r0
 8012974:	460f      	mov	r7, r1
 8012976:	f005 f969 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 801297a:	2202      	movs	r2, #2
 801297c:	4605      	mov	r5, r0
 801297e:	4630      	mov	r0, r6
 8012980:	18b9      	adds	r1, r7, r2
 8012982:	f005 f963 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012986:	4680      	mov	r8, r0
 8012988:	1d39      	adds	r1, r7, #4
 801298a:	4630      	mov	r0, r6
 801298c:	f7fc fda2 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012990:	ea05 0508 	and.w	r5, r5, r8
 8012994:	4604      	mov	r4, r0
 8012996:	1d79      	adds	r1, r7, #5
 8012998:	4630      	mov	r0, r6
 801299a:	402c      	ands	r4, r5
 801299c:	f7fc fd9a 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 80129a0:	4020      	ands	r0, r4
 80129a2:	b2c0      	uxtb	r0, r0
 80129a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129a8 <uxr_serialize_ReadSpecification>:
 80129a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129aa:	460d      	mov	r5, r1
 80129ac:	4606      	mov	r6, r0
 80129ae:	7809      	ldrb	r1, [r1, #0]
 80129b0:	f7fc fd7a 	bl	800f4a8 <ucdr_serialize_uint8_t>
 80129b4:	4604      	mov	r4, r0
 80129b6:	7869      	ldrb	r1, [r5, #1]
 80129b8:	4630      	mov	r0, r6
 80129ba:	f7fc fd75 	bl	800f4a8 <ucdr_serialize_uint8_t>
 80129be:	4004      	ands	r4, r0
 80129c0:	78a9      	ldrb	r1, [r5, #2]
 80129c2:	4630      	mov	r0, r6
 80129c4:	f7fc fd42 	bl	800f44c <ucdr_serialize_bool>
 80129c8:	78ab      	ldrb	r3, [r5, #2]
 80129ca:	b2e4      	uxtb	r4, r4
 80129cc:	4004      	ands	r4, r0
 80129ce:	b943      	cbnz	r3, 80129e2 <uxr_serialize_ReadSpecification+0x3a>
 80129d0:	7a29      	ldrb	r1, [r5, #8]
 80129d2:	4630      	mov	r0, r6
 80129d4:	f7fc fd3a 	bl	800f44c <ucdr_serialize_bool>
 80129d8:	7a2b      	ldrb	r3, [r5, #8]
 80129da:	4004      	ands	r4, r0
 80129dc:	b93b      	cbnz	r3, 80129ee <uxr_serialize_ReadSpecification+0x46>
 80129de:	4620      	mov	r0, r4
 80129e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129e2:	6869      	ldr	r1, [r5, #4]
 80129e4:	4630      	mov	r0, r6
 80129e6:	f005 f999 	bl	8017d1c <ucdr_serialize_string>
 80129ea:	4004      	ands	r4, r0
 80129ec:	e7f0      	b.n	80129d0 <uxr_serialize_ReadSpecification+0x28>
 80129ee:	8969      	ldrh	r1, [r5, #10]
 80129f0:	4630      	mov	r0, r6
 80129f2:	f7fc fd85 	bl	800f500 <ucdr_serialize_uint16_t>
 80129f6:	4607      	mov	r7, r0
 80129f8:	89a9      	ldrh	r1, [r5, #12]
 80129fa:	4630      	mov	r0, r6
 80129fc:	f7fc fd80 	bl	800f500 <ucdr_serialize_uint16_t>
 8012a00:	4007      	ands	r7, r0
 8012a02:	89e9      	ldrh	r1, [r5, #14]
 8012a04:	4630      	mov	r0, r6
 8012a06:	f7fc fd7b 	bl	800f500 <ucdr_serialize_uint16_t>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	b2ff      	uxtb	r7, r7
 8012a0e:	8a29      	ldrh	r1, [r5, #16]
 8012a10:	4630      	mov	r0, r6
 8012a12:	461e      	mov	r6, r3
 8012a14:	ea04 0507 	and.w	r5, r4, r7
 8012a18:	f7fc fd72 	bl	800f500 <ucdr_serialize_uint16_t>
 8012a1c:	4035      	ands	r5, r6
 8012a1e:	ea00 0405 	and.w	r4, r0, r5
 8012a22:	4620      	mov	r0, r4
 8012a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a26:	bf00      	nop

08012a28 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012a28:	f7ff bb2a 	b.w	8012080 <uxr_serialize_CLIENT_Representation>

08012a2c <uxr_serialize_CREATE_Payload>:
 8012a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a2e:	2202      	movs	r2, #2
 8012a30:	4606      	mov	r6, r0
 8012a32:	460d      	mov	r5, r1
 8012a34:	f005 f8a6 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012a38:	2202      	movs	r2, #2
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	4630      	mov	r0, r6
 8012a3e:	18a9      	adds	r1, r5, r2
 8012a40:	f005 f8a0 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012a44:	7929      	ldrb	r1, [r5, #4]
 8012a46:	4607      	mov	r7, r0
 8012a48:	4630      	mov	r0, r6
 8012a4a:	f7fc fd2d 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012a4e:	b170      	cbz	r0, 8012a6e <uxr_serialize_CREATE_Payload+0x42>
 8012a50:	792b      	ldrb	r3, [r5, #4]
 8012a52:	403c      	ands	r4, r7
 8012a54:	3b01      	subs	r3, #1
 8012a56:	b2e4      	uxtb	r4, r4
 8012a58:	2b0d      	cmp	r3, #13
 8012a5a:	d809      	bhi.n	8012a70 <uxr_serialize_CREATE_Payload+0x44>
 8012a5c:	e8df f003 	tbb	[pc, r3]
 8012a60:	23230a3e 	.word	0x23230a3e
 8012a64:	0a0a0a0a 	.word	0x0a0a0a0a
 8012a68:	12121208 	.word	0x12121208
 8012a6c:	5f58      	.short	0x5f58
 8012a6e:	2400      	movs	r4, #0
 8012a70:	4620      	mov	r0, r4
 8012a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a74:	f105 0108 	add.w	r1, r5, #8
 8012a78:	4630      	mov	r0, r6
 8012a7a:	f7ff fc09 	bl	8012290 <uxr_serialize_DATAWRITER_Representation>
 8012a7e:	4004      	ands	r4, r0
 8012a80:	4620      	mov	r0, r4
 8012a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a84:	7a29      	ldrb	r1, [r5, #8]
 8012a86:	4630      	mov	r0, r6
 8012a88:	f7fc fd0e 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	d0ee      	beq.n	8012a6e <uxr_serialize_CREATE_Payload+0x42>
 8012a90:	7a2b      	ldrb	r3, [r5, #8]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d001      	beq.n	8012a9a <uxr_serialize_CREATE_Payload+0x6e>
 8012a96:	2b02      	cmp	r3, #2
 8012a98:	d1ea      	bne.n	8012a70 <uxr_serialize_CREATE_Payload+0x44>
 8012a9a:	68e9      	ldr	r1, [r5, #12]
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	f005 f93d 	bl	8017d1c <ucdr_serialize_string>
 8012aa2:	4004      	ands	r4, r0
 8012aa4:	e7e4      	b.n	8012a70 <uxr_serialize_CREATE_Payload+0x44>
 8012aa6:	7a29      	ldrb	r1, [r5, #8]
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f7fc fcfd 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012aae:	4607      	mov	r7, r0
 8012ab0:	b158      	cbz	r0, 8012aca <uxr_serialize_CREATE_Payload+0x9e>
 8012ab2:	7a2b      	ldrb	r3, [r5, #8]
 8012ab4:	2b02      	cmp	r3, #2
 8012ab6:	d039      	beq.n	8012b2c <uxr_serialize_CREATE_Payload+0x100>
 8012ab8:	2b03      	cmp	r3, #3
 8012aba:	d106      	bne.n	8012aca <uxr_serialize_CREATE_Payload+0x9e>
 8012abc:	68ea      	ldr	r2, [r5, #12]
 8012abe:	f105 0110 	add.w	r1, r5, #16
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f7fd fd4e 	bl	8010564 <ucdr_serialize_sequence_uint8_t>
 8012ac8:	4607      	mov	r7, r0
 8012aca:	2202      	movs	r2, #2
 8012acc:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	f005 f857 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012ad6:	4038      	ands	r0, r7
 8012ad8:	4004      	ands	r4, r0
 8012ada:	e7c9      	b.n	8012a70 <uxr_serialize_CREATE_Payload+0x44>
 8012adc:	7a29      	ldrb	r1, [r5, #8]
 8012ade:	4630      	mov	r0, r6
 8012ae0:	f7fc fce2 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012ae4:	4607      	mov	r7, r0
 8012ae6:	b158      	cbz	r0, 8012b00 <uxr_serialize_CREATE_Payload+0xd4>
 8012ae8:	7a2b      	ldrb	r3, [r5, #8]
 8012aea:	2b02      	cmp	r3, #2
 8012aec:	d003      	beq.n	8012af6 <uxr_serialize_CREATE_Payload+0xca>
 8012aee:	2b03      	cmp	r3, #3
 8012af0:	d022      	beq.n	8012b38 <uxr_serialize_CREATE_Payload+0x10c>
 8012af2:	2b01      	cmp	r3, #1
 8012af4:	d104      	bne.n	8012b00 <uxr_serialize_CREATE_Payload+0xd4>
 8012af6:	68e9      	ldr	r1, [r5, #12]
 8012af8:	4630      	mov	r0, r6
 8012afa:	f005 f90f 	bl	8017d1c <ucdr_serialize_string>
 8012afe:	4607      	mov	r7, r0
 8012b00:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8012b04:	4630      	mov	r0, r6
 8012b06:	f7fd fa01 	bl	800ff0c <ucdr_serialize_int16_t>
 8012b0a:	4038      	ands	r0, r7
 8012b0c:	4004      	ands	r4, r0
 8012b0e:	e7af      	b.n	8012a70 <uxr_serialize_CREATE_Payload+0x44>
 8012b10:	f105 0108 	add.w	r1, r5, #8
 8012b14:	4630      	mov	r0, r6
 8012b16:	f7ff fb71 	bl	80121fc <uxr_serialize_AGENT_Representation>
 8012b1a:	4004      	ands	r4, r0
 8012b1c:	e7a8      	b.n	8012a70 <uxr_serialize_CREATE_Payload+0x44>
 8012b1e:	f105 0108 	add.w	r1, r5, #8
 8012b22:	4630      	mov	r0, r6
 8012b24:	f7ff faac 	bl	8012080 <uxr_serialize_CLIENT_Representation>
 8012b28:	4004      	ands	r4, r0
 8012b2a:	e7a1      	b.n	8012a70 <uxr_serialize_CREATE_Payload+0x44>
 8012b2c:	68e9      	ldr	r1, [r5, #12]
 8012b2e:	4630      	mov	r0, r6
 8012b30:	f005 f8f4 	bl	8017d1c <ucdr_serialize_string>
 8012b34:	4607      	mov	r7, r0
 8012b36:	e7c8      	b.n	8012aca <uxr_serialize_CREATE_Payload+0x9e>
 8012b38:	68ea      	ldr	r2, [r5, #12]
 8012b3a:	f105 0110 	add.w	r1, r5, #16
 8012b3e:	4630      	mov	r0, r6
 8012b40:	f7fd fd10 	bl	8010564 <ucdr_serialize_sequence_uint8_t>
 8012b44:	4607      	mov	r7, r0
 8012b46:	e7db      	b.n	8012b00 <uxr_serialize_CREATE_Payload+0xd4>

08012b48 <uxr_deserialize_GET_INFO_Payload>:
 8012b48:	b570      	push	{r4, r5, r6, lr}
 8012b4a:	2202      	movs	r2, #2
 8012b4c:	4605      	mov	r5, r0
 8012b4e:	460e      	mov	r6, r1
 8012b50:	f005 f87c 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012b54:	2202      	movs	r2, #2
 8012b56:	4604      	mov	r4, r0
 8012b58:	4628      	mov	r0, r5
 8012b5a:	18b1      	adds	r1, r6, r2
 8012b5c:	f005 f876 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012b60:	4603      	mov	r3, r0
 8012b62:	1d31      	adds	r1, r6, #4
 8012b64:	4628      	mov	r0, r5
 8012b66:	401c      	ands	r4, r3
 8012b68:	f7fc ffea 	bl	800fb40 <ucdr_deserialize_uint32_t>
 8012b6c:	b2e4      	uxtb	r4, r4
 8012b6e:	4020      	ands	r0, r4
 8012b70:	bd70      	pop	{r4, r5, r6, pc}
 8012b72:	bf00      	nop

08012b74 <uxr_serialize_DELETE_Payload>:
 8012b74:	b570      	push	{r4, r5, r6, lr}
 8012b76:	2202      	movs	r2, #2
 8012b78:	4605      	mov	r5, r0
 8012b7a:	460e      	mov	r6, r1
 8012b7c:	f005 f802 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012b80:	2202      	movs	r2, #2
 8012b82:	4604      	mov	r4, r0
 8012b84:	4628      	mov	r0, r5
 8012b86:	18b1      	adds	r1, r6, r2
 8012b88:	f004 fffc 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012b8c:	4020      	ands	r0, r4
 8012b8e:	b2c0      	uxtb	r0, r0
 8012b90:	bd70      	pop	{r4, r5, r6, pc}
 8012b92:	bf00      	nop

08012b94 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b98:	4605      	mov	r5, r0
 8012b9a:	460e      	mov	r6, r1
 8012b9c:	f7fc fc9a 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	1c71      	adds	r1, r6, #1
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	f7fc fc95 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012baa:	4681      	mov	r9, r0
 8012bac:	2204      	movs	r2, #4
 8012bae:	4628      	mov	r0, r5
 8012bb0:	ea04 0409 	and.w	r4, r4, r9
 8012bb4:	18b1      	adds	r1, r6, r2
 8012bb6:	f005 f849 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012bba:	f106 0108 	add.w	r1, r6, #8
 8012bbe:	4680      	mov	r8, r0
 8012bc0:	2202      	movs	r2, #2
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	b2e4      	uxtb	r4, r4
 8012bc6:	f005 f841 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012bca:	2202      	movs	r2, #2
 8012bcc:	f106 010a 	add.w	r1, r6, #10
 8012bd0:	4607      	mov	r7, r0
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	ea04 0408 	and.w	r4, r4, r8
 8012bd8:	f005 f838 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	4027      	ands	r7, r4
 8012be0:	4628      	mov	r0, r5
 8012be2:	461d      	mov	r5, r3
 8012be4:	f106 010c 	add.w	r1, r6, #12
 8012be8:	f7fc fc46 	bl	800f478 <ucdr_deserialize_bool>
 8012bec:	403d      	ands	r5, r7
 8012bee:	4028      	ands	r0, r5
 8012bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012bf4 <uxr_deserialize_STATUS_Payload>:
 8012bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf8:	2202      	movs	r2, #2
 8012bfa:	4606      	mov	r6, r0
 8012bfc:	460f      	mov	r7, r1
 8012bfe:	f005 f825 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012c02:	2202      	movs	r2, #2
 8012c04:	4605      	mov	r5, r0
 8012c06:	4630      	mov	r0, r6
 8012c08:	18b9      	adds	r1, r7, r2
 8012c0a:	f005 f81f 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012c0e:	4680      	mov	r8, r0
 8012c10:	1d39      	adds	r1, r7, #4
 8012c12:	4630      	mov	r0, r6
 8012c14:	f7fc fc5e 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012c18:	ea05 0508 	and.w	r5, r5, r8
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	1d79      	adds	r1, r7, #5
 8012c20:	4630      	mov	r0, r6
 8012c22:	402c      	ands	r4, r5
 8012c24:	f7fc fc56 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012c28:	4020      	ands	r0, r4
 8012c2a:	b2c0      	uxtb	r0, r0
 8012c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c30 <uxr_serialize_INFO_Payload>:
 8012c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c34:	2202      	movs	r2, #2
 8012c36:	460c      	mov	r4, r1
 8012c38:	4605      	mov	r5, r0
 8012c3a:	f004 ffa3 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012c3e:	2202      	movs	r2, #2
 8012c40:	4680      	mov	r8, r0
 8012c42:	4628      	mov	r0, r5
 8012c44:	18a1      	adds	r1, r4, r2
 8012c46:	f004 ff9d 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012c4a:	4607      	mov	r7, r0
 8012c4c:	7921      	ldrb	r1, [r4, #4]
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f7fc fc2a 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012c54:	ea08 0807 	and.w	r8, r8, r7
 8012c58:	4606      	mov	r6, r0
 8012c5a:	7961      	ldrb	r1, [r4, #5]
 8012c5c:	4628      	mov	r0, r5
 8012c5e:	ea06 0608 	and.w	r6, r6, r8
 8012c62:	f7fc fc21 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012c66:	7a21      	ldrb	r1, [r4, #8]
 8012c68:	ea00 0706 	and.w	r7, r0, r6
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f7fc fbed 	bl	800f44c <ucdr_serialize_bool>
 8012c72:	7a23      	ldrb	r3, [r4, #8]
 8012c74:	b2ff      	uxtb	r7, r7
 8012c76:	4606      	mov	r6, r0
 8012c78:	b96b      	cbnz	r3, 8012c96 <uxr_serialize_INFO_Payload+0x66>
 8012c7a:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012c7e:	4628      	mov	r0, r5
 8012c80:	f7fc fbe4 	bl	800f44c <ucdr_serialize_bool>
 8012c84:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8012c88:	4030      	ands	r0, r6
 8012c8a:	b2c6      	uxtb	r6, r0
 8012c8c:	b983      	cbnz	r3, 8012cb0 <uxr_serialize_INFO_Payload+0x80>
 8012c8e:	ea06 0007 	and.w	r0, r6, r7
 8012c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c96:	7b21      	ldrb	r1, [r4, #12]
 8012c98:	4628      	mov	r0, r5
 8012c9a:	f7fc fc05 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012c9e:	b188      	cbz	r0, 8012cc4 <uxr_serialize_INFO_Payload+0x94>
 8012ca0:	f104 010c 	add.w	r1, r4, #12
 8012ca4:	4628      	mov	r0, r5
 8012ca6:	f7ff fb1b 	bl	80122e0 <uxr_serialize_ObjectVariant.part.0>
 8012caa:	4030      	ands	r0, r6
 8012cac:	b2c6      	uxtb	r6, r0
 8012cae:	e7e4      	b.n	8012c7a <uxr_serialize_INFO_Payload+0x4a>
 8012cb0:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	f7ff fdcb 	bl	8012850 <uxr_serialize_ActivityInfoVariant>
 8012cba:	4006      	ands	r6, r0
 8012cbc:	ea06 0007 	and.w	r0, r6, r7
 8012cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc4:	4606      	mov	r6, r0
 8012cc6:	e7d8      	b.n	8012c7a <uxr_serialize_INFO_Payload+0x4a>

08012cc8 <uxr_serialize_READ_DATA_Payload>:
 8012cc8:	b570      	push	{r4, r5, r6, lr}
 8012cca:	2202      	movs	r2, #2
 8012ccc:	4605      	mov	r5, r0
 8012cce:	460e      	mov	r6, r1
 8012cd0:	f004 ff58 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012cd4:	2202      	movs	r2, #2
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	4628      	mov	r0, r5
 8012cda:	18b1      	adds	r1, r6, r2
 8012cdc:	f004 ff52 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	1d31      	adds	r1, r6, #4
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	401c      	ands	r4, r3
 8012ce8:	f7ff fe5e 	bl	80129a8 <uxr_serialize_ReadSpecification>
 8012cec:	b2e4      	uxtb	r4, r4
 8012cee:	4020      	ands	r0, r4
 8012cf0:	bd70      	pop	{r4, r5, r6, pc}
 8012cf2:	bf00      	nop

08012cf4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012cf4:	b570      	push	{r4, r5, r6, lr}
 8012cf6:	2202      	movs	r2, #2
 8012cf8:	4605      	mov	r5, r0
 8012cfa:	460e      	mov	r6, r1
 8012cfc:	f004 ff42 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012d00:	2202      	movs	r2, #2
 8012d02:	4604      	mov	r4, r0
 8012d04:	4628      	mov	r0, r5
 8012d06:	18b1      	adds	r1, r6, r2
 8012d08:	f004 ff3c 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012d0c:	4020      	ands	r0, r4
 8012d0e:	b2c0      	uxtb	r0, r0
 8012d10:	bd70      	pop	{r4, r5, r6, pc}
 8012d12:	bf00      	nop

08012d14 <uxr_serialize_ACKNACK_Payload>:
 8012d14:	b570      	push	{r4, r5, r6, lr}
 8012d16:	460c      	mov	r4, r1
 8012d18:	4605      	mov	r5, r0
 8012d1a:	460e      	mov	r6, r1
 8012d1c:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012d20:	f7fc fbee 	bl	800f500 <ucdr_serialize_uint16_t>
 8012d24:	2202      	movs	r2, #2
 8012d26:	4621      	mov	r1, r4
 8012d28:	4604      	mov	r4, r0
 8012d2a:	4628      	mov	r0, r5
 8012d2c:	f004 ff2a 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012d30:	4603      	mov	r3, r0
 8012d32:	7931      	ldrb	r1, [r6, #4]
 8012d34:	4628      	mov	r0, r5
 8012d36:	401c      	ands	r4, r3
 8012d38:	f7fc fbb6 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012d3c:	b2e4      	uxtb	r4, r4
 8012d3e:	4020      	ands	r0, r4
 8012d40:	bd70      	pop	{r4, r5, r6, pc}
 8012d42:	bf00      	nop

08012d44 <uxr_deserialize_ACKNACK_Payload>:
 8012d44:	b570      	push	{r4, r5, r6, lr}
 8012d46:	4605      	mov	r5, r0
 8012d48:	460e      	mov	r6, r1
 8012d4a:	f7fc fcdd 	bl	800f708 <ucdr_deserialize_uint16_t>
 8012d4e:	2202      	movs	r2, #2
 8012d50:	4604      	mov	r4, r0
 8012d52:	4628      	mov	r0, r5
 8012d54:	18b1      	adds	r1, r6, r2
 8012d56:	f004 ff79 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	1d31      	adds	r1, r6, #4
 8012d5e:	4628      	mov	r0, r5
 8012d60:	401c      	ands	r4, r3
 8012d62:	f7fc fbb7 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012d66:	b2e4      	uxtb	r4, r4
 8012d68:	4020      	ands	r0, r4
 8012d6a:	bd70      	pop	{r4, r5, r6, pc}

08012d6c <uxr_serialize_HEARTBEAT_Payload>:
 8012d6c:	b570      	push	{r4, r5, r6, lr}
 8012d6e:	460d      	mov	r5, r1
 8012d70:	4606      	mov	r6, r0
 8012d72:	8809      	ldrh	r1, [r1, #0]
 8012d74:	f7fc fbc4 	bl	800f500 <ucdr_serialize_uint16_t>
 8012d78:	8869      	ldrh	r1, [r5, #2]
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f7fc fbbf 	bl	800f500 <ucdr_serialize_uint16_t>
 8012d82:	4603      	mov	r3, r0
 8012d84:	7929      	ldrb	r1, [r5, #4]
 8012d86:	4630      	mov	r0, r6
 8012d88:	401c      	ands	r4, r3
 8012d8a:	f7fc fb8d 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012d8e:	b2e4      	uxtb	r4, r4
 8012d90:	4020      	ands	r0, r4
 8012d92:	bd70      	pop	{r4, r5, r6, pc}

08012d94 <uxr_deserialize_HEARTBEAT_Payload>:
 8012d94:	b570      	push	{r4, r5, r6, lr}
 8012d96:	4605      	mov	r5, r0
 8012d98:	460e      	mov	r6, r1
 8012d9a:	f7fc fcb5 	bl	800f708 <ucdr_deserialize_uint16_t>
 8012d9e:	4604      	mov	r4, r0
 8012da0:	1cb1      	adds	r1, r6, #2
 8012da2:	4628      	mov	r0, r5
 8012da4:	f7fc fcb0 	bl	800f708 <ucdr_deserialize_uint16_t>
 8012da8:	4603      	mov	r3, r0
 8012daa:	1d31      	adds	r1, r6, #4
 8012dac:	4628      	mov	r0, r5
 8012dae:	401c      	ands	r4, r3
 8012db0:	f7fc fb90 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012db4:	b2e4      	uxtb	r4, r4
 8012db6:	4020      	ands	r0, r4
 8012db8:	bd70      	pop	{r4, r5, r6, pc}
 8012dba:	bf00      	nop

08012dbc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dc0:	4605      	mov	r5, r0
 8012dc2:	460e      	mov	r6, r1
 8012dc4:	f7fd fa48 	bl	8010258 <ucdr_deserialize_int32_t>
 8012dc8:	4607      	mov	r7, r0
 8012dca:	1d31      	adds	r1, r6, #4
 8012dcc:	4628      	mov	r0, r5
 8012dce:	f7fc feb7 	bl	800fb40 <ucdr_deserialize_uint32_t>
 8012dd2:	4680      	mov	r8, r0
 8012dd4:	f106 0108 	add.w	r1, r6, #8
 8012dd8:	4628      	mov	r0, r5
 8012dda:	f7fd fa3d 	bl	8010258 <ucdr_deserialize_int32_t>
 8012dde:	ea07 0708 	and.w	r7, r7, r8
 8012de2:	4604      	mov	r4, r0
 8012de4:	f106 010c 	add.w	r1, r6, #12
 8012de8:	4628      	mov	r0, r5
 8012dea:	403c      	ands	r4, r7
 8012dec:	f7fc fea8 	bl	800fb40 <ucdr_deserialize_uint32_t>
 8012df0:	f106 0110 	add.w	r1, r6, #16
 8012df4:	4004      	ands	r4, r0
 8012df6:	4628      	mov	r0, r5
 8012df8:	f7fd fa2e 	bl	8010258 <ucdr_deserialize_int32_t>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	b2e4      	uxtb	r4, r4
 8012e00:	4628      	mov	r0, r5
 8012e02:	461d      	mov	r5, r3
 8012e04:	f106 0114 	add.w	r1, r6, #20
 8012e08:	f7fc fe9a 	bl	800fb40 <ucdr_deserialize_uint32_t>
 8012e0c:	402c      	ands	r4, r5
 8012e0e:	4020      	ands	r0, r4
 8012e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e14 <uxr_serialize_SampleIdentity>:
 8012e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e18:	4604      	mov	r4, r0
 8012e1a:	460d      	mov	r5, r1
 8012e1c:	220c      	movs	r2, #12
 8012e1e:	f004 feb1 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012e22:	2203      	movs	r2, #3
 8012e24:	f105 010c 	add.w	r1, r5, #12
 8012e28:	4607      	mov	r7, r0
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f004 feaa 	bl	8017b84 <ucdr_serialize_array_uint8_t>
 8012e30:	7be9      	ldrb	r1, [r5, #15]
 8012e32:	4680      	mov	r8, r0
 8012e34:	4620      	mov	r0, r4
 8012e36:	f7fc fb37 	bl	800f4a8 <ucdr_serialize_uint8_t>
 8012e3a:	6929      	ldr	r1, [r5, #16]
 8012e3c:	4606      	mov	r6, r0
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f7fd f96a 	bl	8010118 <ucdr_serialize_int32_t>
 8012e44:	ea07 0708 	and.w	r7, r7, r8
 8012e48:	4603      	mov	r3, r0
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	403e      	ands	r6, r7
 8012e4e:	6969      	ldr	r1, [r5, #20]
 8012e50:	461c      	mov	r4, r3
 8012e52:	f7fc fd45 	bl	800f8e0 <ucdr_serialize_uint32_t>
 8012e56:	4034      	ands	r4, r6
 8012e58:	4020      	ands	r0, r4
 8012e5a:	b2c0      	uxtb	r0, r0
 8012e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e60 <uxr_deserialize_SampleIdentity>:
 8012e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e64:	4604      	mov	r4, r0
 8012e66:	460d      	mov	r5, r1
 8012e68:	220c      	movs	r2, #12
 8012e6a:	f004 feef 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012e6e:	2203      	movs	r2, #3
 8012e70:	f105 010c 	add.w	r1, r5, #12
 8012e74:	4607      	mov	r7, r0
 8012e76:	4620      	mov	r0, r4
 8012e78:	f004 fee8 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8012e7c:	f105 010f 	add.w	r1, r5, #15
 8012e80:	4680      	mov	r8, r0
 8012e82:	4620      	mov	r0, r4
 8012e84:	f7fc fb26 	bl	800f4d4 <ucdr_deserialize_uint8_t>
 8012e88:	f105 0110 	add.w	r1, r5, #16
 8012e8c:	4606      	mov	r6, r0
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f7fd f9e2 	bl	8010258 <ucdr_deserialize_int32_t>
 8012e94:	ea07 0708 	and.w	r7, r7, r8
 8012e98:	4603      	mov	r3, r0
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	403e      	ands	r6, r7
 8012e9e:	f105 0114 	add.w	r1, r5, #20
 8012ea2:	461c      	mov	r4, r3
 8012ea4:	f7fc fe4c 	bl	800fb40 <ucdr_deserialize_uint32_t>
 8012ea8:	4034      	ands	r4, r6
 8012eaa:	4020      	ands	r0, r4
 8012eac:	b2c0      	uxtb	r0, r0
 8012eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb2:	bf00      	nop

08012eb4 <rcl_client_get_rmw_handle>:
 8012eb4:	b118      	cbz	r0, 8012ebe <rcl_client_get_rmw_handle+0xa>
 8012eb6:	6800      	ldr	r0, [r0, #0]
 8012eb8:	b108      	cbz	r0, 8012ebe <rcl_client_get_rmw_handle+0xa>
 8012eba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012ebe:	4770      	bx	lr

08012ec0 <rcl_send_request>:
 8012ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ec2:	b08b      	sub	sp, #44	@ 0x2c
 8012ec4:	b1e8      	cbz	r0, 8012f02 <rcl_send_request+0x42>
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	6800      	ldr	r0, [r0, #0]
 8012eca:	b1d0      	cbz	r0, 8012f02 <rcl_send_request+0x42>
 8012ecc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8012ed0:	b1bb      	cbz	r3, 8012f02 <rcl_send_request+0x42>
 8012ed2:	4615      	mov	r5, r2
 8012ed4:	b1d2      	cbz	r2, 8012f0c <rcl_send_request+0x4c>
 8012ed6:	460f      	mov	r7, r1
 8012ed8:	b1c1      	cbz	r1, 8012f0c <rcl_send_request+0x4c>
 8012eda:	2105      	movs	r1, #5
 8012edc:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012ee0:	f002 ff6a 	bl	8015db8 <__atomic_load_8>
 8012ee4:	6823      	ldr	r3, [r4, #0]
 8012ee6:	462a      	mov	r2, r5
 8012ee8:	e9c5 0100 	strd	r0, r1, [r5]
 8012eec:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012ef0:	4639      	mov	r1, r7
 8012ef2:	f004 f941 	bl	8017178 <rmw_send_request>
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	b160      	cbz	r0, 8012f14 <rcl_send_request+0x54>
 8012efa:	2601      	movs	r6, #1
 8012efc:	4630      	mov	r0, r6
 8012efe:	b00b      	add	sp, #44	@ 0x2c
 8012f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f02:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8012f06:	4630      	mov	r0, r6
 8012f08:	b00b      	add	sp, #44	@ 0x2c
 8012f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f0c:	260b      	movs	r6, #11
 8012f0e:	4630      	mov	r0, r6
 8012f10:	b00b      	add	sp, #44	@ 0x2c
 8012f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f14:	6820      	ldr	r0, [r4, #0]
 8012f16:	2305      	movs	r3, #5
 8012f18:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012f1c:	9300      	str	r3, [sp, #0]
 8012f1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f22:	f002 ffb5 	bl	8015e90 <__atomic_exchange_8>
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8012f2c:	2a00      	cmp	r2, #0
 8012f2e:	d0e5      	beq.n	8012efc <rcl_send_request+0x3c>
 8012f30:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012f34:	a905      	add	r1, sp, #20
 8012f36:	f003 fd17 	bl	8016968 <rmw_get_gid_for_client>
 8012f3a:	b980      	cbnz	r0, 8012f5e <rcl_send_request+0x9e>
 8012f3c:	6821      	ldr	r1, [r4, #0]
 8012f3e:	ab06      	add	r3, sp, #24
 8012f40:	463a      	mov	r2, r7
 8012f42:	f8d1 0118 	ldr.w	r0, [r1, #280]	@ 0x118
 8012f46:	4631      	mov	r1, r6
 8012f48:	9302      	str	r3, [sp, #8]
 8012f4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012f4e:	e9cd 4500 	strd	r4, r5, [sp]
 8012f52:	f000 fe91 	bl	8013c78 <rcl_send_service_event_message>
 8012f56:	2800      	cmp	r0, #0
 8012f58:	bf18      	it	ne
 8012f5a:	4606      	movne	r6, r0
 8012f5c:	e7ce      	b.n	8012efc <rcl_send_request+0x3c>
 8012f5e:	f000 f879 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 8012f62:	4606      	mov	r6, r0
 8012f64:	e7ca      	b.n	8012efc <rcl_send_request+0x3c>
 8012f66:	bf00      	nop

08012f68 <rcl_take_response>:
 8012f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f6a:	468e      	mov	lr, r1
 8012f6c:	b095      	sub	sp, #84	@ 0x54
 8012f6e:	460c      	mov	r4, r1
 8012f70:	4617      	mov	r7, r2
 8012f72:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8012f76:	4605      	mov	r5, r0
 8012f78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f80:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012f84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012f88:	2d00      	cmp	r5, #0
 8012f8a:	d044      	beq.n	8013016 <rcl_take_response+0xae>
 8012f8c:	682b      	ldr	r3, [r5, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d041      	beq.n	8013016 <rcl_take_response+0xae>
 8012f92:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d03d      	beq.n	8013016 <rcl_take_response+0xae>
 8012f9a:	2f00      	cmp	r7, #0
 8012f9c:	d03e      	beq.n	801301c <rcl_take_response+0xb4>
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	463a      	mov	r2, r7
 8012fa2:	a90a      	add	r1, sp, #40	@ 0x28
 8012fa4:	f88d 3013 	strb.w	r3, [sp, #19]
 8012fa8:	f10d 0313 	add.w	r3, sp, #19
 8012fac:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013038 <rcl_take_response+0xd0>
 8012fb0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8012fb4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012fb8:	f004 f9de 	bl	8017378 <rmw_take_response>
 8012fbc:	4606      	mov	r6, r0
 8012fbe:	bb78      	cbnz	r0, 8013020 <rcl_take_response+0xb8>
 8012fc0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8012fc4:	b373      	cbz	r3, 8013024 <rcl_take_response+0xbc>
 8012fc6:	682b      	ldr	r3, [r5, #0]
 8012fc8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8012fcc:	b1aa      	cbz	r2, 8012ffa <rcl_take_response+0x92>
 8012fce:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012fd2:	a905      	add	r1, sp, #20
 8012fd4:	f003 fcc8 	bl	8016968 <rmw_get_gid_for_client>
 8012fd8:	bb38      	cbnz	r0, 801302a <rcl_take_response+0xc2>
 8012fda:	682b      	ldr	r3, [r5, #0]
 8012fdc:	463a      	mov	r2, r7
 8012fde:	2103      	movs	r1, #3
 8012fe0:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8012fe4:	ab06      	add	r3, sp, #24
 8012fe6:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8012fea:	9302      	str	r3, [sp, #8]
 8012fec:	ed8d 7b00 	vstr	d7, [sp]
 8012ff0:	f000 fe42 	bl	8013c78 <rcl_send_service_event_message>
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	bf18      	it	ne
 8012ff8:	4606      	movne	r6, r0
 8012ffa:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8012ffe:	46a4      	mov	ip, r4
 8013000:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013004:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013008:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801300c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013010:	4630      	mov	r0, r6
 8013012:	b015      	add	sp, #84	@ 0x54
 8013014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013016:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801301a:	e7ee      	b.n	8012ffa <rcl_take_response+0x92>
 801301c:	260b      	movs	r6, #11
 801301e:	e7ec      	b.n	8012ffa <rcl_take_response+0x92>
 8013020:	2601      	movs	r6, #1
 8013022:	e7ea      	b.n	8012ffa <rcl_take_response+0x92>
 8013024:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8013028:	e7e7      	b.n	8012ffa <rcl_take_response+0x92>
 801302a:	f000 f813 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 801302e:	4606      	mov	r6, r0
 8013030:	e7e3      	b.n	8012ffa <rcl_take_response+0x92>
 8013032:	bf00      	nop
 8013034:	f3af 8000 	nop.w
	...

08013040 <rcl_client_is_valid>:
 8013040:	b130      	cbz	r0, 8013050 <rcl_client_is_valid+0x10>
 8013042:	6800      	ldr	r0, [r0, #0]
 8013044:	b120      	cbz	r0, 8013050 <rcl_client_is_valid+0x10>
 8013046:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801304a:	3800      	subs	r0, #0
 801304c:	bf18      	it	ne
 801304e:	2001      	movne	r0, #1
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop

08013054 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013054:	280b      	cmp	r0, #11
 8013056:	dc0d      	bgt.n	8013074 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013058:	2800      	cmp	r0, #0
 801305a:	db09      	blt.n	8013070 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801305c:	280b      	cmp	r0, #11
 801305e:	d807      	bhi.n	8013070 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013060:	e8df f000 	tbb	[pc, r0]
 8013064:	07060607 	.word	0x07060607
 8013068:	06060606 	.word	0x06060606
 801306c:	07070606 	.word	0x07070606
 8013070:	2001      	movs	r0, #1
 8013072:	4770      	bx	lr
 8013074:	28cb      	cmp	r0, #203	@ 0xcb
 8013076:	bf14      	ite	ne
 8013078:	2001      	movne	r0, #1
 801307a:	20cb      	moveq	r0, #203	@ 0xcb
 801307c:	4770      	bx	lr
 801307e:	bf00      	nop

08013080 <rcl_get_zero_initialized_context>:
 8013080:	4a03      	ldr	r2, [pc, #12]	@ (8013090 <rcl_get_zero_initialized_context+0x10>)
 8013082:	4603      	mov	r3, r0
 8013084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013088:	e883 0003 	stmia.w	r3, {r0, r1}
 801308c:	4618      	mov	r0, r3
 801308e:	4770      	bx	lr
 8013090:	0801c5c4 	.word	0x0801c5c4

08013094 <rcl_context_is_valid>:
 8013094:	b118      	cbz	r0, 801309e <rcl_context_is_valid+0xa>
 8013096:	6840      	ldr	r0, [r0, #4]
 8013098:	3800      	subs	r0, #0
 801309a:	bf18      	it	ne
 801309c:	2001      	movne	r0, #1
 801309e:	4770      	bx	lr

080130a0 <__cleanup_context>:
 80130a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130a4:	4606      	mov	r6, r0
 80130a6:	2300      	movs	r3, #0
 80130a8:	6800      	ldr	r0, [r0, #0]
 80130aa:	6073      	str	r3, [r6, #4]
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d042      	beq.n	8013136 <__cleanup_context+0x96>
 80130b0:	6943      	ldr	r3, [r0, #20]
 80130b2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80130b6:	6907      	ldr	r7, [r0, #16]
 80130b8:	b39b      	cbz	r3, 8013122 <__cleanup_context+0x82>
 80130ba:	3014      	adds	r0, #20
 80130bc:	f000 f9d0 	bl	8013460 <rcl_init_options_fini>
 80130c0:	4680      	mov	r8, r0
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d144      	bne.n	8013150 <__cleanup_context+0xb0>
 80130c6:	6830      	ldr	r0, [r6, #0]
 80130c8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80130ca:	b123      	cbz	r3, 80130d6 <__cleanup_context+0x36>
 80130cc:	3028      	adds	r0, #40	@ 0x28
 80130ce:	f003 fe9d 	bl	8016e0c <rmw_context_fini>
 80130d2:	bbb8      	cbnz	r0, 8013144 <__cleanup_context+0xa4>
 80130d4:	6830      	ldr	r0, [r6, #0]
 80130d6:	6a03      	ldr	r3, [r0, #32]
 80130d8:	b1db      	cbz	r3, 8013112 <__cleanup_context+0x72>
 80130da:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80130de:	2a01      	cmp	r2, #1
 80130e0:	f17c 0100 	sbcs.w	r1, ip, #0
 80130e4:	db11      	blt.n	801310a <__cleanup_context+0x6a>
 80130e6:	2400      	movs	r4, #0
 80130e8:	4625      	mov	r5, r4
 80130ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80130ee:	4639      	mov	r1, r7
 80130f0:	b1c8      	cbz	r0, 8013126 <__cleanup_context+0x86>
 80130f2:	47c8      	blx	r9
 80130f4:	6833      	ldr	r3, [r6, #0]
 80130f6:	3401      	adds	r4, #1
 80130f8:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80130fc:	f145 0500 	adc.w	r5, r5, #0
 8013100:	6a1b      	ldr	r3, [r3, #32]
 8013102:	4294      	cmp	r4, r2
 8013104:	eb75 010c 	sbcs.w	r1, r5, ip
 8013108:	dbef      	blt.n	80130ea <__cleanup_context+0x4a>
 801310a:	4618      	mov	r0, r3
 801310c:	4639      	mov	r1, r7
 801310e:	47c8      	blx	r9
 8013110:	6830      	ldr	r0, [r6, #0]
 8013112:	4639      	mov	r1, r7
 8013114:	47c8      	blx	r9
 8013116:	2300      	movs	r3, #0
 8013118:	4640      	mov	r0, r8
 801311a:	e9c6 3300 	strd	r3, r3, [r6]
 801311e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013122:	4698      	mov	r8, r3
 8013124:	e7d0      	b.n	80130c8 <__cleanup_context+0x28>
 8013126:	3401      	adds	r4, #1
 8013128:	f145 0500 	adc.w	r5, r5, #0
 801312c:	4294      	cmp	r4, r2
 801312e:	eb75 010c 	sbcs.w	r1, r5, ip
 8013132:	dbda      	blt.n	80130ea <__cleanup_context+0x4a>
 8013134:	e7e9      	b.n	801310a <__cleanup_context+0x6a>
 8013136:	4680      	mov	r8, r0
 8013138:	2300      	movs	r3, #0
 801313a:	4640      	mov	r0, r8
 801313c:	e9c6 3300 	strd	r3, r3, [r6]
 8013140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013144:	f1b8 0f00 	cmp.w	r8, #0
 8013148:	d005      	beq.n	8013156 <__cleanup_context+0xb6>
 801314a:	f7fb fafd 	bl	800e748 <rcutils_reset_error>
 801314e:	e7c1      	b.n	80130d4 <__cleanup_context+0x34>
 8013150:	f7fb fafa 	bl	800e748 <rcutils_reset_error>
 8013154:	e7b7      	b.n	80130c6 <__cleanup_context+0x26>
 8013156:	f7ff ff7d 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 801315a:	4680      	mov	r8, r0
 801315c:	e7f5      	b.n	801314a <__cleanup_context+0xaa>
 801315e:	bf00      	nop

08013160 <rcl_init>:
 8013160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013164:	1e04      	subs	r4, r0, #0
 8013166:	b0a5      	sub	sp, #148	@ 0x94
 8013168:	460d      	mov	r5, r1
 801316a:	4617      	mov	r7, r2
 801316c:	461e      	mov	r6, r3
 801316e:	dd13      	ble.n	8013198 <rcl_init+0x38>
 8013170:	b161      	cbz	r1, 801318c <rcl_init+0x2c>
 8013172:	f1a1 0e04 	sub.w	lr, r1, #4
 8013176:	f04f 0c00 	mov.w	ip, #0
 801317a:	e001      	b.n	8013180 <rcl_init+0x20>
 801317c:	4564      	cmp	r4, ip
 801317e:	d00d      	beq.n	801319c <rcl_init+0x3c>
 8013180:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8013184:	f10c 0c01 	add.w	ip, ip, #1
 8013188:	2800      	cmp	r0, #0
 801318a:	d1f7      	bne.n	801317c <rcl_init+0x1c>
 801318c:	f04f 080b 	mov.w	r8, #11
 8013190:	4640      	mov	r0, r8
 8013192:	b025      	add	sp, #148	@ 0x94
 8013194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013198:	2900      	cmp	r1, #0
 801319a:	d1f7      	bne.n	801318c <rcl_init+0x2c>
 801319c:	2f00      	cmp	r7, #0
 801319e:	d0f5      	beq.n	801318c <rcl_init+0x2c>
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d0f2      	beq.n	801318c <rcl_init+0x2c>
 80131a6:	469c      	mov	ip, r3
 80131a8:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 80131ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80131b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80131b4:	f8dc 3000 	ldr.w	r3, [ip]
 80131b8:	a81f      	add	r0, sp, #124	@ 0x7c
 80131ba:	f8ce 3000 	str.w	r3, [lr]
 80131be:	f7fb fa9d 	bl	800e6fc <rcutils_allocator_is_valid>
 80131c2:	f080 0001 	eor.w	r0, r0, #1
 80131c6:	b2c0      	uxtb	r0, r0
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d1df      	bne.n	801318c <rcl_init+0x2c>
 80131cc:	2e00      	cmp	r6, #0
 80131ce:	d0dd      	beq.n	801318c <rcl_init+0x2c>
 80131d0:	6833      	ldr	r3, [r6, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d175      	bne.n	80132c2 <rcl_init+0x162>
 80131d6:	2198      	movs	r1, #152	@ 0x98
 80131d8:	2001      	movs	r0, #1
 80131da:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 80131de:	4798      	blx	r3
 80131e0:	4680      	mov	r8, r0
 80131e2:	6030      	str	r0, [r6, #0]
 80131e4:	2800      	cmp	r0, #0
 80131e6:	f000 80b4 	beq.w	8013352 <rcl_init+0x1f2>
 80131ea:	a802      	add	r0, sp, #8
 80131ec:	f003 f95a 	bl	80164a4 <rmw_get_zero_initialized_context>
 80131f0:	a902      	add	r1, sp, #8
 80131f2:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 80131f6:	2270      	movs	r2, #112	@ 0x70
 80131f8:	f007 fe39 	bl	801ae6e <memcpy>
 80131fc:	f8d6 8000 	ldr.w	r8, [r6]
 8013200:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8013204:	46c4      	mov	ip, r8
 8013206:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801320a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801320e:	f8de 3000 	ldr.w	r3, [lr]
 8013212:	f108 0114 	add.w	r1, r8, #20
 8013216:	4638      	mov	r0, r7
 8013218:	f8cc 3000 	str.w	r3, [ip]
 801321c:	f000 f94a 	bl	80134b4 <rcl_init_options_copy>
 8013220:	4680      	mov	r8, r0
 8013222:	2800      	cmp	r0, #0
 8013224:	d149      	bne.n	80132ba <rcl_init+0x15a>
 8013226:	f8d6 9000 	ldr.w	r9, [r6]
 801322a:	17e3      	asrs	r3, r4, #31
 801322c:	f8c9 0020 	str.w	r0, [r9, #32]
 8013230:	f8c9 4018 	str.w	r4, [r9, #24]
 8013234:	9301      	str	r3, [sp, #4]
 8013236:	f8c9 301c 	str.w	r3, [r9, #28]
 801323a:	2c00      	cmp	r4, #0
 801323c:	d049      	beq.n	80132d2 <rcl_init+0x172>
 801323e:	2d00      	cmp	r5, #0
 8013240:	d047      	beq.n	80132d2 <rcl_init+0x172>
 8013242:	2104      	movs	r1, #4
 8013244:	4620      	mov	r0, r4
 8013246:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 801324a:	4798      	blx	r3
 801324c:	f8c9 0020 	str.w	r0, [r9, #32]
 8013250:	f8d6 9000 	ldr.w	r9, [r6]
 8013254:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8013258:	f1bb 0f00 	cmp.w	fp, #0
 801325c:	d02b      	beq.n	80132b6 <rcl_init+0x156>
 801325e:	2c01      	cmp	r4, #1
 8013260:	9b01      	ldr	r3, [sp, #4]
 8013262:	f173 0300 	sbcs.w	r3, r3, #0
 8013266:	db34      	blt.n	80132d2 <rcl_init+0x172>
 8013268:	f04f 0800 	mov.w	r8, #0
 801326c:	3d04      	subs	r5, #4
 801326e:	46c1      	mov	r9, r8
 8013270:	e00e      	b.n	8013290 <rcl_init+0x130>
 8013272:	6829      	ldr	r1, [r5, #0]
 8013274:	f007 fdfb 	bl	801ae6e <memcpy>
 8013278:	f118 0801 	adds.w	r8, r8, #1
 801327c:	9b01      	ldr	r3, [sp, #4]
 801327e:	f149 0900 	adc.w	r9, r9, #0
 8013282:	454b      	cmp	r3, r9
 8013284:	bf08      	it	eq
 8013286:	4544      	cmpeq	r4, r8
 8013288:	d021      	beq.n	80132ce <rcl_init+0x16e>
 801328a:	6833      	ldr	r3, [r6, #0]
 801328c:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8013290:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013294:	f7ed f88c 	bl	80003b0 <strlen>
 8013298:	f100 0a01 	add.w	sl, r0, #1
 801329c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801329e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80132a0:	4650      	mov	r0, sl
 80132a2:	4798      	blx	r3
 80132a4:	6833      	ldr	r3, [r6, #0]
 80132a6:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 80132aa:	4652      	mov	r2, sl
 80132ac:	6a1b      	ldr	r3, [r3, #32]
 80132ae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d1dd      	bne.n	8013272 <rcl_init+0x112>
 80132b6:	f04f 080a 	mov.w	r8, #10
 80132ba:	4630      	mov	r0, r6
 80132bc:	f7ff fef0 	bl	80130a0 <__cleanup_context>
 80132c0:	e766      	b.n	8013190 <rcl_init+0x30>
 80132c2:	f04f 0864 	mov.w	r8, #100	@ 0x64
 80132c6:	4640      	mov	r0, r8
 80132c8:	b025      	add	sp, #148	@ 0x94
 80132ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ce:	f8d6 9000 	ldr.w	r9, [r6]
 80132d2:	4a33      	ldr	r2, [pc, #204]	@ (80133a0 <rcl_init+0x240>)
 80132d4:	6813      	ldr	r3, [r2, #0]
 80132d6:	3301      	adds	r3, #1
 80132d8:	d036      	beq.n	8013348 <rcl_init+0x1e8>
 80132da:	461d      	mov	r5, r3
 80132dc:	2000      	movs	r0, #0
 80132de:	4619      	mov	r1, r3
 80132e0:	f8d9 4014 	ldr.w	r4, [r9, #20]
 80132e4:	6073      	str	r3, [r6, #4]
 80132e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80132e8:	6011      	str	r1, [r2, #0]
 80132ea:	3301      	adds	r3, #1
 80132ec:	e9c4 5006 	strd	r5, r0, [r4, #24]
 80132f0:	d045      	beq.n	801337e <rcl_init+0x21e>
 80132f2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80132f6:	b37b      	cbz	r3, 8013358 <rcl_init+0x1f8>
 80132f8:	683a      	ldr	r2, [r7, #0]
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8013300:	d036      	beq.n	8013370 <rcl_init+0x210>
 8013302:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8013306:	2a00      	cmp	r2, #0
 8013308:	d043      	beq.n	8013392 <rcl_init+0x232>
 801330a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801330c:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8013310:	b953      	cbnz	r3, 8013328 <rcl_init+0x1c8>
 8013312:	2801      	cmp	r0, #1
 8013314:	d008      	beq.n	8013328 <rcl_init+0x1c8>
 8013316:	a91f      	add	r1, sp, #124	@ 0x7c
 8013318:	4628      	mov	r0, r5
 801331a:	f006 f8d3 	bl	80194c4 <rcl_get_discovery_static_peers>
 801331e:	4680      	mov	r8, r0
 8013320:	2800      	cmp	r0, #0
 8013322:	d1ca      	bne.n	80132ba <rcl_init+0x15a>
 8013324:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8013328:	f006 f8c2 	bl	80194b0 <rcl_automatic_discovery_range_to_string>
 801332c:	6831      	ldr	r1, [r6, #0]
 801332e:	6948      	ldr	r0, [r1, #20]
 8013330:	3128      	adds	r1, #40	@ 0x28
 8013332:	3018      	adds	r0, #24
 8013334:	f003 fc38 	bl	8016ba8 <rmw_init>
 8013338:	4680      	mov	r8, r0
 801333a:	2800      	cmp	r0, #0
 801333c:	f43f af28 	beq.w	8013190 <rcl_init+0x30>
 8013340:	f7ff fe88 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 8013344:	4680      	mov	r8, r0
 8013346:	e7b8      	b.n	80132ba <rcl_init+0x15a>
 8013348:	2101      	movs	r1, #1
 801334a:	4618      	mov	r0, r3
 801334c:	460d      	mov	r5, r1
 801334e:	460b      	mov	r3, r1
 8013350:	e7c6      	b.n	80132e0 <rcl_init+0x180>
 8013352:	f04f 080a 	mov.w	r8, #10
 8013356:	e71b      	b.n	8013190 <rcl_init+0x30>
 8013358:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 801335c:	f000 f908 	bl	8013570 <rcl_get_localhost_only>
 8013360:	4680      	mov	r8, r0
 8013362:	2800      	cmp	r0, #0
 8013364:	d1a9      	bne.n	80132ba <rcl_init+0x15a>
 8013366:	6832      	ldr	r2, [r6, #0]
 8013368:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 801336c:	6954      	ldr	r4, [r2, #20]
 801336e:	e7c3      	b.n	80132f8 <rcl_init+0x198>
 8013370:	2302      	movs	r3, #2
 8013372:	2200      	movs	r2, #0
 8013374:	4618      	mov	r0, r3
 8013376:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 801337a:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801337c:	e7d4      	b.n	8013328 <rcl_init+0x1c8>
 801337e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8013382:	f006 f909 	bl	8019598 <rcl_get_default_domain_id>
 8013386:	4680      	mov	r8, r0
 8013388:	2800      	cmp	r0, #0
 801338a:	d196      	bne.n	80132ba <rcl_init+0x15a>
 801338c:	6833      	ldr	r3, [r6, #0]
 801338e:	695c      	ldr	r4, [r3, #20]
 8013390:	e7af      	b.n	80132f2 <rcl_init+0x192>
 8013392:	4628      	mov	r0, r5
 8013394:	f006 f84a 	bl	801942c <rcl_get_automatic_discovery_range>
 8013398:	4680      	mov	r8, r0
 801339a:	2800      	cmp	r0, #0
 801339c:	d0b5      	beq.n	801330a <rcl_init+0x1aa>
 801339e:	e78c      	b.n	80132ba <rcl_init+0x15a>
 80133a0:	2400df20 	.word	0x2400df20

080133a4 <rcl_get_zero_initialized_init_options>:
 80133a4:	2000      	movs	r0, #0
 80133a6:	4770      	bx	lr

080133a8 <rcl_init_options_init>:
 80133a8:	b084      	sub	sp, #16
 80133aa:	b570      	push	{r4, r5, r6, lr}
 80133ac:	b09e      	sub	sp, #120	@ 0x78
 80133ae:	ad23      	add	r5, sp, #140	@ 0x8c
 80133b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80133b4:	2800      	cmp	r0, #0
 80133b6:	d046      	beq.n	8013446 <rcl_init_options_init+0x9e>
 80133b8:	6803      	ldr	r3, [r0, #0]
 80133ba:	4604      	mov	r4, r0
 80133bc:	b133      	cbz	r3, 80133cc <rcl_init_options_init+0x24>
 80133be:	2564      	movs	r5, #100	@ 0x64
 80133c0:	4628      	mov	r0, r5
 80133c2:	b01e      	add	sp, #120	@ 0x78
 80133c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133c8:	b004      	add	sp, #16
 80133ca:	4770      	bx	lr
 80133cc:	4628      	mov	r0, r5
 80133ce:	f7fb f995 	bl	800e6fc <rcutils_allocator_is_valid>
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d037      	beq.n	8013446 <rcl_init_options_init+0x9e>
 80133d6:	46ae      	mov	lr, r5
 80133d8:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80133dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80133e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80133e4:	f8de 3000 	ldr.w	r3, [lr]
 80133e8:	2070      	movs	r0, #112	@ 0x70
 80133ea:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80133ec:	f8cc 3000 	str.w	r3, [ip]
 80133f0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80133f2:	4798      	blx	r3
 80133f4:	4606      	mov	r6, r0
 80133f6:	6020      	str	r0, [r4, #0]
 80133f8:	b338      	cbz	r0, 801344a <rcl_init_options_init+0xa2>
 80133fa:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80133fe:	4686      	mov	lr, r0
 8013400:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013404:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013408:	f8dc 3000 	ldr.w	r3, [ip]
 801340c:	a802      	add	r0, sp, #8
 801340e:	f8ce 3000 	str.w	r3, [lr]
 8013412:	f003 f85f 	bl	80164d4 <rmw_get_zero_initialized_init_options>
 8013416:	2258      	movs	r2, #88	@ 0x58
 8013418:	a902      	add	r1, sp, #8
 801341a:	f106 0018 	add.w	r0, r6, #24
 801341e:	f007 fd26 	bl	801ae6e <memcpy>
 8013422:	ab26      	add	r3, sp, #152	@ 0x98
 8013424:	6826      	ldr	r6, [r4, #0]
 8013426:	e893 0003 	ldmia.w	r3, {r0, r1}
 801342a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801342e:	f106 0018 	add.w	r0, r6, #24
 8013432:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8013436:	f003 fabb 	bl	80169b0 <rmw_init_options_init>
 801343a:	4605      	mov	r5, r0
 801343c:	b938      	cbnz	r0, 801344e <rcl_init_options_init+0xa6>
 801343e:	6823      	ldr	r3, [r4, #0]
 8013440:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
 8013444:	e7bc      	b.n	80133c0 <rcl_init_options_init+0x18>
 8013446:	250b      	movs	r5, #11
 8013448:	e7ba      	b.n	80133c0 <rcl_init_options_init+0x18>
 801344a:	250a      	movs	r5, #10
 801344c:	e7b8      	b.n	80133c0 <rcl_init_options_init+0x18>
 801344e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013450:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8013452:	6820      	ldr	r0, [r4, #0]
 8013454:	4798      	blx	r3
 8013456:	4628      	mov	r0, r5
 8013458:	f7ff fdfc 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 801345c:	4605      	mov	r5, r0
 801345e:	e7af      	b.n	80133c0 <rcl_init_options_init+0x18>

08013460 <rcl_init_options_fini>:
 8013460:	b530      	push	{r4, r5, lr}
 8013462:	b087      	sub	sp, #28
 8013464:	b1f0      	cbz	r0, 80134a4 <rcl_init_options_fini+0x44>
 8013466:	6803      	ldr	r3, [r0, #0]
 8013468:	4604      	mov	r4, r0
 801346a:	b1db      	cbz	r3, 80134a4 <rcl_init_options_fini+0x44>
 801346c:	469c      	mov	ip, r3
 801346e:	f10d 0e04 	add.w	lr, sp, #4
 8013472:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013476:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801347a:	f8dc 3000 	ldr.w	r3, [ip]
 801347e:	a801      	add	r0, sp, #4
 8013480:	f8ce 3000 	str.w	r3, [lr]
 8013484:	f7fb f93a 	bl	800e6fc <rcutils_allocator_is_valid>
 8013488:	b160      	cbz	r0, 80134a4 <rcl_init_options_fini+0x44>
 801348a:	6820      	ldr	r0, [r4, #0]
 801348c:	3018      	adds	r0, #24
 801348e:	f003 fb51 	bl	8016b34 <rmw_init_options_fini>
 8013492:	4605      	mov	r5, r0
 8013494:	b950      	cbnz	r0, 80134ac <rcl_init_options_fini+0x4c>
 8013496:	6820      	ldr	r0, [r4, #0]
 8013498:	9b02      	ldr	r3, [sp, #8]
 801349a:	9905      	ldr	r1, [sp, #20]
 801349c:	4798      	blx	r3
 801349e:	4628      	mov	r0, r5
 80134a0:	b007      	add	sp, #28
 80134a2:	bd30      	pop	{r4, r5, pc}
 80134a4:	250b      	movs	r5, #11
 80134a6:	4628      	mov	r0, r5
 80134a8:	b007      	add	sp, #28
 80134aa:	bd30      	pop	{r4, r5, pc}
 80134ac:	f7ff fdd2 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 80134b0:	4605      	mov	r5, r0
 80134b2:	e7f8      	b.n	80134a6 <rcl_init_options_fini+0x46>

080134b4 <rcl_init_options_copy>:
 80134b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134b6:	b09d      	sub	sp, #116	@ 0x74
 80134b8:	2800      	cmp	r0, #0
 80134ba:	d04d      	beq.n	8013558 <rcl_init_options_copy+0xa4>
 80134bc:	4604      	mov	r4, r0
 80134be:	6800      	ldr	r0, [r0, #0]
 80134c0:	2800      	cmp	r0, #0
 80134c2:	d049      	beq.n	8013558 <rcl_init_options_copy+0xa4>
 80134c4:	460d      	mov	r5, r1
 80134c6:	f7fb f919 	bl	800e6fc <rcutils_allocator_is_valid>
 80134ca:	f080 0001 	eor.w	r0, r0, #1
 80134ce:	b2c0      	uxtb	r0, r0
 80134d0:	2800      	cmp	r0, #0
 80134d2:	d141      	bne.n	8013558 <rcl_init_options_copy+0xa4>
 80134d4:	2d00      	cmp	r5, #0
 80134d6:	d03f      	beq.n	8013558 <rcl_init_options_copy+0xa4>
 80134d8:	682b      	ldr	r3, [r5, #0]
 80134da:	b11b      	cbz	r3, 80134e4 <rcl_init_options_copy+0x30>
 80134dc:	2464      	movs	r4, #100	@ 0x64
 80134de:	4620      	mov	r0, r4
 80134e0:	b01d      	add	sp, #116	@ 0x74
 80134e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134e4:	6826      	ldr	r6, [r4, #0]
 80134e6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80134ea:	46b6      	mov	lr, r6
 80134ec:	6837      	ldr	r7, [r6, #0]
 80134ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80134f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80134f6:	f8de 3000 	ldr.w	r3, [lr]
 80134fa:	2070      	movs	r0, #112	@ 0x70
 80134fc:	4619      	mov	r1, r3
 80134fe:	f8cc 3000 	str.w	r3, [ip]
 8013502:	47b8      	blx	r7
 8013504:	4606      	mov	r6, r0
 8013506:	6028      	str	r0, [r5, #0]
 8013508:	b350      	cbz	r0, 8013560 <rcl_init_options_copy+0xac>
 801350a:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 801350e:	4686      	mov	lr, r0
 8013510:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013514:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013518:	f8dc 3000 	ldr.w	r3, [ip]
 801351c:	4668      	mov	r0, sp
 801351e:	f8ce 3000 	str.w	r3, [lr]
 8013522:	f002 ffd7 	bl	80164d4 <rmw_get_zero_initialized_init_options>
 8013526:	2258      	movs	r2, #88	@ 0x58
 8013528:	4669      	mov	r1, sp
 801352a:	f106 0018 	add.w	r0, r6, #24
 801352e:	f007 fc9e 	bl	801ae6e <memcpy>
 8013532:	6820      	ldr	r0, [r4, #0]
 8013534:	6829      	ldr	r1, [r5, #0]
 8013536:	3018      	adds	r0, #24
 8013538:	3118      	adds	r1, #24
 801353a:	f003 fa9b 	bl	8016a74 <rmw_init_options_copy>
 801353e:	4604      	mov	r4, r0
 8013540:	2800      	cmp	r0, #0
 8013542:	d0cc      	beq.n	80134de <rcl_init_options_copy+0x2a>
 8013544:	f7fb f8e8 	bl	800e718 <rcutils_get_error_string>
 8013548:	f7fb f8fe 	bl	800e748 <rcutils_reset_error>
 801354c:	4628      	mov	r0, r5
 801354e:	f7ff ff87 	bl	8013460 <rcl_init_options_fini>
 8013552:	b138      	cbz	r0, 8013564 <rcl_init_options_copy+0xb0>
 8013554:	4604      	mov	r4, r0
 8013556:	e7c2      	b.n	80134de <rcl_init_options_copy+0x2a>
 8013558:	240b      	movs	r4, #11
 801355a:	4620      	mov	r0, r4
 801355c:	b01d      	add	sp, #116	@ 0x74
 801355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013560:	240a      	movs	r4, #10
 8013562:	e7bc      	b.n	80134de <rcl_init_options_copy+0x2a>
 8013564:	4620      	mov	r0, r4
 8013566:	b01d      	add	sp, #116	@ 0x74
 8013568:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801356c:	f7ff bd72 	b.w	8013054 <rcl_convert_rmw_ret_to_rcl_ret>

08013570 <rcl_get_localhost_only>:
 8013570:	b510      	push	{r4, lr}
 8013572:	2300      	movs	r3, #0
 8013574:	b082      	sub	sp, #8
 8013576:	9301      	str	r3, [sp, #4]
 8013578:	b1b8      	cbz	r0, 80135aa <rcl_get_localhost_only+0x3a>
 801357a:	4604      	mov	r4, r0
 801357c:	a901      	add	r1, sp, #4
 801357e:	480c      	ldr	r0, [pc, #48]	@ (80135b0 <rcl_get_localhost_only+0x40>)
 8013580:	f002 fcc0 	bl	8015f04 <rcutils_get_env>
 8013584:	b110      	cbz	r0, 801358c <rcl_get_localhost_only+0x1c>
 8013586:	2001      	movs	r0, #1
 8013588:	b002      	add	sp, #8
 801358a:	bd10      	pop	{r4, pc}
 801358c:	9b01      	ldr	r3, [sp, #4]
 801358e:	b10b      	cbz	r3, 8013594 <rcl_get_localhost_only+0x24>
 8013590:	781b      	ldrb	r3, [r3, #0]
 8013592:	b923      	cbnz	r3, 801359e <rcl_get_localhost_only+0x2e>
 8013594:	2300      	movs	r3, #0
 8013596:	7023      	strb	r3, [r4, #0]
 8013598:	2000      	movs	r0, #0
 801359a:	b002      	add	sp, #8
 801359c:	bd10      	pop	{r4, pc}
 801359e:	2b31      	cmp	r3, #49	@ 0x31
 80135a0:	bf14      	ite	ne
 80135a2:	2302      	movne	r3, #2
 80135a4:	2301      	moveq	r3, #1
 80135a6:	7023      	strb	r3, [r4, #0]
 80135a8:	e7f6      	b.n	8013598 <rcl_get_localhost_only+0x28>
 80135aa:	200b      	movs	r0, #11
 80135ac:	b002      	add	sp, #8
 80135ae:	bd10      	pop	{r4, pc}
 80135b0:	0801bf58 	.word	0x0801bf58

080135b4 <rcl_get_zero_initialized_node>:
 80135b4:	4a03      	ldr	r2, [pc, #12]	@ (80135c4 <rcl_get_zero_initialized_node+0x10>)
 80135b6:	4603      	mov	r3, r0
 80135b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80135c0:	4618      	mov	r0, r3
 80135c2:	4770      	bx	lr
 80135c4:	0801c5cc 	.word	0x0801c5cc

080135c8 <rcl_node_init>:
 80135c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135cc:	b0a9      	sub	sp, #164	@ 0xa4
 80135ce:	4605      	mov	r5, r0
 80135d0:	460e      	mov	r6, r1
 80135d2:	4617      	mov	r7, r2
 80135d4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80135d8:	a823      	add	r0, sp, #140	@ 0x8c
 80135da:	4699      	mov	r9, r3
 80135dc:	f006 fa3c 	bl	8019a58 <rcl_guard_condition_get_default_options>
 80135e0:	f1b8 0f00 	cmp.w	r8, #0
 80135e4:	f000 80e0 	beq.w	80137a8 <rcl_node_init+0x1e0>
 80135e8:	4640      	mov	r0, r8
 80135ea:	f7fb f887 	bl	800e6fc <rcutils_allocator_is_valid>
 80135ee:	2d00      	cmp	r5, #0
 80135f0:	bf18      	it	ne
 80135f2:	2f00      	cmpne	r7, #0
 80135f4:	bf0c      	ite	eq
 80135f6:	2301      	moveq	r3, #1
 80135f8:	2300      	movne	r3, #0
 80135fa:	2e00      	cmp	r6, #0
 80135fc:	bf08      	it	eq
 80135fe:	f043 0301 	orreq.w	r3, r3, #1
 8013602:	2b00      	cmp	r3, #0
 8013604:	f040 80d0 	bne.w	80137a8 <rcl_node_init+0x1e0>
 8013608:	f080 0001 	eor.w	r0, r0, #1
 801360c:	b2c0      	uxtb	r0, r0
 801360e:	2800      	cmp	r0, #0
 8013610:	f040 80ca 	bne.w	80137a8 <rcl_node_init+0x1e0>
 8013614:	686c      	ldr	r4, [r5, #4]
 8013616:	2c00      	cmp	r4, #0
 8013618:	f040 80cd 	bne.w	80137b6 <rcl_node_init+0x1ee>
 801361c:	f1b9 0f00 	cmp.w	r9, #0
 8013620:	f000 80c2 	beq.w	80137a8 <rcl_node_init+0x1e0>
 8013624:	4648      	mov	r0, r9
 8013626:	f7ff fd35 	bl	8013094 <rcl_context_is_valid>
 801362a:	2800      	cmp	r0, #0
 801362c:	f000 80c1 	beq.w	80137b2 <rcl_node_init+0x1ea>
 8013630:	4622      	mov	r2, r4
 8013632:	4630      	mov	r0, r6
 8013634:	a922      	add	r1, sp, #136	@ 0x88
 8013636:	9422      	str	r4, [sp, #136]	@ 0x88
 8013638:	f003 f8d8 	bl	80167ec <rmw_validate_node_name>
 801363c:	4604      	mov	r4, r0
 801363e:	2800      	cmp	r0, #0
 8013640:	f040 80b3 	bne.w	80137aa <rcl_node_init+0x1e2>
 8013644:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013646:	2800      	cmp	r0, #0
 8013648:	f040 8112 	bne.w	8013870 <rcl_node_init+0x2a8>
 801364c:	783b      	ldrb	r3, [r7, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	f000 80ff 	beq.w	8013852 <rcl_node_init+0x28a>
 8013654:	2b2f      	cmp	r3, #47	@ 0x2f
 8013656:	f000 80b3 	beq.w	80137c0 <rcl_node_init+0x1f8>
 801365a:	4b8d      	ldr	r3, [pc, #564]	@ (8013890 <rcl_node_init+0x2c8>)
 801365c:	9703      	str	r7, [sp, #12]
 801365e:	9302      	str	r3, [sp, #8]
 8013660:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013664:	9301      	str	r3, [sp, #4]
 8013666:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013670:	f002 fc60 	bl	8015f34 <rcutils_format_string_limit>
 8013674:	4682      	mov	sl, r0
 8013676:	f1ba 0f00 	cmp.w	sl, #0
 801367a:	f000 80f7 	beq.w	801386c <rcl_node_init+0x2a4>
 801367e:	2200      	movs	r2, #0
 8013680:	a922      	add	r1, sp, #136	@ 0x88
 8013682:	4650      	mov	r0, sl
 8013684:	9222      	str	r2, [sp, #136]	@ 0x88
 8013686:	f003 f893 	bl	80167b0 <rmw_validate_namespace>
 801368a:	4604      	mov	r4, r0
 801368c:	2800      	cmp	r0, #0
 801368e:	f040 80a7 	bne.w	80137e0 <rcl_node_init+0x218>
 8013692:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013694:	2800      	cmp	r0, #0
 8013696:	f040 80a0 	bne.w	80137da <rcl_node_init+0x212>
 801369a:	2178      	movs	r1, #120	@ 0x78
 801369c:	2001      	movs	r0, #1
 801369e:	e9d8 3203 	ldrd	r3, r2, [r8, #12]
 80136a2:	4798      	blx	r3
 80136a4:	4604      	mov	r4, r0
 80136a6:	6068      	str	r0, [r5, #4]
 80136a8:	2800      	cmp	r0, #0
 80136aa:	f000 80e5 	beq.w	8013878 <rcl_node_init+0x2b0>
 80136ae:	a808      	add	r0, sp, #32
 80136b0:	f000 f93e 	bl	8013930 <rcl_node_get_default_options>
 80136b4:	a908      	add	r1, sp, #32
 80136b6:	4620      	mov	r0, r4
 80136b8:	2268      	movs	r2, #104	@ 0x68
 80136ba:	f007 fbd8 	bl	801ae6e <memcpy>
 80136be:	6869      	ldr	r1, [r5, #4]
 80136c0:	4640      	mov	r0, r8
 80136c2:	f8c5 9000 	str.w	r9, [r5]
 80136c6:	f000 f941 	bl	801394c <rcl_node_options_copy>
 80136ca:	4604      	mov	r4, r0
 80136cc:	2800      	cmp	r0, #0
 80136ce:	f040 8087 	bne.w	80137e0 <rcl_node_init+0x218>
 80136d2:	4650      	mov	r0, sl
 80136d4:	f7ec fe6c 	bl	80003b0 <strlen>
 80136d8:	eb0a 0300 	add.w	r3, sl, r0
 80136dc:	686c      	ldr	r4, [r5, #4]
 80136de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80136e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80136e4:	bf0c      	ite	eq
 80136e6:	4b6b      	ldreq	r3, [pc, #428]	@ (8013894 <rcl_node_init+0x2cc>)
 80136e8:	4b6b      	ldrne	r3, [pc, #428]	@ (8013898 <rcl_node_init+0x2d0>)
 80136ea:	9302      	str	r3, [sp, #8]
 80136ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80136f0:	e9cd a603 	strd	sl, r6, [sp, #12]
 80136f4:	9301      	str	r3, [sp, #4]
 80136f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80136fa:	9300      	str	r3, [sp, #0]
 80136fc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8013700:	f002 fc18 	bl	8015f34 <rcutils_format_string_limit>
 8013704:	686f      	ldr	r7, [r5, #4]
 8013706:	6760      	str	r0, [r4, #116]	@ 0x74
 8013708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801370a:	2b00      	cmp	r3, #0
 801370c:	f000 80b6 	beq.w	801387c <rcl_node_init+0x2b4>
 8013710:	682b      	ldr	r3, [r5, #0]
 8013712:	4631      	mov	r1, r6
 8013714:	4652      	mov	r2, sl
 8013716:	6818      	ldr	r0, [r3, #0]
 8013718:	3028      	adds	r0, #40	@ 0x28
 801371a:	f003 fc9b 	bl	8017054 <rmw_create_node>
 801371e:	66b8      	str	r0, [r7, #104]	@ 0x68
 8013720:	686f      	ldr	r7, [r5, #4]
 8013722:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8013724:	2800      	cmp	r0, #0
 8013726:	f000 80ac 	beq.w	8013882 <rcl_node_init+0x2ba>
 801372a:	f003 fd1f 	bl	801716c <rmw_node_get_graph_guard_condition>
 801372e:	4606      	mov	r6, r0
 8013730:	2800      	cmp	r0, #0
 8013732:	f000 80ab 	beq.w	801388c <rcl_node_init+0x2c4>
 8013736:	686c      	ldr	r4, [r5, #4]
 8013738:	2008      	movs	r0, #8
 801373a:	f8d8 3000 	ldr.w	r3, [r8]
 801373e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013742:	4798      	blx	r3
 8013744:	686f      	ldr	r7, [r5, #4]
 8013746:	66e0      	str	r0, [r4, #108]	@ 0x6c
 8013748:	f8d7 b06c 	ldr.w	fp, [r7, #108]	@ 0x6c
 801374c:	f1bb 0f00 	cmp.w	fp, #0
 8013750:	f000 809a 	beq.w	8013888 <rcl_node_init+0x2c0>
 8013754:	af06      	add	r7, sp, #24
 8013756:	ac23      	add	r4, sp, #140	@ 0x8c
 8013758:	4638      	mov	r0, r7
 801375a:	f006 f8a7 	bl	80198ac <rcl_get_zero_initialized_guard_condition>
 801375e:	686b      	ldr	r3, [r5, #4]
 8013760:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013764:	4647      	mov	r7, r8
 8013766:	f8d3 c06c 	ldr.w	ip, [r3, #108]	@ 0x6c
 801376a:	e88b 0003 	stmia.w	fp, {r0, r1}
 801376e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	6023      	str	r3, [r4, #0]
 8013776:	ab28      	add	r3, sp, #160	@ 0xa0
 8013778:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801377c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013780:	464a      	mov	r2, r9
 8013782:	4631      	mov	r1, r6
 8013784:	4660      	mov	r0, ip
 8013786:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013788:	f006 f8e8 	bl	801995c <rcl_guard_condition_init_from_rmw>
 801378c:	4604      	mov	r4, r0
 801378e:	bb38      	cbnz	r0, 80137e0 <rcl_node_init+0x218>
 8013790:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013794:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013798:	4798      	blx	r3
 801379a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801379e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137a2:	4650      	mov	r0, sl
 80137a4:	4798      	blx	r3
 80137a6:	e000      	b.n	80137aa <rcl_node_init+0x1e2>
 80137a8:	240b      	movs	r4, #11
 80137aa:	4620      	mov	r0, r4
 80137ac:	b029      	add	sp, #164	@ 0xa4
 80137ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b2:	2465      	movs	r4, #101	@ 0x65
 80137b4:	e7f9      	b.n	80137aa <rcl_node_init+0x1e2>
 80137b6:	2464      	movs	r4, #100	@ 0x64
 80137b8:	4620      	mov	r0, r4
 80137ba:	b029      	add	sp, #164	@ 0xa4
 80137bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c0:	f108 030c 	add.w	r3, r8, #12
 80137c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80137c8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80137cc:	4638      	mov	r0, r7
 80137ce:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80137d2:	f002 fceb 	bl	80161ac <rcutils_strdup>
 80137d6:	4682      	mov	sl, r0
 80137d8:	e74d      	b.n	8013676 <rcl_node_init+0xae>
 80137da:	24ca      	movs	r4, #202	@ 0xca
 80137dc:	f002 fffa 	bl	80167d4 <rmw_namespace_validation_result_string>
 80137e0:	686f      	ldr	r7, [r5, #4]
 80137e2:	b337      	cbz	r7, 8013832 <rcl_node_init+0x26a>
 80137e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80137e6:	b148      	cbz	r0, 80137fc <rcl_node_init+0x234>
 80137e8:	f006 f914 	bl	8019a14 <rcl_guard_condition_fini>
 80137ec:	686b      	ldr	r3, [r5, #4]
 80137ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137f2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80137f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80137f8:	4798      	blx	r3
 80137fa:	686f      	ldr	r7, [r5, #4]
 80137fc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80137fe:	b110      	cbz	r0, 8013806 <rcl_node_init+0x23e>
 8013800:	f003 fc36 	bl	8017070 <rmw_destroy_node>
 8013804:	686f      	ldr	r7, [r5, #4]
 8013806:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8013808:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801380c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013810:	4798      	blx	r3
 8013812:	686b      	ldr	r3, [r5, #4]
 8013814:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013818:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801381a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801381e:	4798      	blx	r3
 8013820:	6868      	ldr	r0, [r5, #4]
 8013822:	f000 f8b5 	bl	8013990 <rcl_node_options_fini>
 8013826:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801382a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801382e:	6868      	ldr	r0, [r5, #4]
 8013830:	4798      	blx	r3
 8013832:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013836:	2000      	movs	r0, #0
 8013838:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801383c:	4798      	blx	r3
 801383e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013842:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013846:	4650      	mov	r0, sl
 8013848:	4798      	blx	r3
 801384a:	2300      	movs	r3, #0
 801384c:	e9c5 3300 	strd	r3, r3, [r5]
 8013850:	e7ab      	b.n	80137aa <rcl_node_init+0x1e2>
 8013852:	f108 030c 	add.w	r3, r8, #12
 8013856:	e893 0003 	ldmia.w	r3, {r0, r1}
 801385a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801385e:	480f      	ldr	r0, [pc, #60]	@ (801389c <rcl_node_init+0x2d4>)
 8013860:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8013864:	f002 fca2 	bl	80161ac <rcutils_strdup>
 8013868:	4682      	mov	sl, r0
 801386a:	e704      	b.n	8013676 <rcl_node_init+0xae>
 801386c:	240a      	movs	r4, #10
 801386e:	e79c      	b.n	80137aa <rcl_node_init+0x1e2>
 8013870:	24c9      	movs	r4, #201	@ 0xc9
 8013872:	f003 f805 	bl	8016880 <rmw_node_name_validation_result_string>
 8013876:	e798      	b.n	80137aa <rcl_node_init+0x1e2>
 8013878:	240a      	movs	r4, #10
 801387a:	e7da      	b.n	8013832 <rcl_node_init+0x26a>
 801387c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801387e:	240a      	movs	r4, #10
 8013880:	e7b1      	b.n	80137e6 <rcl_node_init+0x21e>
 8013882:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013884:	2401      	movs	r4, #1
 8013886:	e7ae      	b.n	80137e6 <rcl_node_init+0x21e>
 8013888:	240a      	movs	r4, #10
 801388a:	e7b7      	b.n	80137fc <rcl_node_init+0x234>
 801388c:	2401      	movs	r4, #1
 801388e:	e7a7      	b.n	80137e0 <rcl_node_init+0x218>
 8013890:	0801bf74 	.word	0x0801bf74
 8013894:	0801bd88 	.word	0x0801bd88
 8013898:	0801bf78 	.word	0x0801bf78
 801389c:	0801bf70 	.word	0x0801bf70

080138a0 <rcl_node_is_valid>:
 80138a0:	b130      	cbz	r0, 80138b0 <rcl_node_is_valid+0x10>
 80138a2:	6843      	ldr	r3, [r0, #4]
 80138a4:	b123      	cbz	r3, 80138b0 <rcl_node_is_valid+0x10>
 80138a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80138a8:	b113      	cbz	r3, 80138b0 <rcl_node_is_valid+0x10>
 80138aa:	6800      	ldr	r0, [r0, #0]
 80138ac:	f7ff bbf2 	b.w	8013094 <rcl_context_is_valid>
 80138b0:	2000      	movs	r0, #0
 80138b2:	4770      	bx	lr

080138b4 <rcl_node_get_name>:
 80138b4:	b120      	cbz	r0, 80138c0 <rcl_node_get_name+0xc>
 80138b6:	6840      	ldr	r0, [r0, #4]
 80138b8:	b110      	cbz	r0, 80138c0 <rcl_node_get_name+0xc>
 80138ba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80138bc:	b100      	cbz	r0, 80138c0 <rcl_node_get_name+0xc>
 80138be:	6880      	ldr	r0, [r0, #8]
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop

080138c4 <rcl_node_get_namespace>:
 80138c4:	b120      	cbz	r0, 80138d0 <rcl_node_get_namespace+0xc>
 80138c6:	6840      	ldr	r0, [r0, #4]
 80138c8:	b110      	cbz	r0, 80138d0 <rcl_node_get_namespace+0xc>
 80138ca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80138cc:	b100      	cbz	r0, 80138d0 <rcl_node_get_namespace+0xc>
 80138ce:	68c0      	ldr	r0, [r0, #12]
 80138d0:	4770      	bx	lr
 80138d2:	bf00      	nop

080138d4 <rcl_node_get_options>:
 80138d4:	b128      	cbz	r0, 80138e2 <rcl_node_get_options+0xe>
 80138d6:	6840      	ldr	r0, [r0, #4]
 80138d8:	b118      	cbz	r0, 80138e2 <rcl_node_get_options+0xe>
 80138da:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80138dc:	2b00      	cmp	r3, #0
 80138de:	bf08      	it	eq
 80138e0:	2000      	moveq	r0, #0
 80138e2:	4770      	bx	lr

080138e4 <rcl_node_get_rmw_handle>:
 80138e4:	b110      	cbz	r0, 80138ec <rcl_node_get_rmw_handle+0x8>
 80138e6:	6840      	ldr	r0, [r0, #4]
 80138e8:	b100      	cbz	r0, 80138ec <rcl_node_get_rmw_handle+0x8>
 80138ea:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80138ec:	4770      	bx	lr
 80138ee:	bf00      	nop

080138f0 <rcl_get_disable_loaned_message>:
 80138f0:	b510      	push	{r4, lr}
 80138f2:	2300      	movs	r3, #0
 80138f4:	b082      	sub	sp, #8
 80138f6:	9301      	str	r3, [sp, #4]
 80138f8:	b1a0      	cbz	r0, 8013924 <rcl_get_disable_loaned_message+0x34>
 80138fa:	4604      	mov	r4, r0
 80138fc:	a901      	add	r1, sp, #4
 80138fe:	480b      	ldr	r0, [pc, #44]	@ (801392c <rcl_get_disable_loaned_message+0x3c>)
 8013900:	f002 fb00 	bl	8015f04 <rcutils_get_env>
 8013904:	b110      	cbz	r0, 801390c <rcl_get_disable_loaned_message+0x1c>
 8013906:	2001      	movs	r0, #1
 8013908:	b002      	add	sp, #8
 801390a:	bd10      	pop	{r4, pc}
 801390c:	9a01      	ldr	r2, [sp, #4]
 801390e:	2000      	movs	r0, #0
 8013910:	7813      	ldrb	r3, [r2, #0]
 8013912:	3b31      	subs	r3, #49	@ 0x31
 8013914:	bf08      	it	eq
 8013916:	7853      	ldrbeq	r3, [r2, #1]
 8013918:	fab3 f383 	clz	r3, r3
 801391c:	095b      	lsrs	r3, r3, #5
 801391e:	7023      	strb	r3, [r4, #0]
 8013920:	b002      	add	sp, #8
 8013922:	bd10      	pop	{r4, pc}
 8013924:	200b      	movs	r0, #11
 8013926:	b002      	add	sp, #8
 8013928:	bd10      	pop	{r4, pc}
 801392a:	bf00      	nop
 801392c:	0801bf80 	.word	0x0801bf80

08013930 <rcl_node_get_default_options>:
 8013930:	b510      	push	{r4, lr}
 8013932:	4604      	mov	r4, r0
 8013934:	2253      	movs	r2, #83	@ 0x53
 8013936:	2100      	movs	r1, #0
 8013938:	3015      	adds	r0, #21
 801393a:	f007 f95f 	bl	801abfc <memset>
 801393e:	4620      	mov	r0, r4
 8013940:	f7fa feb0 	bl	800e6a4 <rcutils_get_default_allocator>
 8013944:	2301      	movs	r3, #1
 8013946:	4620      	mov	r0, r4
 8013948:	7523      	strb	r3, [r4, #20]
 801394a:	bd10      	pop	{r4, pc}

0801394c <rcl_node_options_copy>:
 801394c:	4288      	cmp	r0, r1
 801394e:	bf18      	it	ne
 8013950:	2800      	cmpne	r0, #0
 8013952:	d01b      	beq.n	801398c <rcl_node_options_copy+0x40>
 8013954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013956:	fab1 f681 	clz	r6, r1
 801395a:	460c      	mov	r4, r1
 801395c:	0976      	lsrs	r6, r6, #5
 801395e:	b199      	cbz	r1, 8013988 <rcl_node_options_copy+0x3c>
 8013960:	4605      	mov	r5, r0
 8013962:	8a87      	ldrh	r7, [r0, #20]
 8013964:	4684      	mov	ip, r0
 8013966:	468e      	mov	lr, r1
 8013968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801396a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801396e:	682b      	ldr	r3, [r5, #0]
 8013970:	2250      	movs	r2, #80	@ 0x50
 8013972:	f10c 0118 	add.w	r1, ip, #24
 8013976:	f104 0018 	add.w	r0, r4, #24
 801397a:	f8ce 3000 	str.w	r3, [lr]
 801397e:	82a7      	strh	r7, [r4, #20]
 8013980:	f007 fa75 	bl	801ae6e <memcpy>
 8013984:	4630      	mov	r0, r6
 8013986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013988:	200b      	movs	r0, #11
 801398a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801398c:	200b      	movs	r0, #11
 801398e:	4770      	bx	lr

08013990 <rcl_node_options_fini>:
 8013990:	b1c0      	cbz	r0, 80139c4 <rcl_node_options_fini+0x34>
 8013992:	4684      	mov	ip, r0
 8013994:	b500      	push	{lr}
 8013996:	b087      	sub	sp, #28
 8013998:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801399c:	f10d 0e04 	add.w	lr, sp, #4
 80139a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139a4:	f8dc 3000 	ldr.w	r3, [ip]
 80139a8:	a801      	add	r0, sp, #4
 80139aa:	f8ce 3000 	str.w	r3, [lr]
 80139ae:	f7fa fea5 	bl	800e6fc <rcutils_allocator_is_valid>
 80139b2:	b118      	cbz	r0, 80139bc <rcl_node_options_fini+0x2c>
 80139b4:	2000      	movs	r0, #0
 80139b6:	b007      	add	sp, #28
 80139b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80139bc:	200b      	movs	r0, #11
 80139be:	b007      	add	sp, #28
 80139c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80139c4:	200b      	movs	r0, #11
 80139c6:	4770      	bx	lr

080139c8 <rcl_node_resolve_name>:
 80139c8:	b082      	sub	sp, #8
 80139ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ce:	b091      	sub	sp, #68	@ 0x44
 80139d0:	ac1a      	add	r4, sp, #104	@ 0x68
 80139d2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80139d6:	e884 000c 	stmia.w	r4, {r2, r3}
 80139da:	2800      	cmp	r0, #0
 80139dc:	d039      	beq.n	8013a52 <rcl_node_resolve_name+0x8a>
 80139de:	460d      	mov	r5, r1
 80139e0:	4604      	mov	r4, r0
 80139e2:	f7ff ff77 	bl	80138d4 <rcl_node_get_options>
 80139e6:	b368      	cbz	r0, 8013a44 <rcl_node_resolve_name+0x7c>
 80139e8:	4620      	mov	r0, r4
 80139ea:	ae0b      	add	r6, sp, #44	@ 0x2c
 80139ec:	f7ff ff62 	bl	80138b4 <rcl_node_get_name>
 80139f0:	4607      	mov	r7, r0
 80139f2:	4620      	mov	r0, r4
 80139f4:	4634      	mov	r4, r6
 80139f6:	9707      	str	r7, [sp, #28]
 80139f8:	f7ff ff64 	bl	80138c4 <rcl_node_get_namespace>
 80139fc:	f10d 0c68 	add.w	ip, sp, #104	@ 0x68
 8013a00:	4681      	mov	r9, r0
 8013a02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a08:	f8dc 3000 	ldr.w	r3, [ip]
 8013a0c:	6023      	str	r3, [r4, #0]
 8013a0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013a10:	b1fb      	cbz	r3, 8013a52 <rcl_node_resolve_name+0x8a>
 8013a12:	468a      	mov	sl, r1
 8013a14:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013a18:	f002 fc28 	bl	801626c <rcutils_get_zero_initialized_string_map>
 8013a1c:	ab10      	add	r3, sp, #64	@ 0x40
 8013a1e:	9008      	str	r0, [sp, #32]
 8013a20:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013a24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013a28:	2100      	movs	r1, #0
 8013a2a:	a808      	add	r0, sp, #32
 8013a2c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013a30:	f002 fc76 	bl	8016320 <rcutils_string_map_init>
 8013a34:	4607      	mov	r7, r0
 8013a36:	b170      	cbz	r0, 8013a56 <rcl_node_resolve_name+0x8e>
 8013a38:	f7fa fe6e 	bl	800e718 <rcutils_get_error_string>
 8013a3c:	f7fa fe84 	bl	800e748 <rcutils_reset_error>
 8013a40:	2f0a      	cmp	r7, #10
 8013a42:	d04d      	beq.n	8013ae0 <rcl_node_resolve_name+0x118>
 8013a44:	2501      	movs	r5, #1
 8013a46:	4628      	mov	r0, r5
 8013a48:	b011      	add	sp, #68	@ 0x44
 8013a4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a4e:	b002      	add	sp, #8
 8013a50:	4770      	bx	lr
 8013a52:	250b      	movs	r5, #11
 8013a54:	e7f7      	b.n	8013a46 <rcl_node_resolve_name+0x7e>
 8013a56:	9009      	str	r0, [sp, #36]	@ 0x24
 8013a58:	a808      	add	r0, sp, #32
 8013a5a:	f005 ff21 	bl	80198a0 <rcl_get_default_topic_name_substitutions>
 8013a5e:	4604      	mov	r4, r0
 8013a60:	b170      	cbz	r0, 8013a80 <rcl_node_resolve_name+0xb8>
 8013a62:	280a      	cmp	r0, #10
 8013a64:	d030      	beq.n	8013ac8 <rcl_node_resolve_name+0x100>
 8013a66:	a808      	add	r0, sp, #32
 8013a68:	f002 fc98 	bl	801639c <rcutils_string_map_fini>
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d160      	bne.n	8013b34 <rcl_node_resolve_name+0x16c>
 8013a72:	4659      	mov	r1, fp
 8013a74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a76:	47d0      	blx	sl
 8013a78:	4659      	mov	r1, fp
 8013a7a:	4620      	mov	r0, r4
 8013a7c:	47d0      	blx	sl
 8013a7e:	e7e1      	b.n	8013a44 <rcl_node_resolve_name+0x7c>
 8013a80:	ab09      	add	r3, sp, #36	@ 0x24
 8013a82:	46ec      	mov	ip, sp
 8013a84:	9305      	str	r3, [sp, #20]
 8013a86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013a88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a8c:	6833      	ldr	r3, [r6, #0]
 8013a8e:	4628      	mov	r0, r5
 8013a90:	464a      	mov	r2, r9
 8013a92:	f8cc 3000 	str.w	r3, [ip]
 8013a96:	ab08      	add	r3, sp, #32
 8013a98:	9907      	ldr	r1, [sp, #28]
 8013a9a:	f005 fdab 	bl	80195f4 <rcl_expand_topic_name>
 8013a9e:	4605      	mov	r5, r0
 8013aa0:	bb08      	cbnz	r0, 8013ae6 <rcl_node_resolve_name+0x11e>
 8013aa2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	9009      	str	r0, [sp, #36]	@ 0x24
 8013aa8:	a90a      	add	r1, sp, #40	@ 0x28
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f002 fdca 	bl	8016644 <rmw_validate_full_topic_name>
 8013ab0:	bb50      	cbnz	r0, 8013b08 <rcl_node_resolve_name+0x140>
 8013ab2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013ab4:	b9b6      	cbnz	r6, 8013ae4 <rcl_node_resolve_name+0x11c>
 8013ab6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013ab8:	a808      	add	r0, sp, #32
 8013aba:	601c      	str	r4, [r3, #0]
 8013abc:	f002 fc6e 	bl	801639c <rcutils_string_map_fini>
 8013ac0:	4605      	mov	r5, r0
 8013ac2:	bb38      	cbnz	r0, 8013b14 <rcl_node_resolve_name+0x14c>
 8013ac4:	4604      	mov	r4, r0
 8013ac6:	e012      	b.n	8013aee <rcl_node_resolve_name+0x126>
 8013ac8:	a808      	add	r0, sp, #32
 8013aca:	f002 fc67 	bl	801639c <rcutils_string_map_fini>
 8013ace:	4604      	mov	r4, r0
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	d136      	bne.n	8013b42 <rcl_node_resolve_name+0x17a>
 8013ad4:	4659      	mov	r1, fp
 8013ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ad8:	47d0      	blx	sl
 8013ada:	4659      	mov	r1, fp
 8013adc:	4620      	mov	r0, r4
 8013ade:	47d0      	blx	sl
 8013ae0:	250a      	movs	r5, #10
 8013ae2:	e7b0      	b.n	8013a46 <rcl_node_resolve_name+0x7e>
 8013ae4:	2567      	movs	r5, #103	@ 0x67
 8013ae6:	a808      	add	r0, sp, #32
 8013ae8:	f002 fc58 	bl	801639c <rcutils_string_map_fini>
 8013aec:	b9e8      	cbnz	r0, 8013b2a <rcl_node_resolve_name+0x162>
 8013aee:	4659      	mov	r1, fp
 8013af0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013af2:	47d0      	blx	sl
 8013af4:	4659      	mov	r1, fp
 8013af6:	4620      	mov	r0, r4
 8013af8:	47d0      	blx	sl
 8013afa:	2d67      	cmp	r5, #103	@ 0x67
 8013afc:	d1a3      	bne.n	8013a46 <rcl_node_resolve_name+0x7e>
 8013afe:	f1b8 0f00 	cmp.w	r8, #0
 8013b02:	bf18      	it	ne
 8013b04:	2568      	movne	r5, #104	@ 0x68
 8013b06:	e79e      	b.n	8013a46 <rcl_node_resolve_name+0x7e>
 8013b08:	f7fa fe06 	bl	800e718 <rcutils_get_error_string>
 8013b0c:	2501      	movs	r5, #1
 8013b0e:	f7fa fe1b 	bl	800e748 <rcutils_reset_error>
 8013b12:	e7e8      	b.n	8013ae6 <rcl_node_resolve_name+0x11e>
 8013b14:	f7fa fe00 	bl	800e718 <rcutils_get_error_string>
 8013b18:	f7fa fe16 	bl	800e748 <rcutils_reset_error>
 8013b1c:	4659      	mov	r1, fp
 8013b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b20:	47d0      	blx	sl
 8013b22:	4659      	mov	r1, fp
 8013b24:	4630      	mov	r0, r6
 8013b26:	47d0      	blx	sl
 8013b28:	e78c      	b.n	8013a44 <rcl_node_resolve_name+0x7c>
 8013b2a:	f7fa fdf5 	bl	800e718 <rcutils_get_error_string>
 8013b2e:	f7fa fe0b 	bl	800e748 <rcutils_reset_error>
 8013b32:	e7dc      	b.n	8013aee <rcl_node_resolve_name+0x126>
 8013b34:	f7fa fdf0 	bl	800e718 <rcutils_get_error_string>
 8013b38:	2501      	movs	r5, #1
 8013b3a:	463c      	mov	r4, r7
 8013b3c:	f7fa fe04 	bl	800e748 <rcutils_reset_error>
 8013b40:	e7d5      	b.n	8013aee <rcl_node_resolve_name+0x126>
 8013b42:	f7fa fde9 	bl	800e718 <rcutils_get_error_string>
 8013b46:	f7fa fdff 	bl	800e748 <rcutils_reset_error>
 8013b4a:	4659      	mov	r1, fp
 8013b4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013b4e:	47d0      	blx	sl
 8013b50:	4659      	mov	r1, fp
 8013b52:	4638      	mov	r0, r7
 8013b54:	47d0      	blx	sl
 8013b56:	e7c3      	b.n	8013ae0 <rcl_node_resolve_name+0x118>

08013b58 <rcl_service_get_rmw_handle>:
 8013b58:	b118      	cbz	r0, 8013b62 <rcl_service_get_rmw_handle+0xa>
 8013b5a:	6800      	ldr	r0, [r0, #0]
 8013b5c:	b108      	cbz	r0, 8013b62 <rcl_service_get_rmw_handle+0xa>
 8013b5e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013b62:	4770      	bx	lr

08013b64 <rcl_take_request>:
 8013b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b66:	468e      	mov	lr, r1
 8013b68:	b091      	sub	sp, #68	@ 0x44
 8013b6a:	460c      	mov	r4, r1
 8013b6c:	4617      	mov	r7, r2
 8013b6e:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8013b72:	4605      	mov	r5, r0
 8013b74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013b80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013b84:	b30d      	cbz	r5, 8013bca <rcl_take_request+0x66>
 8013b86:	682b      	ldr	r3, [r5, #0]
 8013b88:	b1fb      	cbz	r3, 8013bca <rcl_take_request+0x66>
 8013b8a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013b8e:	b1e0      	cbz	r0, 8013bca <rcl_take_request+0x66>
 8013b90:	b397      	cbz	r7, 8013bf8 <rcl_take_request+0x94>
 8013b92:	2300      	movs	r3, #0
 8013b94:	463a      	mov	r2, r7
 8013b96:	a906      	add	r1, sp, #24
 8013b98:	f88d 3017 	strb.w	r3, [sp, #23]
 8013b9c:	f10d 0317 	add.w	r3, sp, #23
 8013ba0:	f003 fb32 	bl	8017208 <rmw_take_request>
 8013ba4:	4606      	mov	r6, r0
 8013ba6:	b198      	cbz	r0, 8013bd0 <rcl_take_request+0x6c>
 8013ba8:	280a      	cmp	r0, #10
 8013baa:	bf18      	it	ne
 8013bac:	2601      	movne	r6, #1
 8013bae:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8013bb2:	46a6      	mov	lr, r4
 8013bb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013bb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013bbc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8013bc0:	e88e 0003 	stmia.w	lr, {r0, r1}
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	b011      	add	sp, #68	@ 0x44
 8013bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bca:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8013bce:	e7ee      	b.n	8013bae <rcl_take_request+0x4a>
 8013bd0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013bd4:	b193      	cbz	r3, 8013bfc <rcl_take_request+0x98>
 8013bd6:	682b      	ldr	r3, [r5, #0]
 8013bd8:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d0e6      	beq.n	8013bae <rcl_take_request+0x4a>
 8013be0:	463a      	mov	r2, r7
 8013be2:	ab0a      	add	r3, sp, #40	@ 0x28
 8013be4:	2101      	movs	r1, #1
 8013be6:	9302      	str	r3, [sp, #8]
 8013be8:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8013bec:	e9cd 6700 	strd	r6, r7, [sp]
 8013bf0:	f000 f842 	bl	8013c78 <rcl_send_service_event_message>
 8013bf4:	4606      	mov	r6, r0
 8013bf6:	e7da      	b.n	8013bae <rcl_take_request+0x4a>
 8013bf8:	260b      	movs	r6, #11
 8013bfa:	e7d8      	b.n	8013bae <rcl_take_request+0x4a>
 8013bfc:	f240 2659 	movw	r6, #601	@ 0x259
 8013c00:	e7d5      	b.n	8013bae <rcl_take_request+0x4a>
 8013c02:	bf00      	nop

08013c04 <rcl_send_response>:
 8013c04:	b350      	cbz	r0, 8013c5c <rcl_send_response+0x58>
 8013c06:	6803      	ldr	r3, [r0, #0]
 8013c08:	b570      	push	{r4, r5, r6, lr}
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	b084      	sub	sp, #16
 8013c0e:	b1cb      	cbz	r3, 8013c44 <rcl_send_response+0x40>
 8013c10:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013c14:	b1b0      	cbz	r0, 8013c44 <rcl_send_response+0x40>
 8013c16:	4615      	mov	r5, r2
 8013c18:	b1ea      	cbz	r2, 8013c56 <rcl_send_response+0x52>
 8013c1a:	460e      	mov	r6, r1
 8013c1c:	b1d9      	cbz	r1, 8013c56 <rcl_send_response+0x52>
 8013c1e:	f003 fb51 	bl	80172c4 <rmw_send_response>
 8013c22:	b998      	cbnz	r0, 8013c4c <rcl_send_response+0x48>
 8013c24:	6823      	ldr	r3, [r4, #0]
 8013c26:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8013c2a:	b16b      	cbz	r3, 8013c48 <rcl_send_response+0x44>
 8013c2c:	462a      	mov	r2, r5
 8013c2e:	2102      	movs	r1, #2
 8013c30:	4618      	mov	r0, r3
 8013c32:	ed96 7b04 	vldr	d7, [r6, #16]
 8013c36:	9602      	str	r6, [sp, #8]
 8013c38:	ed8d 7b00 	vstr	d7, [sp]
 8013c3c:	f000 f81c 	bl	8013c78 <rcl_send_service_event_message>
 8013c40:	b004      	add	sp, #16
 8013c42:	bd70      	pop	{r4, r5, r6, pc}
 8013c44:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013c48:	b004      	add	sp, #16
 8013c4a:	bd70      	pop	{r4, r5, r6, pc}
 8013c4c:	2802      	cmp	r0, #2
 8013c4e:	bf18      	it	ne
 8013c50:	2001      	movne	r0, #1
 8013c52:	b004      	add	sp, #16
 8013c54:	bd70      	pop	{r4, r5, r6, pc}
 8013c56:	200b      	movs	r0, #11
 8013c58:	b004      	add	sp, #16
 8013c5a:	bd70      	pop	{r4, r5, r6, pc}
 8013c5c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8013c60:	4770      	bx	lr
 8013c62:	bf00      	nop

08013c64 <rcl_service_is_valid>:
 8013c64:	b130      	cbz	r0, 8013c74 <rcl_service_is_valid+0x10>
 8013c66:	6800      	ldr	r0, [r0, #0]
 8013c68:	b120      	cbz	r0, 8013c74 <rcl_service_is_valid+0x10>
 8013c6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013c6e:	3800      	subs	r0, #0
 8013c70:	bf18      	it	ne
 8013c72:	2001      	movne	r0, #1
 8013c74:	4770      	bx	lr
 8013c76:	bf00      	nop

08013c78 <rcl_send_service_event_message>:
 8013c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c7a:	b093      	sub	sp, #76	@ 0x4c
 8013c7c:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8013c7e:	b17e      	cbz	r6, 8013ca0 <rcl_send_service_event_message+0x28>
 8013c80:	4615      	mov	r5, r2
 8013c82:	b16a      	cbz	r2, 8013ca0 <rcl_send_service_event_message+0x28>
 8013c84:	4604      	mov	r4, r0
 8013c86:	b148      	cbz	r0, 8013c9c <rcl_send_service_event_message+0x24>
 8013c88:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8013c8c:	b133      	cbz	r3, 8013c9c <rcl_send_service_event_message+0x24>
 8013c8e:	68c0      	ldr	r0, [r0, #12]
 8013c90:	460f      	mov	r7, r1
 8013c92:	f000 f8fd 	bl	8013e90 <rcl_clock_valid>
 8013c96:	b108      	cbz	r0, 8013c9c <rcl_send_service_event_message+0x24>
 8013c98:	7a23      	ldrb	r3, [r4, #8]
 8013c9a:	b92b      	cbnz	r3, 8013ca8 <rcl_send_service_event_message+0x30>
 8013c9c:	2401      	movs	r4, #1
 8013c9e:	e000      	b.n	8013ca2 <rcl_send_service_event_message+0x2a>
 8013ca0:	240b      	movs	r4, #11
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	b013      	add	sp, #76	@ 0x4c
 8013ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ca8:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8013cac:	f10d 0c0c 	add.w	ip, sp, #12
 8013cb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013cb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013cb8:	f8de 3000 	ldr.w	r3, [lr]
 8013cbc:	a803      	add	r0, sp, #12
 8013cbe:	f8cc 3000 	str.w	r3, [ip]
 8013cc2:	f7fa fd1b 	bl	800e6fc <rcutils_allocator_is_valid>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	d0ea      	beq.n	8013ca0 <rcl_send_service_event_message+0x28>
 8013cca:	6820      	ldr	r0, [r4, #0]
 8013ccc:	f7f9 fe00 	bl	800d8d0 <rcl_publisher_is_valid>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d048      	beq.n	8013d66 <rcl_send_service_event_message+0xee>
 8013cd4:	4669      	mov	r1, sp
 8013cd6:	68e0      	ldr	r0, [r4, #12]
 8013cd8:	f000 f968 	bl	8013fac <rcl_clock_get_now>
 8013cdc:	4601      	mov	r1, r0
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	d13e      	bne.n	8013d60 <rcl_send_service_event_message+0xe8>
 8013ce2:	2220      	movs	r2, #32
 8013ce4:	eb0d 0002 	add.w	r0, sp, r2
 8013ce8:	f006 ff88 	bl	801abfc <memset>
 8013cec:	f88d 7020 	strb.w	r7, [sp, #32]
 8013cf0:	a325      	add	r3, pc, #148	@ (adr r3, 8013d88 <rcl_send_service_event_message+0x110>)
 8013cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cfa:	f7ec fb61 	bl	80003c0 <__aeabi_ldivmod>
 8013cfe:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8013d02:	6871      	ldr	r1, [r6, #4]
 8013d04:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8013d08:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8013d0c:	6830      	ldr	r0, [r6, #0]
 8013d0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013d12:	7a23      	ldrb	r3, [r4, #8]
 8013d14:	68b2      	ldr	r2, [r6, #8]
 8013d16:	2b01      	cmp	r3, #1
 8013d18:	68f3      	ldr	r3, [r6, #12]
 8013d1a:	bf08      	it	eq
 8013d1c:	2500      	moveq	r5, #0
 8013d1e:	2f01      	cmp	r7, #1
 8013d20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d24:	d822      	bhi.n	8013d6c <rcl_send_service_event_message+0xf4>
 8013d26:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8013d2a:	462a      	mov	r2, r5
 8013d2c:	a808      	add	r0, sp, #32
 8013d2e:	a903      	add	r1, sp, #12
 8013d30:	699d      	ldr	r5, [r3, #24]
 8013d32:	2300      	movs	r3, #0
 8013d34:	47a8      	blx	r5
 8013d36:	4605      	mov	r5, r0
 8013d38:	2d00      	cmp	r5, #0
 8013d3a:	d0af      	beq.n	8013c9c <rcl_send_service_event_message+0x24>
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	4629      	mov	r1, r5
 8013d40:	6820      	ldr	r0, [r4, #0]
 8013d42:	f7f9 fda1 	bl	800d888 <rcl_publish>
 8013d46:	4603      	mov	r3, r0
 8013d48:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8013d4c:	a903      	add	r1, sp, #12
 8013d4e:	461c      	mov	r4, r3
 8013d50:	4628      	mov	r0, r5
 8013d52:	69d3      	ldr	r3, [r2, #28]
 8013d54:	4798      	blx	r3
 8013d56:	2c00      	cmp	r4, #0
 8013d58:	d0a3      	beq.n	8013ca2 <rcl_send_service_event_message+0x2a>
 8013d5a:	f7fa fcf5 	bl	800e748 <rcutils_reset_error>
 8013d5e:	e7a0      	b.n	8013ca2 <rcl_send_service_event_message+0x2a>
 8013d60:	f7fa fcf2 	bl	800e748 <rcutils_reset_error>
 8013d64:	e79a      	b.n	8013c9c <rcl_send_service_event_message+0x24>
 8013d66:	f44f 7496 	mov.w	r4, #300	@ 0x12c
 8013d6a:	e79a      	b.n	8013ca2 <rcl_send_service_event_message+0x2a>
 8013d6c:	1eb9      	subs	r1, r7, #2
 8013d6e:	2901      	cmp	r1, #1
 8013d70:	d8f6      	bhi.n	8013d60 <rcl_send_service_event_message+0xe8>
 8013d72:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8013d76:	462b      	mov	r3, r5
 8013d78:	a808      	add	r0, sp, #32
 8013d7a:	a903      	add	r1, sp, #12
 8013d7c:	6995      	ldr	r5, [r2, #24]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	47a8      	blx	r5
 8013d82:	4605      	mov	r5, r0
 8013d84:	e7d8      	b.n	8013d38 <rcl_send_service_event_message+0xc0>
 8013d86:	bf00      	nop
 8013d88:	3b9aca00 	.word	0x3b9aca00
 8013d8c:	00000000 	.word	0x00000000

08013d90 <rcl_take>:
 8013d90:	2800      	cmp	r0, #0
 8013d92:	d049      	beq.n	8013e28 <rcl_take+0x98>
 8013d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d98:	4615      	mov	r5, r2
 8013d9a:	6802      	ldr	r2, [r0, #0]
 8013d9c:	b0a0      	sub	sp, #128	@ 0x80
 8013d9e:	4604      	mov	r4, r0
 8013da0:	2a00      	cmp	r2, #0
 8013da2:	d039      	beq.n	8013e18 <rcl_take+0x88>
 8013da4:	461f      	mov	r7, r3
 8013da6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8013daa:	b3ab      	cbz	r3, 8013e18 <rcl_take+0x88>
 8013dac:	460e      	mov	r6, r1
 8013dae:	2900      	cmp	r1, #0
 8013db0:	d038      	beq.n	8013e24 <rcl_take+0x94>
 8013db2:	2d00      	cmp	r5, #0
 8013db4:	d03c      	beq.n	8013e30 <rcl_take+0xa0>
 8013db6:	a802      	add	r0, sp, #8
 8013db8:	f002 fc3c 	bl	8016634 <rmw_get_zero_initialized_message_info>
 8013dbc:	6823      	ldr	r3, [r4, #0]
 8013dbe:	f10d 0c08 	add.w	ip, sp, #8
 8013dc2:	46ae      	mov	lr, r5
 8013dc4:	f8d3 80c8 	ldr.w	r8, [r3, #200]	@ 0xc8
 8013dc8:	2400      	movs	r4, #0
 8013dca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013dce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013dd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013dd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013dda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013dde:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013de2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8013de6:	462b      	mov	r3, r5
 8013de8:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8013dec:	f88d 4047 	strb.w	r4, [sp, #71]	@ 0x47
 8013df0:	e88e 0003 	stmia.w	lr, {r0, r1}
 8013df4:	4631      	mov	r1, r6
 8013df6:	4640      	mov	r0, r8
 8013df8:	9700      	str	r7, [sp, #0]
 8013dfa:	f003 fba7 	bl	801754c <rmw_take_with_info>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	b9c0      	cbnz	r0, 8013e34 <rcl_take+0xa4>
 8013e02:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8013e06:	f240 1291 	movw	r2, #401	@ 0x191
 8013e0a:	2900      	cmp	r1, #0
 8013e0c:	bf08      	it	eq
 8013e0e:	4613      	moveq	r3, r2
 8013e10:	4618      	mov	r0, r3
 8013e12:	b020      	add	sp, #128	@ 0x80
 8013e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e18:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	b020      	add	sp, #128	@ 0x80
 8013e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e24:	230b      	movs	r3, #11
 8013e26:	e7f3      	b.n	8013e10 <rcl_take+0x80>
 8013e28:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	4770      	bx	lr
 8013e30:	ad12      	add	r5, sp, #72	@ 0x48
 8013e32:	e7c0      	b.n	8013db6 <rcl_take+0x26>
 8013e34:	f7ff f90e 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	e7e9      	b.n	8013e10 <rcl_take+0x80>

08013e3c <rcl_subscription_get_rmw_handle>:
 8013e3c:	b118      	cbz	r0, 8013e46 <rcl_subscription_get_rmw_handle+0xa>
 8013e3e:	6800      	ldr	r0, [r0, #0]
 8013e40:	b108      	cbz	r0, 8013e46 <rcl_subscription_get_rmw_handle+0xa>
 8013e42:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8013e46:	4770      	bx	lr

08013e48 <rcl_subscription_is_valid>:
 8013e48:	b130      	cbz	r0, 8013e58 <rcl_subscription_is_valid+0x10>
 8013e4a:	6800      	ldr	r0, [r0, #0]
 8013e4c:	b120      	cbz	r0, 8013e58 <rcl_subscription_is_valid+0x10>
 8013e4e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8013e52:	3800      	subs	r0, #0
 8013e54:	bf18      	it	ne
 8013e56:	2001      	movne	r0, #1
 8013e58:	4770      	bx	lr
 8013e5a:	bf00      	nop

08013e5c <rcl_get_system_time>:
 8013e5c:	4608      	mov	r0, r1
 8013e5e:	f7fa bc8f 	b.w	800e780 <rcutils_system_time_now>
 8013e62:	bf00      	nop

08013e64 <rcl_get_steady_time>:
 8013e64:	4608      	mov	r0, r1
 8013e66:	f7fa bcb3 	b.w	800e7d0 <rcutils_steady_time_now>
 8013e6a:	bf00      	nop

08013e6c <rcl_get_ros_time>:
 8013e6c:	7a03      	ldrb	r3, [r0, #8]
 8013e6e:	b510      	push	{r4, lr}
 8013e70:	460c      	mov	r4, r1
 8013e72:	b143      	cbz	r3, 8013e86 <rcl_get_ros_time+0x1a>
 8013e74:	2105      	movs	r1, #5
 8013e76:	f001 ff9f 	bl	8015db8 <__atomic_load_8>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	2000      	movs	r0, #0
 8013e80:	e9c4 2300 	strd	r2, r3, [r4]
 8013e84:	bd10      	pop	{r4, pc}
 8013e86:	4608      	mov	r0, r1
 8013e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e8c:	f7fa bc78 	b.w	800e780 <rcutils_system_time_now>

08013e90 <rcl_clock_valid>:
 8013e90:	b138      	cbz	r0, 8013ea2 <rcl_clock_valid+0x12>
 8013e92:	7803      	ldrb	r3, [r0, #0]
 8013e94:	b123      	cbz	r3, 8013ea0 <rcl_clock_valid+0x10>
 8013e96:	68c0      	ldr	r0, [r0, #12]
 8013e98:	3800      	subs	r0, #0
 8013e9a:	bf18      	it	ne
 8013e9c:	2001      	movne	r0, #1
 8013e9e:	4770      	bx	lr
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	4770      	bx	lr
 8013ea4:	0000      	movs	r0, r0
	...

08013ea8 <rcl_clock_init>:
 8013ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eaa:	4605      	mov	r5, r0
 8013eac:	4610      	mov	r0, r2
 8013eae:	4614      	mov	r4, r2
 8013eb0:	460e      	mov	r6, r1
 8013eb2:	f7fa fc23 	bl	800e6fc <rcutils_allocator_is_valid>
 8013eb6:	b128      	cbz	r0, 8013ec4 <rcl_clock_init+0x1c>
 8013eb8:	2d03      	cmp	r5, #3
 8013eba:	d803      	bhi.n	8013ec4 <rcl_clock_init+0x1c>
 8013ebc:	e8df f005 	tbb	[pc, r5]
 8013ec0:	04522b1c 	.word	0x04522b1c
 8013ec4:	200b      	movs	r0, #11
 8013ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ec8:	2c00      	cmp	r4, #0
 8013eca:	d0fb      	beq.n	8013ec4 <rcl_clock_init+0x1c>
 8013ecc:	fab6 f386 	clz	r3, r6
 8013ed0:	095b      	lsrs	r3, r3, #5
 8013ed2:	2e00      	cmp	r6, #0
 8013ed4:	d0f6      	beq.n	8013ec4 <rcl_clock_init+0x1c>
 8013ed6:	6133      	str	r3, [r6, #16]
 8013ed8:	f106 0514 	add.w	r5, r6, #20
 8013edc:	4f30      	ldr	r7, [pc, #192]	@ (8013fa0 <rcl_clock_init+0xf8>)
 8013ede:	f04f 0c03 	mov.w	ip, #3
 8013ee2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013eea:	6823      	ldr	r3, [r4, #0]
 8013eec:	602b      	str	r3, [r5, #0]
 8013eee:	60f7      	str	r7, [r6, #12]
 8013ef0:	f886 c000 	strb.w	ip, [r6]
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ef8:	2e00      	cmp	r6, #0
 8013efa:	d0e3      	beq.n	8013ec4 <rcl_clock_init+0x1c>
 8013efc:	2300      	movs	r3, #0
 8013efe:	f106 0514 	add.w	r5, r6, #20
 8013f02:	7033      	strb	r3, [r6, #0]
 8013f04:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013f08:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8013f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f10:	6823      	ldr	r3, [r4, #0]
 8013f12:	602b      	str	r3, [r5, #0]
 8013f14:	e7ee      	b.n	8013ef4 <rcl_clock_init+0x4c>
 8013f16:	2c00      	cmp	r4, #0
 8013f18:	d0d4      	beq.n	8013ec4 <rcl_clock_init+0x1c>
 8013f1a:	fab6 f586 	clz	r5, r6
 8013f1e:	096d      	lsrs	r5, r5, #5
 8013f20:	2e00      	cmp	r6, #0
 8013f22:	d0cf      	beq.n	8013ec4 <rcl_clock_init+0x1c>
 8013f24:	46a6      	mov	lr, r4
 8013f26:	7035      	strb	r5, [r6, #0]
 8013f28:	f106 0c14 	add.w	ip, r6, #20
 8013f2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f30:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013f34:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8013f38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f3c:	f8de 3000 	ldr.w	r3, [lr]
 8013f40:	2010      	movs	r0, #16
 8013f42:	f8cc 3000 	str.w	r3, [ip]
 8013f46:	6823      	ldr	r3, [r4, #0]
 8013f48:	6921      	ldr	r1, [r4, #16]
 8013f4a:	4798      	blx	r3
 8013f4c:	6130      	str	r0, [r6, #16]
 8013f4e:	b300      	cbz	r0, 8013f92 <rcl_clock_init+0xea>
 8013f50:	4a14      	ldr	r2, [pc, #80]	@ (8013fa4 <rcl_clock_init+0xfc>)
 8013f52:	2301      	movs	r3, #1
 8013f54:	7205      	strb	r5, [r0, #8]
 8013f56:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8013f98 <rcl_clock_init+0xf0>
 8013f5a:	ed80 7b00 	vstr	d7, [r0]
 8013f5e:	60f2      	str	r2, [r6, #12]
 8013f60:	7033      	strb	r3, [r6, #0]
 8013f62:	e7c7      	b.n	8013ef4 <rcl_clock_init+0x4c>
 8013f64:	2e00      	cmp	r6, #0
 8013f66:	d0ad      	beq.n	8013ec4 <rcl_clock_init+0x1c>
 8013f68:	fab4 f384 	clz	r3, r4
 8013f6c:	095b      	lsrs	r3, r3, #5
 8013f6e:	2c00      	cmp	r4, #0
 8013f70:	d0a8      	beq.n	8013ec4 <rcl_clock_init+0x1c>
 8013f72:	6133      	str	r3, [r6, #16]
 8013f74:	f106 0514 	add.w	r5, r6, #20
 8013f78:	f8df c02c 	ldr.w	ip, [pc, #44]	@ 8013fa8 <rcl_clock_init+0x100>
 8013f7c:	2702      	movs	r7, #2
 8013f7e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f86:	6823      	ldr	r3, [r4, #0]
 8013f88:	602b      	str	r3, [r5, #0]
 8013f8a:	f8c6 c00c 	str.w	ip, [r6, #12]
 8013f8e:	7037      	strb	r7, [r6, #0]
 8013f90:	e7b0      	b.n	8013ef4 <rcl_clock_init+0x4c>
 8013f92:	200a      	movs	r0, #10
 8013f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f96:	bf00      	nop
	...
 8013fa0:	08013e65 	.word	0x08013e65
 8013fa4:	08013e6d 	.word	0x08013e6d
 8013fa8:	08013e5d 	.word	0x08013e5d

08013fac <rcl_clock_get_now>:
 8013fac:	b140      	cbz	r0, 8013fc0 <rcl_clock_get_now+0x14>
 8013fae:	b139      	cbz	r1, 8013fc0 <rcl_clock_get_now+0x14>
 8013fb0:	7803      	ldrb	r3, [r0, #0]
 8013fb2:	b11b      	cbz	r3, 8013fbc <rcl_clock_get_now+0x10>
 8013fb4:	68c3      	ldr	r3, [r0, #12]
 8013fb6:	b10b      	cbz	r3, 8013fbc <rcl_clock_get_now+0x10>
 8013fb8:	6900      	ldr	r0, [r0, #16]
 8013fba:	4718      	bx	r3
 8013fbc:	2001      	movs	r0, #1
 8013fbe:	4770      	bx	lr
 8013fc0:	200b      	movs	r0, #11
 8013fc2:	4770      	bx	lr

08013fc4 <rcl_is_enabled_ros_time_override>:
 8013fc4:	b171      	cbz	r1, 8013fe4 <rcl_is_enabled_ros_time_override+0x20>
 8013fc6:	fab0 f380 	clz	r3, r0
 8013fca:	095b      	lsrs	r3, r3, #5
 8013fcc:	b150      	cbz	r0, 8013fe4 <rcl_is_enabled_ros_time_override+0x20>
 8013fce:	7802      	ldrb	r2, [r0, #0]
 8013fd0:	2a01      	cmp	r2, #1
 8013fd2:	d105      	bne.n	8013fe0 <rcl_is_enabled_ros_time_override+0x1c>
 8013fd4:	6900      	ldr	r0, [r0, #16]
 8013fd6:	b118      	cbz	r0, 8013fe0 <rcl_is_enabled_ros_time_override+0x1c>
 8013fd8:	7a02      	ldrb	r2, [r0, #8]
 8013fda:	4618      	mov	r0, r3
 8013fdc:	700a      	strb	r2, [r1, #0]
 8013fde:	4770      	bx	lr
 8013fe0:	2001      	movs	r0, #1
 8013fe2:	4770      	bx	lr
 8013fe4:	200b      	movs	r0, #11
 8013fe6:	4770      	bx	lr

08013fe8 <rcl_clock_add_jump_callback>:
 8013fe8:	b082      	sub	sp, #8
 8013fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fee:	a906      	add	r1, sp, #24
 8013ff0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 8013ff4:	e881 000c 	stmia.w	r1, {r2, r3}
 8013ff8:	b330      	cbz	r0, 8014048 <rcl_clock_add_jump_callback+0x60>
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	3014      	adds	r0, #20
 8013ffe:	f7fa fb7d 	bl	800e6fc <rcutils_allocator_is_valid>
 8014002:	b30d      	cbz	r5, 8014048 <rcl_clock_add_jump_callback+0x60>
 8014004:	f080 0301 	eor.w	r3, r0, #1
 8014008:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801400c:	d11c      	bne.n	8014048 <rcl_clock_add_jump_callback+0x60>
 801400e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014010:	2a00      	cmp	r2, #0
 8014012:	db19      	blt.n	8014048 <rcl_clock_add_jump_callback+0x60>
 8014014:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8014018:	2901      	cmp	r1, #1
 801401a:	f172 0200 	sbcs.w	r2, r2, #0
 801401e:	da13      	bge.n	8014048 <rcl_clock_add_jump_callback+0x60>
 8014020:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014024:	2f00      	cmp	r7, #0
 8014026:	d040      	beq.n	80140aa <rcl_clock_add_jump_callback+0xc2>
 8014028:	4602      	mov	r2, r0
 801402a:	e003      	b.n	8014034 <rcl_clock_add_jump_callback+0x4c>
 801402c:	42bb      	cmp	r3, r7
 801402e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014032:	d010      	beq.n	8014056 <rcl_clock_add_jump_callback+0x6e>
 8014034:	6811      	ldr	r1, [r2, #0]
 8014036:	3301      	adds	r3, #1
 8014038:	42a9      	cmp	r1, r5
 801403a:	d1f7      	bne.n	801402c <rcl_clock_add_jump_callback+0x44>
 801403c:	6a11      	ldr	r1, [r2, #32]
 801403e:	42b1      	cmp	r1, r6
 8014040:	d1f4      	bne.n	801402c <rcl_clock_add_jump_callback+0x44>
 8014042:	f04f 0e01 	mov.w	lr, #1
 8014046:	e001      	b.n	801404c <rcl_clock_add_jump_callback+0x64>
 8014048:	f04f 0e0b 	mov.w	lr, #11
 801404c:	4670      	mov	r0, lr
 801404e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014052:	b002      	add	sp, #8
 8014054:	4770      	bx	lr
 8014056:	3301      	adds	r3, #1
 8014058:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801405c:	00d9      	lsls	r1, r3, #3
 801405e:	69e3      	ldr	r3, [r4, #28]
 8014060:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014062:	4798      	blx	r3
 8014064:	b1f0      	cbz	r0, 80140a4 <rcl_clock_add_jump_callback+0xbc>
 8014066:	68a3      	ldr	r3, [r4, #8]
 8014068:	f10d 0c18 	add.w	ip, sp, #24
 801406c:	6060      	str	r0, [r4, #4]
 801406e:	f04f 0e00 	mov.w	lr, #0
 8014072:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014076:	f103 0801 	add.w	r8, r3, #1
 801407a:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 801407e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8014082:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014086:	f105 0708 	add.w	r7, r5, #8
 801408a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801408c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014090:	e887 0003 	stmia.w	r7, {r0, r1}
 8014094:	4670      	mov	r0, lr
 8014096:	622e      	str	r6, [r5, #32]
 8014098:	f8c4 8008 	str.w	r8, [r4, #8]
 801409c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140a0:	b002      	add	sp, #8
 80140a2:	4770      	bx	lr
 80140a4:	f04f 0e0a 	mov.w	lr, #10
 80140a8:	e7d0      	b.n	801404c <rcl_clock_add_jump_callback+0x64>
 80140aa:	2128      	movs	r1, #40	@ 0x28
 80140ac:	e7d7      	b.n	801405e <rcl_clock_add_jump_callback+0x76>
 80140ae:	bf00      	nop

080140b0 <rcl_clock_remove_jump_callback>:
 80140b0:	2800      	cmp	r0, #0
 80140b2:	d05d      	beq.n	8014170 <rcl_clock_remove_jump_callback+0xc0>
 80140b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140b8:	460e      	mov	r6, r1
 80140ba:	4605      	mov	r5, r0
 80140bc:	3014      	adds	r0, #20
 80140be:	4692      	mov	sl, r2
 80140c0:	f7fa fb1c 	bl	800e6fc <rcutils_allocator_is_valid>
 80140c4:	2e00      	cmp	r6, #0
 80140c6:	d042      	beq.n	801414e <rcl_clock_remove_jump_callback+0x9e>
 80140c8:	f080 0001 	eor.w	r0, r0, #1
 80140cc:	b2c0      	uxtb	r0, r0
 80140ce:	2800      	cmp	r0, #0
 80140d0:	d13d      	bne.n	801414e <rcl_clock_remove_jump_callback+0x9e>
 80140d2:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80140d6:	f1b8 0f00 	cmp.w	r8, #0
 80140da:	d00c      	beq.n	80140f6 <rcl_clock_remove_jump_callback+0x46>
 80140dc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80140e0:	eb08 0788 	add.w	r7, r8, r8, lsl #2
 80140e4:	464c      	mov	r4, r9
 80140e6:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80140ea:	6823      	ldr	r3, [r4, #0]
 80140ec:	42b3      	cmp	r3, r6
 80140ee:	d005      	beq.n	80140fc <rcl_clock_remove_jump_callback+0x4c>
 80140f0:	3428      	adds	r4, #40	@ 0x28
 80140f2:	42bc      	cmp	r4, r7
 80140f4:	d1f9      	bne.n	80140ea <rcl_clock_remove_jump_callback+0x3a>
 80140f6:	2001      	movs	r0, #1
 80140f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140fc:	6a23      	ldr	r3, [r4, #32]
 80140fe:	3428      	adds	r4, #40	@ 0x28
 8014100:	42a7      	cmp	r7, r4
 8014102:	d02c      	beq.n	801415e <rcl_clock_remove_jump_callback+0xae>
 8014104:	4553      	cmp	r3, sl
 8014106:	d1f0      	bne.n	80140ea <rcl_clock_remove_jump_callback+0x3a>
 8014108:	46a6      	mov	lr, r4
 801410a:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801410e:	3428      	adds	r4, #40	@ 0x28
 8014110:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014118:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801411c:	42a7      	cmp	r7, r4
 801411e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014122:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014126:	e88c 0003 	stmia.w	ip, {r0, r1}
 801412a:	d1ed      	bne.n	8014108 <rcl_clock_remove_jump_callback+0x58>
 801412c:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8014130:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014132:	60ac      	str	r4, [r5, #8]
 8014134:	b174      	cbz	r4, 8014154 <rcl_clock_remove_jump_callback+0xa4>
 8014136:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801413a:	69eb      	ldr	r3, [r5, #28]
 801413c:	4648      	mov	r0, r9
 801413e:	00e1      	lsls	r1, r4, #3
 8014140:	4798      	blx	r3
 8014142:	4604      	mov	r4, r0
 8014144:	b1b0      	cbz	r0, 8014174 <rcl_clock_remove_jump_callback+0xc4>
 8014146:	2000      	movs	r0, #0
 8014148:	606c      	str	r4, [r5, #4]
 801414a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801414e:	200b      	movs	r0, #11
 8014150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014154:	69ab      	ldr	r3, [r5, #24]
 8014156:	4611      	mov	r1, r2
 8014158:	4648      	mov	r0, r9
 801415a:	4798      	blx	r3
 801415c:	e7f3      	b.n	8014146 <rcl_clock_remove_jump_callback+0x96>
 801415e:	4553      	cmp	r3, sl
 8014160:	d1c9      	bne.n	80140f6 <rcl_clock_remove_jump_callback+0x46>
 8014162:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8014166:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014168:	60ac      	str	r4, [r5, #8]
 801416a:	2c00      	cmp	r4, #0
 801416c:	d1e3      	bne.n	8014136 <rcl_clock_remove_jump_callback+0x86>
 801416e:	e7f1      	b.n	8014154 <rcl_clock_remove_jump_callback+0xa4>
 8014170:	200b      	movs	r0, #11
 8014172:	4770      	bx	lr
 8014174:	200a      	movs	r0, #10
 8014176:	e7eb      	b.n	8014150 <rcl_clock_remove_jump_callback+0xa0>

08014178 <_rcl_timer_time_jump>:
 8014178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801417c:	4605      	mov	r5, r0
 801417e:	b084      	sub	sp, #16
 8014180:	4614      	mov	r4, r2
 8014182:	b131      	cbz	r1, 8014192 <_rcl_timer_time_jump+0x1a>
 8014184:	7803      	ldrb	r3, [r0, #0]
 8014186:	3b02      	subs	r3, #2
 8014188:	2b01      	cmp	r3, #1
 801418a:	d93f      	bls.n	801420c <_rcl_timer_time_jump+0x94>
 801418c:	b004      	add	sp, #16
 801418e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014192:	6813      	ldr	r3, [r2, #0]
 8014194:	a902      	add	r1, sp, #8
 8014196:	6818      	ldr	r0, [r3, #0]
 8014198:	f7ff ff08 	bl	8013fac <rcl_clock_get_now>
 801419c:	2800      	cmp	r0, #0
 801419e:	d1f5      	bne.n	801418c <_rcl_timer_time_jump+0x14>
 80141a0:	6820      	ldr	r0, [r4, #0]
 80141a2:	2105      	movs	r1, #5
 80141a4:	3020      	adds	r0, #32
 80141a6:	f001 fe07 	bl	8015db8 <__atomic_load_8>
 80141aa:	6823      	ldr	r3, [r4, #0]
 80141ac:	4681      	mov	r9, r0
 80141ae:	460f      	mov	r7, r1
 80141b0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80141b4:	2105      	movs	r1, #5
 80141b6:	f001 fdff 	bl	8015db8 <__atomic_load_8>
 80141ba:	4680      	mov	r8, r0
 80141bc:	6820      	ldr	r0, [r4, #0]
 80141be:	460e      	mov	r6, r1
 80141c0:	2105      	movs	r1, #5
 80141c2:	3018      	adds	r0, #24
 80141c4:	f001 fdf8 	bl	8015db8 <__atomic_load_8>
 80141c8:	782b      	ldrb	r3, [r5, #0]
 80141ca:	4682      	mov	sl, r0
 80141cc:	460d      	mov	r5, r1
 80141ce:	3b02      	subs	r3, #2
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	d939      	bls.n	8014248 <_rcl_timer_time_jump+0xd0>
 80141d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80141d8:	4542      	cmp	r2, r8
 80141da:	eb73 0606 	sbcs.w	r6, r3, r6
 80141de:	da62      	bge.n	80142a6 <_rcl_timer_time_jump+0x12e>
 80141e0:	454a      	cmp	r2, r9
 80141e2:	eb73 0707 	sbcs.w	r7, r3, r7
 80141e6:	dad1      	bge.n	801418c <_rcl_timer_time_jump+0x14>
 80141e8:	1882      	adds	r2, r0, r2
 80141ea:	f04f 0505 	mov.w	r5, #5
 80141ee:	6820      	ldr	r0, [r4, #0]
 80141f0:	eb43 0301 	adc.w	r3, r3, r1
 80141f4:	9500      	str	r5, [sp, #0]
 80141f6:	3028      	adds	r0, #40	@ 0x28
 80141f8:	f001 fe14 	bl	8015e24 <__atomic_store_8>
 80141fc:	6820      	ldr	r0, [r4, #0]
 80141fe:	9500      	str	r5, [sp, #0]
 8014200:	3020      	adds	r0, #32
 8014202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014206:	f001 fe0d 	bl	8015e24 <__atomic_store_8>
 801420a:	e7bf      	b.n	801418c <_rcl_timer_time_jump+0x14>
 801420c:	6813      	ldr	r3, [r2, #0]
 801420e:	a902      	add	r1, sp, #8
 8014210:	6818      	ldr	r0, [r3, #0]
 8014212:	f7ff fecb 	bl	8013fac <rcl_clock_get_now>
 8014216:	2800      	cmp	r0, #0
 8014218:	d1b8      	bne.n	801418c <_rcl_timer_time_jump+0x14>
 801421a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801421e:	4313      	orrs	r3, r2
 8014220:	d0b4      	beq.n	801418c <_rcl_timer_time_jump+0x14>
 8014222:	6820      	ldr	r0, [r4, #0]
 8014224:	2105      	movs	r1, #5
 8014226:	3028      	adds	r0, #40	@ 0x28
 8014228:	f001 fdc6 	bl	8015db8 <__atomic_load_8>
 801422c:	9e02      	ldr	r6, [sp, #8]
 801422e:	4602      	mov	r2, r0
 8014230:	9b03      	ldr	r3, [sp, #12]
 8014232:	6820      	ldr	r0, [r4, #0]
 8014234:	1b92      	subs	r2, r2, r6
 8014236:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 801423a:	eb61 0303 	sbc.w	r3, r1, r3
 801423e:	2105      	movs	r1, #5
 8014240:	9100      	str	r1, [sp, #0]
 8014242:	f001 fdef 	bl	8015e24 <__atomic_store_8>
 8014246:	e7a1      	b.n	801418c <_rcl_timer_time_jump+0x14>
 8014248:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801424c:	4313      	orrs	r3, r2
 801424e:	d09d      	beq.n	801418c <_rcl_timer_time_jump+0x14>
 8014250:	6820      	ldr	r0, [r4, #0]
 8014252:	f04f 0805 	mov.w	r8, #5
 8014256:	2300      	movs	r3, #0
 8014258:	2200      	movs	r2, #0
 801425a:	3030      	adds	r0, #48	@ 0x30
 801425c:	f8cd 8000 	str.w	r8, [sp]
 8014260:	f001 fe16 	bl	8015e90 <__atomic_exchange_8>
 8014264:	ea51 0300 	orrs.w	r3, r1, r0
 8014268:	4606      	mov	r6, r0
 801426a:	460f      	mov	r7, r1
 801426c:	d08e      	beq.n	801418c <_rcl_timer_time_jump+0x14>
 801426e:	9a02      	ldr	r2, [sp, #8]
 8014270:	9b03      	ldr	r3, [sp, #12]
 8014272:	1a12      	subs	r2, r2, r0
 8014274:	f8cd 8000 	str.w	r8, [sp]
 8014278:	6820      	ldr	r0, [r4, #0]
 801427a:	eb63 0301 	sbc.w	r3, r3, r1
 801427e:	eb12 020a 	adds.w	r2, r2, sl
 8014282:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8014286:	eb43 0305 	adc.w	r3, r3, r5
 801428a:	f001 fdcb 	bl	8015e24 <__atomic_store_8>
 801428e:	f8cd 8000 	str.w	r8, [sp]
 8014292:	6820      	ldr	r0, [r4, #0]
 8014294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014298:	3020      	adds	r0, #32
 801429a:	1b92      	subs	r2, r2, r6
 801429c:	eb63 0307 	sbc.w	r3, r3, r7
 80142a0:	f001 fdc0 	bl	8015e24 <__atomic_store_8>
 80142a4:	e772      	b.n	801418c <_rcl_timer_time_jump+0x14>
 80142a6:	6820      	ldr	r0, [r4, #0]
 80142a8:	3008      	adds	r0, #8
 80142aa:	f005 fbf1 	bl	8019a90 <rcl_trigger_guard_condition>
 80142ae:	e76d      	b.n	801418c <_rcl_timer_time_jump+0x14>

080142b0 <rcl_get_zero_initialized_timer>:
 80142b0:	4b01      	ldr	r3, [pc, #4]	@ (80142b8 <rcl_get_zero_initialized_timer+0x8>)
 80142b2:	6818      	ldr	r0, [r3, #0]
 80142b4:	4770      	bx	lr
 80142b6:	bf00      	nop
 80142b8:	0801c5d4 	.word	0x0801c5d4

080142bc <rcl_timer_init2>:
 80142bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142c0:	b0af      	sub	sp, #188	@ 0xbc
 80142c2:	4604      	mov	r4, r0
 80142c4:	460d      	mov	r5, r1
 80142c6:	4693      	mov	fp, r2
 80142c8:	a83b      	add	r0, sp, #236	@ 0xec
 80142ca:	f89d a100 	ldrb.w	sl, [sp, #256]	@ 0x100
 80142ce:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	@ 0xe0
 80142d2:	f7fa fa13 	bl	800e6fc <rcutils_allocator_is_valid>
 80142d6:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80142da:	2d00      	cmp	r5, #0
 80142dc:	bf08      	it	eq
 80142de:	f043 0301 	orreq.w	r3, r3, #1
 80142e2:	2c00      	cmp	r4, #0
 80142e4:	bf08      	it	eq
 80142e6:	f043 0301 	orreq.w	r3, r3, #1
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d166      	bne.n	80143bc <rcl_timer_init2+0x100>
 80142ee:	f080 0001 	eor.w	r0, r0, #1
 80142f2:	b2c0      	uxtb	r0, r0
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d161      	bne.n	80143bc <rcl_timer_init2+0x100>
 80142f8:	6823      	ldr	r3, [r4, #0]
 80142fa:	b123      	cbz	r3, 8014306 <rcl_timer_init2+0x4a>
 80142fc:	2664      	movs	r6, #100	@ 0x64
 80142fe:	4630      	mov	r0, r6
 8014300:	b02f      	add	sp, #188	@ 0xbc
 8014302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014306:	a908      	add	r1, sp, #32
 8014308:	4628      	mov	r0, r5
 801430a:	f7ff fe4f 	bl	8013fac <rcl_clock_get_now>
 801430e:	4606      	mov	r6, r0
 8014310:	2800      	cmp	r0, #0
 8014312:	d1f4      	bne.n	80142fe <rcl_timer_init2+0x42>
 8014314:	ae06      	add	r6, sp, #24
 8014316:	af18      	add	r7, sp, #96	@ 0x60
 8014318:	4630      	mov	r0, r6
 801431a:	e9cd 5b16 	strd	r5, fp, [sp, #88]	@ 0x58
 801431e:	f005 fac5 	bl	80198ac <rcl_get_zero_initialized_guard_condition>
 8014322:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014326:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014328:	e887 0003 	stmia.w	r7, {r0, r1}
 801432c:	4630      	mov	r0, r6
 801432e:	f005 fb93 	bl	8019a58 <rcl_guard_condition_get_default_options>
 8014332:	ab0d      	add	r3, sp, #52	@ 0x34
 8014334:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014338:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801433c:	4659      	mov	r1, fp
 801433e:	4638      	mov	r0, r7
 8014340:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014344:	f005 fabc 	bl	80198c0 <rcl_guard_condition_init>
 8014348:	4606      	mov	r6, r0
 801434a:	2800      	cmp	r0, #0
 801434c:	d1d7      	bne.n	80142fe <rcl_timer_init2+0x42>
 801434e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2b01      	cmp	r3, #1
 8014354:	d037      	beq.n	80143c6 <rcl_timer_init2+0x10a>
 8014356:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8014358:	f10d 0cec 	add.w	ip, sp, #236	@ 0xec
 801435c:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 8014360:	f08a 0a01 	eor.w	sl, sl, #1
 8014364:	931a      	str	r3, [sp, #104]	@ 0x68
 8014366:	2300      	movs	r3, #0
 8014368:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
 801436c:	932c      	str	r3, [sp, #176]	@ 0xb0
 801436e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014372:	e9cd 891c 	strd	r8, r9, [sp, #112]	@ 0x70
 8014376:	eb12 0008 	adds.w	r0, r2, r8
 801437a:	f04f 0800 	mov.w	r8, #0
 801437e:	eb43 0109 	adc.w	r1, r3, r9
 8014382:	f04f 0900 	mov.w	r9, #0
 8014386:	e9cd 8922 	strd	r8, r9, [sp, #136]	@ 0x88
 801438a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801438e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014392:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014396:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801439a:	f8dc 3000 	ldr.w	r3, [ip]
 801439e:	2060      	movs	r0, #96	@ 0x60
 80143a0:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80143a4:	4619      	mov	r1, r3
 80143a6:	f8ce 3000 	str.w	r3, [lr]
 80143aa:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 80143ac:	4798      	blx	r3
 80143ae:	6020      	str	r0, [r4, #0]
 80143b0:	b358      	cbz	r0, 801440a <rcl_timer_init2+0x14e>
 80143b2:	2260      	movs	r2, #96	@ 0x60
 80143b4:	a916      	add	r1, sp, #88	@ 0x58
 80143b6:	f006 fd5a 	bl	801ae6e <memcpy>
 80143ba:	e7a0      	b.n	80142fe <rcl_timer_init2+0x42>
 80143bc:	260b      	movs	r6, #11
 80143be:	4630      	mov	r0, r6
 80143c0:	b02f      	add	sp, #188	@ 0xbc
 80143c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c6:	2001      	movs	r0, #1
 80143c8:	2100      	movs	r1, #0
 80143ca:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80143ce:	ab12      	add	r3, sp, #72	@ 0x48
 80143d0:	4a13      	ldr	r2, [pc, #76]	@ (8014420 <rcl_timer_init2+0x164>)
 80143d2:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80143d6:	9405      	str	r4, [sp, #20]
 80143d8:	9204      	str	r2, [sp, #16]
 80143da:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80143de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143e2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80143e6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80143ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143ec:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80143f0:	4628      	mov	r0, r5
 80143f2:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80143f6:	f7ff fdf7 	bl	8013fe8 <rcl_clock_add_jump_callback>
 80143fa:	4683      	mov	fp, r0
 80143fc:	2800      	cmp	r0, #0
 80143fe:	d0aa      	beq.n	8014356 <rcl_timer_init2+0x9a>
 8014400:	4638      	mov	r0, r7
 8014402:	465e      	mov	r6, fp
 8014404:	f005 fb06 	bl	8019a14 <rcl_guard_condition_fini>
 8014408:	e779      	b.n	80142fe <rcl_timer_init2+0x42>
 801440a:	4638      	mov	r0, r7
 801440c:	260a      	movs	r6, #10
 801440e:	f005 fb01 	bl	8019a14 <rcl_guard_condition_fini>
 8014412:	4622      	mov	r2, r4
 8014414:	4902      	ldr	r1, [pc, #8]	@ (8014420 <rcl_timer_init2+0x164>)
 8014416:	4628      	mov	r0, r5
 8014418:	f7ff fe4a 	bl	80140b0 <rcl_clock_remove_jump_callback>
 801441c:	e76f      	b.n	80142fe <rcl_timer_init2+0x42>
 801441e:	bf00      	nop
 8014420:	08014179 	.word	0x08014179

08014424 <rcl_timer_clock>:
 8014424:	b149      	cbz	r1, 801443a <rcl_timer_clock+0x16>
 8014426:	fab0 f380 	clz	r3, r0
 801442a:	095b      	lsrs	r3, r3, #5
 801442c:	b128      	cbz	r0, 801443a <rcl_timer_clock+0x16>
 801442e:	6802      	ldr	r2, [r0, #0]
 8014430:	b12a      	cbz	r2, 801443e <rcl_timer_clock+0x1a>
 8014432:	6812      	ldr	r2, [r2, #0]
 8014434:	4618      	mov	r0, r3
 8014436:	600a      	str	r2, [r1, #0]
 8014438:	4770      	bx	lr
 801443a:	200b      	movs	r0, #11
 801443c:	4770      	bx	lr
 801443e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8014442:	4770      	bx	lr

08014444 <rcl_timer_call>:
 8014444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014448:	b087      	sub	sp, #28
 801444a:	2800      	cmp	r0, #0
 801444c:	d065      	beq.n	801451a <rcl_timer_call+0xd6>
 801444e:	6803      	ldr	r3, [r0, #0]
 8014450:	4604      	mov	r4, r0
 8014452:	2b00      	cmp	r3, #0
 8014454:	d066      	beq.n	8014524 <rcl_timer_call+0xe0>
 8014456:	f3bf 8f5b 	dmb	ish
 801445a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801445e:	f3bf 8f5b 	dmb	ish
 8014462:	2b00      	cmp	r3, #0
 8014464:	d14e      	bne.n	8014504 <rcl_timer_call+0xc0>
 8014466:	6803      	ldr	r3, [r0, #0]
 8014468:	a904      	add	r1, sp, #16
 801446a:	6818      	ldr	r0, [r3, #0]
 801446c:	f7ff fd9e 	bl	8013fac <rcl_clock_get_now>
 8014470:	4605      	mov	r5, r0
 8014472:	2800      	cmp	r0, #0
 8014474:	d142      	bne.n	80144fc <rcl_timer_call+0xb8>
 8014476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801447a:	2b00      	cmp	r3, #0
 801447c:	db48      	blt.n	8014510 <rcl_timer_call+0xcc>
 801447e:	2605      	movs	r6, #5
 8014480:	6820      	ldr	r0, [r4, #0]
 8014482:	9600      	str	r6, [sp, #0]
 8014484:	3020      	adds	r0, #32
 8014486:	f001 fd03 	bl	8015e90 <__atomic_exchange_8>
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	4680      	mov	r8, r0
 801448e:	f3bf 8f5b 	dmb	ish
 8014492:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014496:	f3bf 8f5b 	dmb	ish
 801449a:	6820      	ldr	r0, [r4, #0]
 801449c:	4689      	mov	r9, r1
 801449e:	4631      	mov	r1, r6
 80144a0:	3028      	adds	r0, #40	@ 0x28
 80144a2:	f001 fc89 	bl	8015db8 <__atomic_load_8>
 80144a6:	460f      	mov	r7, r1
 80144a8:	4631      	mov	r1, r6
 80144aa:	4606      	mov	r6, r0
 80144ac:	6820      	ldr	r0, [r4, #0]
 80144ae:	3018      	adds	r0, #24
 80144b0:	f001 fc82 	bl	8015db8 <__atomic_load_8>
 80144b4:	4602      	mov	r2, r0
 80144b6:	9804      	ldr	r0, [sp, #16]
 80144b8:	460b      	mov	r3, r1
 80144ba:	18b6      	adds	r6, r6, r2
 80144bc:	4692      	mov	sl, r2
 80144be:	eb41 0707 	adc.w	r7, r1, r7
 80144c2:	9905      	ldr	r1, [sp, #20]
 80144c4:	42b0      	cmp	r0, r6
 80144c6:	eb71 0c07 	sbcs.w	ip, r1, r7
 80144ca:	db04      	blt.n	80144d6 <rcl_timer_call+0x92>
 80144cc:	ea53 0c02 	orrs.w	ip, r3, r2
 80144d0:	d12b      	bne.n	801452a <rcl_timer_call+0xe6>
 80144d2:	4606      	mov	r6, r0
 80144d4:	460f      	mov	r7, r1
 80144d6:	6820      	ldr	r0, [r4, #0]
 80144d8:	2105      	movs	r1, #5
 80144da:	4632      	mov	r2, r6
 80144dc:	463b      	mov	r3, r7
 80144de:	3028      	adds	r0, #40	@ 0x28
 80144e0:	9100      	str	r1, [sp, #0]
 80144e2:	f001 fc9f 	bl	8015e24 <__atomic_store_8>
 80144e6:	f1bb 0f00 	cmp.w	fp, #0
 80144ea:	d007      	beq.n	80144fc <rcl_timer_call+0xb8>
 80144ec:	9a04      	ldr	r2, [sp, #16]
 80144ee:	4620      	mov	r0, r4
 80144f0:	9b05      	ldr	r3, [sp, #20]
 80144f2:	ebb2 0208 	subs.w	r2, r2, r8
 80144f6:	eb63 0309 	sbc.w	r3, r3, r9
 80144fa:	47d8      	blx	fp
 80144fc:	4628      	mov	r0, r5
 80144fe:	b007      	add	sp, #28
 8014500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014504:	f240 3521 	movw	r5, #801	@ 0x321
 8014508:	4628      	mov	r0, r5
 801450a:	b007      	add	sp, #28
 801450c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014510:	2501      	movs	r5, #1
 8014512:	4628      	mov	r0, r5
 8014514:	b007      	add	sp, #28
 8014516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801451a:	250b      	movs	r5, #11
 801451c:	4628      	mov	r0, r5
 801451e:	b007      	add	sp, #28
 8014520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014524:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014528:	e7e8      	b.n	80144fc <rcl_timer_call+0xb8>
 801452a:	1b80      	subs	r0, r0, r6
 801452c:	eb61 0107 	sbc.w	r1, r1, r7
 8014530:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014534:	f7eb ff44 	bl	80003c0 <__aeabi_ldivmod>
 8014538:	9b02      	ldr	r3, [sp, #8]
 801453a:	3001      	adds	r0, #1
 801453c:	f141 0100 	adc.w	r1, r1, #0
 8014540:	fb00 f303 	mul.w	r3, r0, r3
 8014544:	fb01 330a 	mla	r3, r1, sl, r3
 8014548:	fba0 0a0a 	umull	r0, sl, r0, sl
 801454c:	1830      	adds	r0, r6, r0
 801454e:	4453      	add	r3, sl
 8014550:	4606      	mov	r6, r0
 8014552:	eb43 0707 	adc.w	r7, r3, r7
 8014556:	e7be      	b.n	80144d6 <rcl_timer_call+0x92>

08014558 <rcl_timer_is_ready>:
 8014558:	b398      	cbz	r0, 80145c2 <rcl_timer_is_ready+0x6a>
 801455a:	6803      	ldr	r3, [r0, #0]
 801455c:	b530      	push	{r4, r5, lr}
 801455e:	4604      	mov	r4, r0
 8014560:	b083      	sub	sp, #12
 8014562:	b383      	cbz	r3, 80145c6 <rcl_timer_is_ready+0x6e>
 8014564:	460d      	mov	r5, r1
 8014566:	b349      	cbz	r1, 80145bc <rcl_timer_is_ready+0x64>
 8014568:	f3bf 8f5b 	dmb	ish
 801456c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014570:	f3bf 8f5b 	dmb	ish
 8014574:	b9fb      	cbnz	r3, 80145b6 <rcl_timer_is_ready+0x5e>
 8014576:	6803      	ldr	r3, [r0, #0]
 8014578:	4669      	mov	r1, sp
 801457a:	6818      	ldr	r0, [r3, #0]
 801457c:	f7ff fd16 	bl	8013fac <rcl_clock_get_now>
 8014580:	b128      	cbz	r0, 801458e <rcl_timer_is_ready+0x36>
 8014582:	f240 3321 	movw	r3, #801	@ 0x321
 8014586:	4298      	cmp	r0, r3
 8014588:	d015      	beq.n	80145b6 <rcl_timer_is_ready+0x5e>
 801458a:	b003      	add	sp, #12
 801458c:	bd30      	pop	{r4, r5, pc}
 801458e:	6820      	ldr	r0, [r4, #0]
 8014590:	2105      	movs	r1, #5
 8014592:	3028      	adds	r0, #40	@ 0x28
 8014594:	f001 fc10 	bl	8015db8 <__atomic_load_8>
 8014598:	e9dd 3200 	ldrd	r3, r2, [sp]
 801459c:	1ac0      	subs	r0, r0, r3
 801459e:	eb61 0102 	sbc.w	r1, r1, r2
 80145a2:	2801      	cmp	r0, #1
 80145a4:	f171 0100 	sbcs.w	r1, r1, #0
 80145a8:	bfb4      	ite	lt
 80145aa:	2301      	movlt	r3, #1
 80145ac:	2300      	movge	r3, #0
 80145ae:	702b      	strb	r3, [r5, #0]
 80145b0:	2000      	movs	r0, #0
 80145b2:	b003      	add	sp, #12
 80145b4:	bd30      	pop	{r4, r5, pc}
 80145b6:	2300      	movs	r3, #0
 80145b8:	702b      	strb	r3, [r5, #0]
 80145ba:	e7f9      	b.n	80145b0 <rcl_timer_is_ready+0x58>
 80145bc:	200b      	movs	r0, #11
 80145be:	b003      	add	sp, #12
 80145c0:	bd30      	pop	{r4, r5, pc}
 80145c2:	200b      	movs	r0, #11
 80145c4:	4770      	bx	lr
 80145c6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80145ca:	e7de      	b.n	801458a <rcl_timer_is_ready+0x32>

080145cc <rcl_timer_get_next_call_time>:
 80145cc:	b1e8      	cbz	r0, 801460a <rcl_timer_get_next_call_time+0x3e>
 80145ce:	b538      	push	{r3, r4, r5, lr}
 80145d0:	6803      	ldr	r3, [r0, #0]
 80145d2:	b1e3      	cbz	r3, 801460e <rcl_timer_get_next_call_time+0x42>
 80145d4:	460c      	mov	r4, r1
 80145d6:	b1b1      	cbz	r1, 8014606 <rcl_timer_get_next_call_time+0x3a>
 80145d8:	f3bf 8f5b 	dmb	ish
 80145dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80145e0:	f3bf 8f5b 	dmb	ish
 80145e4:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 80145e8:	b953      	cbnz	r3, 8014600 <rcl_timer_get_next_call_time+0x34>
 80145ea:	6800      	ldr	r0, [r0, #0]
 80145ec:	2105      	movs	r1, #5
 80145ee:	3028      	adds	r0, #40	@ 0x28
 80145f0:	f001 fbe2 	bl	8015db8 <__atomic_load_8>
 80145f4:	4602      	mov	r2, r0
 80145f6:	460b      	mov	r3, r1
 80145f8:	4628      	mov	r0, r5
 80145fa:	e9c4 2300 	strd	r2, r3, [r4]
 80145fe:	bd38      	pop	{r3, r4, r5, pc}
 8014600:	f240 3021 	movw	r0, #801	@ 0x321
 8014604:	bd38      	pop	{r3, r4, r5, pc}
 8014606:	200b      	movs	r0, #11
 8014608:	bd38      	pop	{r3, r4, r5, pc}
 801460a:	200b      	movs	r0, #11
 801460c:	4770      	bx	lr
 801460e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8014612:	bd38      	pop	{r3, r4, r5, pc}

08014614 <rcl_timer_get_guard_condition>:
 8014614:	b130      	cbz	r0, 8014624 <rcl_timer_get_guard_condition+0x10>
 8014616:	6800      	ldr	r0, [r0, #0]
 8014618:	b120      	cbz	r0, 8014624 <rcl_timer_get_guard_condition+0x10>
 801461a:	68c3      	ldr	r3, [r0, #12]
 801461c:	b10b      	cbz	r3, 8014622 <rcl_timer_get_guard_condition+0xe>
 801461e:	3008      	adds	r0, #8
 8014620:	4770      	bx	lr
 8014622:	4618      	mov	r0, r3
 8014624:	4770      	bx	lr
 8014626:	bf00      	nop

08014628 <rcl_get_zero_initialized_wait_set>:
 8014628:	b510      	push	{r4, lr}
 801462a:	4c08      	ldr	r4, [pc, #32]	@ (801464c <rcl_get_zero_initialized_wait_set+0x24>)
 801462c:	4686      	mov	lr, r0
 801462e:	4684      	mov	ip, r0
 8014630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014632:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014638:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801463c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801463e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014642:	6823      	ldr	r3, [r4, #0]
 8014644:	4670      	mov	r0, lr
 8014646:	f8cc 3000 	str.w	r3, [ip]
 801464a:	bd10      	pop	{r4, pc}
 801464c:	0801c5d8 	.word	0x0801c5d8

08014650 <rcl_wait_set_is_valid>:
 8014650:	b118      	cbz	r0, 801465a <rcl_wait_set_is_valid+0xa>
 8014652:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014654:	3800      	subs	r0, #0
 8014656:	bf18      	it	ne
 8014658:	2001      	movne	r0, #1
 801465a:	4770      	bx	lr

0801465c <rcl_wait_set_fini>:
 801465c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014660:	b083      	sub	sp, #12
 8014662:	2800      	cmp	r0, #0
 8014664:	f000 8098 	beq.w	8014798 <rcl_wait_set_fini+0x13c>
 8014668:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801466a:	4605      	mov	r5, r0
 801466c:	2e00      	cmp	r6, #0
 801466e:	f000 808f 	beq.w	8014790 <rcl_wait_set_fini+0x134>
 8014672:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014674:	f003 f95e 	bl	8017934 <rmw_destroy_wait_set>
 8014678:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801467a:	1e06      	subs	r6, r0, #0
 801467c:	bf18      	it	ne
 801467e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014682:	2c00      	cmp	r4, #0
 8014684:	f000 8084 	beq.w	8014790 <rcl_wait_set_fini+0x134>
 8014688:	2700      	movs	r7, #0
 801468a:	6828      	ldr	r0, [r5, #0]
 801468c:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8014690:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014694:	606f      	str	r7, [r5, #4]
 8014696:	6027      	str	r7, [r4, #0]
 8014698:	b118      	cbz	r0, 80146a2 <rcl_wait_set_fini+0x46>
 801469a:	4649      	mov	r1, r9
 801469c:	47c0      	blx	r8
 801469e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146a0:	602f      	str	r7, [r5, #0]
 80146a2:	68a0      	ldr	r0, [r4, #8]
 80146a4:	b128      	cbz	r0, 80146b2 <rcl_wait_set_fini+0x56>
 80146a6:	4649      	mov	r1, r9
 80146a8:	47c0      	blx	r8
 80146aa:	2300      	movs	r3, #0
 80146ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146ae:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80146b2:	f04f 0800 	mov.w	r8, #0
 80146b6:	68a8      	ldr	r0, [r5, #8]
 80146b8:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80146ba:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80146bc:	f8c5 800c 	str.w	r8, [r5, #12]
 80146c0:	f8c4 800c 	str.w	r8, [r4, #12]
 80146c4:	b128      	cbz	r0, 80146d2 <rcl_wait_set_fini+0x76>
 80146c6:	47b8      	blx	r7
 80146c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146ca:	f8c5 8008 	str.w	r8, [r5, #8]
 80146ce:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80146d0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80146d2:	f04f 0800 	mov.w	r8, #0
 80146d6:	6960      	ldr	r0, [r4, #20]
 80146d8:	f8c4 8010 	str.w	r8, [r4, #16]
 80146dc:	b128      	cbz	r0, 80146ea <rcl_wait_set_fini+0x8e>
 80146de:	47b8      	blx	r7
 80146e0:	f8c4 8014 	str.w	r8, [r4, #20]
 80146e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146e6:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80146e8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80146ea:	f04f 0800 	mov.w	r8, #0
 80146ee:	6928      	ldr	r0, [r5, #16]
 80146f0:	f8c5 8014 	str.w	r8, [r5, #20]
 80146f4:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
 80146f8:	b128      	cbz	r0, 8014706 <rcl_wait_set_fini+0xaa>
 80146fa:	47b8      	blx	r7
 80146fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80146fe:	f8c5 8010 	str.w	r8, [r5, #16]
 8014702:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8014704:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8014706:	f04f 0800 	mov.w	r8, #0
 801470a:	69a8      	ldr	r0, [r5, #24]
 801470c:	f8c5 801c 	str.w	r8, [r5, #28]
 8014710:	f8c4 8018 	str.w	r8, [r4, #24]
 8014714:	b128      	cbz	r0, 8014722 <rcl_wait_set_fini+0xc6>
 8014716:	9101      	str	r1, [sp, #4]
 8014718:	47b8      	blx	r7
 801471a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801471c:	9901      	ldr	r1, [sp, #4]
 801471e:	f8c5 8018 	str.w	r8, [r5, #24]
 8014722:	6a20      	ldr	r0, [r4, #32]
 8014724:	b120      	cbz	r0, 8014730 <rcl_wait_set_fini+0xd4>
 8014726:	47b8      	blx	r7
 8014728:	2300      	movs	r3, #0
 801472a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801472c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014730:	2700      	movs	r7, #0
 8014732:	6a28      	ldr	r0, [r5, #32]
 8014734:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8014738:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801473c:	626f      	str	r7, [r5, #36]	@ 0x24
 801473e:	6267      	str	r7, [r4, #36]	@ 0x24
 8014740:	b118      	cbz	r0, 801474a <rcl_wait_set_fini+0xee>
 8014742:	4649      	mov	r1, r9
 8014744:	47c0      	blx	r8
 8014746:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014748:	622f      	str	r7, [r5, #32]
 801474a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801474c:	b128      	cbz	r0, 801475a <rcl_wait_set_fini+0xfe>
 801474e:	4649      	mov	r1, r9
 8014750:	47c0      	blx	r8
 8014752:	2300      	movs	r3, #0
 8014754:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014756:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801475a:	2700      	movs	r7, #0
 801475c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801475e:	f8d4 804c 	ldr.w	r8, [r4, #76]	@ 0x4c
 8014762:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014766:	62ef      	str	r7, [r5, #44]	@ 0x2c
 8014768:	6327      	str	r7, [r4, #48]	@ 0x30
 801476a:	b118      	cbz	r0, 8014774 <rcl_wait_set_fini+0x118>
 801476c:	4649      	mov	r1, r9
 801476e:	47c0      	blx	r8
 8014770:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014772:	62af      	str	r7, [r5, #40]	@ 0x28
 8014774:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014776:	b128      	cbz	r0, 8014784 <rcl_wait_set_fini+0x128>
 8014778:	4649      	mov	r1, r9
 801477a:	47c0      	blx	r8
 801477c:	2300      	movs	r3, #0
 801477e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014780:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8014784:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014786:	4620      	mov	r0, r4
 8014788:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 801478a:	4798      	blx	r3
 801478c:	2300      	movs	r3, #0
 801478e:	632b      	str	r3, [r5, #48]	@ 0x30
 8014790:	4630      	mov	r0, r6
 8014792:	b003      	add	sp, #12
 8014794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014798:	260b      	movs	r6, #11
 801479a:	4630      	mov	r0, r6
 801479c:	b003      	add	sp, #12
 801479e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147a2:	bf00      	nop

080147a4 <rcl_wait_set_add_subscription>:
 80147a4:	b318      	cbz	r0, 80147ee <rcl_wait_set_add_subscription+0x4a>
 80147a6:	b538      	push	{r3, r4, r5, lr}
 80147a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80147aa:	4604      	mov	r4, r0
 80147ac:	b30b      	cbz	r3, 80147f2 <rcl_wait_set_add_subscription+0x4e>
 80147ae:	b319      	cbz	r1, 80147f8 <rcl_wait_set_add_subscription+0x54>
 80147b0:	681d      	ldr	r5, [r3, #0]
 80147b2:	6840      	ldr	r0, [r0, #4]
 80147b4:	4285      	cmp	r5, r0
 80147b6:	d217      	bcs.n	80147e8 <rcl_wait_set_add_subscription+0x44>
 80147b8:	1c68      	adds	r0, r5, #1
 80147ba:	6018      	str	r0, [r3, #0]
 80147bc:	6823      	ldr	r3, [r4, #0]
 80147be:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80147c2:	b102      	cbz	r2, 80147c6 <rcl_wait_set_add_subscription+0x22>
 80147c4:	6015      	str	r5, [r2, #0]
 80147c6:	4608      	mov	r0, r1
 80147c8:	f7ff fb38 	bl	8013e3c <rcl_subscription_get_rmw_handle>
 80147cc:	b150      	cbz	r0, 80147e4 <rcl_wait_set_add_subscription+0x40>
 80147ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80147d0:	6842      	ldr	r2, [r0, #4]
 80147d2:	2000      	movs	r0, #0
 80147d4:	689b      	ldr	r3, [r3, #8]
 80147d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80147dc:	6853      	ldr	r3, [r2, #4]
 80147de:	3301      	adds	r3, #1
 80147e0:	6053      	str	r3, [r2, #4]
 80147e2:	bd38      	pop	{r3, r4, r5, pc}
 80147e4:	2001      	movs	r0, #1
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	f240 3086 	movw	r0, #902	@ 0x386
 80147ec:	bd38      	pop	{r3, r4, r5, pc}
 80147ee:	200b      	movs	r0, #11
 80147f0:	4770      	bx	lr
 80147f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80147f6:	bd38      	pop	{r3, r4, r5, pc}
 80147f8:	200b      	movs	r0, #11
 80147fa:	bd38      	pop	{r3, r4, r5, pc}

080147fc <rcl_wait_set_clear>:
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d074      	beq.n	80148ea <rcl_wait_set_clear+0xee>
 8014800:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014802:	b510      	push	{r4, lr}
 8014804:	4604      	mov	r4, r0
 8014806:	2b00      	cmp	r3, #0
 8014808:	d071      	beq.n	80148ee <rcl_wait_set_clear+0xf2>
 801480a:	6800      	ldr	r0, [r0, #0]
 801480c:	b138      	cbz	r0, 801481e <rcl_wait_set_clear+0x22>
 801480e:	6862      	ldr	r2, [r4, #4]
 8014810:	2100      	movs	r1, #0
 8014812:	0092      	lsls	r2, r2, #2
 8014814:	f006 f9f2 	bl	801abfc <memset>
 8014818:	2200      	movs	r2, #0
 801481a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801481c:	601a      	str	r2, [r3, #0]
 801481e:	68a0      	ldr	r0, [r4, #8]
 8014820:	b138      	cbz	r0, 8014832 <rcl_wait_set_clear+0x36>
 8014822:	68e2      	ldr	r2, [r4, #12]
 8014824:	2100      	movs	r1, #0
 8014826:	0092      	lsls	r2, r2, #2
 8014828:	f006 f9e8 	bl	801abfc <memset>
 801482c:	2200      	movs	r2, #0
 801482e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014830:	60da      	str	r2, [r3, #12]
 8014832:	69a0      	ldr	r0, [r4, #24]
 8014834:	b138      	cbz	r0, 8014846 <rcl_wait_set_clear+0x4a>
 8014836:	69e2      	ldr	r2, [r4, #28]
 8014838:	2100      	movs	r1, #0
 801483a:	0092      	lsls	r2, r2, #2
 801483c:	f006 f9de 	bl	801abfc <memset>
 8014840:	2200      	movs	r2, #0
 8014842:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014844:	619a      	str	r2, [r3, #24]
 8014846:	6a20      	ldr	r0, [r4, #32]
 8014848:	b138      	cbz	r0, 801485a <rcl_wait_set_clear+0x5e>
 801484a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801484c:	2100      	movs	r1, #0
 801484e:	0092      	lsls	r2, r2, #2
 8014850:	f006 f9d4 	bl	801abfc <memset>
 8014854:	2200      	movs	r2, #0
 8014856:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014858:	625a      	str	r2, [r3, #36]	@ 0x24
 801485a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801485c:	b138      	cbz	r0, 801486e <rcl_wait_set_clear+0x72>
 801485e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014860:	2100      	movs	r1, #0
 8014862:	0092      	lsls	r2, r2, #2
 8014864:	f006 f9ca 	bl	801abfc <memset>
 8014868:	2200      	movs	r2, #0
 801486a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801486c:	631a      	str	r2, [r3, #48]	@ 0x30
 801486e:	6920      	ldr	r0, [r4, #16]
 8014870:	b138      	cbz	r0, 8014882 <rcl_wait_set_clear+0x86>
 8014872:	6962      	ldr	r2, [r4, #20]
 8014874:	2100      	movs	r1, #0
 8014876:	0092      	lsls	r2, r2, #2
 8014878:	f006 f9c0 	bl	801abfc <memset>
 801487c:	2200      	movs	r2, #0
 801487e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014880:	641a      	str	r2, [r3, #64]	@ 0x40
 8014882:	6898      	ldr	r0, [r3, #8]
 8014884:	b138      	cbz	r0, 8014896 <rcl_wait_set_clear+0x9a>
 8014886:	685a      	ldr	r2, [r3, #4]
 8014888:	2100      	movs	r1, #0
 801488a:	0092      	lsls	r2, r2, #2
 801488c:	f006 f9b6 	bl	801abfc <memset>
 8014890:	2200      	movs	r2, #0
 8014892:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014894:	605a      	str	r2, [r3, #4]
 8014896:	6958      	ldr	r0, [r3, #20]
 8014898:	b138      	cbz	r0, 80148aa <rcl_wait_set_clear+0xae>
 801489a:	691a      	ldr	r2, [r3, #16]
 801489c:	2100      	movs	r1, #0
 801489e:	0092      	lsls	r2, r2, #2
 80148a0:	f006 f9ac 	bl	801abfc <memset>
 80148a4:	2200      	movs	r2, #0
 80148a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148a8:	611a      	str	r2, [r3, #16]
 80148aa:	6a18      	ldr	r0, [r3, #32]
 80148ac:	b138      	cbz	r0, 80148be <rcl_wait_set_clear+0xc2>
 80148ae:	69da      	ldr	r2, [r3, #28]
 80148b0:	2100      	movs	r1, #0
 80148b2:	0092      	lsls	r2, r2, #2
 80148b4:	f006 f9a2 	bl	801abfc <memset>
 80148b8:	2200      	movs	r2, #0
 80148ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148bc:	61da      	str	r2, [r3, #28]
 80148be:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80148c0:	b138      	cbz	r0, 80148d2 <rcl_wait_set_clear+0xd6>
 80148c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80148c4:	2100      	movs	r1, #0
 80148c6:	0092      	lsls	r2, r2, #2
 80148c8:	f006 f998 	bl	801abfc <memset>
 80148cc:	2200      	movs	r2, #0
 80148ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80148d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80148d4:	b138      	cbz	r0, 80148e6 <rcl_wait_set_clear+0xea>
 80148d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80148d8:	2100      	movs	r1, #0
 80148da:	0092      	lsls	r2, r2, #2
 80148dc:	f006 f98e 	bl	801abfc <memset>
 80148e0:	2200      	movs	r2, #0
 80148e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80148e6:	2000      	movs	r0, #0
 80148e8:	bd10      	pop	{r4, pc}
 80148ea:	200b      	movs	r0, #11
 80148ec:	4770      	bx	lr
 80148ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148f2:	bd10      	pop	{r4, pc}

080148f4 <rcl_wait_set_resize>:
 80148f4:	2800      	cmp	r0, #0
 80148f6:	f000 81a1 	beq.w	8014c3c <rcl_wait_set_resize+0x348>
 80148fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148fe:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8014902:	b083      	sub	sp, #12
 8014904:	4604      	mov	r4, r0
 8014906:	f1ba 0f00 	cmp.w	sl, #0
 801490a:	f000 8199 	beq.w	8014c40 <rcl_wait_set_resize+0x34c>
 801490e:	f04f 0800 	mov.w	r8, #0
 8014912:	461e      	mov	r6, r3
 8014914:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8014918:	460f      	mov	r7, r1
 801491a:	4615      	mov	r5, r2
 801491c:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8014920:	f8c0 8004 	str.w	r8, [r0, #4]
 8014924:	6800      	ldr	r0, [r0, #0]
 8014926:	f8ca 8000 	str.w	r8, [sl]
 801492a:	2900      	cmp	r1, #0
 801492c:	f000 80cf 	beq.w	8014ace <rcl_wait_set_resize+0x1da>
 8014930:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8014934:	464a      	mov	r2, r9
 8014936:	9301      	str	r3, [sp, #4]
 8014938:	4651      	mov	r1, sl
 801493a:	4798      	blx	r3
 801493c:	9b01      	ldr	r3, [sp, #4]
 801493e:	6020      	str	r0, [r4, #0]
 8014940:	2800      	cmp	r0, #0
 8014942:	f000 8109 	beq.w	8014b58 <rcl_wait_set_resize+0x264>
 8014946:	4652      	mov	r2, sl
 8014948:	4641      	mov	r1, r8
 801494a:	9301      	str	r3, [sp, #4]
 801494c:	f006 f956 	bl	801abfc <memset>
 8014950:	6067      	str	r7, [r4, #4]
 8014952:	464a      	mov	r2, r9
 8014954:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8014956:	4651      	mov	r1, sl
 8014958:	9b01      	ldr	r3, [sp, #4]
 801495a:	68b8      	ldr	r0, [r7, #8]
 801495c:	f8c7 8004 	str.w	r8, [r7, #4]
 8014960:	4798      	blx	r3
 8014962:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014964:	60b8      	str	r0, [r7, #8]
 8014966:	689f      	ldr	r7, [r3, #8]
 8014968:	2f00      	cmp	r7, #0
 801496a:	f000 80f0 	beq.w	8014b4e <rcl_wait_set_resize+0x25a>
 801496e:	4652      	mov	r2, sl
 8014970:	4641      	mov	r1, r8
 8014972:	4638      	mov	r0, r7
 8014974:	f006 f942 	bl	801abfc <memset>
 8014978:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801497c:	2700      	movs	r7, #0
 801497e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8014982:	68a0      	ldr	r0, [r4, #8]
 8014984:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8014988:	60e7      	str	r7, [r4, #12]
 801498a:	f8ca 700c 	str.w	r7, [sl, #12]
 801498e:	2d00      	cmp	r5, #0
 8014990:	f040 80b0 	bne.w	8014af4 <rcl_wait_set_resize+0x200>
 8014994:	b130      	cbz	r0, 80149a4 <rcl_wait_set_resize+0xb0>
 8014996:	4641      	mov	r1, r8
 8014998:	4790      	blx	r2
 801499a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801499e:	60a5      	str	r5, [r4, #8]
 80149a0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80149a4:	2700      	movs	r7, #0
 80149a6:	19ad      	adds	r5, r5, r6
 80149a8:	f8da 0014 	ldr.w	r0, [sl, #20]
 80149ac:	f8ca 7010 	str.w	r7, [sl, #16]
 80149b0:	f040 80b8 	bne.w	8014b24 <rcl_wait_set_resize+0x230>
 80149b4:	b148      	cbz	r0, 80149ca <rcl_wait_set_resize+0xd6>
 80149b6:	4641      	mov	r1, r8
 80149b8:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 80149bc:	4798      	blx	r3
 80149be:	f8ca 5014 	str.w	r5, [sl, #20]
 80149c2:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80149c6:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80149ca:	2500      	movs	r5, #0
 80149cc:	6920      	ldr	r0, [r4, #16]
 80149ce:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80149d2:	6165      	str	r5, [r4, #20]
 80149d4:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 80149d8:	2e00      	cmp	r6, #0
 80149da:	f040 80c1 	bne.w	8014b60 <rcl_wait_set_resize+0x26c>
 80149de:	b140      	cbz	r0, 80149f2 <rcl_wait_set_resize+0xfe>
 80149e0:	4641      	mov	r1, r8
 80149e2:	47c8      	blx	r9
 80149e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80149e8:	6126      	str	r6, [r4, #16]
 80149ea:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80149ee:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80149f2:	2500      	movs	r5, #0
 80149f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149f6:	69a0      	ldr	r0, [r4, #24]
 80149f8:	61e5      	str	r5, [r4, #28]
 80149fa:	f8ca 5018 	str.w	r5, [sl, #24]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	f040 80c2 	bne.w	8014b88 <rcl_wait_set_resize+0x294>
 8014a04:	b128      	cbz	r0, 8014a12 <rcl_wait_set_resize+0x11e>
 8014a06:	4641      	mov	r1, r8
 8014a08:	47c8      	blx	r9
 8014a0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014a10:	61a3      	str	r3, [r4, #24]
 8014a12:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014a16:	b130      	cbz	r0, 8014a26 <rcl_wait_set_resize+0x132>
 8014a18:	4641      	mov	r1, r8
 8014a1a:	47c8      	blx	r9
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014a22:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8014a26:	2500      	movs	r5, #0
 8014a28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014a2a:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8014a2e:	6a20      	ldr	r0, [r4, #32]
 8014a30:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8014a34:	6265      	str	r5, [r4, #36]	@ 0x24
 8014a36:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	f000 80c8 	beq.w	8014bd0 <rcl_wait_set_resize+0x2dc>
 8014a40:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8014a44:	4632      	mov	r2, r6
 8014a46:	4649      	mov	r1, r9
 8014a48:	47c0      	blx	r8
 8014a4a:	6220      	str	r0, [r4, #32]
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	f000 8083 	beq.w	8014b58 <rcl_wait_set_resize+0x264>
 8014a52:	464a      	mov	r2, r9
 8014a54:	4629      	mov	r1, r5
 8014a56:	f006 f8d1 	bl	801abfc <memset>
 8014a5a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014a60:	4632      	mov	r2, r6
 8014a62:	4649      	mov	r1, r9
 8014a64:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8014a68:	6263      	str	r3, [r4, #36]	@ 0x24
 8014a6a:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8014a6e:	47c0      	blx	r8
 8014a70:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014a72:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8014a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	f000 80f9 	beq.w	8014c70 <rcl_wait_set_resize+0x37c>
 8014a7e:	464a      	mov	r2, r9
 8014a80:	4629      	mov	r1, r5
 8014a82:	4618      	mov	r0, r3
 8014a84:	f006 f8ba 	bl	801abfc <memset>
 8014a88:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014a8c:	2500      	movs	r5, #0
 8014a8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a90:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8014a94:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014a96:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8014a9a:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8014a9c:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	f040 80a9 	bne.w	8014bf8 <rcl_wait_set_resize+0x304>
 8014aa6:	b128      	cbz	r0, 8014ab4 <rcl_wait_set_resize+0x1c0>
 8014aa8:	4631      	mov	r1, r6
 8014aaa:	47b8      	blx	r7
 8014aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014aae:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014ab2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014ab4:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014ab8:	b128      	cbz	r0, 8014ac6 <rcl_wait_set_resize+0x1d2>
 8014aba:	4631      	mov	r1, r6
 8014abc:	47b8      	blx	r7
 8014abe:	2200      	movs	r2, #0
 8014ac0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ac2:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8014ac6:	2000      	movs	r0, #0
 8014ac8:	b003      	add	sp, #12
 8014aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ace:	b120      	cbz	r0, 8014ada <rcl_wait_set_resize+0x1e6>
 8014ad0:	4649      	mov	r1, r9
 8014ad2:	47d8      	blx	fp
 8014ad4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014ad8:	6027      	str	r7, [r4, #0]
 8014ada:	f8da 0008 	ldr.w	r0, [sl, #8]
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	f43f af4c 	beq.w	801497c <rcl_wait_set_resize+0x88>
 8014ae4:	4649      	mov	r1, r9
 8014ae6:	47d8      	blx	fp
 8014ae8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014aec:	2300      	movs	r3, #0
 8014aee:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8014af2:	e743      	b.n	801497c <rcl_wait_set_resize+0x88>
 8014af4:	4642      	mov	r2, r8
 8014af6:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8014afa:	4641      	mov	r1, r8
 8014afc:	4798      	blx	r3
 8014afe:	60a0      	str	r0, [r4, #8]
 8014b00:	b350      	cbz	r0, 8014b58 <rcl_wait_set_resize+0x264>
 8014b02:	4642      	mov	r2, r8
 8014b04:	4639      	mov	r1, r7
 8014b06:	f006 f879 	bl	801abfc <memset>
 8014b0a:	2700      	movs	r7, #0
 8014b0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014b10:	60e5      	str	r5, [r4, #12]
 8014b12:	19ad      	adds	r5, r5, r6
 8014b14:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8014b18:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014b1c:	f8ca 7010 	str.w	r7, [sl, #16]
 8014b20:	f43f af48 	beq.w	80149b4 <rcl_wait_set_resize+0xc0>
 8014b24:	00ad      	lsls	r5, r5, #2
 8014b26:	4642      	mov	r2, r8
 8014b28:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8014b2c:	4629      	mov	r1, r5
 8014b2e:	4798      	blx	r3
 8014b30:	4680      	mov	r8, r0
 8014b32:	f8ca 0014 	str.w	r0, [sl, #20]
 8014b36:	2800      	cmp	r0, #0
 8014b38:	f000 8085 	beq.w	8014c46 <rcl_wait_set_resize+0x352>
 8014b3c:	462a      	mov	r2, r5
 8014b3e:	4639      	mov	r1, r7
 8014b40:	f006 f85c 	bl	801abfc <memset>
 8014b44:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014b48:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8014b4c:	e73d      	b.n	80149ca <rcl_wait_set_resize+0xd6>
 8014b4e:	4649      	mov	r1, r9
 8014b50:	6820      	ldr	r0, [r4, #0]
 8014b52:	47d8      	blx	fp
 8014b54:	e9c4 7700 	strd	r7, r7, [r4]
 8014b58:	200a      	movs	r0, #10
 8014b5a:	b003      	add	sp, #12
 8014b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b60:	4642      	mov	r2, r8
 8014b62:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8014b66:	4641      	mov	r1, r8
 8014b68:	47b8      	blx	r7
 8014b6a:	6120      	str	r0, [r4, #16]
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	d0f3      	beq.n	8014b58 <rcl_wait_set_resize+0x264>
 8014b70:	4642      	mov	r2, r8
 8014b72:	4629      	mov	r1, r5
 8014b74:	f006 f842 	bl	801abfc <memset>
 8014b78:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014b7c:	6166      	str	r6, [r4, #20]
 8014b7e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8014b82:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8014b86:	e734      	b.n	80149f2 <rcl_wait_set_resize+0xfe>
 8014b88:	009e      	lsls	r6, r3, #2
 8014b8a:	4642      	mov	r2, r8
 8014b8c:	4631      	mov	r1, r6
 8014b8e:	47b8      	blx	r7
 8014b90:	61a0      	str	r0, [r4, #24]
 8014b92:	2800      	cmp	r0, #0
 8014b94:	d0e0      	beq.n	8014b58 <rcl_wait_set_resize+0x264>
 8014b96:	4632      	mov	r2, r6
 8014b98:	4629      	mov	r1, r5
 8014b9a:	f006 f82f 	bl	801abfc <memset>
 8014b9e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014ba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ba4:	4642      	mov	r2, r8
 8014ba6:	4631      	mov	r1, r6
 8014ba8:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014bac:	61e3      	str	r3, [r4, #28]
 8014bae:	f8ca 501c 	str.w	r5, [sl, #28]
 8014bb2:	47b8      	blx	r7
 8014bb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014bb6:	f8ca 0020 	str.w	r0, [sl, #32]
 8014bba:	6a1f      	ldr	r7, [r3, #32]
 8014bbc:	2f00      	cmp	r7, #0
 8014bbe:	d051      	beq.n	8014c64 <rcl_wait_set_resize+0x370>
 8014bc0:	4632      	mov	r2, r6
 8014bc2:	4629      	mov	r1, r5
 8014bc4:	4638      	mov	r0, r7
 8014bc6:	f006 f819 	bl	801abfc <memset>
 8014bca:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014bce:	e72a      	b.n	8014a26 <rcl_wait_set_resize+0x132>
 8014bd0:	b128      	cbz	r0, 8014bde <rcl_wait_set_resize+0x2ea>
 8014bd2:	4631      	mov	r1, r6
 8014bd4:	47b8      	blx	r7
 8014bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014bd8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014bdc:	6223      	str	r3, [r4, #32]
 8014bde:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8014be2:	2800      	cmp	r0, #0
 8014be4:	f43f af52 	beq.w	8014a8c <rcl_wait_set_resize+0x198>
 8014be8:	4631      	mov	r1, r6
 8014bea:	47b8      	blx	r7
 8014bec:	2300      	movs	r3, #0
 8014bee:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014bf2:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8014bf6:	e749      	b.n	8014a8c <rcl_wait_set_resize+0x198>
 8014bf8:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8014bfc:	4632      	mov	r2, r6
 8014bfe:	4649      	mov	r1, r9
 8014c00:	47c0      	blx	r8
 8014c02:	62a0      	str	r0, [r4, #40]	@ 0x28
 8014c04:	2800      	cmp	r0, #0
 8014c06:	d0a7      	beq.n	8014b58 <rcl_wait_set_resize+0x264>
 8014c08:	464a      	mov	r2, r9
 8014c0a:	4629      	mov	r1, r5
 8014c0c:	f005 fff6 	bl	801abfc <memset>
 8014c10:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c16:	4632      	mov	r2, r6
 8014c18:	4649      	mov	r1, r9
 8014c1a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014c1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014c20:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8014c24:	47c0      	blx	r8
 8014c26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c28:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c2e:	b33b      	cbz	r3, 8014c80 <rcl_wait_set_resize+0x38c>
 8014c30:	464a      	mov	r2, r9
 8014c32:	4629      	mov	r1, r5
 8014c34:	4618      	mov	r0, r3
 8014c36:	f005 ffe1 	bl	801abfc <memset>
 8014c3a:	e744      	b.n	8014ac6 <rcl_wait_set_resize+0x1d2>
 8014c3c:	200b      	movs	r0, #11
 8014c3e:	4770      	bx	lr
 8014c40:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014c44:	e789      	b.n	8014b5a <rcl_wait_set_resize+0x266>
 8014c46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c48:	68a0      	ldr	r0, [r4, #8]
 8014c4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014c4c:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014c4e:	4790      	blx	r2
 8014c50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c52:	6920      	ldr	r0, [r4, #16]
 8014c54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014c56:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014c58:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8014c5c:	4790      	blx	r2
 8014c5e:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8014c62:	e779      	b.n	8014b58 <rcl_wait_set_resize+0x264>
 8014c64:	4641      	mov	r1, r8
 8014c66:	69a0      	ldr	r0, [r4, #24]
 8014c68:	47c8      	blx	r9
 8014c6a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8014c6e:	e773      	b.n	8014b58 <rcl_wait_set_resize+0x264>
 8014c70:	4631      	mov	r1, r6
 8014c72:	6a20      	ldr	r0, [r4, #32]
 8014c74:	9301      	str	r3, [sp, #4]
 8014c76:	47b8      	blx	r7
 8014c78:	9b01      	ldr	r3, [sp, #4]
 8014c7a:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8014c7e:	e76b      	b.n	8014b58 <rcl_wait_set_resize+0x264>
 8014c80:	4631      	mov	r1, r6
 8014c82:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014c84:	9301      	str	r3, [sp, #4]
 8014c86:	47b8      	blx	r7
 8014c88:	9b01      	ldr	r3, [sp, #4]
 8014c8a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014c8e:	e763      	b.n	8014b58 <rcl_wait_set_resize+0x264>

08014c90 <rcl_wait_set_init>:
 8014c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c94:	b084      	sub	sp, #16
 8014c96:	4605      	mov	r5, r0
 8014c98:	460e      	mov	r6, r1
 8014c9a:	4617      	mov	r7, r2
 8014c9c:	a810      	add	r0, sp, #64	@ 0x40
 8014c9e:	4698      	mov	r8, r3
 8014ca0:	f7f9 fd2c 	bl	800e6fc <rcutils_allocator_is_valid>
 8014ca4:	2d00      	cmp	r5, #0
 8014ca6:	d070      	beq.n	8014d8a <rcl_wait_set_init+0xfa>
 8014ca8:	f080 0401 	eor.w	r4, r0, #1
 8014cac:	b2e4      	uxtb	r4, r4
 8014cae:	2c00      	cmp	r4, #0
 8014cb0:	d16b      	bne.n	8014d8a <rcl_wait_set_init+0xfa>
 8014cb2:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8014cb6:	f1b9 0f00 	cmp.w	r9, #0
 8014cba:	d004      	beq.n	8014cc6 <rcl_wait_set_init+0x36>
 8014cbc:	2464      	movs	r4, #100	@ 0x64
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	b004      	add	sp, #16
 8014cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d05e      	beq.n	8014d8a <rcl_wait_set_init+0xfa>
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fe f9e1 	bl	8013094 <rcl_context_is_valid>
 8014cd2:	2800      	cmp	r0, #0
 8014cd4:	d05e      	beq.n	8014d94 <rcl_wait_set_init+0x104>
 8014cd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014cd8:	205c      	movs	r0, #92	@ 0x5c
 8014cda:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014cdc:	4798      	blx	r3
 8014cde:	6328      	str	r0, [r5, #48]	@ 0x30
 8014ce0:	2800      	cmp	r0, #0
 8014ce2:	d061      	beq.n	8014da8 <rcl_wait_set_init+0x118>
 8014ce4:	4649      	mov	r1, r9
 8014ce6:	225c      	movs	r2, #92	@ 0x5c
 8014ce8:	f005 ff88 	bl	801abfc <memset>
 8014cec:	ac10      	add	r4, sp, #64	@ 0x40
 8014cee:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014cf2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014cf6:	e9ca 9901 	strd	r9, r9, [sl, #4]
 8014cfa:	eb03 0e02 	add.w	lr, r3, r2
 8014cfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d00:	f10a 0c48 	add.w	ip, sl, #72	@ 0x48
 8014d04:	449e      	add	lr, r3
 8014d06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d08:	e9ca 9904 	strd	r9, r9, [sl, #16]
 8014d0c:	e9ca 9907 	strd	r9, r9, [sl, #28]
 8014d10:	e9ca 990a 	strd	r9, r9, [sl, #40]	@ 0x28
 8014d14:	e9ca 990d 	strd	r9, r9, [sl, #52]	@ 0x34
 8014d18:	f8ca 3044 	str.w	r3, [sl, #68]	@ 0x44
 8014d1c:	44be      	add	lr, r7
 8014d1e:	f8d3 9000 	ldr.w	r9, [r3]
 8014d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d28:	6823      	ldr	r3, [r4, #0]
 8014d2a:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8014d2e:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8014d32:	f8cc 3000 	str.w	r3, [ip]
 8014d36:	f002 fdf3 	bl	8017920 <rmw_create_wait_set>
 8014d3a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d3c:	f8ca 003c 	str.w	r0, [sl, #60]	@ 0x3c
 8014d40:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014d42:	b348      	cbz	r0, 8014d98 <rcl_wait_set_init+0x108>
 8014d44:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8014d46:	4643      	mov	r3, r8
 8014d48:	463a      	mov	r2, r7
 8014d4a:	4631      	mov	r1, r6
 8014d4c:	9402      	str	r4, [sp, #8]
 8014d4e:	4628      	mov	r0, r5
 8014d50:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8014d52:	9401      	str	r4, [sp, #4]
 8014d54:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8014d56:	9400      	str	r4, [sp, #0]
 8014d58:	f7ff fdcc 	bl	80148f4 <rcl_wait_set_resize>
 8014d5c:	4604      	mov	r4, r0
 8014d5e:	2800      	cmp	r0, #0
 8014d60:	d0ad      	beq.n	8014cbe <rcl_wait_set_init+0x2e>
 8014d62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d64:	bb13      	cbnz	r3, 8014dac <rcl_wait_set_init+0x11c>
 8014d66:	2600      	movs	r6, #0
 8014d68:	4628      	mov	r0, r5
 8014d6a:	4633      	mov	r3, r6
 8014d6c:	4632      	mov	r2, r6
 8014d6e:	4631      	mov	r1, r6
 8014d70:	9600      	str	r6, [sp, #0]
 8014d72:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014d76:	f7ff fdbd 	bl	80148f4 <rcl_wait_set_resize>
 8014d7a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	d09e      	beq.n	8014cbe <rcl_wait_set_init+0x2e>
 8014d80:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014d82:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014d84:	4798      	blx	r3
 8014d86:	632e      	str	r6, [r5, #48]	@ 0x30
 8014d88:	e799      	b.n	8014cbe <rcl_wait_set_init+0x2e>
 8014d8a:	240b      	movs	r4, #11
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	b004      	add	sp, #16
 8014d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d94:	2465      	movs	r4, #101	@ 0x65
 8014d96:	e792      	b.n	8014cbe <rcl_wait_set_init+0x2e>
 8014d98:	2401      	movs	r4, #1
 8014d9a:	f002 fdcb 	bl	8017934 <rmw_destroy_wait_set>
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	bf18      	it	ne
 8014da2:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8014da6:	e7de      	b.n	8014d66 <rcl_wait_set_init+0xd6>
 8014da8:	240a      	movs	r4, #10
 8014daa:	e788      	b.n	8014cbe <rcl_wait_set_init+0x2e>
 8014dac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014dae:	e7f4      	b.n	8014d9a <rcl_wait_set_init+0x10a>

08014db0 <rcl_wait_set_add_guard_condition>:
 8014db0:	b318      	cbz	r0, 8014dfa <rcl_wait_set_add_guard_condition+0x4a>
 8014db2:	b538      	push	{r3, r4, r5, lr}
 8014db4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014db6:	4604      	mov	r4, r0
 8014db8:	b30b      	cbz	r3, 8014dfe <rcl_wait_set_add_guard_condition+0x4e>
 8014dba:	b319      	cbz	r1, 8014e04 <rcl_wait_set_add_guard_condition+0x54>
 8014dbc:	68dd      	ldr	r5, [r3, #12]
 8014dbe:	68c0      	ldr	r0, [r0, #12]
 8014dc0:	4285      	cmp	r5, r0
 8014dc2:	d217      	bcs.n	8014df4 <rcl_wait_set_add_guard_condition+0x44>
 8014dc4:	1c68      	adds	r0, r5, #1
 8014dc6:	60d8      	str	r0, [r3, #12]
 8014dc8:	68a3      	ldr	r3, [r4, #8]
 8014dca:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8014dce:	b102      	cbz	r2, 8014dd2 <rcl_wait_set_add_guard_condition+0x22>
 8014dd0:	6015      	str	r5, [r2, #0]
 8014dd2:	4608      	mov	r0, r1
 8014dd4:	f004 fe6c 	bl	8019ab0 <rcl_guard_condition_get_rmw_handle>
 8014dd8:	b150      	cbz	r0, 8014df0 <rcl_wait_set_add_guard_condition+0x40>
 8014dda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ddc:	6842      	ldr	r2, [r0, #4]
 8014dde:	2000      	movs	r0, #0
 8014de0:	695b      	ldr	r3, [r3, #20]
 8014de2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014de6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014de8:	6913      	ldr	r3, [r2, #16]
 8014dea:	3301      	adds	r3, #1
 8014dec:	6113      	str	r3, [r2, #16]
 8014dee:	bd38      	pop	{r3, r4, r5, pc}
 8014df0:	2001      	movs	r0, #1
 8014df2:	bd38      	pop	{r3, r4, r5, pc}
 8014df4:	f240 3086 	movw	r0, #902	@ 0x386
 8014df8:	bd38      	pop	{r3, r4, r5, pc}
 8014dfa:	200b      	movs	r0, #11
 8014dfc:	4770      	bx	lr
 8014dfe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014e02:	bd38      	pop	{r3, r4, r5, pc}
 8014e04:	200b      	movs	r0, #11
 8014e06:	bd38      	pop	{r3, r4, r5, pc}

08014e08 <rcl_wait_set_add_timer>:
 8014e08:	b328      	cbz	r0, 8014e56 <rcl_wait_set_add_timer+0x4e>
 8014e0a:	b538      	push	{r3, r4, r5, lr}
 8014e0c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e0e:	4604      	mov	r4, r0
 8014e10:	b31b      	cbz	r3, 8014e5a <rcl_wait_set_add_timer+0x52>
 8014e12:	b329      	cbz	r1, 8014e60 <rcl_wait_set_add_timer+0x58>
 8014e14:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014e16:	6965      	ldr	r5, [r4, #20]
 8014e18:	42a8      	cmp	r0, r5
 8014e1a:	d219      	bcs.n	8014e50 <rcl_wait_set_add_timer+0x48>
 8014e1c:	1c45      	adds	r5, r0, #1
 8014e1e:	641d      	str	r5, [r3, #64]	@ 0x40
 8014e20:	6923      	ldr	r3, [r4, #16]
 8014e22:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8014e26:	b102      	cbz	r2, 8014e2a <rcl_wait_set_add_timer+0x22>
 8014e28:	6010      	str	r0, [r2, #0]
 8014e2a:	4608      	mov	r0, r1
 8014e2c:	f7ff fbf2 	bl	8014614 <rcl_timer_get_guard_condition>
 8014e30:	b160      	cbz	r0, 8014e4c <rcl_wait_set_add_timer+0x44>
 8014e32:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014e34:	68e3      	ldr	r3, [r4, #12]
 8014e36:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014e38:	3b01      	subs	r3, #1
 8014e3a:	441d      	add	r5, r3
 8014e3c:	f004 fe38 	bl	8019ab0 <rcl_guard_condition_get_rmw_handle>
 8014e40:	b180      	cbz	r0, 8014e64 <rcl_wait_set_add_timer+0x5c>
 8014e42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e44:	6842      	ldr	r2, [r0, #4]
 8014e46:	695b      	ldr	r3, [r3, #20]
 8014e48:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	bd38      	pop	{r3, r4, r5, pc}
 8014e50:	f240 3086 	movw	r0, #902	@ 0x386
 8014e54:	bd38      	pop	{r3, r4, r5, pc}
 8014e56:	200b      	movs	r0, #11
 8014e58:	4770      	bx	lr
 8014e5a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014e5e:	bd38      	pop	{r3, r4, r5, pc}
 8014e60:	200b      	movs	r0, #11
 8014e62:	bd38      	pop	{r3, r4, r5, pc}
 8014e64:	2001      	movs	r0, #1
 8014e66:	bd38      	pop	{r3, r4, r5, pc}

08014e68 <rcl_wait_set_add_client>:
 8014e68:	b318      	cbz	r0, 8014eb2 <rcl_wait_set_add_client+0x4a>
 8014e6a:	b538      	push	{r3, r4, r5, lr}
 8014e6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e6e:	4604      	mov	r4, r0
 8014e70:	b30b      	cbz	r3, 8014eb6 <rcl_wait_set_add_client+0x4e>
 8014e72:	b319      	cbz	r1, 8014ebc <rcl_wait_set_add_client+0x54>
 8014e74:	699d      	ldr	r5, [r3, #24]
 8014e76:	69c0      	ldr	r0, [r0, #28]
 8014e78:	4285      	cmp	r5, r0
 8014e7a:	d217      	bcs.n	8014eac <rcl_wait_set_add_client+0x44>
 8014e7c:	1c68      	adds	r0, r5, #1
 8014e7e:	6198      	str	r0, [r3, #24]
 8014e80:	69a3      	ldr	r3, [r4, #24]
 8014e82:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8014e86:	b102      	cbz	r2, 8014e8a <rcl_wait_set_add_client+0x22>
 8014e88:	6015      	str	r5, [r2, #0]
 8014e8a:	4608      	mov	r0, r1
 8014e8c:	f7fe f812 	bl	8012eb4 <rcl_client_get_rmw_handle>
 8014e90:	b150      	cbz	r0, 8014ea8 <rcl_wait_set_add_client+0x40>
 8014e92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e94:	6842      	ldr	r2, [r0, #4]
 8014e96:	2000      	movs	r0, #0
 8014e98:	6a1b      	ldr	r3, [r3, #32]
 8014e9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014e9e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014ea0:	69d3      	ldr	r3, [r2, #28]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	61d3      	str	r3, [r2, #28]
 8014ea6:	bd38      	pop	{r3, r4, r5, pc}
 8014ea8:	2001      	movs	r0, #1
 8014eaa:	bd38      	pop	{r3, r4, r5, pc}
 8014eac:	f240 3086 	movw	r0, #902	@ 0x386
 8014eb0:	bd38      	pop	{r3, r4, r5, pc}
 8014eb2:	200b      	movs	r0, #11
 8014eb4:	4770      	bx	lr
 8014eb6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014eba:	bd38      	pop	{r3, r4, r5, pc}
 8014ebc:	200b      	movs	r0, #11
 8014ebe:	bd38      	pop	{r3, r4, r5, pc}

08014ec0 <rcl_wait_set_add_service>:
 8014ec0:	b318      	cbz	r0, 8014f0a <rcl_wait_set_add_service+0x4a>
 8014ec2:	b538      	push	{r3, r4, r5, lr}
 8014ec4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	b30b      	cbz	r3, 8014f0e <rcl_wait_set_add_service+0x4e>
 8014eca:	b319      	cbz	r1, 8014f14 <rcl_wait_set_add_service+0x54>
 8014ecc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014ece:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014ed0:	4285      	cmp	r5, r0
 8014ed2:	d217      	bcs.n	8014f04 <rcl_wait_set_add_service+0x44>
 8014ed4:	1c68      	adds	r0, r5, #1
 8014ed6:	6258      	str	r0, [r3, #36]	@ 0x24
 8014ed8:	6a23      	ldr	r3, [r4, #32]
 8014eda:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8014ede:	b102      	cbz	r2, 8014ee2 <rcl_wait_set_add_service+0x22>
 8014ee0:	6015      	str	r5, [r2, #0]
 8014ee2:	4608      	mov	r0, r1
 8014ee4:	f7fe fe38 	bl	8013b58 <rcl_service_get_rmw_handle>
 8014ee8:	b150      	cbz	r0, 8014f00 <rcl_wait_set_add_service+0x40>
 8014eea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014eec:	6842      	ldr	r2, [r0, #4]
 8014eee:	2000      	movs	r0, #0
 8014ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014ef6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014ef8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014efa:	3301      	adds	r3, #1
 8014efc:	6293      	str	r3, [r2, #40]	@ 0x28
 8014efe:	bd38      	pop	{r3, r4, r5, pc}
 8014f00:	2001      	movs	r0, #1
 8014f02:	bd38      	pop	{r3, r4, r5, pc}
 8014f04:	f240 3086 	movw	r0, #902	@ 0x386
 8014f08:	bd38      	pop	{r3, r4, r5, pc}
 8014f0a:	200b      	movs	r0, #11
 8014f0c:	4770      	bx	lr
 8014f0e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f12:	bd38      	pop	{r3, r4, r5, pc}
 8014f14:	200b      	movs	r0, #11
 8014f16:	bd38      	pop	{r3, r4, r5, pc}

08014f18 <rcl_wait>:
 8014f18:	2800      	cmp	r0, #0
 8014f1a:	f000 81d7 	beq.w	80152cc <rcl_wait+0x3b4>
 8014f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f22:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014f24:	4604      	mov	r4, r0
 8014f26:	ed2d 8b02 	vpush	{d8}
 8014f2a:	b098      	sub	sp, #96	@ 0x60
 8014f2c:	2e00      	cmp	r6, #0
 8014f2e:	f000 817c 	beq.w	801522a <rcl_wait+0x312>
 8014f32:	4698      	mov	r8, r3
 8014f34:	6843      	ldr	r3, [r0, #4]
 8014f36:	4691      	mov	r9, r2
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f000 8092 	beq.w	8015062 <rcl_wait+0x14a>
 8014f3e:	6c37      	ldr	r7, [r6, #64]	@ 0x40
 8014f40:	2f00      	cmp	r7, #0
 8014f42:	f000 80a9 	beq.w	8015098 <rcl_wait+0x180>
 8014f46:	2100      	movs	r1, #0
 8014f48:	468c      	mov	ip, r1
 8014f4a:	460b      	mov	r3, r1
 8014f4c:	6922      	ldr	r2, [r4, #16]
 8014f4e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014f52:	b162      	cbz	r2, 8014f6e <rcl_wait+0x56>
 8014f54:	68e2      	ldr	r2, [r4, #12]
 8014f56:	6970      	ldr	r0, [r6, #20]
 8014f58:	440a      	add	r2, r1
 8014f5a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8014f5e:	b132      	cbz	r2, 8014f6e <rcl_wait+0x56>
 8014f60:	6935      	ldr	r5, [r6, #16]
 8014f62:	1c6f      	adds	r7, r5, #1
 8014f64:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
 8014f68:	6137      	str	r7, [r6, #16]
 8014f6a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014f6c:	6c37      	ldr	r7, [r6, #64]	@ 0x40
 8014f6e:	3101      	adds	r1, #1
 8014f70:	f14c 0c00 	adc.w	ip, ip, #0
 8014f74:	42b9      	cmp	r1, r7
 8014f76:	f17c 0200 	sbcs.w	r2, ip, #0
 8014f7a:	d3e7      	bcc.n	8014f4c <rcl_wait+0x34>
 8014f7c:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8014f80:	ed9f 8bad 	vldr	d8, [pc, #692]	@ 8015238 <rcl_wait+0x320>
 8014f84:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 8014f88:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8014f8c:	ea59 0308 	orrs.w	r3, r9, r8
 8014f90:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8014f94:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8014f98:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8014f9c:	f000 8090 	beq.w	80150c0 <rcl_wait+0x1a8>
 8014fa0:	2f00      	cmp	r7, #0
 8014fa2:	f000 814d 	beq.w	8015240 <rcl_wait+0x328>
 8014fa6:	2600      	movs	r6, #0
 8014fa8:	e02b      	b.n	8015002 <rcl_wait+0xea>
 8014faa:	6923      	ldr	r3, [r4, #16]
 8014fac:	5958      	ldr	r0, [r3, r5]
 8014fae:	a908      	add	r1, sp, #32
 8014fb0:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014fb4:	f7ff fb0a 	bl	80145cc <rcl_timer_get_next_call_time>
 8014fb8:	f240 3321 	movw	r3, #801	@ 0x321
 8014fbc:	4298      	cmp	r0, r3
 8014fbe:	f000 80c0 	beq.w	8015142 <rcl_wait+0x22a>
 8014fc2:	2800      	cmp	r0, #0
 8014fc4:	d163      	bne.n	801508e <rcl_wait+0x176>
 8014fc6:	ab18      	add	r3, sp, #96	@ 0x60
 8014fc8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014fca:	e9dd 5e07 	ldrd	r5, lr, [sp, #28]
 8014fce:	7828      	ldrb	r0, [r5, #0]
 8014fd0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8014fd4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8014fd8:	9205      	str	r2, [sp, #20]
 8014fda:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8014fde:	4596      	cmp	lr, r2
 8014fe0:	9a05      	ldr	r2, [sp, #20]
 8014fe2:	eb71 0202 	sbcs.w	r2, r1, r2
 8014fe6:	da06      	bge.n	8014ff6 <rcl_wait+0xde>
 8014fe8:	e943 e108 	strd	lr, r1, [r3, #-32]
 8014fec:	ab18      	add	r3, sp, #96	@ 0x60
 8014fee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014ff2:	f840 5c30 	str.w	r5, [r0, #-48]
 8014ff6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ff8:	6c1f      	ldr	r7, [r3, #64]	@ 0x40
 8014ffa:	3601      	adds	r6, #1
 8014ffc:	42be      	cmp	r6, r7
 8014ffe:	f080 811f 	bcs.w	8015240 <rcl_wait+0x328>
 8015002:	6923      	ldr	r3, [r4, #16]
 8015004:	00b5      	lsls	r5, r6, #2
 8015006:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801500a:	2800      	cmp	r0, #0
 801500c:	d0f5      	beq.n	8014ffa <rcl_wait+0xe2>
 801500e:	a907      	add	r1, sp, #28
 8015010:	f7ff fa08 	bl	8014424 <rcl_timer_clock>
 8015014:	4603      	mov	r3, r0
 8015016:	2800      	cmp	r0, #0
 8015018:	f040 8152 	bne.w	80152c0 <rcl_wait+0x3a8>
 801501c:	9807      	ldr	r0, [sp, #28]
 801501e:	7802      	ldrb	r2, [r0, #0]
 8015020:	2a01      	cmp	r2, #1
 8015022:	d1c2      	bne.n	8014faa <rcl_wait+0x92>
 8015024:	f10d 011b 	add.w	r1, sp, #27
 8015028:	f88d 301b 	strb.w	r3, [sp, #27]
 801502c:	f7fe ffca 	bl	8013fc4 <rcl_is_enabled_ros_time_override>
 8015030:	4602      	mov	r2, r0
 8015032:	2800      	cmp	r0, #0
 8015034:	f040 8144 	bne.w	80152c0 <rcl_wait+0x3a8>
 8015038:	6923      	ldr	r3, [r4, #16]
 801503a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 801503e:	5958      	ldr	r0, [r3, r5]
 8015040:	2900      	cmp	r1, #0
 8015042:	d0b3      	beq.n	8014fac <rcl_wait+0x94>
 8015044:	ad08      	add	r5, sp, #32
 8015046:	f88d 2020 	strb.w	r2, [sp, #32]
 801504a:	4629      	mov	r1, r5
 801504c:	f7ff fa84 	bl	8014558 <rcl_timer_is_ready>
 8015050:	2800      	cmp	r0, #0
 8015052:	f040 8135 	bne.w	80152c0 <rcl_wait+0x3a8>
 8015056:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d0cb      	beq.n	8014ff6 <rcl_wait+0xde>
 801505e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015060:	e02f      	b.n	80150c2 <rcl_wait+0x1aa>
 8015062:	68c3      	ldr	r3, [r0, #12]
 8015064:	2b00      	cmp	r3, #0
 8015066:	f47f af6a 	bne.w	8014f3e <rcl_wait+0x26>
 801506a:	6943      	ldr	r3, [r0, #20]
 801506c:	2b00      	cmp	r3, #0
 801506e:	f47f af66 	bne.w	8014f3e <rcl_wait+0x26>
 8015072:	69c3      	ldr	r3, [r0, #28]
 8015074:	2b00      	cmp	r3, #0
 8015076:	f47f af62 	bne.w	8014f3e <rcl_wait+0x26>
 801507a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801507c:	2b00      	cmp	r3, #0
 801507e:	f47f af5e 	bne.w	8014f3e <rcl_wait+0x26>
 8015082:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015084:	2b00      	cmp	r3, #0
 8015086:	f47f af5a 	bne.w	8014f3e <rcl_wait+0x26>
 801508a:	f240 3085 	movw	r0, #901	@ 0x385
 801508e:	b018      	add	sp, #96	@ 0x60
 8015090:	ecbd 8b02 	vpop	{d8}
 8015094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015098:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801509c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80150a0:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 80150a4:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 80150a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 80150ac:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 80150b0:	ea59 0308 	orrs.w	r3, r9, r8
 80150b4:	e9cd 770c 	strd	r7, r7, [sp, #48]	@ 0x30
 80150b8:	e9cd 770e 	strd	r7, r7, [sp, #56]	@ 0x38
 80150bc:	f040 80c0 	bne.w	8015240 <rcl_wait+0x328>
 80150c0:	ad08      	add	r5, sp, #32
 80150c2:	2200      	movs	r2, #0
 80150c4:	2300      	movs	r3, #0
 80150c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80150ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80150ce:	f106 0134 	add.w	r1, r6, #52	@ 0x34
 80150d2:	9502      	str	r5, [sp, #8]
 80150d4:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80150d6:	f106 031c 	add.w	r3, r6, #28
 80150da:	1d30      	adds	r0, r6, #4
 80150dc:	e9cd 1200 	strd	r1, r2, [sp]
 80150e0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80150e4:	f106 0110 	add.w	r1, r6, #16
 80150e8:	f002 fa9a 	bl	8017620 <rmw_wait>
 80150ec:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 80150f0:	4606      	mov	r6, r0
 80150f2:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	f000 80ea 	beq.w	80152d0 <rcl_wait+0x3b8>
 80150fc:	f04f 0800 	mov.w	r8, #0
 8015100:	4662      	mov	r2, ip
 8015102:	4645      	mov	r5, r8
 8015104:	4647      	mov	r7, r8
 8015106:	e008      	b.n	801511a <rcl_wait+0x202>
 8015108:	6922      	ldr	r2, [r4, #16]
 801510a:	f842 3009 	str.w	r3, [r2, r9]
 801510e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015110:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015112:	f108 0801 	add.w	r8, r8, #1
 8015116:	4598      	cmp	r8, r3
 8015118:	d217      	bcs.n	801514a <rcl_wait+0x232>
 801511a:	6920      	ldr	r0, [r4, #16]
 801511c:	a907      	add	r1, sp, #28
 801511e:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8015122:	f850 0028 	ldr.w	r0, [r0, r8, lsl #2]
 8015126:	2800      	cmp	r0, #0
 8015128:	d0f3      	beq.n	8015112 <rcl_wait+0x1fa>
 801512a:	f88d 701c 	strb.w	r7, [sp, #28]
 801512e:	f7ff fa13 	bl	8014558 <rcl_timer_is_ready>
 8015132:	2800      	cmp	r0, #0
 8015134:	d1ab      	bne.n	801508e <rcl_wait+0x176>
 8015136:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d0e4      	beq.n	8015108 <rcl_wait+0x1f0>
 801513e:	461d      	mov	r5, r3
 8015140:	e7e5      	b.n	801510e <rcl_wait+0x1f6>
 8015142:	6923      	ldr	r3, [r4, #16]
 8015144:	2200      	movs	r2, #0
 8015146:	515a      	str	r2, [r3, r5]
 8015148:	e755      	b.n	8014ff6 <rcl_wait+0xde>
 801514a:	4694      	mov	ip, r2
 801514c:	f036 0302 	bics.w	r3, r6, #2
 8015150:	f040 80b6 	bne.w	80152c0 <rcl_wait+0x3a8>
 8015154:	6861      	ldr	r1, [r4, #4]
 8015156:	b919      	cbnz	r1, 8015160 <rcl_wait+0x248>
 8015158:	e00e      	b.n	8015178 <rcl_wait+0x260>
 801515a:	3301      	adds	r3, #1
 801515c:	428b      	cmp	r3, r1
 801515e:	d00b      	beq.n	8015178 <rcl_wait+0x260>
 8015160:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015164:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015168:	2a00      	cmp	r2, #0
 801516a:	d1f6      	bne.n	801515a <rcl_wait+0x242>
 801516c:	6820      	ldr	r0, [r4, #0]
 801516e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015172:	3301      	adds	r3, #1
 8015174:	428b      	cmp	r3, r1
 8015176:	d1f3      	bne.n	8015160 <rcl_wait+0x248>
 8015178:	68e1      	ldr	r1, [r4, #12]
 801517a:	b181      	cbz	r1, 801519e <rcl_wait+0x286>
 801517c:	2300      	movs	r3, #0
 801517e:	e002      	b.n	8015186 <rcl_wait+0x26e>
 8015180:	3301      	adds	r3, #1
 8015182:	4299      	cmp	r1, r3
 8015184:	d00b      	beq.n	801519e <rcl_wait+0x286>
 8015186:	f8dc 2014 	ldr.w	r2, [ip, #20]
 801518a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801518e:	2a00      	cmp	r2, #0
 8015190:	d1f6      	bne.n	8015180 <rcl_wait+0x268>
 8015192:	68a0      	ldr	r0, [r4, #8]
 8015194:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015198:	3301      	adds	r3, #1
 801519a:	4299      	cmp	r1, r3
 801519c:	d1f3      	bne.n	8015186 <rcl_wait+0x26e>
 801519e:	69e1      	ldr	r1, [r4, #28]
 80151a0:	b181      	cbz	r1, 80151c4 <rcl_wait+0x2ac>
 80151a2:	2300      	movs	r3, #0
 80151a4:	e002      	b.n	80151ac <rcl_wait+0x294>
 80151a6:	3301      	adds	r3, #1
 80151a8:	428b      	cmp	r3, r1
 80151aa:	d00b      	beq.n	80151c4 <rcl_wait+0x2ac>
 80151ac:	f8dc 2020 	ldr.w	r2, [ip, #32]
 80151b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80151b4:	2a00      	cmp	r2, #0
 80151b6:	d1f6      	bne.n	80151a6 <rcl_wait+0x28e>
 80151b8:	69a0      	ldr	r0, [r4, #24]
 80151ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80151be:	3301      	adds	r3, #1
 80151c0:	428b      	cmp	r3, r1
 80151c2:	d1f3      	bne.n	80151ac <rcl_wait+0x294>
 80151c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80151c6:	b181      	cbz	r1, 80151ea <rcl_wait+0x2d2>
 80151c8:	2300      	movs	r3, #0
 80151ca:	e002      	b.n	80151d2 <rcl_wait+0x2ba>
 80151cc:	3301      	adds	r3, #1
 80151ce:	428b      	cmp	r3, r1
 80151d0:	d00b      	beq.n	80151ea <rcl_wait+0x2d2>
 80151d2:	f8dc 202c 	ldr.w	r2, [ip, #44]	@ 0x2c
 80151d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80151da:	2a00      	cmp	r2, #0
 80151dc:	d1f6      	bne.n	80151cc <rcl_wait+0x2b4>
 80151de:	6a20      	ldr	r0, [r4, #32]
 80151e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80151e4:	3301      	adds	r3, #1
 80151e6:	428b      	cmp	r3, r1
 80151e8:	d1f3      	bne.n	80151d2 <rcl_wait+0x2ba>
 80151ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80151ec:	b181      	cbz	r1, 8015210 <rcl_wait+0x2f8>
 80151ee:	2300      	movs	r3, #0
 80151f0:	e002      	b.n	80151f8 <rcl_wait+0x2e0>
 80151f2:	3301      	adds	r3, #1
 80151f4:	4299      	cmp	r1, r3
 80151f6:	d00b      	beq.n	8015210 <rcl_wait+0x2f8>
 80151f8:	f8dc 2038 	ldr.w	r2, [ip, #56]	@ 0x38
 80151fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015200:	2a00      	cmp	r2, #0
 8015202:	d1f6      	bne.n	80151f2 <rcl_wait+0x2da>
 8015204:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015206:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801520a:	3301      	adds	r3, #1
 801520c:	4299      	cmp	r1, r3
 801520e:	d1f3      	bne.n	80151f8 <rcl_wait+0x2e0>
 8015210:	f085 0501 	eor.w	r5, r5, #1
 8015214:	2e02      	cmp	r6, #2
 8015216:	bf14      	ite	ne
 8015218:	2500      	movne	r5, #0
 801521a:	f005 0501 	andeq.w	r5, r5, #1
 801521e:	0068      	lsls	r0, r5, #1
 8015220:	b018      	add	sp, #96	@ 0x60
 8015222:	ecbd 8b02 	vpop	{d8}
 8015226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801522a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801522e:	b018      	add	sp, #96	@ 0x60
 8015230:	ecbd 8b02 	vpop	{d8}
 8015234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015238:	ffffffff 	.word	0xffffffff
 801523c:	7fffffff 	.word	0x7fffffff
 8015240:	f1b9 0f01 	cmp.w	r9, #1
 8015244:	f178 0300 	sbcs.w	r3, r8, #0
 8015248:	db32      	blt.n	80152b0 <rcl_wait+0x398>
 801524a:	2501      	movs	r5, #1
 801524c:	ae10      	add	r6, sp, #64	@ 0x40
 801524e:	af16      	add	r7, sp, #88	@ 0x58
 8015250:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8015254:	a908      	add	r1, sp, #32
 8015256:	b198      	cbz	r0, 8015280 <rcl_wait+0x368>
 8015258:	f7fe fea8 	bl	8013fac <rcl_clock_get_now>
 801525c:	2800      	cmp	r0, #0
 801525e:	f47f af16 	bne.w	801508e <rcl_wait+0x176>
 8015262:	9a08      	ldr	r2, [sp, #32]
 8015264:	68b3      	ldr	r3, [r6, #8]
 8015266:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015268:	1a9b      	subs	r3, r3, r2
 801526a:	68f2      	ldr	r2, [r6, #12]
 801526c:	eb62 0201 	sbc.w	r2, r2, r1
 8015270:	4599      	cmp	r9, r3
 8015272:	eb78 0102 	sbcs.w	r1, r8, r2
 8015276:	da21      	bge.n	80152bc <rcl_wait+0x3a4>
 8015278:	464b      	mov	r3, r9
 801527a:	4642      	mov	r2, r8
 801527c:	4699      	mov	r9, r3
 801527e:	4690      	mov	r8, r2
 8015280:	3608      	adds	r6, #8
 8015282:	42b7      	cmp	r7, r6
 8015284:	d1e4      	bne.n	8015250 <rcl_wait+0x338>
 8015286:	f1b8 0100 	subs.w	r1, r8, #0
 801528a:	4648      	mov	r0, r9
 801528c:	da01      	bge.n	8015292 <rcl_wait+0x37a>
 801528e:	2000      	movs	r0, #0
 8015290:	4601      	mov	r1, r0
 8015292:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015294:	2d00      	cmp	r5, #0
 8015296:	f43f af1a 	beq.w	80150ce <rcl_wait+0x1b6>
 801529a:	ad08      	add	r5, sp, #32
 801529c:	a30e      	add	r3, pc, #56	@ (adr r3, 80152d8 <rcl_wait+0x3c0>)
 801529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a2:	f7eb f88d 	bl	80003c0 <__aeabi_ldivmod>
 80152a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80152aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80152ae:	e70e      	b.n	80150ce <rcl_wait+0x1b6>
 80152b0:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 80152b4:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
 80152b8:	2500      	movs	r5, #0
 80152ba:	e7c7      	b.n	801524c <rcl_wait+0x334>
 80152bc:	2501      	movs	r5, #1
 80152be:	e7dd      	b.n	801527c <rcl_wait+0x364>
 80152c0:	2001      	movs	r0, #1
 80152c2:	b018      	add	sp, #96	@ 0x60
 80152c4:	ecbd 8b02 	vpop	{d8}
 80152c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152cc:	200b      	movs	r0, #11
 80152ce:	4770      	bx	lr
 80152d0:	461d      	mov	r5, r3
 80152d2:	e73b      	b.n	801514c <rcl_wait+0x234>
 80152d4:	f3af 8000 	nop.w
 80152d8:	3b9aca00 	.word	0x3b9aca00
 80152dc:	00000000 	.word	0x00000000

080152e0 <rcl_action_take_goal_response>:
 80152e0:	b3b0      	cbz	r0, 8015350 <rcl_action_take_goal_response+0x70>
 80152e2:	b570      	push	{r4, r5, r6, lr}
 80152e4:	4604      	mov	r4, r0
 80152e6:	6800      	ldr	r0, [r0, #0]
 80152e8:	b368      	cbz	r0, 8015346 <rcl_action_take_goal_response+0x66>
 80152ea:	460e      	mov	r6, r1
 80152ec:	4615      	mov	r5, r2
 80152ee:	f7fd fea7 	bl	8013040 <rcl_client_is_valid>
 80152f2:	b330      	cbz	r0, 8015342 <rcl_action_take_goal_response+0x62>
 80152f4:	6820      	ldr	r0, [r4, #0]
 80152f6:	3004      	adds	r0, #4
 80152f8:	f7fd fea2 	bl	8013040 <rcl_client_is_valid>
 80152fc:	b308      	cbz	r0, 8015342 <rcl_action_take_goal_response+0x62>
 80152fe:	6820      	ldr	r0, [r4, #0]
 8015300:	3008      	adds	r0, #8
 8015302:	f7fd fe9d 	bl	8013040 <rcl_client_is_valid>
 8015306:	b1e0      	cbz	r0, 8015342 <rcl_action_take_goal_response+0x62>
 8015308:	6820      	ldr	r0, [r4, #0]
 801530a:	300c      	adds	r0, #12
 801530c:	f7fe fd9c 	bl	8013e48 <rcl_subscription_is_valid>
 8015310:	b1b8      	cbz	r0, 8015342 <rcl_action_take_goal_response+0x62>
 8015312:	6820      	ldr	r0, [r4, #0]
 8015314:	3010      	adds	r0, #16
 8015316:	f7fe fd97 	bl	8013e48 <rcl_subscription_is_valid>
 801531a:	b190      	cbz	r0, 8015342 <rcl_action_take_goal_response+0x62>
 801531c:	b1b6      	cbz	r6, 801534c <rcl_action_take_goal_response+0x6c>
 801531e:	b1ad      	cbz	r5, 801534c <rcl_action_take_goal_response+0x6c>
 8015320:	462a      	mov	r2, r5
 8015322:	4631      	mov	r1, r6
 8015324:	6820      	ldr	r0, [r4, #0]
 8015326:	f7fd fe1f 	bl	8012f68 <rcl_take_response>
 801532a:	b148      	cbz	r0, 8015340 <rcl_action_take_goal_response+0x60>
 801532c:	280a      	cmp	r0, #10
 801532e:	d007      	beq.n	8015340 <rcl_action_take_goal_response+0x60>
 8015330:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015334:	f640 0337 	movw	r3, #2103	@ 0x837
 8015338:	4290      	cmp	r0, r2
 801533a:	bf0c      	ite	eq
 801533c:	4618      	moveq	r0, r3
 801533e:	2001      	movne	r0, #1
 8015340:	bd70      	pop	{r4, r5, r6, pc}
 8015342:	f7f9 fa01 	bl	800e748 <rcutils_reset_error>
 8015346:	f640 0036 	movw	r0, #2102	@ 0x836
 801534a:	bd70      	pop	{r4, r5, r6, pc}
 801534c:	200b      	movs	r0, #11
 801534e:	bd70      	pop	{r4, r5, r6, pc}
 8015350:	f640 0036 	movw	r0, #2102	@ 0x836
 8015354:	4770      	bx	lr
 8015356:	bf00      	nop

08015358 <rcl_action_send_result_request>:
 8015358:	b378      	cbz	r0, 80153ba <rcl_action_send_result_request+0x62>
 801535a:	b570      	push	{r4, r5, r6, lr}
 801535c:	4604      	mov	r4, r0
 801535e:	6800      	ldr	r0, [r0, #0]
 8015360:	b330      	cbz	r0, 80153b0 <rcl_action_send_result_request+0x58>
 8015362:	460d      	mov	r5, r1
 8015364:	4616      	mov	r6, r2
 8015366:	f7fd fe6b 	bl	8013040 <rcl_client_is_valid>
 801536a:	b1f8      	cbz	r0, 80153ac <rcl_action_send_result_request+0x54>
 801536c:	6820      	ldr	r0, [r4, #0]
 801536e:	3004      	adds	r0, #4
 8015370:	f7fd fe66 	bl	8013040 <rcl_client_is_valid>
 8015374:	b1d0      	cbz	r0, 80153ac <rcl_action_send_result_request+0x54>
 8015376:	6820      	ldr	r0, [r4, #0]
 8015378:	3008      	adds	r0, #8
 801537a:	f7fd fe61 	bl	8013040 <rcl_client_is_valid>
 801537e:	b1a8      	cbz	r0, 80153ac <rcl_action_send_result_request+0x54>
 8015380:	6820      	ldr	r0, [r4, #0]
 8015382:	300c      	adds	r0, #12
 8015384:	f7fe fd60 	bl	8013e48 <rcl_subscription_is_valid>
 8015388:	b180      	cbz	r0, 80153ac <rcl_action_send_result_request+0x54>
 801538a:	6820      	ldr	r0, [r4, #0]
 801538c:	3010      	adds	r0, #16
 801538e:	f7fe fd5b 	bl	8013e48 <rcl_subscription_is_valid>
 8015392:	b158      	cbz	r0, 80153ac <rcl_action_send_result_request+0x54>
 8015394:	b17d      	cbz	r5, 80153b6 <rcl_action_send_result_request+0x5e>
 8015396:	b176      	cbz	r6, 80153b6 <rcl_action_send_result_request+0x5e>
 8015398:	6820      	ldr	r0, [r4, #0]
 801539a:	4632      	mov	r2, r6
 801539c:	4629      	mov	r1, r5
 801539e:	3008      	adds	r0, #8
 80153a0:	f7fd fd8e 	bl	8012ec0 <rcl_send_request>
 80153a4:	3800      	subs	r0, #0
 80153a6:	bf18      	it	ne
 80153a8:	2001      	movne	r0, #1
 80153aa:	bd70      	pop	{r4, r5, r6, pc}
 80153ac:	f7f9 f9cc 	bl	800e748 <rcutils_reset_error>
 80153b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80153b4:	bd70      	pop	{r4, r5, r6, pc}
 80153b6:	200b      	movs	r0, #11
 80153b8:	bd70      	pop	{r4, r5, r6, pc}
 80153ba:	f640 0036 	movw	r0, #2102	@ 0x836
 80153be:	4770      	bx	lr

080153c0 <rcl_action_take_result_response>:
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d037      	beq.n	8015434 <rcl_action_take_result_response+0x74>
 80153c4:	b570      	push	{r4, r5, r6, lr}
 80153c6:	4604      	mov	r4, r0
 80153c8:	6800      	ldr	r0, [r0, #0]
 80153ca:	b370      	cbz	r0, 801542a <rcl_action_take_result_response+0x6a>
 80153cc:	460d      	mov	r5, r1
 80153ce:	4616      	mov	r6, r2
 80153d0:	f7fd fe36 	bl	8013040 <rcl_client_is_valid>
 80153d4:	b338      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153d6:	6820      	ldr	r0, [r4, #0]
 80153d8:	3004      	adds	r0, #4
 80153da:	f7fd fe31 	bl	8013040 <rcl_client_is_valid>
 80153de:	b310      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153e0:	6820      	ldr	r0, [r4, #0]
 80153e2:	3008      	adds	r0, #8
 80153e4:	f7fd fe2c 	bl	8013040 <rcl_client_is_valid>
 80153e8:	b1e8      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153ea:	6820      	ldr	r0, [r4, #0]
 80153ec:	300c      	adds	r0, #12
 80153ee:	f7fe fd2b 	bl	8013e48 <rcl_subscription_is_valid>
 80153f2:	b1c0      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153f4:	6820      	ldr	r0, [r4, #0]
 80153f6:	3010      	adds	r0, #16
 80153f8:	f7fe fd26 	bl	8013e48 <rcl_subscription_is_valid>
 80153fc:	b198      	cbz	r0, 8015426 <rcl_action_take_result_response+0x66>
 80153fe:	b1bd      	cbz	r5, 8015430 <rcl_action_take_result_response+0x70>
 8015400:	b1b6      	cbz	r6, 8015430 <rcl_action_take_result_response+0x70>
 8015402:	6820      	ldr	r0, [r4, #0]
 8015404:	4632      	mov	r2, r6
 8015406:	4629      	mov	r1, r5
 8015408:	3008      	adds	r0, #8
 801540a:	f7fd fdad 	bl	8012f68 <rcl_take_response>
 801540e:	b148      	cbz	r0, 8015424 <rcl_action_take_result_response+0x64>
 8015410:	280a      	cmp	r0, #10
 8015412:	d007      	beq.n	8015424 <rcl_action_take_result_response+0x64>
 8015414:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015418:	f640 0337 	movw	r3, #2103	@ 0x837
 801541c:	4290      	cmp	r0, r2
 801541e:	bf0c      	ite	eq
 8015420:	4618      	moveq	r0, r3
 8015422:	2001      	movne	r0, #1
 8015424:	bd70      	pop	{r4, r5, r6, pc}
 8015426:	f7f9 f98f 	bl	800e748 <rcutils_reset_error>
 801542a:	f640 0036 	movw	r0, #2102	@ 0x836
 801542e:	bd70      	pop	{r4, r5, r6, pc}
 8015430:	200b      	movs	r0, #11
 8015432:	bd70      	pop	{r4, r5, r6, pc}
 8015434:	f640 0036 	movw	r0, #2102	@ 0x836
 8015438:	4770      	bx	lr
 801543a:	bf00      	nop

0801543c <rcl_action_take_cancel_response>:
 801543c:	2800      	cmp	r0, #0
 801543e:	d037      	beq.n	80154b0 <rcl_action_take_cancel_response+0x74>
 8015440:	b570      	push	{r4, r5, r6, lr}
 8015442:	4604      	mov	r4, r0
 8015444:	6800      	ldr	r0, [r0, #0]
 8015446:	b370      	cbz	r0, 80154a6 <rcl_action_take_cancel_response+0x6a>
 8015448:	460d      	mov	r5, r1
 801544a:	4616      	mov	r6, r2
 801544c:	f7fd fdf8 	bl	8013040 <rcl_client_is_valid>
 8015450:	b338      	cbz	r0, 80154a2 <rcl_action_take_cancel_response+0x66>
 8015452:	6820      	ldr	r0, [r4, #0]
 8015454:	3004      	adds	r0, #4
 8015456:	f7fd fdf3 	bl	8013040 <rcl_client_is_valid>
 801545a:	b310      	cbz	r0, 80154a2 <rcl_action_take_cancel_response+0x66>
 801545c:	6820      	ldr	r0, [r4, #0]
 801545e:	3008      	adds	r0, #8
 8015460:	f7fd fdee 	bl	8013040 <rcl_client_is_valid>
 8015464:	b1e8      	cbz	r0, 80154a2 <rcl_action_take_cancel_response+0x66>
 8015466:	6820      	ldr	r0, [r4, #0]
 8015468:	300c      	adds	r0, #12
 801546a:	f7fe fced 	bl	8013e48 <rcl_subscription_is_valid>
 801546e:	b1c0      	cbz	r0, 80154a2 <rcl_action_take_cancel_response+0x66>
 8015470:	6820      	ldr	r0, [r4, #0]
 8015472:	3010      	adds	r0, #16
 8015474:	f7fe fce8 	bl	8013e48 <rcl_subscription_is_valid>
 8015478:	b198      	cbz	r0, 80154a2 <rcl_action_take_cancel_response+0x66>
 801547a:	b1bd      	cbz	r5, 80154ac <rcl_action_take_cancel_response+0x70>
 801547c:	b1b6      	cbz	r6, 80154ac <rcl_action_take_cancel_response+0x70>
 801547e:	6820      	ldr	r0, [r4, #0]
 8015480:	4632      	mov	r2, r6
 8015482:	4629      	mov	r1, r5
 8015484:	3004      	adds	r0, #4
 8015486:	f7fd fd6f 	bl	8012f68 <rcl_take_response>
 801548a:	b148      	cbz	r0, 80154a0 <rcl_action_take_cancel_response+0x64>
 801548c:	280a      	cmp	r0, #10
 801548e:	d007      	beq.n	80154a0 <rcl_action_take_cancel_response+0x64>
 8015490:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015494:	f640 0337 	movw	r3, #2103	@ 0x837
 8015498:	4290      	cmp	r0, r2
 801549a:	bf0c      	ite	eq
 801549c:	4618      	moveq	r0, r3
 801549e:	2001      	movne	r0, #1
 80154a0:	bd70      	pop	{r4, r5, r6, pc}
 80154a2:	f7f9 f951 	bl	800e748 <rcutils_reset_error>
 80154a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80154aa:	bd70      	pop	{r4, r5, r6, pc}
 80154ac:	200b      	movs	r0, #11
 80154ae:	bd70      	pop	{r4, r5, r6, pc}
 80154b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80154b4:	4770      	bx	lr
 80154b6:	bf00      	nop

080154b8 <rcl_action_take_feedback>:
 80154b8:	2800      	cmp	r0, #0
 80154ba:	d037      	beq.n	801552c <rcl_action_take_feedback+0x74>
 80154bc:	b530      	push	{r4, r5, lr}
 80154be:	4604      	mov	r4, r0
 80154c0:	6800      	ldr	r0, [r0, #0]
 80154c2:	b08f      	sub	sp, #60	@ 0x3c
 80154c4:	b358      	cbz	r0, 801551e <rcl_action_take_feedback+0x66>
 80154c6:	460d      	mov	r5, r1
 80154c8:	f7fd fdba 	bl	8013040 <rcl_client_is_valid>
 80154cc:	b328      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154ce:	6820      	ldr	r0, [r4, #0]
 80154d0:	3004      	adds	r0, #4
 80154d2:	f7fd fdb5 	bl	8013040 <rcl_client_is_valid>
 80154d6:	b300      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154d8:	6820      	ldr	r0, [r4, #0]
 80154da:	3008      	adds	r0, #8
 80154dc:	f7fd fdb0 	bl	8013040 <rcl_client_is_valid>
 80154e0:	b1d8      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154e2:	6820      	ldr	r0, [r4, #0]
 80154e4:	300c      	adds	r0, #12
 80154e6:	f7fe fcaf 	bl	8013e48 <rcl_subscription_is_valid>
 80154ea:	b1b0      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154ec:	6820      	ldr	r0, [r4, #0]
 80154ee:	3010      	adds	r0, #16
 80154f0:	f7fe fcaa 	bl	8013e48 <rcl_subscription_is_valid>
 80154f4:	b188      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154f6:	b1b5      	cbz	r5, 8015526 <rcl_action_take_feedback+0x6e>
 80154f8:	6820      	ldr	r0, [r4, #0]
 80154fa:	2300      	movs	r3, #0
 80154fc:	466a      	mov	r2, sp
 80154fe:	4629      	mov	r1, r5
 8015500:	300c      	adds	r0, #12
 8015502:	f7fe fc45 	bl	8013d90 <rcl_take>
 8015506:	b160      	cbz	r0, 8015522 <rcl_action_take_feedback+0x6a>
 8015508:	f240 1391 	movw	r3, #401	@ 0x191
 801550c:	4298      	cmp	r0, r3
 801550e:	d010      	beq.n	8015532 <rcl_action_take_feedback+0x7a>
 8015510:	280a      	cmp	r0, #10
 8015512:	bf18      	it	ne
 8015514:	2001      	movne	r0, #1
 8015516:	b00f      	add	sp, #60	@ 0x3c
 8015518:	bd30      	pop	{r4, r5, pc}
 801551a:	f7f9 f915 	bl	800e748 <rcutils_reset_error>
 801551e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015522:	b00f      	add	sp, #60	@ 0x3c
 8015524:	bd30      	pop	{r4, r5, pc}
 8015526:	200b      	movs	r0, #11
 8015528:	b00f      	add	sp, #60	@ 0x3c
 801552a:	bd30      	pop	{r4, r5, pc}
 801552c:	f640 0036 	movw	r0, #2102	@ 0x836
 8015530:	4770      	bx	lr
 8015532:	f640 0037 	movw	r0, #2103	@ 0x837
 8015536:	e7f4      	b.n	8015522 <rcl_action_take_feedback+0x6a>

08015538 <rcl_action_wait_set_add_action_client>:
 8015538:	2800      	cmp	r0, #0
 801553a:	d045      	beq.n	80155c8 <rcl_action_wait_set_add_action_client+0x90>
 801553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801553e:	460c      	mov	r4, r1
 8015540:	2900      	cmp	r1, #0
 8015542:	d03e      	beq.n	80155c2 <rcl_action_wait_set_add_action_client+0x8a>
 8015544:	4605      	mov	r5, r0
 8015546:	6808      	ldr	r0, [r1, #0]
 8015548:	2800      	cmp	r0, #0
 801554a:	d03a      	beq.n	80155c2 <rcl_action_wait_set_add_action_client+0x8a>
 801554c:	4617      	mov	r7, r2
 801554e:	461e      	mov	r6, r3
 8015550:	f7fd fd76 	bl	8013040 <rcl_client_is_valid>
 8015554:	b398      	cbz	r0, 80155be <rcl_action_wait_set_add_action_client+0x86>
 8015556:	6820      	ldr	r0, [r4, #0]
 8015558:	3004      	adds	r0, #4
 801555a:	f7fd fd71 	bl	8013040 <rcl_client_is_valid>
 801555e:	b370      	cbz	r0, 80155be <rcl_action_wait_set_add_action_client+0x86>
 8015560:	6820      	ldr	r0, [r4, #0]
 8015562:	3008      	adds	r0, #8
 8015564:	f7fd fd6c 	bl	8013040 <rcl_client_is_valid>
 8015568:	b348      	cbz	r0, 80155be <rcl_action_wait_set_add_action_client+0x86>
 801556a:	6820      	ldr	r0, [r4, #0]
 801556c:	300c      	adds	r0, #12
 801556e:	f7fe fc6b 	bl	8013e48 <rcl_subscription_is_valid>
 8015572:	b320      	cbz	r0, 80155be <rcl_action_wait_set_add_action_client+0x86>
 8015574:	6820      	ldr	r0, [r4, #0]
 8015576:	3010      	adds	r0, #16
 8015578:	f7fe fc66 	bl	8013e48 <rcl_subscription_is_valid>
 801557c:	b1f8      	cbz	r0, 80155be <rcl_action_wait_set_add_action_client+0x86>
 801557e:	6821      	ldr	r1, [r4, #0]
 8015580:	4628      	mov	r0, r5
 8015582:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8015586:	f7ff fc6f 	bl	8014e68 <rcl_wait_set_add_client>
 801558a:	b9b8      	cbnz	r0, 80155bc <rcl_action_wait_set_add_action_client+0x84>
 801558c:	6821      	ldr	r1, [r4, #0]
 801558e:	4628      	mov	r0, r5
 8015590:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015594:	3104      	adds	r1, #4
 8015596:	f7ff fc67 	bl	8014e68 <rcl_wait_set_add_client>
 801559a:	b978      	cbnz	r0, 80155bc <rcl_action_wait_set_add_action_client+0x84>
 801559c:	6821      	ldr	r1, [r4, #0]
 801559e:	4628      	mov	r0, r5
 80155a0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80155a4:	3108      	adds	r1, #8
 80155a6:	f7ff fc5f 	bl	8014e68 <rcl_wait_set_add_client>
 80155aa:	b938      	cbnz	r0, 80155bc <rcl_action_wait_set_add_action_client+0x84>
 80155ac:	6821      	ldr	r1, [r4, #0]
 80155ae:	4628      	mov	r0, r5
 80155b0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80155b4:	310c      	adds	r1, #12
 80155b6:	f7ff f8f5 	bl	80147a4 <rcl_wait_set_add_subscription>
 80155ba:	b140      	cbz	r0, 80155ce <rcl_action_wait_set_add_action_client+0x96>
 80155bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155be:	f7f9 f8c3 	bl	800e748 <rcutils_reset_error>
 80155c2:	f640 0036 	movw	r0, #2102	@ 0x836
 80155c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80155cc:	4770      	bx	lr
 80155ce:	6821      	ldr	r1, [r4, #0]
 80155d0:	4628      	mov	r0, r5
 80155d2:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80155d6:	3110      	adds	r1, #16
 80155d8:	f7ff f8e4 	bl	80147a4 <rcl_wait_set_add_subscription>
 80155dc:	2800      	cmp	r0, #0
 80155de:	d1ed      	bne.n	80155bc <rcl_action_wait_set_add_action_client+0x84>
 80155e0:	b11f      	cbz	r7, 80155ea <rcl_action_wait_set_add_action_client+0xb2>
 80155e2:	6823      	ldr	r3, [r4, #0]
 80155e4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80155e8:	603b      	str	r3, [r7, #0]
 80155ea:	2e00      	cmp	r6, #0
 80155ec:	d0e6      	beq.n	80155bc <rcl_action_wait_set_add_action_client+0x84>
 80155ee:	6823      	ldr	r3, [r4, #0]
 80155f0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80155f4:	6033      	str	r3, [r6, #0]
 80155f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080155f8 <rcl_action_client_wait_set_get_entities_ready>:
 80155f8:	2800      	cmp	r0, #0
 80155fa:	d04b      	beq.n	8015694 <rcl_action_client_wait_set_get_entities_ready+0x9c>
 80155fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015600:	460c      	mov	r4, r1
 8015602:	2900      	cmp	r1, #0
 8015604:	d03f      	beq.n	8015686 <rcl_action_client_wait_set_get_entities_ready+0x8e>
 8015606:	4605      	mov	r5, r0
 8015608:	6808      	ldr	r0, [r1, #0]
 801560a:	2800      	cmp	r0, #0
 801560c:	d03b      	beq.n	8015686 <rcl_action_client_wait_set_get_entities_ready+0x8e>
 801560e:	4616      	mov	r6, r2
 8015610:	461f      	mov	r7, r3
 8015612:	f7fd fd15 	bl	8013040 <rcl_client_is_valid>
 8015616:	2800      	cmp	r0, #0
 8015618:	d033      	beq.n	8015682 <rcl_action_client_wait_set_get_entities_ready+0x8a>
 801561a:	6820      	ldr	r0, [r4, #0]
 801561c:	3004      	adds	r0, #4
 801561e:	f7fd fd0f 	bl	8013040 <rcl_client_is_valid>
 8015622:	b370      	cbz	r0, 8015682 <rcl_action_client_wait_set_get_entities_ready+0x8a>
 8015624:	6820      	ldr	r0, [r4, #0]
 8015626:	3008      	adds	r0, #8
 8015628:	f7fd fd0a 	bl	8013040 <rcl_client_is_valid>
 801562c:	b348      	cbz	r0, 8015682 <rcl_action_client_wait_set_get_entities_ready+0x8a>
 801562e:	6820      	ldr	r0, [r4, #0]
 8015630:	300c      	adds	r0, #12
 8015632:	f7fe fc09 	bl	8013e48 <rcl_subscription_is_valid>
 8015636:	b320      	cbz	r0, 8015682 <rcl_action_client_wait_set_get_entities_ready+0x8a>
 8015638:	6820      	ldr	r0, [r4, #0]
 801563a:	3010      	adds	r0, #16
 801563c:	f7fe fc04 	bl	8013e48 <rcl_subscription_is_valid>
 8015640:	b1f8      	cbz	r0, 8015682 <rcl_action_client_wait_set_get_entities_ready+0x8a>
 8015642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8015646:	2a00      	cmp	r2, #0
 8015648:	bf18      	it	ne
 801564a:	2b00      	cmpne	r3, #0
 801564c:	9b08      	ldr	r3, [sp, #32]
 801564e:	bf0c      	ite	eq
 8015650:	2101      	moveq	r1, #1
 8015652:	2100      	movne	r1, #0
 8015654:	2b00      	cmp	r3, #0
 8015656:	bf08      	it	eq
 8015658:	f041 0101 	orreq.w	r1, r1, #1
 801565c:	2f00      	cmp	r7, #0
 801565e:	bf08      	it	eq
 8015660:	f041 0101 	orreq.w	r1, r1, #1
 8015664:	b999      	cbnz	r1, 801568e <rcl_action_client_wait_set_get_entities_ready+0x96>
 8015666:	b196      	cbz	r6, 801568e <rcl_action_client_wait_set_get_entities_ready+0x96>
 8015668:	6823      	ldr	r3, [r4, #0]
 801566a:	686c      	ldr	r4, [r5, #4]
 801566c:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8015670:	428a      	cmp	r2, r1
 8015672:	4610      	mov	r0, r2
 8015674:	bf38      	it	cc
 8015676:	4608      	movcc	r0, r1
 8015678:	4284      	cmp	r4, r0
 801567a:	d80e      	bhi.n	801569a <rcl_action_client_wait_set_get_entities_ready+0xa2>
 801567c:	2001      	movs	r0, #1
 801567e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015682:	f7f9 f861 	bl	800e748 <rcutils_reset_error>
 8015686:	f640 0036 	movw	r0, #2102	@ 0x836
 801568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801568e:	200b      	movs	r0, #11
 8015690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015694:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015698:	4770      	bx	lr
 801569a:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 801569e:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 80156a2:	45f0      	cmp	r8, lr
 80156a4:	4640      	mov	r0, r8
 80156a6:	69ec      	ldr	r4, [r5, #28]
 80156a8:	bf38      	it	cc
 80156aa:	4670      	movcc	r0, lr
 80156ac:	4560      	cmp	r0, ip
 80156ae:	bf38      	it	cc
 80156b0:	4660      	movcc	r0, ip
 80156b2:	4284      	cmp	r4, r0
 80156b4:	d9e2      	bls.n	801567c <rcl_action_client_wait_set_get_entities_ready+0x84>
 80156b6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80156ba:	682d      	ldr	r5, [r5, #0]
 80156bc:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80156c0:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80156c4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80156c8:	1a18      	subs	r0, r3, r0
 80156ca:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80156ce:	f103 0c0c 	add.w	ip, r3, #12
 80156d2:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80156d6:	fab0 f080 	clz	r0, r0
 80156da:	eba5 050c 	sub.w	r5, r5, ip
 80156de:	0940      	lsrs	r0, r0, #5
 80156e0:	fab5 f585 	clz	r5, r5
 80156e4:	096d      	lsrs	r5, r5, #5
 80156e6:	7035      	strb	r5, [r6, #0]
 80156e8:	f103 0510 	add.w	r5, r3, #16
 80156ec:	1b64      	subs	r4, r4, r5
 80156ee:	9d08      	ldr	r5, [sp, #32]
 80156f0:	fab4 f484 	clz	r4, r4
 80156f4:	0964      	lsrs	r4, r4, #5
 80156f6:	703c      	strb	r4, [r7, #0]
 80156f8:	1d1c      	adds	r4, r3, #4
 80156fa:	3308      	adds	r3, #8
 80156fc:	7028      	strb	r0, [r5, #0]
 80156fe:	1b09      	subs	r1, r1, r4
 8015700:	2000      	movs	r0, #0
 8015702:	1ad3      	subs	r3, r2, r3
 8015704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015706:	fab1 f181 	clz	r1, r1
 801570a:	fab3 f383 	clz	r3, r3
 801570e:	0949      	lsrs	r1, r1, #5
 8015710:	095b      	lsrs	r3, r3, #5
 8015712:	7011      	strb	r1, [r2, #0]
 8015714:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015716:	7013      	strb	r3, [r2, #0]
 8015718:	e7b7      	b.n	801568a <rcl_action_client_wait_set_get_entities_ready+0x92>
 801571a:	bf00      	nop

0801571c <rcl_action_take_goal_request>:
 801571c:	b3b0      	cbz	r0, 801578c <rcl_action_take_goal_request+0x70>
 801571e:	b570      	push	{r4, r5, r6, lr}
 8015720:	4604      	mov	r4, r0
 8015722:	6800      	ldr	r0, [r0, #0]
 8015724:	b368      	cbz	r0, 8015782 <rcl_action_take_goal_request+0x66>
 8015726:	460e      	mov	r6, r1
 8015728:	4615      	mov	r5, r2
 801572a:	f7fe fa9b 	bl	8013c64 <rcl_service_is_valid>
 801572e:	b330      	cbz	r0, 801577e <rcl_action_take_goal_request+0x62>
 8015730:	6820      	ldr	r0, [r4, #0]
 8015732:	3004      	adds	r0, #4
 8015734:	f7fe fa96 	bl	8013c64 <rcl_service_is_valid>
 8015738:	b308      	cbz	r0, 801577e <rcl_action_take_goal_request+0x62>
 801573a:	6820      	ldr	r0, [r4, #0]
 801573c:	3008      	adds	r0, #8
 801573e:	f7fe fa91 	bl	8013c64 <rcl_service_is_valid>
 8015742:	b1e0      	cbz	r0, 801577e <rcl_action_take_goal_request+0x62>
 8015744:	6820      	ldr	r0, [r4, #0]
 8015746:	300c      	adds	r0, #12
 8015748:	f7f8 f8c2 	bl	800d8d0 <rcl_publisher_is_valid>
 801574c:	b1b8      	cbz	r0, 801577e <rcl_action_take_goal_request+0x62>
 801574e:	6820      	ldr	r0, [r4, #0]
 8015750:	3010      	adds	r0, #16
 8015752:	f7f8 f8bd 	bl	800d8d0 <rcl_publisher_is_valid>
 8015756:	b190      	cbz	r0, 801577e <rcl_action_take_goal_request+0x62>
 8015758:	b1b6      	cbz	r6, 8015788 <rcl_action_take_goal_request+0x6c>
 801575a:	b1ad      	cbz	r5, 8015788 <rcl_action_take_goal_request+0x6c>
 801575c:	462a      	mov	r2, r5
 801575e:	4631      	mov	r1, r6
 8015760:	6820      	ldr	r0, [r4, #0]
 8015762:	f7fe f9ff 	bl	8013b64 <rcl_take_request>
 8015766:	b148      	cbz	r0, 801577c <rcl_action_take_goal_request+0x60>
 8015768:	280a      	cmp	r0, #10
 801576a:	d007      	beq.n	801577c <rcl_action_take_goal_request+0x60>
 801576c:	f240 2259 	movw	r2, #601	@ 0x259
 8015770:	f640 0399 	movw	r3, #2201	@ 0x899
 8015774:	4290      	cmp	r0, r2
 8015776:	bf0c      	ite	eq
 8015778:	4618      	moveq	r0, r3
 801577a:	2001      	movne	r0, #1
 801577c:	bd70      	pop	{r4, r5, r6, pc}
 801577e:	f7f8 ffe3 	bl	800e748 <rcutils_reset_error>
 8015782:	f640 0098 	movw	r0, #2200	@ 0x898
 8015786:	bd70      	pop	{r4, r5, r6, pc}
 8015788:	200b      	movs	r0, #11
 801578a:	bd70      	pop	{r4, r5, r6, pc}
 801578c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015790:	4770      	bx	lr
 8015792:	bf00      	nop

08015794 <rcl_action_send_goal_response>:
 8015794:	b378      	cbz	r0, 80157f6 <rcl_action_send_goal_response+0x62>
 8015796:	b570      	push	{r4, r5, r6, lr}
 8015798:	4604      	mov	r4, r0
 801579a:	6800      	ldr	r0, [r0, #0]
 801579c:	b330      	cbz	r0, 80157ec <rcl_action_send_goal_response+0x58>
 801579e:	460e      	mov	r6, r1
 80157a0:	4615      	mov	r5, r2
 80157a2:	f7fe fa5f 	bl	8013c64 <rcl_service_is_valid>
 80157a6:	b1f8      	cbz	r0, 80157e8 <rcl_action_send_goal_response+0x54>
 80157a8:	6820      	ldr	r0, [r4, #0]
 80157aa:	3004      	adds	r0, #4
 80157ac:	f7fe fa5a 	bl	8013c64 <rcl_service_is_valid>
 80157b0:	b1d0      	cbz	r0, 80157e8 <rcl_action_send_goal_response+0x54>
 80157b2:	6820      	ldr	r0, [r4, #0]
 80157b4:	3008      	adds	r0, #8
 80157b6:	f7fe fa55 	bl	8013c64 <rcl_service_is_valid>
 80157ba:	b1a8      	cbz	r0, 80157e8 <rcl_action_send_goal_response+0x54>
 80157bc:	6820      	ldr	r0, [r4, #0]
 80157be:	300c      	adds	r0, #12
 80157c0:	f7f8 f886 	bl	800d8d0 <rcl_publisher_is_valid>
 80157c4:	b180      	cbz	r0, 80157e8 <rcl_action_send_goal_response+0x54>
 80157c6:	6820      	ldr	r0, [r4, #0]
 80157c8:	3010      	adds	r0, #16
 80157ca:	f7f8 f881 	bl	800d8d0 <rcl_publisher_is_valid>
 80157ce:	b158      	cbz	r0, 80157e8 <rcl_action_send_goal_response+0x54>
 80157d0:	b17e      	cbz	r6, 80157f2 <rcl_action_send_goal_response+0x5e>
 80157d2:	b175      	cbz	r5, 80157f2 <rcl_action_send_goal_response+0x5e>
 80157d4:	462a      	mov	r2, r5
 80157d6:	4631      	mov	r1, r6
 80157d8:	6820      	ldr	r0, [r4, #0]
 80157da:	f7fe fa13 	bl	8013c04 <rcl_send_response>
 80157de:	b110      	cbz	r0, 80157e6 <rcl_action_send_goal_response+0x52>
 80157e0:	2802      	cmp	r0, #2
 80157e2:	bf18      	it	ne
 80157e4:	2001      	movne	r0, #1
 80157e6:	bd70      	pop	{r4, r5, r6, pc}
 80157e8:	f7f8 ffae 	bl	800e748 <rcutils_reset_error>
 80157ec:	f640 0098 	movw	r0, #2200	@ 0x898
 80157f0:	bd70      	pop	{r4, r5, r6, pc}
 80157f2:	200b      	movs	r0, #11
 80157f4:	bd70      	pop	{r4, r5, r6, pc}
 80157f6:	f640 0098 	movw	r0, #2200	@ 0x898
 80157fa:	4770      	bx	lr

080157fc <rcl_action_take_result_request>:
 80157fc:	2800      	cmp	r0, #0
 80157fe:	d037      	beq.n	8015870 <rcl_action_take_result_request+0x74>
 8015800:	b570      	push	{r4, r5, r6, lr}
 8015802:	4604      	mov	r4, r0
 8015804:	6800      	ldr	r0, [r0, #0]
 8015806:	b370      	cbz	r0, 8015866 <rcl_action_take_result_request+0x6a>
 8015808:	460d      	mov	r5, r1
 801580a:	4616      	mov	r6, r2
 801580c:	f7fe fa2a 	bl	8013c64 <rcl_service_is_valid>
 8015810:	b338      	cbz	r0, 8015862 <rcl_action_take_result_request+0x66>
 8015812:	6820      	ldr	r0, [r4, #0]
 8015814:	3004      	adds	r0, #4
 8015816:	f7fe fa25 	bl	8013c64 <rcl_service_is_valid>
 801581a:	b310      	cbz	r0, 8015862 <rcl_action_take_result_request+0x66>
 801581c:	6820      	ldr	r0, [r4, #0]
 801581e:	3008      	adds	r0, #8
 8015820:	f7fe fa20 	bl	8013c64 <rcl_service_is_valid>
 8015824:	b1e8      	cbz	r0, 8015862 <rcl_action_take_result_request+0x66>
 8015826:	6820      	ldr	r0, [r4, #0]
 8015828:	300c      	adds	r0, #12
 801582a:	f7f8 f851 	bl	800d8d0 <rcl_publisher_is_valid>
 801582e:	b1c0      	cbz	r0, 8015862 <rcl_action_take_result_request+0x66>
 8015830:	6820      	ldr	r0, [r4, #0]
 8015832:	3010      	adds	r0, #16
 8015834:	f7f8 f84c 	bl	800d8d0 <rcl_publisher_is_valid>
 8015838:	b198      	cbz	r0, 8015862 <rcl_action_take_result_request+0x66>
 801583a:	b1bd      	cbz	r5, 801586c <rcl_action_take_result_request+0x70>
 801583c:	b1b6      	cbz	r6, 801586c <rcl_action_take_result_request+0x70>
 801583e:	6820      	ldr	r0, [r4, #0]
 8015840:	4632      	mov	r2, r6
 8015842:	4629      	mov	r1, r5
 8015844:	3008      	adds	r0, #8
 8015846:	f7fe f98d 	bl	8013b64 <rcl_take_request>
 801584a:	b148      	cbz	r0, 8015860 <rcl_action_take_result_request+0x64>
 801584c:	280a      	cmp	r0, #10
 801584e:	d007      	beq.n	8015860 <rcl_action_take_result_request+0x64>
 8015850:	f240 2259 	movw	r2, #601	@ 0x259
 8015854:	f640 0399 	movw	r3, #2201	@ 0x899
 8015858:	4290      	cmp	r0, r2
 801585a:	bf0c      	ite	eq
 801585c:	4618      	moveq	r0, r3
 801585e:	2001      	movne	r0, #1
 8015860:	bd70      	pop	{r4, r5, r6, pc}
 8015862:	f7f8 ff71 	bl	800e748 <rcutils_reset_error>
 8015866:	f640 0098 	movw	r0, #2200	@ 0x898
 801586a:	bd70      	pop	{r4, r5, r6, pc}
 801586c:	200b      	movs	r0, #11
 801586e:	bd70      	pop	{r4, r5, r6, pc}
 8015870:	f640 0098 	movw	r0, #2200	@ 0x898
 8015874:	4770      	bx	lr
 8015876:	bf00      	nop

08015878 <rcl_action_take_cancel_request>:
 8015878:	2800      	cmp	r0, #0
 801587a:	d037      	beq.n	80158ec <rcl_action_take_cancel_request+0x74>
 801587c:	b570      	push	{r4, r5, r6, lr}
 801587e:	4604      	mov	r4, r0
 8015880:	6800      	ldr	r0, [r0, #0]
 8015882:	b370      	cbz	r0, 80158e2 <rcl_action_take_cancel_request+0x6a>
 8015884:	460d      	mov	r5, r1
 8015886:	4616      	mov	r6, r2
 8015888:	f7fe f9ec 	bl	8013c64 <rcl_service_is_valid>
 801588c:	b338      	cbz	r0, 80158de <rcl_action_take_cancel_request+0x66>
 801588e:	6820      	ldr	r0, [r4, #0]
 8015890:	3004      	adds	r0, #4
 8015892:	f7fe f9e7 	bl	8013c64 <rcl_service_is_valid>
 8015896:	b310      	cbz	r0, 80158de <rcl_action_take_cancel_request+0x66>
 8015898:	6820      	ldr	r0, [r4, #0]
 801589a:	3008      	adds	r0, #8
 801589c:	f7fe f9e2 	bl	8013c64 <rcl_service_is_valid>
 80158a0:	b1e8      	cbz	r0, 80158de <rcl_action_take_cancel_request+0x66>
 80158a2:	6820      	ldr	r0, [r4, #0]
 80158a4:	300c      	adds	r0, #12
 80158a6:	f7f8 f813 	bl	800d8d0 <rcl_publisher_is_valid>
 80158aa:	b1c0      	cbz	r0, 80158de <rcl_action_take_cancel_request+0x66>
 80158ac:	6820      	ldr	r0, [r4, #0]
 80158ae:	3010      	adds	r0, #16
 80158b0:	f7f8 f80e 	bl	800d8d0 <rcl_publisher_is_valid>
 80158b4:	b198      	cbz	r0, 80158de <rcl_action_take_cancel_request+0x66>
 80158b6:	b1bd      	cbz	r5, 80158e8 <rcl_action_take_cancel_request+0x70>
 80158b8:	b1b6      	cbz	r6, 80158e8 <rcl_action_take_cancel_request+0x70>
 80158ba:	6820      	ldr	r0, [r4, #0]
 80158bc:	4632      	mov	r2, r6
 80158be:	4629      	mov	r1, r5
 80158c0:	3004      	adds	r0, #4
 80158c2:	f7fe f94f 	bl	8013b64 <rcl_take_request>
 80158c6:	b148      	cbz	r0, 80158dc <rcl_action_take_cancel_request+0x64>
 80158c8:	280a      	cmp	r0, #10
 80158ca:	d007      	beq.n	80158dc <rcl_action_take_cancel_request+0x64>
 80158cc:	f240 2259 	movw	r2, #601	@ 0x259
 80158d0:	f640 0399 	movw	r3, #2201	@ 0x899
 80158d4:	4290      	cmp	r0, r2
 80158d6:	bf0c      	ite	eq
 80158d8:	4618      	moveq	r0, r3
 80158da:	2001      	movne	r0, #1
 80158dc:	bd70      	pop	{r4, r5, r6, pc}
 80158de:	f7f8 ff33 	bl	800e748 <rcutils_reset_error>
 80158e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80158e6:	bd70      	pop	{r4, r5, r6, pc}
 80158e8:	200b      	movs	r0, #11
 80158ea:	bd70      	pop	{r4, r5, r6, pc}
 80158ec:	f640 0098 	movw	r0, #2200	@ 0x898
 80158f0:	4770      	bx	lr
 80158f2:	bf00      	nop

080158f4 <rcl_action_send_cancel_response>:
 80158f4:	b380      	cbz	r0, 8015958 <rcl_action_send_cancel_response+0x64>
 80158f6:	b570      	push	{r4, r5, r6, lr}
 80158f8:	4604      	mov	r4, r0
 80158fa:	6800      	ldr	r0, [r0, #0]
 80158fc:	b338      	cbz	r0, 801594e <rcl_action_send_cancel_response+0x5a>
 80158fe:	460d      	mov	r5, r1
 8015900:	4616      	mov	r6, r2
 8015902:	f7fe f9af 	bl	8013c64 <rcl_service_is_valid>
 8015906:	b300      	cbz	r0, 801594a <rcl_action_send_cancel_response+0x56>
 8015908:	6820      	ldr	r0, [r4, #0]
 801590a:	3004      	adds	r0, #4
 801590c:	f7fe f9aa 	bl	8013c64 <rcl_service_is_valid>
 8015910:	b1d8      	cbz	r0, 801594a <rcl_action_send_cancel_response+0x56>
 8015912:	6820      	ldr	r0, [r4, #0]
 8015914:	3008      	adds	r0, #8
 8015916:	f7fe f9a5 	bl	8013c64 <rcl_service_is_valid>
 801591a:	b1b0      	cbz	r0, 801594a <rcl_action_send_cancel_response+0x56>
 801591c:	6820      	ldr	r0, [r4, #0]
 801591e:	300c      	adds	r0, #12
 8015920:	f7f7 ffd6 	bl	800d8d0 <rcl_publisher_is_valid>
 8015924:	b188      	cbz	r0, 801594a <rcl_action_send_cancel_response+0x56>
 8015926:	6820      	ldr	r0, [r4, #0]
 8015928:	3010      	adds	r0, #16
 801592a:	f7f7 ffd1 	bl	800d8d0 <rcl_publisher_is_valid>
 801592e:	b160      	cbz	r0, 801594a <rcl_action_send_cancel_response+0x56>
 8015930:	b185      	cbz	r5, 8015954 <rcl_action_send_cancel_response+0x60>
 8015932:	b17e      	cbz	r6, 8015954 <rcl_action_send_cancel_response+0x60>
 8015934:	6820      	ldr	r0, [r4, #0]
 8015936:	4632      	mov	r2, r6
 8015938:	4629      	mov	r1, r5
 801593a:	3004      	adds	r0, #4
 801593c:	f7fe f962 	bl	8013c04 <rcl_send_response>
 8015940:	b110      	cbz	r0, 8015948 <rcl_action_send_cancel_response+0x54>
 8015942:	2802      	cmp	r0, #2
 8015944:	bf18      	it	ne
 8015946:	2001      	movne	r0, #1
 8015948:	bd70      	pop	{r4, r5, r6, pc}
 801594a:	f7f8 fefd 	bl	800e748 <rcutils_reset_error>
 801594e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015952:	bd70      	pop	{r4, r5, r6, pc}
 8015954:	200b      	movs	r0, #11
 8015956:	bd70      	pop	{r4, r5, r6, pc}
 8015958:	f640 0098 	movw	r0, #2200	@ 0x898
 801595c:	4770      	bx	lr
 801595e:	bf00      	nop

08015960 <rcl_action_wait_set_add_action_server>:
 8015960:	2800      	cmp	r0, #0
 8015962:	d04d      	beq.n	8015a00 <rcl_action_wait_set_add_action_server+0xa0>
 8015964:	b570      	push	{r4, r5, r6, lr}
 8015966:	460c      	mov	r4, r1
 8015968:	b159      	cbz	r1, 8015982 <rcl_action_wait_set_add_action_server+0x22>
 801596a:	4605      	mov	r5, r0
 801596c:	6808      	ldr	r0, [r1, #0]
 801596e:	b140      	cbz	r0, 8015982 <rcl_action_wait_set_add_action_server+0x22>
 8015970:	4616      	mov	r6, r2
 8015972:	f7fe f977 	bl	8013c64 <rcl_service_is_valid>
 8015976:	b120      	cbz	r0, 8015982 <rcl_action_wait_set_add_action_server+0x22>
 8015978:	6820      	ldr	r0, [r4, #0]
 801597a:	3004      	adds	r0, #4
 801597c:	f7fe f972 	bl	8013c64 <rcl_service_is_valid>
 8015980:	b910      	cbnz	r0, 8015988 <rcl_action_wait_set_add_action_server+0x28>
 8015982:	f640 0098 	movw	r0, #2200	@ 0x898
 8015986:	bd70      	pop	{r4, r5, r6, pc}
 8015988:	6820      	ldr	r0, [r4, #0]
 801598a:	3008      	adds	r0, #8
 801598c:	f7fe f96a 	bl	8013c64 <rcl_service_is_valid>
 8015990:	2800      	cmp	r0, #0
 8015992:	d0f6      	beq.n	8015982 <rcl_action_wait_set_add_action_server+0x22>
 8015994:	6820      	ldr	r0, [r4, #0]
 8015996:	300c      	adds	r0, #12
 8015998:	f7f7 ffb2 	bl	800d900 <rcl_publisher_is_valid_except_context>
 801599c:	2800      	cmp	r0, #0
 801599e:	d0f0      	beq.n	8015982 <rcl_action_wait_set_add_action_server+0x22>
 80159a0:	6820      	ldr	r0, [r4, #0]
 80159a2:	3010      	adds	r0, #16
 80159a4:	f7f7 ffac 	bl	800d900 <rcl_publisher_is_valid_except_context>
 80159a8:	2800      	cmp	r0, #0
 80159aa:	d0ea      	beq.n	8015982 <rcl_action_wait_set_add_action_server+0x22>
 80159ac:	6821      	ldr	r1, [r4, #0]
 80159ae:	4628      	mov	r0, r5
 80159b0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80159b4:	f7ff fa84 	bl	8014ec0 <rcl_wait_set_add_service>
 80159b8:	2800      	cmp	r0, #0
 80159ba:	d1e4      	bne.n	8015986 <rcl_action_wait_set_add_action_server+0x26>
 80159bc:	6821      	ldr	r1, [r4, #0]
 80159be:	4628      	mov	r0, r5
 80159c0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80159c4:	3104      	adds	r1, #4
 80159c6:	f7ff fa7b 	bl	8014ec0 <rcl_wait_set_add_service>
 80159ca:	2800      	cmp	r0, #0
 80159cc:	d1db      	bne.n	8015986 <rcl_action_wait_set_add_action_server+0x26>
 80159ce:	6821      	ldr	r1, [r4, #0]
 80159d0:	4628      	mov	r0, r5
 80159d2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80159d6:	3108      	adds	r1, #8
 80159d8:	f7ff fa72 	bl	8014ec0 <rcl_wait_set_add_service>
 80159dc:	2800      	cmp	r0, #0
 80159de:	d1d2      	bne.n	8015986 <rcl_action_wait_set_add_action_server+0x26>
 80159e0:	6821      	ldr	r1, [r4, #0]
 80159e2:	4628      	mov	r0, r5
 80159e4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80159e8:	3114      	adds	r1, #20
 80159ea:	f7ff fa0d 	bl	8014e08 <rcl_wait_set_add_timer>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d1c9      	bne.n	8015986 <rcl_action_wait_set_add_action_server+0x26>
 80159f2:	2e00      	cmp	r6, #0
 80159f4:	d0c7      	beq.n	8015986 <rcl_action_wait_set_add_action_server+0x26>
 80159f6:	6823      	ldr	r3, [r4, #0]
 80159f8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80159fc:	6033      	str	r3, [r6, #0]
 80159fe:	bd70      	pop	{r4, r5, r6, pc}
 8015a00:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a04:	4770      	bx	lr
 8015a06:	bf00      	nop

08015a08 <rcl_action_server_wait_set_get_entities_ready>:
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d067      	beq.n	8015adc <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8015a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a10:	460c      	mov	r4, r1
 8015a12:	b161      	cbz	r1, 8015a2e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015a14:	4605      	mov	r5, r0
 8015a16:	6808      	ldr	r0, [r1, #0]
 8015a18:	b148      	cbz	r0, 8015a2e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015a1a:	4616      	mov	r6, r2
 8015a1c:	4698      	mov	r8, r3
 8015a1e:	f7fe f921 	bl	8013c64 <rcl_service_is_valid>
 8015a22:	b120      	cbz	r0, 8015a2e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015a24:	6820      	ldr	r0, [r4, #0]
 8015a26:	3004      	adds	r0, #4
 8015a28:	f7fe f91c 	bl	8013c64 <rcl_service_is_valid>
 8015a2c:	b918      	cbnz	r0, 8015a36 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8015a2e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a36:	6820      	ldr	r0, [r4, #0]
 8015a38:	3008      	adds	r0, #8
 8015a3a:	f7fe f913 	bl	8013c64 <rcl_service_is_valid>
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	d0f5      	beq.n	8015a2e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015a42:	6820      	ldr	r0, [r4, #0]
 8015a44:	300c      	adds	r0, #12
 8015a46:	f7f7 ff5b 	bl	800d900 <rcl_publisher_is_valid_except_context>
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d0ef      	beq.n	8015a2e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015a4e:	6820      	ldr	r0, [r4, #0]
 8015a50:	3010      	adds	r0, #16
 8015a52:	f7f7 ff55 	bl	800d900 <rcl_publisher_is_valid_except_context>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d0e9      	beq.n	8015a2e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8015a5a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015a5e:	2a00      	cmp	r2, #0
 8015a60:	bf18      	it	ne
 8015a62:	2b00      	cmpne	r3, #0
 8015a64:	bf0c      	ite	eq
 8015a66:	2101      	moveq	r1, #1
 8015a68:	2100      	movne	r1, #0
 8015a6a:	f1b8 0f00 	cmp.w	r8, #0
 8015a6e:	bf08      	it	eq
 8015a70:	f041 0101 	orreq.w	r1, r1, #1
 8015a74:	bba9      	cbnz	r1, 8015ae2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8015a76:	b3a6      	cbz	r6, 8015ae2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8015a78:	6821      	ldr	r1, [r4, #0]
 8015a7a:	2000      	movs	r0, #0
 8015a7c:	692c      	ldr	r4, [r5, #16]
 8015a7e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8015a82:	6a2f      	ldr	r7, [r5, #32]
 8015a84:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015a88:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8015a8c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015a90:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8015a94:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8015a98:	1a64      	subs	r4, r4, r1
 8015a9a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 8015a9e:	fab4 f484 	clz	r4, r4
 8015aa2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8015aa6:	0964      	lsrs	r4, r4, #5
 8015aa8:	7034      	strb	r4, [r6, #0]
 8015aaa:	1d0c      	adds	r4, r1, #4
 8015aac:	1b2c      	subs	r4, r5, r4
 8015aae:	fab4 f484 	clz	r4, r4
 8015ab2:	0964      	lsrs	r4, r4, #5
 8015ab4:	f888 4000 	strb.w	r4, [r8]
 8015ab8:	f101 0408 	add.w	r4, r1, #8
 8015abc:	1b1b      	subs	r3, r3, r4
 8015abe:	9c06      	ldr	r4, [sp, #24]
 8015ac0:	fab3 f383 	clz	r3, r3
 8015ac4:	095b      	lsrs	r3, r3, #5
 8015ac6:	7023      	strb	r3, [r4, #0]
 8015ac8:	f101 0314 	add.w	r3, r1, #20
 8015acc:	1ad3      	subs	r3, r2, r3
 8015ace:	9a07      	ldr	r2, [sp, #28]
 8015ad0:	fab3 f383 	clz	r3, r3
 8015ad4:	095b      	lsrs	r3, r3, #5
 8015ad6:	7013      	strb	r3, [r2, #0]
 8015ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015adc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ae0:	4770      	bx	lr
 8015ae2:	200b      	movs	r0, #11
 8015ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ae8 <_execute_event_handler>:
 8015ae8:	2002      	movs	r0, #2
 8015aea:	4770      	bx	lr

08015aec <_cancel_goal_event_handler>:
 8015aec:	2003      	movs	r0, #3
 8015aee:	4770      	bx	lr

08015af0 <_succeed_event_handler>:
 8015af0:	2004      	movs	r0, #4
 8015af2:	4770      	bx	lr

08015af4 <_abort_event_handler>:
 8015af4:	2006      	movs	r0, #6
 8015af6:	4770      	bx	lr

08015af8 <_canceled_event_handler>:
 8015af8:	2005      	movs	r0, #5
 8015afa:	4770      	bx	lr

08015afc <rcl_action_transition_goal_state>:
 8015afc:	fa5f fc80 	uxtb.w	ip, r0
 8015b00:	f1bc 0f06 	cmp.w	ip, #6
 8015b04:	d810      	bhi.n	8015b28 <rcl_action_transition_goal_state+0x2c>
 8015b06:	2904      	cmp	r1, #4
 8015b08:	d80e      	bhi.n	8015b28 <rcl_action_transition_goal_state+0x2c>
 8015b0a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8015b0e:	b410      	push	{r4}
 8015b10:	440b      	add	r3, r1
 8015b12:	4c06      	ldr	r4, [pc, #24]	@ (8015b2c <rcl_action_transition_goal_state+0x30>)
 8015b14:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015b18:	b113      	cbz	r3, 8015b20 <rcl_action_transition_goal_state+0x24>
 8015b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b1e:	4718      	bx	r3
 8015b20:	2000      	movs	r0, #0
 8015b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b26:	4770      	bx	lr
 8015b28:	2000      	movs	r0, #0
 8015b2a:	4770      	bx	lr
 8015b2c:	0801c60c 	.word	0x0801c60c

08015b30 <rcl_action_get_zero_initialized_cancel_response>:
 8015b30:	b510      	push	{r4, lr}
 8015b32:	4c07      	ldr	r4, [pc, #28]	@ (8015b50 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015b34:	4686      	mov	lr, r0
 8015b36:	4684      	mov	ip, r0
 8015b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b44:	6823      	ldr	r3, [r4, #0]
 8015b46:	4670      	mov	r0, lr
 8015b48:	f8cc 3000 	str.w	r3, [ip]
 8015b4c:	bd10      	pop	{r4, pc}
 8015b4e:	bf00      	nop
 8015b50:	0801c698 	.word	0x0801c698

08015b54 <rclc_action_send_result_request>:
 8015b54:	b1d0      	cbz	r0, 8015b8c <rclc_action_send_result_request+0x38>
 8015b56:	4684      	mov	ip, r0
 8015b58:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015b5c:	b500      	push	{lr}
 8015b5e:	b087      	sub	sp, #28
 8015b60:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015b64:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015b68:	f10d 0e08 	add.w	lr, sp, #8
 8015b6c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015b70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b74:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015b78:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015b7c:	a902      	add	r1, sp, #8
 8015b7e:	3010      	adds	r0, #16
 8015b80:	f7ff fbea 	bl	8015358 <rcl_action_send_result_request>
 8015b84:	b920      	cbnz	r0, 8015b90 <rclc_action_send_result_request+0x3c>
 8015b86:	b007      	add	sp, #28
 8015b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b8c:	200b      	movs	r0, #11
 8015b8e:	4770      	bx	lr
 8015b90:	9001      	str	r0, [sp, #4]
 8015b92:	f7f8 fdd9 	bl	800e748 <rcutils_reset_error>
 8015b96:	9801      	ldr	r0, [sp, #4]
 8015b98:	b007      	add	sp, #28
 8015b9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b9e:	bf00      	nop

08015ba0 <rclc_action_take_goal_handle>:
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	b158      	cbz	r0, 8015bbc <rclc_action_take_goal_handle+0x1c>
 8015ba4:	6880      	ldr	r0, [r0, #8]
 8015ba6:	b148      	cbz	r0, 8015bbc <rclc_action_take_goal_handle+0x1c>
 8015ba8:	6801      	ldr	r1, [r0, #0]
 8015baa:	2200      	movs	r2, #0
 8015bac:	6099      	str	r1, [r3, #8]
 8015bae:	7202      	strb	r2, [r0, #8]
 8015bb0:	68d9      	ldr	r1, [r3, #12]
 8015bb2:	6202      	str	r2, [r0, #32]
 8015bb4:	8482      	strh	r2, [r0, #36]	@ 0x24
 8015bb6:	6001      	str	r1, [r0, #0]
 8015bb8:	60d8      	str	r0, [r3, #12]
 8015bba:	4770      	bx	lr
 8015bbc:	4770      	bx	lr
 8015bbe:	bf00      	nop

08015bc0 <rclc_action_remove_used_goal_handle>:
 8015bc0:	b181      	cbz	r1, 8015be4 <rclc_action_remove_used_goal_handle+0x24>
 8015bc2:	b178      	cbz	r0, 8015be4 <rclc_action_remove_used_goal_handle+0x24>
 8015bc4:	68c3      	ldr	r3, [r0, #12]
 8015bc6:	4299      	cmp	r1, r3
 8015bc8:	d00d      	beq.n	8015be6 <rclc_action_remove_used_goal_handle+0x26>
 8015bca:	b12b      	cbz	r3, 8015bd8 <rclc_action_remove_used_goal_handle+0x18>
 8015bcc:	681a      	ldr	r2, [r3, #0]
 8015bce:	4291      	cmp	r1, r2
 8015bd0:	d003      	beq.n	8015bda <rclc_action_remove_used_goal_handle+0x1a>
 8015bd2:	4613      	mov	r3, r2
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d1f9      	bne.n	8015bcc <rclc_action_remove_used_goal_handle+0xc>
 8015bd8:	4770      	bx	lr
 8015bda:	680a      	ldr	r2, [r1, #0]
 8015bdc:	601a      	str	r2, [r3, #0]
 8015bde:	6883      	ldr	r3, [r0, #8]
 8015be0:	600b      	str	r3, [r1, #0]
 8015be2:	6081      	str	r1, [r0, #8]
 8015be4:	4770      	bx	lr
 8015be6:	680b      	ldr	r3, [r1, #0]
 8015be8:	60c3      	str	r3, [r0, #12]
 8015bea:	e7f8      	b.n	8015bde <rclc_action_remove_used_goal_handle+0x1e>

08015bec <rclc_action_find_goal_handle_by_uuid>:
 8015bec:	b538      	push	{r3, r4, r5, lr}
 8015bee:	b181      	cbz	r1, 8015c12 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015bf0:	b178      	cbz	r0, 8015c12 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015bf2:	68c4      	ldr	r4, [r0, #12]
 8015bf4:	460d      	mov	r5, r1
 8015bf6:	b914      	cbnz	r4, 8015bfe <rclc_action_find_goal_handle_by_uuid+0x12>
 8015bf8:	e009      	b.n	8015c0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bfa:	6824      	ldr	r4, [r4, #0]
 8015bfc:	b13c      	cbz	r4, 8015c0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015bfe:	2210      	movs	r2, #16
 8015c00:	4629      	mov	r1, r5
 8015c02:	f104 0009 	add.w	r0, r4, #9
 8015c06:	f004 ffcf 	bl	801aba8 <memcmp>
 8015c0a:	2800      	cmp	r0, #0
 8015c0c:	d1f5      	bne.n	8015bfa <rclc_action_find_goal_handle_by_uuid+0xe>
 8015c0e:	4620      	mov	r0, r4
 8015c10:	bd38      	pop	{r3, r4, r5, pc}
 8015c12:	2400      	movs	r4, #0
 8015c14:	4620      	mov	r0, r4
 8015c16:	bd38      	pop	{r3, r4, r5, pc}

08015c18 <rclc_action_find_first_handle_by_status>:
 8015c18:	b140      	cbz	r0, 8015c2c <rclc_action_find_first_handle_by_status+0x14>
 8015c1a:	68c0      	ldr	r0, [r0, #12]
 8015c1c:	b910      	cbnz	r0, 8015c24 <rclc_action_find_first_handle_by_status+0xc>
 8015c1e:	e005      	b.n	8015c2c <rclc_action_find_first_handle_by_status+0x14>
 8015c20:	6800      	ldr	r0, [r0, #0]
 8015c22:	b118      	cbz	r0, 8015c2c <rclc_action_find_first_handle_by_status+0x14>
 8015c24:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015c28:	428b      	cmp	r3, r1
 8015c2a:	d1f9      	bne.n	8015c20 <rclc_action_find_first_handle_by_status+0x8>
 8015c2c:	4770      	bx	lr
 8015c2e:	bf00      	nop

08015c30 <rclc_action_find_first_terminated_handle>:
 8015c30:	b140      	cbz	r0, 8015c44 <rclc_action_find_first_terminated_handle+0x14>
 8015c32:	68c0      	ldr	r0, [r0, #12]
 8015c34:	b910      	cbnz	r0, 8015c3c <rclc_action_find_first_terminated_handle+0xc>
 8015c36:	e005      	b.n	8015c44 <rclc_action_find_first_terminated_handle+0x14>
 8015c38:	6800      	ldr	r0, [r0, #0]
 8015c3a:	b118      	cbz	r0, 8015c44 <rclc_action_find_first_terminated_handle+0x14>
 8015c3c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015c40:	2b03      	cmp	r3, #3
 8015c42:	ddf9      	ble.n	8015c38 <rclc_action_find_first_terminated_handle+0x8>
 8015c44:	4770      	bx	lr
 8015c46:	bf00      	nop

08015c48 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015c48:	b170      	cbz	r0, 8015c68 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c4a:	68c0      	ldr	r0, [r0, #12]
 8015c4c:	b160      	cbz	r0, 8015c68 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c4e:	b410      	push	{r4}
 8015c50:	e001      	b.n	8015c56 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015c52:	6800      	ldr	r0, [r0, #0]
 8015c54:	b128      	cbz	r0, 8015c62 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015c56:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015c5a:	4299      	cmp	r1, r3
 8015c5c:	bf08      	it	eq
 8015c5e:	4294      	cmpeq	r4, r2
 8015c60:	d1f7      	bne.n	8015c52 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c66:	4770      	bx	lr
 8015c68:	4770      	bx	lr
 8015c6a:	bf00      	nop

08015c6c <rclc_action_find_handle_by_result_request_sequence_number>:
 8015c6c:	b170      	cbz	r0, 8015c8c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c6e:	68c0      	ldr	r0, [r0, #12]
 8015c70:	b160      	cbz	r0, 8015c8c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c72:	b410      	push	{r4}
 8015c74:	e001      	b.n	8015c7a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015c76:	6800      	ldr	r0, [r0, #0]
 8015c78:	b128      	cbz	r0, 8015c86 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015c7a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015c7e:	4299      	cmp	r1, r3
 8015c80:	bf08      	it	eq
 8015c82:	4294      	cmpeq	r4, r2
 8015c84:	d1f7      	bne.n	8015c76 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c8a:	4770      	bx	lr
 8015c8c:	4770      	bx	lr
 8015c8e:	bf00      	nop

08015c90 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015c90:	b170      	cbz	r0, 8015cb0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015c92:	68c0      	ldr	r0, [r0, #12]
 8015c94:	b160      	cbz	r0, 8015cb0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015c96:	b410      	push	{r4}
 8015c98:	e001      	b.n	8015c9e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015c9a:	6800      	ldr	r0, [r0, #0]
 8015c9c:	b128      	cbz	r0, 8015caa <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015c9e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015ca2:	4299      	cmp	r1, r3
 8015ca4:	bf08      	it	eq
 8015ca6:	4294      	cmpeq	r4, r2
 8015ca8:	d1f7      	bne.n	8015c9a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cae:	4770      	bx	lr
 8015cb0:	4770      	bx	lr
 8015cb2:	bf00      	nop

08015cb4 <rclc_action_find_first_handle_with_goal_response>:
 8015cb4:	b140      	cbz	r0, 8015cc8 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cb6:	68c0      	ldr	r0, [r0, #12]
 8015cb8:	b910      	cbnz	r0, 8015cc0 <rclc_action_find_first_handle_with_goal_response+0xc>
 8015cba:	e005      	b.n	8015cc8 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cbc:	6800      	ldr	r0, [r0, #0]
 8015cbe:	b118      	cbz	r0, 8015cc8 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cc0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d0f9      	beq.n	8015cbc <rclc_action_find_first_handle_with_goal_response+0x8>
 8015cc8:	4770      	bx	lr
 8015cca:	bf00      	nop

08015ccc <rclc_action_find_first_handle_with_result_response>:
 8015ccc:	b140      	cbz	r0, 8015ce0 <rclc_action_find_first_handle_with_result_response+0x14>
 8015cce:	68c0      	ldr	r0, [r0, #12]
 8015cd0:	b910      	cbnz	r0, 8015cd8 <rclc_action_find_first_handle_with_result_response+0xc>
 8015cd2:	e005      	b.n	8015ce0 <rclc_action_find_first_handle_with_result_response+0x14>
 8015cd4:	6800      	ldr	r0, [r0, #0]
 8015cd6:	b118      	cbz	r0, 8015ce0 <rclc_action_find_first_handle_with_result_response+0x14>
 8015cd8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d0f9      	beq.n	8015cd4 <rclc_action_find_first_handle_with_result_response+0x8>
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop

08015ce4 <rclc_action_server_response_goal_request>:
 8015ce4:	b198      	cbz	r0, 8015d0e <rclc_action_server_response_goal_request+0x2a>
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	460b      	mov	r3, r1
 8015cea:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015cee:	b510      	push	{r4, lr}
 8015cf0:	6844      	ldr	r4, [r0, #4]
 8015cf2:	b086      	sub	sp, #24
 8015cf4:	f104 0010 	add.w	r0, r4, #16
 8015cf8:	9205      	str	r2, [sp, #20]
 8015cfa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015cfe:	aa03      	add	r2, sp, #12
 8015d00:	f88d 300c 	strb.w	r3, [sp, #12]
 8015d04:	f7ff fd46 	bl	8015794 <rcl_action_send_goal_response>
 8015d08:	b918      	cbnz	r0, 8015d12 <rclc_action_server_response_goal_request+0x2e>
 8015d0a:	b006      	add	sp, #24
 8015d0c:	bd10      	pop	{r4, pc}
 8015d0e:	200b      	movs	r0, #11
 8015d10:	4770      	bx	lr
 8015d12:	9001      	str	r0, [sp, #4]
 8015d14:	f7f8 fd18 	bl	800e748 <rcutils_reset_error>
 8015d18:	9801      	ldr	r0, [sp, #4]
 8015d1a:	b006      	add	sp, #24
 8015d1c:	bd10      	pop	{r4, pc}
 8015d1e:	bf00      	nop

08015d20 <rclc_action_server_goal_cancel_accept>:
 8015d20:	b310      	cbz	r0, 8015d68 <rclc_action_server_goal_cancel_accept+0x48>
 8015d22:	b510      	push	{r4, lr}
 8015d24:	b090      	sub	sp, #64	@ 0x40
 8015d26:	4604      	mov	r4, r0
 8015d28:	a806      	add	r0, sp, #24
 8015d2a:	f7ff ff01 	bl	8015b30 <rcl_action_get_zero_initialized_cancel_response>
 8015d2e:	2300      	movs	r3, #0
 8015d30:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015d34:	46ec      	mov	ip, sp
 8015d36:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015d3a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015d3e:	f88d 3018 	strb.w	r3, [sp, #24]
 8015d42:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015d46:	f8cd d01c 	str.w	sp, [sp, #28]
 8015d4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d4e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015d70 <rclc_action_server_goal_cancel_accept+0x50>
 8015d52:	6860      	ldr	r0, [r4, #4]
 8015d54:	aa06      	add	r2, sp, #24
 8015d56:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015d5a:	3010      	adds	r0, #16
 8015d5c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015d60:	f7ff fdc8 	bl	80158f4 <rcl_action_send_cancel_response>
 8015d64:	b010      	add	sp, #64	@ 0x40
 8015d66:	bd10      	pop	{r4, pc}
 8015d68:	200b      	movs	r0, #11
 8015d6a:	4770      	bx	lr
 8015d6c:	f3af 8000 	nop.w
 8015d70:	00000001 	.word	0x00000001
 8015d74:	00000001 	.word	0x00000001

08015d78 <rclc_action_server_goal_cancel_reject>:
 8015d78:	b082      	sub	sp, #8
 8015d7a:	b530      	push	{r4, r5, lr}
 8015d7c:	b08b      	sub	sp, #44	@ 0x2c
 8015d7e:	ac0e      	add	r4, sp, #56	@ 0x38
 8015d80:	e884 000c 	stmia.w	r4, {r2, r3}
 8015d84:	b188      	cbz	r0, 8015daa <rclc_action_server_goal_cancel_reject+0x32>
 8015d86:	4604      	mov	r4, r0
 8015d88:	a801      	add	r0, sp, #4
 8015d8a:	460d      	mov	r5, r1
 8015d8c:	f7ff fed0 	bl	8015b30 <rcl_action_get_zero_initialized_cancel_response>
 8015d90:	aa01      	add	r2, sp, #4
 8015d92:	a90e      	add	r1, sp, #56	@ 0x38
 8015d94:	f104 0010 	add.w	r0, r4, #16
 8015d98:	f88d 5004 	strb.w	r5, [sp, #4]
 8015d9c:	f7ff fdaa 	bl	80158f4 <rcl_action_send_cancel_response>
 8015da0:	b00b      	add	sp, #44	@ 0x2c
 8015da2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015da6:	b002      	add	sp, #8
 8015da8:	4770      	bx	lr
 8015daa:	200b      	movs	r0, #11
 8015dac:	b00b      	add	sp, #44	@ 0x2c
 8015dae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015db2:	b002      	add	sp, #8
 8015db4:	4770      	bx	lr
 8015db6:	bf00      	nop

08015db8 <__atomic_load_8>:
 8015db8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015dbc:	4a16      	ldr	r2, [pc, #88]	@ (8015e18 <__atomic_load_8+0x60>)
 8015dbe:	4b17      	ldr	r3, [pc, #92]	@ (8015e1c <__atomic_load_8+0x64>)
 8015dc0:	f04f 0c01 	mov.w	ip, #1
 8015dc4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015dc8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015dcc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015dd0:	fb02 f101 	mul.w	r1, r2, r1
 8015dd4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015dd8:	fba3 2301 	umull	r2, r3, r3, r1
 8015ddc:	091b      	lsrs	r3, r3, #4
 8015dde:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015de2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015de6:	b4f0      	push	{r4, r5, r6, r7}
 8015de8:	1ac9      	subs	r1, r1, r3
 8015dea:	4d0d      	ldr	r5, [pc, #52]	@ (8015e20 <__atomic_load_8+0x68>)
 8015dec:	194a      	adds	r2, r1, r5
 8015dee:	e8d2 3f4f 	ldrexb	r3, [r2]
 8015df2:	e8c2 cf44 	strexb	r4, ip, [r2]
 8015df6:	2c00      	cmp	r4, #0
 8015df8:	d1f9      	bne.n	8015dee <__atomic_load_8+0x36>
 8015dfa:	b2dc      	uxtb	r4, r3
 8015dfc:	f3bf 8f5b 	dmb	ish
 8015e00:	2c00      	cmp	r4, #0
 8015e02:	d1f4      	bne.n	8015dee <__atomic_load_8+0x36>
 8015e04:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015e08:	f3bf 8f5b 	dmb	ish
 8015e0c:	546b      	strb	r3, [r5, r1]
 8015e0e:	4630      	mov	r0, r6
 8015e10:	4639      	mov	r1, r7
 8015e12:	bcf0      	pop	{r4, r5, r6, r7}
 8015e14:	4770      	bx	lr
 8015e16:	bf00      	nop
 8015e18:	27d4eb2d 	.word	0x27d4eb2d
 8015e1c:	b21642c9 	.word	0xb21642c9
 8015e20:	2400df24 	.word	0x2400df24

08015e24 <__atomic_store_8>:
 8015e24:	b570      	push	{r4, r5, r6, lr}
 8015e26:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8015e2a:	4c16      	ldr	r4, [pc, #88]	@ (8015e84 <__atomic_store_8+0x60>)
 8015e2c:	4916      	ldr	r1, [pc, #88]	@ (8015e88 <__atomic_store_8+0x64>)
 8015e2e:	f04f 0501 	mov.w	r5, #1
 8015e32:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8015e36:	4e15      	ldr	r6, [pc, #84]	@ (8015e8c <__atomic_store_8+0x68>)
 8015e38:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8015e3c:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8015e40:	fb04 fe0e 	mul.w	lr, r4, lr
 8015e44:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8015e48:	fba1 410e 	umull	r4, r1, r1, lr
 8015e4c:	0909      	lsrs	r1, r1, #4
 8015e4e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8015e52:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8015e56:	ebae 0e01 	sub.w	lr, lr, r1
 8015e5a:	eb0e 0c06 	add.w	ip, lr, r6
 8015e5e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8015e62:	e8cc 5f44 	strexb	r4, r5, [ip]
 8015e66:	2c00      	cmp	r4, #0
 8015e68:	d1f9      	bne.n	8015e5e <__atomic_store_8+0x3a>
 8015e6a:	b2cc      	uxtb	r4, r1
 8015e6c:	f3bf 8f5b 	dmb	ish
 8015e70:	2c00      	cmp	r4, #0
 8015e72:	d1f4      	bne.n	8015e5e <__atomic_store_8+0x3a>
 8015e74:	e9c0 2300 	strd	r2, r3, [r0]
 8015e78:	f3bf 8f5b 	dmb	ish
 8015e7c:	f806 100e 	strb.w	r1, [r6, lr]
 8015e80:	bd70      	pop	{r4, r5, r6, pc}
 8015e82:	bf00      	nop
 8015e84:	27d4eb2d 	.word	0x27d4eb2d
 8015e88:	b21642c9 	.word	0xb21642c9
 8015e8c:	2400df24 	.word	0x2400df24

08015e90 <__atomic_exchange_8>:
 8015e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e92:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8015e96:	4c18      	ldr	r4, [pc, #96]	@ (8015ef8 <__atomic_exchange_8+0x68>)
 8015e98:	4918      	ldr	r1, [pc, #96]	@ (8015efc <__atomic_exchange_8+0x6c>)
 8015e9a:	4606      	mov	r6, r0
 8015e9c:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8015ea0:	4f17      	ldr	r7, [pc, #92]	@ (8015f00 <__atomic_exchange_8+0x70>)
 8015ea2:	f04f 0501 	mov.w	r5, #1
 8015ea6:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8015eaa:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8015eae:	fb04 fe0e 	mul.w	lr, r4, lr
 8015eb2:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8015eb6:	fba1 010e 	umull	r0, r1, r1, lr
 8015eba:	0909      	lsrs	r1, r1, #4
 8015ebc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8015ec0:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8015ec4:	ebae 0e01 	sub.w	lr, lr, r1
 8015ec8:	eb0e 0107 	add.w	r1, lr, r7
 8015ecc:	e8d1 cf4f 	ldrexb	ip, [r1]
 8015ed0:	e8c1 5f40 	strexb	r0, r5, [r1]
 8015ed4:	2800      	cmp	r0, #0
 8015ed6:	d1f9      	bne.n	8015ecc <__atomic_exchange_8+0x3c>
 8015ed8:	fa5f f48c 	uxtb.w	r4, ip
 8015edc:	f3bf 8f5b 	dmb	ish
 8015ee0:	2c00      	cmp	r4, #0
 8015ee2:	d1f3      	bne.n	8015ecc <__atomic_exchange_8+0x3c>
 8015ee4:	e9d6 0100 	ldrd	r0, r1, [r6]
 8015ee8:	e9c6 2300 	strd	r2, r3, [r6]
 8015eec:	f3bf 8f5b 	dmb	ish
 8015ef0:	f807 c00e 	strb.w	ip, [r7, lr]
 8015ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	27d4eb2d 	.word	0x27d4eb2d
 8015efc:	b21642c9 	.word	0xb21642c9
 8015f00:	2400df24 	.word	0x2400df24

08015f04 <rcutils_get_env>:
 8015f04:	b150      	cbz	r0, 8015f1c <rcutils_get_env+0x18>
 8015f06:	b510      	push	{r4, lr}
 8015f08:	460c      	mov	r4, r1
 8015f0a:	b909      	cbnz	r1, 8015f10 <rcutils_get_env+0xc>
 8015f0c:	4806      	ldr	r0, [pc, #24]	@ (8015f28 <rcutils_get_env+0x24>)
 8015f0e:	bd10      	pop	{r4, pc}
 8015f10:	f004 f9b2 	bl	801a278 <getenv>
 8015f14:	b120      	cbz	r0, 8015f20 <rcutils_get_env+0x1c>
 8015f16:	6020      	str	r0, [r4, #0]
 8015f18:	2000      	movs	r0, #0
 8015f1a:	bd10      	pop	{r4, pc}
 8015f1c:	4803      	ldr	r0, [pc, #12]	@ (8015f2c <rcutils_get_env+0x28>)
 8015f1e:	4770      	bx	lr
 8015f20:	4b03      	ldr	r3, [pc, #12]	@ (8015f30 <rcutils_get_env+0x2c>)
 8015f22:	6023      	str	r3, [r4, #0]
 8015f24:	e7f8      	b.n	8015f18 <rcutils_get_env+0x14>
 8015f26:	bf00      	nop
 8015f28:	0801bfb8 	.word	0x0801bfb8
 8015f2c:	0801bf9c 	.word	0x0801bf9c
 8015f30:	0801c490 	.word	0x0801c490

08015f34 <rcutils_format_string_limit>:
 8015f34:	b40f      	push	{r0, r1, r2, r3}
 8015f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f38:	b083      	sub	sp, #12
 8015f3a:	ac08      	add	r4, sp, #32
 8015f3c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015f3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f42:	b36e      	cbz	r6, 8015fa0 <rcutils_format_string_limit+0x6c>
 8015f44:	4620      	mov	r0, r4
 8015f46:	f7f8 fbd9 	bl	800e6fc <rcutils_allocator_is_valid>
 8015f4a:	b348      	cbz	r0, 8015fa0 <rcutils_format_string_limit+0x6c>
 8015f4c:	2100      	movs	r1, #0
 8015f4e:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015f50:	4632      	mov	r2, r6
 8015f52:	4608      	mov	r0, r1
 8015f54:	e9cd 3300 	strd	r3, r3, [sp]
 8015f58:	f000 f908 	bl	801616c <rcutils_vsnprintf>
 8015f5c:	1c43      	adds	r3, r0, #1
 8015f5e:	4605      	mov	r5, r0
 8015f60:	d01e      	beq.n	8015fa0 <rcutils_format_string_limit+0x6c>
 8015f62:	1c47      	adds	r7, r0, #1
 8015f64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f66:	429f      	cmp	r7, r3
 8015f68:	d901      	bls.n	8015f6e <rcutils_format_string_limit+0x3a>
 8015f6a:	1e5d      	subs	r5, r3, #1
 8015f6c:	461f      	mov	r7, r3
 8015f6e:	9b08      	ldr	r3, [sp, #32]
 8015f70:	4638      	mov	r0, r7
 8015f72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f74:	4798      	blx	r3
 8015f76:	4604      	mov	r4, r0
 8015f78:	b190      	cbz	r0, 8015fa0 <rcutils_format_string_limit+0x6c>
 8015f7a:	4632      	mov	r2, r6
 8015f7c:	4639      	mov	r1, r7
 8015f7e:	9b01      	ldr	r3, [sp, #4]
 8015f80:	f000 f8f4 	bl	801616c <rcutils_vsnprintf>
 8015f84:	2800      	cmp	r0, #0
 8015f86:	db07      	blt.n	8015f98 <rcutils_format_string_limit+0x64>
 8015f88:	2300      	movs	r3, #0
 8015f8a:	5563      	strb	r3, [r4, r5]
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	b003      	add	sp, #12
 8015f90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f94:	b004      	add	sp, #16
 8015f96:	4770      	bx	lr
 8015f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f9e:	4798      	blx	r3
 8015fa0:	2400      	movs	r4, #0
 8015fa2:	e7f3      	b.n	8015f8c <rcutils_format_string_limit+0x58>

08015fa4 <rcutils_repl_str>:
 8015fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fa8:	b089      	sub	sp, #36	@ 0x24
 8015faa:	4680      	mov	r8, r0
 8015fac:	4699      	mov	r9, r3
 8015fae:	460c      	mov	r4, r1
 8015fb0:	9000      	str	r0, [sp, #0]
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015fb8:	f7f8 fba0 	bl	800e6fc <rcutils_allocator_is_valid>
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	f000 80a3 	beq.w	8016108 <rcutils_repl_str+0x164>
 8015fc2:	f04f 0a00 	mov.w	sl, #0
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	f7ea f9f2 	bl	80003b0 <strlen>
 8015fcc:	2610      	movs	r6, #16
 8015fce:	4657      	mov	r7, sl
 8015fd0:	4655      	mov	r5, sl
 8015fd2:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8015fd6:	9001      	str	r0, [sp, #4]
 8015fd8:	e01e      	b.n	8016018 <rcutils_repl_str+0x74>
 8015fda:	3501      	adds	r5, #1
 8015fdc:	45aa      	cmp	sl, r5
 8015fde:	d212      	bcs.n	8016006 <rcutils_repl_str+0x62>
 8015fe0:	44b2      	add	sl, r6
 8015fe2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015fe6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015fea:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8015fee:	4798      	blx	r3
 8015ff0:	2800      	cmp	r0, #0
 8015ff2:	f000 8086 	beq.w	8016102 <rcutils_repl_str+0x15e>
 8015ff6:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8015ffa:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8015ffe:	4607      	mov	r7, r0
 8016000:	bf28      	it	cs
 8016002:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8016006:	9a00      	ldr	r2, [sp, #0]
 8016008:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 801600c:	9901      	ldr	r1, [sp, #4]
 801600e:	1aa2      	subs	r2, r4, r2
 8016010:	eb04 0801 	add.w	r8, r4, r1
 8016014:	f843 2c04 	str.w	r2, [r3, #-4]
 8016018:	9902      	ldr	r1, [sp, #8]
 801601a:	4640      	mov	r0, r8
 801601c:	f004 fe28 	bl	801ac70 <strstr>
 8016020:	4604      	mov	r4, r0
 8016022:	465a      	mov	r2, fp
 8016024:	4638      	mov	r0, r7
 8016026:	2c00      	cmp	r4, #0
 8016028:	d1d7      	bne.n	8015fda <rcutils_repl_str+0x36>
 801602a:	4640      	mov	r0, r8
 801602c:	f7ea f9c0 	bl	80003b0 <strlen>
 8016030:	9b00      	ldr	r3, [sp, #0]
 8016032:	eba8 0803 	sub.w	r8, r8, r3
 8016036:	eb08 0300 	add.w	r3, r8, r0
 801603a:	f8d9 8000 	ldr.w	r8, [r9]
 801603e:	9304      	str	r3, [sp, #16]
 8016040:	2d00      	cmp	r5, #0
 8016042:	d03f      	beq.n	80160c4 <rcutils_repl_str+0x120>
 8016044:	9803      	ldr	r0, [sp, #12]
 8016046:	f7ea f9b3 	bl	80003b0 <strlen>
 801604a:	4606      	mov	r6, r0
 801604c:	9801      	ldr	r0, [sp, #4]
 801604e:	4659      	mov	r1, fp
 8016050:	9a04      	ldr	r2, [sp, #16]
 8016052:	1a33      	subs	r3, r6, r0
 8016054:	fb05 2a03 	mla	sl, r5, r3, r2
 8016058:	f10a 0001 	add.w	r0, sl, #1
 801605c:	47c0      	blx	r8
 801605e:	4683      	mov	fp, r0
 8016060:	2800      	cmp	r0, #0
 8016062:	d04e      	beq.n	8016102 <rcutils_repl_str+0x15e>
 8016064:	683a      	ldr	r2, [r7, #0]
 8016066:	46a8      	mov	r8, r5
 8016068:	9900      	ldr	r1, [sp, #0]
 801606a:	f004 ff00 	bl	801ae6e <memcpy>
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	1e6a      	subs	r2, r5, #1
 8016072:	4625      	mov	r5, r4
 8016074:	445b      	add	r3, fp
 8016076:	9706      	str	r7, [sp, #24]
 8016078:	9202      	str	r2, [sp, #8]
 801607a:	461c      	mov	r4, r3
 801607c:	f8cd 901c 	str.w	r9, [sp, #28]
 8016080:	4632      	mov	r2, r6
 8016082:	9903      	ldr	r1, [sp, #12]
 8016084:	4620      	mov	r0, r4
 8016086:	4434      	add	r4, r6
 8016088:	f004 fef1 	bl	801ae6e <memcpy>
 801608c:	9b01      	ldr	r3, [sp, #4]
 801608e:	f857 2b04 	ldr.w	r2, [r7], #4
 8016092:	4620      	mov	r0, r4
 8016094:	eb02 0c03 	add.w	ip, r2, r3
 8016098:	9b00      	ldr	r3, [sp, #0]
 801609a:	eb03 010c 	add.w	r1, r3, ip
 801609e:	9b02      	ldr	r3, [sp, #8]
 80160a0:	429d      	cmp	r5, r3
 80160a2:	d022      	beq.n	80160ea <rcutils_repl_str+0x146>
 80160a4:	683a      	ldr	r2, [r7, #0]
 80160a6:	3501      	adds	r5, #1
 80160a8:	eba2 090c 	sub.w	r9, r2, ip
 80160ac:	464a      	mov	r2, r9
 80160ae:	444c      	add	r4, r9
 80160b0:	f004 fedd 	bl	801ae6e <memcpy>
 80160b4:	45a8      	cmp	r8, r5
 80160b6:	d1e3      	bne.n	8016080 <rcutils_repl_str+0xdc>
 80160b8:	2300      	movs	r3, #0
 80160ba:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 80160be:	f80b 300a 	strb.w	r3, [fp, sl]
 80160c2:	e008      	b.n	80160d6 <rcutils_repl_str+0x132>
 80160c4:	4618      	mov	r0, r3
 80160c6:	4659      	mov	r1, fp
 80160c8:	3001      	adds	r0, #1
 80160ca:	47c0      	blx	r8
 80160cc:	4683      	mov	fp, r0
 80160ce:	b110      	cbz	r0, 80160d6 <rcutils_repl_str+0x132>
 80160d0:	9900      	ldr	r1, [sp, #0]
 80160d2:	f004 fec4 	bl	801ae5e <strcpy>
 80160d6:	4638      	mov	r0, r7
 80160d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80160dc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80160e0:	4798      	blx	r3
 80160e2:	4658      	mov	r0, fp
 80160e4:	b009      	add	sp, #36	@ 0x24
 80160e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160ea:	9b04      	ldr	r3, [sp, #16]
 80160ec:	3501      	adds	r5, #1
 80160ee:	eba3 020c 	sub.w	r2, r3, ip
 80160f2:	9205      	str	r2, [sp, #20]
 80160f4:	f004 febb 	bl	801ae6e <memcpy>
 80160f8:	9a05      	ldr	r2, [sp, #20]
 80160fa:	45a8      	cmp	r8, r5
 80160fc:	4414      	add	r4, r2
 80160fe:	d1bf      	bne.n	8016080 <rcutils_repl_str+0xdc>
 8016100:	e7da      	b.n	80160b8 <rcutils_repl_str+0x114>
 8016102:	f04f 0b00 	mov.w	fp, #0
 8016106:	e7e6      	b.n	80160d6 <rcutils_repl_str+0x132>
 8016108:	4683      	mov	fp, r0
 801610a:	4658      	mov	r0, fp
 801610c:	b009      	add	sp, #36	@ 0x24
 801610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016112:	bf00      	nop

08016114 <rcutils_snprintf>:
 8016114:	b40c      	push	{r2, r3}
 8016116:	b530      	push	{r4, r5, lr}
 8016118:	b083      	sub	sp, #12
 801611a:	ab06      	add	r3, sp, #24
 801611c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016120:	9301      	str	r3, [sp, #4]
 8016122:	b1e2      	cbz	r2, 801615e <rcutils_snprintf+0x4a>
 8016124:	fab0 f480 	clz	r4, r0
 8016128:	fab1 f581 	clz	r5, r1
 801612c:	ea50 0c01 	orrs.w	ip, r0, r1
 8016130:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8016134:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8016138:	d008      	beq.n	801614c <rcutils_snprintf+0x38>
 801613a:	b984      	cbnz	r4, 801615e <rcutils_snprintf+0x4a>
 801613c:	b97d      	cbnz	r5, 801615e <rcutils_snprintf+0x4a>
 801613e:	f004 fc91 	bl	801aa64 <vsniprintf>
 8016142:	b003      	add	sp, #12
 8016144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016148:	b002      	add	sp, #8
 801614a:	4770      	bx	lr
 801614c:	4661      	mov	r1, ip
 801614e:	4660      	mov	r0, ip
 8016150:	f004 fc88 	bl	801aa64 <vsniprintf>
 8016154:	b003      	add	sp, #12
 8016156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801615a:	b002      	add	sp, #8
 801615c:	4770      	bx	lr
 801615e:	f004 fe51 	bl	801ae04 <__errno>
 8016162:	2316      	movs	r3, #22
 8016164:	6003      	str	r3, [r0, #0]
 8016166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801616a:	e7ea      	b.n	8016142 <rcutils_snprintf+0x2e>

0801616c <rcutils_vsnprintf>:
 801616c:	b570      	push	{r4, r5, r6, lr}
 801616e:	b1b2      	cbz	r2, 801619e <rcutils_vsnprintf+0x32>
 8016170:	fab0 f480 	clz	r4, r0
 8016174:	fab1 f581 	clz	r5, r1
 8016178:	ea50 0c01 	orrs.w	ip, r0, r1
 801617c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8016180:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8016184:	d005      	beq.n	8016192 <rcutils_vsnprintf+0x26>
 8016186:	b954      	cbnz	r4, 801619e <rcutils_vsnprintf+0x32>
 8016188:	b94d      	cbnz	r5, 801619e <rcutils_vsnprintf+0x32>
 801618a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801618e:	f004 bc69 	b.w	801aa64 <vsniprintf>
 8016192:	4661      	mov	r1, ip
 8016194:	4660      	mov	r0, ip
 8016196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801619a:	f004 bc63 	b.w	801aa64 <vsniprintf>
 801619e:	f004 fe31 	bl	801ae04 <__errno>
 80161a2:	2316      	movs	r3, #22
 80161a4:	6003      	str	r3, [r0, #0]
 80161a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161aa:	bd70      	pop	{r4, r5, r6, pc}

080161ac <rcutils_strdup>:
 80161ac:	b084      	sub	sp, #16
 80161ae:	b570      	push	{r4, r5, r6, lr}
 80161b0:	b086      	sub	sp, #24
 80161b2:	4604      	mov	r4, r0
 80161b4:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 80161b8:	f10d 0e04 	add.w	lr, sp, #4
 80161bc:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80161c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80161c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80161c8:	f8dc 3000 	ldr.w	r3, [ip]
 80161cc:	f8ce 3000 	str.w	r3, [lr]
 80161d0:	b304      	cbz	r4, 8016214 <rcutils_strdup+0x68>
 80161d2:	a801      	add	r0, sp, #4
 80161d4:	f7f8 fa92 	bl	800e6fc <rcutils_allocator_is_valid>
 80161d8:	b1e0      	cbz	r0, 8016214 <rcutils_strdup+0x68>
 80161da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80161de:	2100      	movs	r1, #0
 80161e0:	4620      	mov	r0, r4
 80161e2:	f7ea f895 	bl	8000310 <memchr>
 80161e6:	b190      	cbz	r0, 801620e <rcutils_strdup+0x62>
 80161e8:	1b06      	subs	r6, r0, r4
 80161ea:	1c70      	adds	r0, r6, #1
 80161ec:	9b01      	ldr	r3, [sp, #4]
 80161ee:	9905      	ldr	r1, [sp, #20]
 80161f0:	4798      	blx	r3
 80161f2:	4605      	mov	r5, r0
 80161f4:	b128      	cbz	r0, 8016202 <rcutils_strdup+0x56>
 80161f6:	4632      	mov	r2, r6
 80161f8:	4621      	mov	r1, r4
 80161fa:	f004 fe38 	bl	801ae6e <memcpy>
 80161fe:	2300      	movs	r3, #0
 8016200:	55ab      	strb	r3, [r5, r6]
 8016202:	4628      	mov	r0, r5
 8016204:	b006      	add	sp, #24
 8016206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801620a:	b004      	add	sp, #16
 801620c:	4770      	bx	lr
 801620e:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016212:	e7eb      	b.n	80161ec <rcutils_strdup+0x40>
 8016214:	2500      	movs	r5, #0
 8016216:	e7f4      	b.n	8016202 <rcutils_strdup+0x56>

08016218 <rcutils_strndup>:
 8016218:	b082      	sub	sp, #8
 801621a:	b570      	push	{r4, r5, r6, lr}
 801621c:	ac04      	add	r4, sp, #16
 801621e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016222:	b1e8      	cbz	r0, 8016260 <rcutils_strndup+0x48>
 8016224:	4605      	mov	r5, r0
 8016226:	a804      	add	r0, sp, #16
 8016228:	460c      	mov	r4, r1
 801622a:	f7f8 fa67 	bl	800e6fc <rcutils_allocator_is_valid>
 801622e:	b1b8      	cbz	r0, 8016260 <rcutils_strndup+0x48>
 8016230:	4622      	mov	r2, r4
 8016232:	2100      	movs	r1, #0
 8016234:	4628      	mov	r0, r5
 8016236:	f7ea f86b 	bl	8000310 <memchr>
 801623a:	b100      	cbz	r0, 801623e <rcutils_strndup+0x26>
 801623c:	1b44      	subs	r4, r0, r5
 801623e:	9b04      	ldr	r3, [sp, #16]
 8016240:	1c60      	adds	r0, r4, #1
 8016242:	9908      	ldr	r1, [sp, #32]
 8016244:	4798      	blx	r3
 8016246:	4606      	mov	r6, r0
 8016248:	b128      	cbz	r0, 8016256 <rcutils_strndup+0x3e>
 801624a:	4622      	mov	r2, r4
 801624c:	4629      	mov	r1, r5
 801624e:	f004 fe0e 	bl	801ae6e <memcpy>
 8016252:	2300      	movs	r3, #0
 8016254:	5533      	strb	r3, [r6, r4]
 8016256:	4630      	mov	r0, r6
 8016258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801625c:	b002      	add	sp, #8
 801625e:	4770      	bx	lr
 8016260:	2600      	movs	r6, #0
 8016262:	4630      	mov	r0, r6
 8016264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016268:	b002      	add	sp, #8
 801626a:	4770      	bx	lr

0801626c <rcutils_get_zero_initialized_string_map>:
 801626c:	2000      	movs	r0, #0
 801626e:	4b01      	ldr	r3, [pc, #4]	@ (8016274 <rcutils_get_zero_initialized_string_map+0x8>)
 8016270:	6018      	str	r0, [r3, #0]
 8016272:	4770      	bx	lr
 8016274:	2400df3c 	.word	0x2400df3c

08016278 <rcutils_string_map_reserve>:
 8016278:	2800      	cmp	r0, #0
 801627a:	d04e      	beq.n	801631a <rcutils_string_map_reserve+0xa2>
 801627c:	6803      	ldr	r3, [r0, #0]
 801627e:	b530      	push	{r4, r5, lr}
 8016280:	4604      	mov	r4, r0
 8016282:	b087      	sub	sp, #28
 8016284:	2b00      	cmp	r3, #0
 8016286:	d043      	beq.n	8016310 <rcutils_string_map_reserve+0x98>
 8016288:	f103 0c0c 	add.w	ip, r3, #12
 801628c:	460d      	mov	r5, r1
 801628e:	f10d 0e04 	add.w	lr, sp, #4
 8016292:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016296:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801629a:	f8dc 3000 	ldr.w	r3, [ip]
 801629e:	a801      	add	r0, sp, #4
 80162a0:	f8ce 3000 	str.w	r3, [lr]
 80162a4:	f7f8 fa2a 	bl	800e6fc <rcutils_allocator_is_valid>
 80162a8:	b308      	cbz	r0, 80162ee <rcutils_string_map_reserve+0x76>
 80162aa:	6823      	ldr	r3, [r4, #0]
 80162ac:	6899      	ldr	r1, [r3, #8]
 80162ae:	42a9      	cmp	r1, r5
 80162b0:	d829      	bhi.n	8016306 <rcutils_string_map_reserve+0x8e>
 80162b2:	685a      	ldr	r2, [r3, #4]
 80162b4:	42aa      	cmp	r2, r5
 80162b6:	d024      	beq.n	8016302 <rcutils_string_map_reserve+0x8a>
 80162b8:	b1e5      	cbz	r5, 80162f4 <rcutils_string_map_reserve+0x7c>
 80162ba:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 80162be:	d22a      	bcs.n	8016316 <rcutils_string_map_reserve+0x9e>
 80162c0:	6818      	ldr	r0, [r3, #0]
 80162c2:	00e9      	lsls	r1, r5, #3
 80162c4:	9a05      	ldr	r2, [sp, #20]
 80162c6:	9b03      	ldr	r3, [sp, #12]
 80162c8:	4798      	blx	r3
 80162ca:	b320      	cbz	r0, 8016316 <rcutils_string_map_reserve+0x9e>
 80162cc:	6824      	ldr	r4, [r4, #0]
 80162ce:	6861      	ldr	r1, [r4, #4]
 80162d0:	6020      	str	r0, [r4, #0]
 80162d2:	42a9      	cmp	r1, r5
 80162d4:	d214      	bcs.n	8016300 <rcutils_string_map_reserve+0x88>
 80162d6:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80162da:	1a69      	subs	r1, r5, r1
 80162dc:	2200      	movs	r2, #0
 80162de:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80162e2:	e9c3 2200 	strd	r2, r2, [r3]
 80162e6:	3308      	adds	r3, #8
 80162e8:	428b      	cmp	r3, r1
 80162ea:	d1fa      	bne.n	80162e2 <rcutils_string_map_reserve+0x6a>
 80162ec:	e008      	b.n	8016300 <rcutils_string_map_reserve+0x88>
 80162ee:	200b      	movs	r0, #11
 80162f0:	b007      	add	sp, #28
 80162f2:	bd30      	pop	{r4, r5, pc}
 80162f4:	9a02      	ldr	r2, [sp, #8]
 80162f6:	9905      	ldr	r1, [sp, #20]
 80162f8:	6818      	ldr	r0, [r3, #0]
 80162fa:	4790      	blx	r2
 80162fc:	6824      	ldr	r4, [r4, #0]
 80162fe:	6025      	str	r5, [r4, #0]
 8016300:	6065      	str	r5, [r4, #4]
 8016302:	2000      	movs	r0, #0
 8016304:	e7f4      	b.n	80162f0 <rcutils_string_map_reserve+0x78>
 8016306:	4620      	mov	r0, r4
 8016308:	f7ff ffb6 	bl	8016278 <rcutils_string_map_reserve>
 801630c:	b007      	add	sp, #28
 801630e:	bd30      	pop	{r4, r5, pc}
 8016310:	201f      	movs	r0, #31
 8016312:	b007      	add	sp, #28
 8016314:	bd30      	pop	{r4, r5, pc}
 8016316:	200a      	movs	r0, #10
 8016318:	e7ea      	b.n	80162f0 <rcutils_string_map_reserve+0x78>
 801631a:	200b      	movs	r0, #11
 801631c:	4770      	bx	lr
 801631e:	bf00      	nop

08016320 <rcutils_string_map_init>:
 8016320:	b082      	sub	sp, #8
 8016322:	b570      	push	{r4, r5, r6, lr}
 8016324:	ac04      	add	r4, sp, #16
 8016326:	e884 000c 	stmia.w	r4, {r2, r3}
 801632a:	b378      	cbz	r0, 801638c <rcutils_string_map_init+0x6c>
 801632c:	6806      	ldr	r6, [r0, #0]
 801632e:	4604      	mov	r4, r0
 8016330:	b12e      	cbz	r6, 801633e <rcutils_string_map_init+0x1e>
 8016332:	251e      	movs	r5, #30
 8016334:	4628      	mov	r0, r5
 8016336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801633a:	b002      	add	sp, #8
 801633c:	4770      	bx	lr
 801633e:	a804      	add	r0, sp, #16
 8016340:	460d      	mov	r5, r1
 8016342:	f7f8 f9db 	bl	800e6fc <rcutils_allocator_is_valid>
 8016346:	b308      	cbz	r0, 801638c <rcutils_string_map_init+0x6c>
 8016348:	9b04      	ldr	r3, [sp, #16]
 801634a:	2020      	movs	r0, #32
 801634c:	9908      	ldr	r1, [sp, #32]
 801634e:	4798      	blx	r3
 8016350:	6020      	str	r0, [r4, #0]
 8016352:	b308      	cbz	r0, 8016398 <rcutils_string_map_init+0x78>
 8016354:	f10d 0e10 	add.w	lr, sp, #16
 8016358:	6086      	str	r6, [r0, #8]
 801635a:	f100 0c0c 	add.w	ip, r0, #12
 801635e:	e9c0 6600 	strd	r6, r6, [r0]
 8016362:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016366:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801636a:	f8de 3000 	ldr.w	r3, [lr]
 801636e:	4629      	mov	r1, r5
 8016370:	4620      	mov	r0, r4
 8016372:	f8cc 3000 	str.w	r3, [ip]
 8016376:	f7ff ff7f 	bl	8016278 <rcutils_string_map_reserve>
 801637a:	4605      	mov	r5, r0
 801637c:	2800      	cmp	r0, #0
 801637e:	d0d9      	beq.n	8016334 <rcutils_string_map_init+0x14>
 8016380:	9b05      	ldr	r3, [sp, #20]
 8016382:	9908      	ldr	r1, [sp, #32]
 8016384:	6820      	ldr	r0, [r4, #0]
 8016386:	4798      	blx	r3
 8016388:	6026      	str	r6, [r4, #0]
 801638a:	e7d3      	b.n	8016334 <rcutils_string_map_init+0x14>
 801638c:	250b      	movs	r5, #11
 801638e:	4628      	mov	r0, r5
 8016390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016394:	b002      	add	sp, #8
 8016396:	4770      	bx	lr
 8016398:	250a      	movs	r5, #10
 801639a:	e7cb      	b.n	8016334 <rcutils_string_map_init+0x14>

0801639c <rcutils_string_map_fini>:
 801639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163a0:	b086      	sub	sp, #24
 80163a2:	2800      	cmp	r0, #0
 80163a4:	d04f      	beq.n	8016446 <rcutils_string_map_fini+0xaa>
 80163a6:	6805      	ldr	r5, [r0, #0]
 80163a8:	4606      	mov	r6, r0
 80163aa:	2d00      	cmp	r5, #0
 80163ac:	d046      	beq.n	801643c <rcutils_string_map_fini+0xa0>
 80163ae:	686b      	ldr	r3, [r5, #4]
 80163b0:	b353      	cbz	r3, 8016408 <rcutils_string_map_fini+0x6c>
 80163b2:	2400      	movs	r4, #0
 80163b4:	682a      	ldr	r2, [r5, #0]
 80163b6:	4627      	mov	r7, r4
 80163b8:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80163bc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80163c0:	b1f8      	cbz	r0, 8016402 <rcutils_string_map_fini+0x66>
 80163c2:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 80163c6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80163ca:	4651      	mov	r1, sl
 80163cc:	47c8      	blx	r9
 80163ce:	682b      	ldr	r3, [r5, #0]
 80163d0:	4651      	mov	r1, sl
 80163d2:	eb03 0208 	add.w	r2, r3, r8
 80163d6:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 80163da:	3401      	adds	r4, #1
 80163dc:	6850      	ldr	r0, [r2, #4]
 80163de:	47c8      	blx	r9
 80163e0:	68ab      	ldr	r3, [r5, #8]
 80163e2:	682a      	ldr	r2, [r5, #0]
 80163e4:	3b01      	subs	r3, #1
 80163e6:	4442      	add	r2, r8
 80163e8:	6057      	str	r7, [r2, #4]
 80163ea:	60ab      	str	r3, [r5, #8]
 80163ec:	6835      	ldr	r5, [r6, #0]
 80163ee:	686b      	ldr	r3, [r5, #4]
 80163f0:	429c      	cmp	r4, r3
 80163f2:	d209      	bcs.n	8016408 <rcutils_string_map_fini+0x6c>
 80163f4:	682a      	ldr	r2, [r5, #0]
 80163f6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80163fa:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 80163fe:	2800      	cmp	r0, #0
 8016400:	d1df      	bne.n	80163c2 <rcutils_string_map_fini+0x26>
 8016402:	3401      	adds	r4, #1
 8016404:	42a3      	cmp	r3, r4
 8016406:	d8d7      	bhi.n	80163b8 <rcutils_string_map_fini+0x1c>
 8016408:	2100      	movs	r1, #0
 801640a:	4630      	mov	r0, r6
 801640c:	f7ff ff34 	bl	8016278 <rcutils_string_map_reserve>
 8016410:	4604      	mov	r4, r0
 8016412:	b118      	cbz	r0, 801641c <rcutils_string_map_fini+0x80>
 8016414:	4620      	mov	r0, r4
 8016416:	b006      	add	sp, #24
 8016418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801641c:	6835      	ldr	r5, [r6, #0]
 801641e:	af01      	add	r7, sp, #4
 8016420:	350c      	adds	r5, #12
 8016422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016424:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016426:	682b      	ldr	r3, [r5, #0]
 8016428:	a801      	add	r0, sp, #4
 801642a:	603b      	str	r3, [r7, #0]
 801642c:	f7f8 f966 	bl	800e6fc <rcutils_allocator_is_valid>
 8016430:	b148      	cbz	r0, 8016446 <rcutils_string_map_fini+0xaa>
 8016432:	9b02      	ldr	r3, [sp, #8]
 8016434:	9905      	ldr	r1, [sp, #20]
 8016436:	6830      	ldr	r0, [r6, #0]
 8016438:	4798      	blx	r3
 801643a:	6034      	str	r4, [r6, #0]
 801643c:	2400      	movs	r4, #0
 801643e:	4620      	mov	r0, r4
 8016440:	b006      	add	sp, #24
 8016442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016446:	240b      	movs	r4, #11
 8016448:	4620      	mov	r0, r4
 801644a:	b006      	add	sp, #24
 801644c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016450 <rcutils_string_map_getn>:
 8016450:	b338      	cbz	r0, 80164a2 <rcutils_string_map_getn+0x52>
 8016452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016456:	460f      	mov	r7, r1
 8016458:	6803      	ldr	r3, [r0, #0]
 801645a:	b1c9      	cbz	r1, 8016490 <rcutils_string_map_getn+0x40>
 801645c:	fab3 f483 	clz	r4, r3
 8016460:	0964      	lsrs	r4, r4, #5
 8016462:	b1ab      	cbz	r3, 8016490 <rcutils_string_map_getn+0x40>
 8016464:	4690      	mov	r8, r2
 8016466:	e9d3 9600 	ldrd	r9, r6, [r3]
 801646a:	b18e      	cbz	r6, 8016490 <rcutils_string_map_getn+0x40>
 801646c:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8016470:	4628      	mov	r0, r5
 8016472:	b155      	cbz	r5, 801648a <rcutils_string_map_getn+0x3a>
 8016474:	f7e9 ff9c 	bl	80003b0 <strlen>
 8016478:	4602      	mov	r2, r0
 801647a:	4629      	mov	r1, r5
 801647c:	4638      	mov	r0, r7
 801647e:	4542      	cmp	r2, r8
 8016480:	bf38      	it	cc
 8016482:	4642      	movcc	r2, r8
 8016484:	f004 fbcf 	bl	801ac26 <strncmp>
 8016488:	b128      	cbz	r0, 8016496 <rcutils_string_map_getn+0x46>
 801648a:	3401      	adds	r4, #1
 801648c:	42a6      	cmp	r6, r4
 801648e:	d1ed      	bne.n	801646c <rcutils_string_map_getn+0x1c>
 8016490:	2000      	movs	r0, #0
 8016492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016496:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 801649a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801649e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164a2:	4770      	bx	lr

080164a4 <rmw_get_zero_initialized_context>:
 80164a4:	b530      	push	{r4, r5, lr}
 80164a6:	b097      	sub	sp, #92	@ 0x5c
 80164a8:	4604      	mov	r4, r0
 80164aa:	2500      	movs	r5, #0
 80164ac:	4668      	mov	r0, sp
 80164ae:	f000 f811 	bl	80164d4 <rmw_get_zero_initialized_init_options>
 80164b2:	2300      	movs	r3, #0
 80164b4:	2200      	movs	r2, #0
 80164b6:	4669      	mov	r1, sp
 80164b8:	f104 0010 	add.w	r0, r4, #16
 80164bc:	60a5      	str	r5, [r4, #8]
 80164be:	e9c4 2300 	strd	r2, r3, [r4]
 80164c2:	2258      	movs	r2, #88	@ 0x58
 80164c4:	f004 fcd3 	bl	801ae6e <memcpy>
 80164c8:	4620      	mov	r0, r4
 80164ca:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 80164ce:	b017      	add	sp, #92	@ 0x5c
 80164d0:	bd30      	pop	{r4, r5, pc}
 80164d2:	bf00      	nop

080164d4 <rmw_get_zero_initialized_init_options>:
 80164d4:	b530      	push	{r4, r5, lr}
 80164d6:	b08b      	sub	sp, #44	@ 0x2c
 80164d8:	4604      	mov	r4, r0
 80164da:	466d      	mov	r5, sp
 80164dc:	4628      	mov	r0, r5
 80164de:	f000 f821 	bl	8016524 <rmw_get_default_security_options>
 80164e2:	a802      	add	r0, sp, #8
 80164e4:	f003 fce2 	bl	8019eac <rmw_get_zero_initialized_discovery_options>
 80164e8:	2258      	movs	r2, #88	@ 0x58
 80164ea:	2100      	movs	r1, #0
 80164ec:	4620      	mov	r0, r4
 80164ee:	f004 fb85 	bl	801abfc <memset>
 80164f2:	f104 0310 	add.w	r3, r4, #16
 80164f6:	f10d 0c08 	add.w	ip, sp, #8
 80164fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80164fe:	f104 0e1c 	add.w	lr, r4, #28
 8016502:	60e2      	str	r2, [r4, #12]
 8016504:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016508:	e883 0003 	stmia.w	r3, {r0, r1}
 801650c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016510:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016514:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8016518:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801651c:	4620      	mov	r0, r4
 801651e:	b00b      	add	sp, #44	@ 0x2c
 8016520:	bd30      	pop	{r4, r5, pc}
 8016522:	bf00      	nop

08016524 <rmw_get_default_security_options>:
 8016524:	2200      	movs	r2, #0
 8016526:	7002      	strb	r2, [r0, #0]
 8016528:	6042      	str	r2, [r0, #4]
 801652a:	4770      	bx	lr

0801652c <rmw_time_equal>:
 801652c:	b570      	push	{r4, r5, r6, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	ac04      	add	r4, sp, #16
 8016532:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016536:	4925      	ldr	r1, [pc, #148]	@ (80165cc <rmw_time_equal+0xa0>)
 8016538:	2202      	movs	r2, #2
 801653a:	9d01      	ldr	r5, [sp, #4]
 801653c:	4281      	cmp	r1, r0
 801653e:	41aa      	sbcs	r2, r5
 8016540:	d333      	bcc.n	80165aa <rmw_time_equal+0x7e>
 8016542:	4c23      	ldr	r4, [pc, #140]	@ (80165d0 <rmw_time_equal+0xa4>)
 8016544:	4603      	mov	r3, r0
 8016546:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801654a:	fba3 3204 	umull	r3, r2, r3, r4
 801654e:	e9dd 1602 	ldrd	r1, r6, [sp, #8]
 8016552:	fb04 2205 	mla	r2, r4, r5, r2
 8016556:	43dd      	mvns	r5, r3
 8016558:	1a84      	subs	r4, r0, r2
 801655a:	428d      	cmp	r5, r1
 801655c:	41b4      	sbcs	r4, r6
 801655e:	d332      	bcc.n	80165c6 <rmw_time_equal+0x9a>
 8016560:	eb11 0e03 	adds.w	lr, r1, r3
 8016564:	eb42 0006 	adc.w	r0, r2, r6
 8016568:	9b08      	ldr	r3, [sp, #32]
 801656a:	2202      	movs	r2, #2
 801656c:	4917      	ldr	r1, [pc, #92]	@ (80165cc <rmw_time_equal+0xa0>)
 801656e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8016570:	4299      	cmp	r1, r3
 8016572:	41aa      	sbcs	r2, r5
 8016574:	d31e      	bcc.n	80165b4 <rmw_time_equal+0x88>
 8016576:	4c16      	ldr	r4, [pc, #88]	@ (80165d0 <rmw_time_equal+0xa4>)
 8016578:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 801657c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801657e:	fba3 3104 	umull	r3, r1, r3, r4
 8016582:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016584:	fb04 1105 	mla	r1, r4, r5, r1
 8016588:	43dd      	mvns	r5, r3
 801658a:	ebac 0401 	sub.w	r4, ip, r1
 801658e:	4295      	cmp	r5, r2
 8016590:	41b4      	sbcs	r4, r6
 8016592:	d314      	bcc.n	80165be <rmw_time_equal+0x92>
 8016594:	18d2      	adds	r2, r2, r3
 8016596:	eb41 0306 	adc.w	r3, r1, r6
 801659a:	4283      	cmp	r3, r0
 801659c:	bf08      	it	eq
 801659e:	4572      	cmpeq	r2, lr
 80165a0:	bf0c      	ite	eq
 80165a2:	2001      	moveq	r0, #1
 80165a4:	2000      	movne	r0, #0
 80165a6:	b004      	add	sp, #16
 80165a8:	bd70      	pop	{r4, r5, r6, pc}
 80165aa:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80165ae:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80165b2:	e7d9      	b.n	8016568 <rmw_time_equal+0x3c>
 80165b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80165b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80165bc:	e7ed      	b.n	801659a <rmw_time_equal+0x6e>
 80165be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80165c2:	4663      	mov	r3, ip
 80165c4:	e7e9      	b.n	801659a <rmw_time_equal+0x6e>
 80165c6:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80165ca:	e7cd      	b.n	8016568 <rmw_time_equal+0x3c>
 80165cc:	25c17d04 	.word	0x25c17d04
 80165d0:	3b9aca00 	.word	0x3b9aca00

080165d4 <rmw_time_total_nsec>:
 80165d4:	b470      	push	{r4, r5, r6}
 80165d6:	b085      	sub	sp, #20
 80165d8:	ac04      	add	r4, sp, #16
 80165da:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80165de:	4913      	ldr	r1, [pc, #76]	@ (801662c <rmw_time_total_nsec+0x58>)
 80165e0:	2202      	movs	r2, #2
 80165e2:	9d01      	ldr	r5, [sp, #4]
 80165e4:	4281      	cmp	r1, r0
 80165e6:	41aa      	sbcs	r2, r5
 80165e8:	d314      	bcc.n	8016614 <rmw_time_total_nsec+0x40>
 80165ea:	4603      	mov	r3, r0
 80165ec:	4810      	ldr	r0, [pc, #64]	@ (8016630 <rmw_time_total_nsec+0x5c>)
 80165ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80165f2:	fba3 3200 	umull	r3, r2, r3, r0
 80165f6:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
 80165fa:	fb00 2205 	mla	r2, r0, r5, r2
 80165fe:	43dd      	mvns	r5, r3
 8016600:	1a88      	subs	r0, r1, r2
 8016602:	42a5      	cmp	r5, r4
 8016604:	41b0      	sbcs	r0, r6
 8016606:	d30c      	bcc.n	8016622 <rmw_time_total_nsec+0x4e>
 8016608:	1918      	adds	r0, r3, r4
 801660a:	eb42 0106 	adc.w	r1, r2, r6
 801660e:	b005      	add	sp, #20
 8016610:	bc70      	pop	{r4, r5, r6}
 8016612:	4770      	bx	lr
 8016614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016618:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801661c:	b005      	add	sp, #20
 801661e:	bc70      	pop	{r4, r5, r6}
 8016620:	4770      	bx	lr
 8016622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016626:	b005      	add	sp, #20
 8016628:	bc70      	pop	{r4, r5, r6}
 801662a:	4770      	bx	lr
 801662c:	25c17d04 	.word	0x25c17d04
 8016630:	3b9aca00 	.word	0x3b9aca00

08016634 <rmw_get_zero_initialized_message_info>:
 8016634:	b510      	push	{r4, lr}
 8016636:	4604      	mov	r4, r0
 8016638:	2238      	movs	r2, #56	@ 0x38
 801663a:	2100      	movs	r1, #0
 801663c:	f004 fade 	bl	801abfc <memset>
 8016640:	4620      	mov	r0, r4
 8016642:	bd10      	pop	{r4, pc}

08016644 <rmw_validate_full_topic_name>:
 8016644:	2800      	cmp	r0, #0
 8016646:	d049      	beq.n	80166dc <rmw_validate_full_topic_name+0x98>
 8016648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801664c:	460d      	mov	r5, r1
 801664e:	2900      	cmp	r1, #0
 8016650:	d056      	beq.n	8016700 <rmw_validate_full_topic_name+0xbc>
 8016652:	4604      	mov	r4, r0
 8016654:	4616      	mov	r6, r2
 8016656:	f7e9 feab 	bl	80003b0 <strlen>
 801665a:	b150      	cbz	r0, 8016672 <rmw_validate_full_topic_name+0x2e>
 801665c:	7823      	ldrb	r3, [r4, #0]
 801665e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016660:	d00c      	beq.n	801667c <rmw_validate_full_topic_name+0x38>
 8016662:	2302      	movs	r3, #2
 8016664:	602b      	str	r3, [r5, #0]
 8016666:	b10e      	cbz	r6, 801666c <rmw_validate_full_topic_name+0x28>
 8016668:	2300      	movs	r3, #0
 801666a:	6033      	str	r3, [r6, #0]
 801666c:	2000      	movs	r0, #0
 801666e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016672:	2301      	movs	r3, #1
 8016674:	602b      	str	r3, [r5, #0]
 8016676:	2e00      	cmp	r6, #0
 8016678:	d1f6      	bne.n	8016668 <rmw_validate_full_topic_name+0x24>
 801667a:	e7f7      	b.n	801666c <rmw_validate_full_topic_name+0x28>
 801667c:	1e47      	subs	r7, r0, #1
 801667e:	5de3      	ldrb	r3, [r4, r7]
 8016680:	2b2f      	cmp	r3, #47	@ 0x2f
 8016682:	d03f      	beq.n	8016704 <rmw_validate_full_topic_name+0xc0>
 8016684:	1e63      	subs	r3, r4, #1
 8016686:	4621      	mov	r1, r4
 8016688:	eb03 0e00 	add.w	lr, r3, r0
 801668c:	469c      	mov	ip, r3
 801668e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8016692:	2a5f      	cmp	r2, #95	@ 0x5f
 8016694:	d006      	beq.n	80166a4 <rmw_validate_full_topic_name+0x60>
 8016696:	d823      	bhi.n	80166e0 <rmw_validate_full_topic_name+0x9c>
 8016698:	2a39      	cmp	r2, #57	@ 0x39
 801669a:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 801669e:	d82b      	bhi.n	80166f8 <rmw_validate_full_topic_name+0xb4>
 80166a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80166a2:	d920      	bls.n	80166e6 <rmw_validate_full_topic_name+0xa2>
 80166a4:	4573      	cmp	r3, lr
 80166a6:	d1f1      	bne.n	801668c <rmw_validate_full_topic_name+0x48>
 80166a8:	2300      	movs	r3, #0
 80166aa:	4c21      	ldr	r4, [pc, #132]	@ (8016730 <rmw_validate_full_topic_name+0xec>)
 80166ac:	e003      	b.n	80166b6 <rmw_validate_full_topic_name+0x72>
 80166ae:	4298      	cmp	r0, r3
 80166b0:	f101 0101 	add.w	r1, r1, #1
 80166b4:	d02c      	beq.n	8016710 <rmw_validate_full_topic_name+0xcc>
 80166b6:	429f      	cmp	r7, r3
 80166b8:	f103 0301 	add.w	r3, r3, #1
 80166bc:	d0f7      	beq.n	80166ae <rmw_validate_full_topic_name+0x6a>
 80166be:	780a      	ldrb	r2, [r1, #0]
 80166c0:	2a2f      	cmp	r2, #47	@ 0x2f
 80166c2:	d1f4      	bne.n	80166ae <rmw_validate_full_topic_name+0x6a>
 80166c4:	784a      	ldrb	r2, [r1, #1]
 80166c6:	2a2f      	cmp	r2, #47	@ 0x2f
 80166c8:	d02d      	beq.n	8016726 <rmw_validate_full_topic_name+0xe2>
 80166ca:	5ca2      	ldrb	r2, [r4, r2]
 80166cc:	0752      	lsls	r2, r2, #29
 80166ce:	d5ee      	bpl.n	80166ae <rmw_validate_full_topic_name+0x6a>
 80166d0:	2206      	movs	r2, #6
 80166d2:	602a      	str	r2, [r5, #0]
 80166d4:	2e00      	cmp	r6, #0
 80166d6:	d0c9      	beq.n	801666c <rmw_validate_full_topic_name+0x28>
 80166d8:	6033      	str	r3, [r6, #0]
 80166da:	e7c7      	b.n	801666c <rmw_validate_full_topic_name+0x28>
 80166dc:	200b      	movs	r0, #11
 80166de:	4770      	bx	lr
 80166e0:	3a61      	subs	r2, #97	@ 0x61
 80166e2:	2a19      	cmp	r2, #25
 80166e4:	d9de      	bls.n	80166a4 <rmw_validate_full_topic_name+0x60>
 80166e6:	2304      	movs	r3, #4
 80166e8:	602b      	str	r3, [r5, #0]
 80166ea:	2e00      	cmp	r6, #0
 80166ec:	d0be      	beq.n	801666c <rmw_validate_full_topic_name+0x28>
 80166ee:	f1c4 0401 	rsb	r4, r4, #1
 80166f2:	4464      	add	r4, ip
 80166f4:	6034      	str	r4, [r6, #0]
 80166f6:	e7b9      	b.n	801666c <rmw_validate_full_topic_name+0x28>
 80166f8:	f1b8 0f19 	cmp.w	r8, #25
 80166fc:	d9d2      	bls.n	80166a4 <rmw_validate_full_topic_name+0x60>
 80166fe:	e7f2      	b.n	80166e6 <rmw_validate_full_topic_name+0xa2>
 8016700:	200b      	movs	r0, #11
 8016702:	e7b4      	b.n	801666e <rmw_validate_full_topic_name+0x2a>
 8016704:	2303      	movs	r3, #3
 8016706:	602b      	str	r3, [r5, #0]
 8016708:	2e00      	cmp	r6, #0
 801670a:	d0af      	beq.n	801666c <rmw_validate_full_topic_name+0x28>
 801670c:	6037      	str	r7, [r6, #0]
 801670e:	e7ad      	b.n	801666c <rmw_validate_full_topic_name+0x28>
 8016710:	28f7      	cmp	r0, #247	@ 0xf7
 8016712:	d802      	bhi.n	801671a <rmw_validate_full_topic_name+0xd6>
 8016714:	2300      	movs	r3, #0
 8016716:	602b      	str	r3, [r5, #0]
 8016718:	e7a8      	b.n	801666c <rmw_validate_full_topic_name+0x28>
 801671a:	2307      	movs	r3, #7
 801671c:	602b      	str	r3, [r5, #0]
 801671e:	2e00      	cmp	r6, #0
 8016720:	d0a4      	beq.n	801666c <rmw_validate_full_topic_name+0x28>
 8016722:	23f6      	movs	r3, #246	@ 0xf6
 8016724:	e7d8      	b.n	80166d8 <rmw_validate_full_topic_name+0x94>
 8016726:	2205      	movs	r2, #5
 8016728:	602a      	str	r2, [r5, #0]
 801672a:	2e00      	cmp	r6, #0
 801672c:	d1d4      	bne.n	80166d8 <rmw_validate_full_topic_name+0x94>
 801672e:	e79d      	b.n	801666c <rmw_validate_full_topic_name+0x28>
 8016730:	0801ca97 	.word	0x0801ca97

08016734 <rmw_validate_namespace_with_size>:
 8016734:	b342      	cbz	r2, 8016788 <rmw_validate_namespace_with_size+0x54>
 8016736:	b338      	cbz	r0, 8016788 <rmw_validate_namespace_with_size+0x54>
 8016738:	2901      	cmp	r1, #1
 801673a:	b570      	push	{r4, r5, r6, lr}
 801673c:	460d      	mov	r5, r1
 801673e:	b0c2      	sub	sp, #264	@ 0x108
 8016740:	461e      	mov	r6, r3
 8016742:	4614      	mov	r4, r2
 8016744:	d102      	bne.n	801674c <rmw_validate_namespace_with_size+0x18>
 8016746:	7803      	ldrb	r3, [r0, #0]
 8016748:	2b2f      	cmp	r3, #47	@ 0x2f
 801674a:	d012      	beq.n	8016772 <rmw_validate_namespace_with_size+0x3e>
 801674c:	aa01      	add	r2, sp, #4
 801674e:	4669      	mov	r1, sp
 8016750:	f7ff ff78 	bl	8016644 <rmw_validate_full_topic_name>
 8016754:	b980      	cbnz	r0, 8016778 <rmw_validate_namespace_with_size+0x44>
 8016756:	9b00      	ldr	r3, [sp, #0]
 8016758:	b14b      	cbz	r3, 801676e <rmw_validate_namespace_with_size+0x3a>
 801675a:	2b07      	cmp	r3, #7
 801675c:	d007      	beq.n	801676e <rmw_validate_namespace_with_size+0x3a>
 801675e:	1e5a      	subs	r2, r3, #1
 8016760:	2a05      	cmp	r2, #5
 8016762:	d81a      	bhi.n	801679a <rmw_validate_namespace_with_size+0x66>
 8016764:	e8df f002 	tbb	[pc, r2]
 8016768:	0a0a0a0a 	.word	0x0a0a0a0a
 801676c:	0a0a      	.short	0x0a0a
 801676e:	2df5      	cmp	r5, #245	@ 0xf5
 8016770:	d80c      	bhi.n	801678c <rmw_validate_namespace_with_size+0x58>
 8016772:	2300      	movs	r3, #0
 8016774:	6023      	str	r3, [r4, #0]
 8016776:	2000      	movs	r0, #0
 8016778:	b042      	add	sp, #264	@ 0x108
 801677a:	bd70      	pop	{r4, r5, r6, pc}
 801677c:	6023      	str	r3, [r4, #0]
 801677e:	2e00      	cmp	r6, #0
 8016780:	d0f9      	beq.n	8016776 <rmw_validate_namespace_with_size+0x42>
 8016782:	9b01      	ldr	r3, [sp, #4]
 8016784:	6033      	str	r3, [r6, #0]
 8016786:	e7f6      	b.n	8016776 <rmw_validate_namespace_with_size+0x42>
 8016788:	200b      	movs	r0, #11
 801678a:	4770      	bx	lr
 801678c:	2307      	movs	r3, #7
 801678e:	6023      	str	r3, [r4, #0]
 8016790:	2e00      	cmp	r6, #0
 8016792:	d0f0      	beq.n	8016776 <rmw_validate_namespace_with_size+0x42>
 8016794:	23f4      	movs	r3, #244	@ 0xf4
 8016796:	6033      	str	r3, [r6, #0]
 8016798:	e7ed      	b.n	8016776 <rmw_validate_namespace_with_size+0x42>
 801679a:	4a04      	ldr	r2, [pc, #16]	@ (80167ac <rmw_validate_namespace_with_size+0x78>)
 801679c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80167a0:	a802      	add	r0, sp, #8
 80167a2:	f7ff fcb7 	bl	8016114 <rcutils_snprintf>
 80167a6:	2001      	movs	r0, #1
 80167a8:	e7e6      	b.n	8016778 <rmw_validate_namespace_with_size+0x44>
 80167aa:	bf00      	nop
 80167ac:	0801bfd4 	.word	0x0801bfd4

080167b0 <rmw_validate_namespace>:
 80167b0:	b168      	cbz	r0, 80167ce <rmw_validate_namespace+0x1e>
 80167b2:	b570      	push	{r4, r5, r6, lr}
 80167b4:	460d      	mov	r5, r1
 80167b6:	4616      	mov	r6, r2
 80167b8:	4604      	mov	r4, r0
 80167ba:	f7e9 fdf9 	bl	80003b0 <strlen>
 80167be:	4633      	mov	r3, r6
 80167c0:	4601      	mov	r1, r0
 80167c2:	462a      	mov	r2, r5
 80167c4:	4620      	mov	r0, r4
 80167c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167ca:	f7ff bfb3 	b.w	8016734 <rmw_validate_namespace_with_size>
 80167ce:	200b      	movs	r0, #11
 80167d0:	4770      	bx	lr
 80167d2:	bf00      	nop

080167d4 <rmw_namespace_validation_result_string>:
 80167d4:	2807      	cmp	r0, #7
 80167d6:	d803      	bhi.n	80167e0 <rmw_namespace_validation_result_string+0xc>
 80167d8:	4b02      	ldr	r3, [pc, #8]	@ (80167e4 <rmw_namespace_validation_result_string+0x10>)
 80167da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80167de:	4770      	bx	lr
 80167e0:	4801      	ldr	r0, [pc, #4]	@ (80167e8 <rmw_namespace_validation_result_string+0x14>)
 80167e2:	4770      	bx	lr
 80167e4:	0801c6bc 	.word	0x0801c6bc
 80167e8:	0801c024 	.word	0x0801c024

080167ec <rmw_validate_node_name>:
 80167ec:	b3b0      	cbz	r0, 801685c <rmw_validate_node_name+0x70>
 80167ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167f0:	460e      	mov	r6, r1
 80167f2:	b3a9      	cbz	r1, 8016860 <rmw_validate_node_name+0x74>
 80167f4:	4604      	mov	r4, r0
 80167f6:	4615      	mov	r5, r2
 80167f8:	f7e9 fdda 	bl	80003b0 <strlen>
 80167fc:	b1f0      	cbz	r0, 801683c <rmw_validate_node_name+0x50>
 80167fe:	1e63      	subs	r3, r4, #1
 8016800:	181f      	adds	r7, r3, r0
 8016802:	4619      	mov	r1, r3
 8016804:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016808:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801680c:	f02e 0c20 	bic.w	ip, lr, #32
 8016810:	2a09      	cmp	r2, #9
 8016812:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016816:	d905      	bls.n	8016824 <rmw_validate_node_name+0x38>
 8016818:	f1bc 0f19 	cmp.w	ip, #25
 801681c:	d902      	bls.n	8016824 <rmw_validate_node_name+0x38>
 801681e:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016822:	d112      	bne.n	801684a <rmw_validate_node_name+0x5e>
 8016824:	42bb      	cmp	r3, r7
 8016826:	d1ec      	bne.n	8016802 <rmw_validate_node_name+0x16>
 8016828:	7823      	ldrb	r3, [r4, #0]
 801682a:	4a14      	ldr	r2, [pc, #80]	@ (801687c <rmw_validate_node_name+0x90>)
 801682c:	5cd3      	ldrb	r3, [r2, r3]
 801682e:	f013 0304 	ands.w	r3, r3, #4
 8016832:	d11e      	bne.n	8016872 <rmw_validate_node_name+0x86>
 8016834:	28ff      	cmp	r0, #255	@ 0xff
 8016836:	d815      	bhi.n	8016864 <rmw_validate_node_name+0x78>
 8016838:	6033      	str	r3, [r6, #0]
 801683a:	e00d      	b.n	8016858 <rmw_validate_node_name+0x6c>
 801683c:	2301      	movs	r3, #1
 801683e:	6033      	str	r3, [r6, #0]
 8016840:	b155      	cbz	r5, 8016858 <rmw_validate_node_name+0x6c>
 8016842:	2300      	movs	r3, #0
 8016844:	2000      	movs	r0, #0
 8016846:	602b      	str	r3, [r5, #0]
 8016848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801684a:	2302      	movs	r3, #2
 801684c:	6033      	str	r3, [r6, #0]
 801684e:	b11d      	cbz	r5, 8016858 <rmw_validate_node_name+0x6c>
 8016850:	f1c4 0401 	rsb	r4, r4, #1
 8016854:	440c      	add	r4, r1
 8016856:	602c      	str	r4, [r5, #0]
 8016858:	2000      	movs	r0, #0
 801685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801685c:	200b      	movs	r0, #11
 801685e:	4770      	bx	lr
 8016860:	200b      	movs	r0, #11
 8016862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016864:	2304      	movs	r3, #4
 8016866:	6033      	str	r3, [r6, #0]
 8016868:	2d00      	cmp	r5, #0
 801686a:	d0f5      	beq.n	8016858 <rmw_validate_node_name+0x6c>
 801686c:	23fe      	movs	r3, #254	@ 0xfe
 801686e:	602b      	str	r3, [r5, #0]
 8016870:	e7f2      	b.n	8016858 <rmw_validate_node_name+0x6c>
 8016872:	2303      	movs	r3, #3
 8016874:	6033      	str	r3, [r6, #0]
 8016876:	2d00      	cmp	r5, #0
 8016878:	d1e3      	bne.n	8016842 <rmw_validate_node_name+0x56>
 801687a:	e7ed      	b.n	8016858 <rmw_validate_node_name+0x6c>
 801687c:	0801ca97 	.word	0x0801ca97

08016880 <rmw_node_name_validation_result_string>:
 8016880:	2804      	cmp	r0, #4
 8016882:	d803      	bhi.n	801688c <rmw_node_name_validation_result_string+0xc>
 8016884:	4b02      	ldr	r3, [pc, #8]	@ (8016890 <rmw_node_name_validation_result_string+0x10>)
 8016886:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801688a:	4770      	bx	lr
 801688c:	4801      	ldr	r0, [pc, #4]	@ (8016894 <rmw_node_name_validation_result_string+0x14>)
 801688e:	4770      	bx	lr
 8016890:	0801c6dc 	.word	0x0801c6dc
 8016894:	0801c1cc 	.word	0x0801c1cc

08016898 <get_memory>:
 8016898:	4603      	mov	r3, r0
 801689a:	6840      	ldr	r0, [r0, #4]
 801689c:	b158      	cbz	r0, 80168b6 <get_memory+0x1e>
 801689e:	6842      	ldr	r2, [r0, #4]
 80168a0:	605a      	str	r2, [r3, #4]
 80168a2:	b10a      	cbz	r2, 80168a8 <get_memory+0x10>
 80168a4:	2100      	movs	r1, #0
 80168a6:	6011      	str	r1, [r2, #0]
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	6042      	str	r2, [r0, #4]
 80168ac:	b102      	cbz	r2, 80168b0 <get_memory+0x18>
 80168ae:	6010      	str	r0, [r2, #0]
 80168b0:	2200      	movs	r2, #0
 80168b2:	6002      	str	r2, [r0, #0]
 80168b4:	6018      	str	r0, [r3, #0]
 80168b6:	4770      	bx	lr

080168b8 <put_memory>:
 80168b8:	680b      	ldr	r3, [r1, #0]
 80168ba:	b10b      	cbz	r3, 80168c0 <put_memory+0x8>
 80168bc:	684a      	ldr	r2, [r1, #4]
 80168be:	605a      	str	r2, [r3, #4]
 80168c0:	684a      	ldr	r2, [r1, #4]
 80168c2:	b102      	cbz	r2, 80168c6 <put_memory+0xe>
 80168c4:	6013      	str	r3, [r2, #0]
 80168c6:	6803      	ldr	r3, [r0, #0]
 80168c8:	428b      	cmp	r3, r1
 80168ca:	6843      	ldr	r3, [r0, #4]
 80168cc:	bf08      	it	eq
 80168ce:	6002      	streq	r2, [r0, #0]
 80168d0:	604b      	str	r3, [r1, #4]
 80168d2:	b103      	cbz	r3, 80168d6 <put_memory+0x1e>
 80168d4:	6019      	str	r1, [r3, #0]
 80168d6:	2300      	movs	r3, #0
 80168d8:	600b      	str	r3, [r1, #0]
 80168da:	6041      	str	r1, [r0, #4]
 80168dc:	4770      	bx	lr
 80168de:	bf00      	nop

080168e0 <rmw_destroy_client>:
 80168e0:	b570      	push	{r4, r5, r6, lr}
 80168e2:	b128      	cbz	r0, 80168f0 <rmw_destroy_client+0x10>
 80168e4:	4604      	mov	r4, r0
 80168e6:	6800      	ldr	r0, [r0, #0]
 80168e8:	460d      	mov	r5, r1
 80168ea:	f7f8 fcbd 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 80168ee:	b910      	cbnz	r0, 80168f6 <rmw_destroy_client+0x16>
 80168f0:	2401      	movs	r4, #1
 80168f2:	4620      	mov	r0, r4
 80168f4:	bd70      	pop	{r4, r5, r6, pc}
 80168f6:	6863      	ldr	r3, [r4, #4]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d0f9      	beq.n	80168f0 <rmw_destroy_client+0x10>
 80168fc:	2d00      	cmp	r5, #0
 80168fe:	d0f7      	beq.n	80168f0 <rmw_destroy_client+0x10>
 8016900:	6828      	ldr	r0, [r5, #0]
 8016902:	f7f8 fcb1 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 8016906:	2800      	cmp	r0, #0
 8016908:	d0f2      	beq.n	80168f0 <rmw_destroy_client+0x10>
 801690a:	686e      	ldr	r6, [r5, #4]
 801690c:	2e00      	cmp	r6, #0
 801690e:	d0ef      	beq.n	80168f0 <rmw_destroy_client+0x10>
 8016910:	6864      	ldr	r4, [r4, #4]
 8016912:	6932      	ldr	r2, [r6, #16]
 8016914:	6920      	ldr	r0, [r4, #16]
 8016916:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801691a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801691e:	6819      	ldr	r1, [r3, #0]
 8016920:	f002 f802 	bl	8018928 <uxr_buffer_cancel_data>
 8016924:	4602      	mov	r2, r0
 8016926:	6920      	ldr	r0, [r4, #16]
 8016928:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801692c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016930:	f7f8 fc18 	bl	800f164 <run_xrce_session>
 8016934:	6920      	ldr	r0, [r4, #16]
 8016936:	6932      	ldr	r2, [r6, #16]
 8016938:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801693c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016940:	6819      	ldr	r1, [r3, #0]
 8016942:	f7f9 fe3d 	bl	80105c0 <uxr_buffer_delete_entity>
 8016946:	4602      	mov	r2, r0
 8016948:	6920      	ldr	r0, [r4, #16]
 801694a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801694e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016952:	f7f8 fc07 	bl	800f164 <run_xrce_session>
 8016956:	4604      	mov	r4, r0
 8016958:	4628      	mov	r0, r5
 801695a:	f084 0401 	eor.w	r4, r4, #1
 801695e:	b2e4      	uxtb	r4, r4
 8016960:	0064      	lsls	r4, r4, #1
 8016962:	f7f8 fadd 	bl	800ef20 <rmw_uxrce_fini_client_memory>
 8016966:	e7c4      	b.n	80168f2 <rmw_destroy_client+0x12>

08016968 <rmw_get_gid_for_client>:
 8016968:	b1b9      	cbz	r1, 801699a <rmw_get_gid_for_client+0x32>
 801696a:	b538      	push	{r3, r4, r5, lr}
 801696c:	4605      	mov	r5, r0
 801696e:	b180      	cbz	r0, 8016992 <rmw_get_gid_for_client+0x2a>
 8016970:	6800      	ldr	r0, [r0, #0]
 8016972:	460c      	mov	r4, r1
 8016974:	b120      	cbz	r0, 8016980 <rmw_get_gid_for_client+0x18>
 8016976:	4b0a      	ldr	r3, [pc, #40]	@ (80169a0 <rmw_get_gid_for_client+0x38>)
 8016978:	6819      	ldr	r1, [r3, #0]
 801697a:	f7e9 fcb9 	bl	80002f0 <strcmp>
 801697e:	b950      	cbnz	r0, 8016996 <rmw_get_gid_for_client+0x2e>
 8016980:	686b      	ldr	r3, [r5, #4]
 8016982:	2000      	movs	r0, #0
 8016984:	6060      	str	r0, [r4, #4]
 8016986:	60a0      	str	r0, [r4, #8]
 8016988:	60e0      	str	r0, [r4, #12]
 801698a:	6120      	str	r0, [r4, #16]
 801698c:	691b      	ldr	r3, [r3, #16]
 801698e:	6063      	str	r3, [r4, #4]
 8016990:	bd38      	pop	{r3, r4, r5, pc}
 8016992:	200b      	movs	r0, #11
 8016994:	bd38      	pop	{r3, r4, r5, pc}
 8016996:	200c      	movs	r0, #12
 8016998:	bd38      	pop	{r3, r4, r5, pc}
 801699a:	200b      	movs	r0, #11
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop
 80169a0:	0801c6f0 	.word	0x0801c6f0

080169a4 <rmw_get_implementation_identifier>:
 80169a4:	4b01      	ldr	r3, [pc, #4]	@ (80169ac <rmw_get_implementation_identifier+0x8>)
 80169a6:	6818      	ldr	r0, [r3, #0]
 80169a8:	4770      	bx	lr
 80169aa:	bf00      	nop
 80169ac:	0801c6f0 	.word	0x0801c6f0

080169b0 <rmw_init_options_init>:
 80169b0:	b084      	sub	sp, #16
 80169b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169b4:	b083      	sub	sp, #12
 80169b6:	ad09      	add	r5, sp, #36	@ 0x24
 80169b8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80169bc:	b130      	cbz	r0, 80169cc <rmw_init_options_init+0x1c>
 80169be:	4604      	mov	r4, r0
 80169c0:	4628      	mov	r0, r5
 80169c2:	f7f7 fe9b 	bl	800e6fc <rcutils_allocator_is_valid>
 80169c6:	b108      	cbz	r0, 80169cc <rmw_init_options_init+0x1c>
 80169c8:	68a6      	ldr	r6, [r4, #8]
 80169ca:	b12e      	cbz	r6, 80169d8 <rmw_init_options_init+0x28>
 80169cc:	200b      	movs	r0, #11
 80169ce:	b003      	add	sp, #12
 80169d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80169d4:	b004      	add	sp, #16
 80169d6:	4770      	bx	lr
 80169d8:	2200      	movs	r2, #0
 80169da:	2300      	movs	r3, #0
 80169dc:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80169e0:	466f      	mov	r7, sp
 80169e2:	e9c4 2300 	strd	r2, r3, [r4]
 80169e6:	4b1f      	ldr	r3, [pc, #124]	@ (8016a64 <rmw_init_options_init+0xb4>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	60a3      	str	r3, [r4, #8]
 80169ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169f2:	682b      	ldr	r3, [r5, #0]
 80169f4:	4638      	mov	r0, r7
 80169f6:	f8cc 3000 	str.w	r3, [ip]
 80169fa:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80169fc:	60e6      	str	r6, [r4, #12]
 80169fe:	f7ff fd91 	bl	8016524 <rmw_get_default_security_options>
 8016a02:	f104 0310 	add.w	r3, r4, #16
 8016a06:	2203      	movs	r2, #3
 8016a08:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016a0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a10:	4815      	ldr	r0, [pc, #84]	@ (8016a68 <rmw_init_options_init+0xb8>)
 8016a12:	4916      	ldr	r1, [pc, #88]	@ (8016a6c <rmw_init_options_init+0xbc>)
 8016a14:	7626      	strb	r6, [r4, #24]
 8016a16:	f7f8 f9c3 	bl	800eda0 <rmw_uxrce_init_init_options_impl_memory>
 8016a1a:	4813      	ldr	r0, [pc, #76]	@ (8016a68 <rmw_init_options_init+0xb8>)
 8016a1c:	f7ff ff3c 	bl	8016898 <get_memory>
 8016a20:	b1f0      	cbz	r0, 8016a60 <rmw_init_options_init+0xb0>
 8016a22:	4a13      	ldr	r2, [pc, #76]	@ (8016a70 <rmw_init_options_init+0xc0>)
 8016a24:	6883      	ldr	r3, [r0, #8]
 8016a26:	6851      	ldr	r1, [r2, #4]
 8016a28:	6563      	str	r3, [r4, #84]	@ 0x54
 8016a2a:	7810      	ldrb	r0, [r2, #0]
 8016a2c:	6159      	str	r1, [r3, #20]
 8016a2e:	68d1      	ldr	r1, [r2, #12]
 8016a30:	7418      	strb	r0, [r3, #16]
 8016a32:	61d9      	str	r1, [r3, #28]
 8016a34:	6911      	ldr	r1, [r2, #16]
 8016a36:	6219      	str	r1, [r3, #32]
 8016a38:	6951      	ldr	r1, [r2, #20]
 8016a3a:	6892      	ldr	r2, [r2, #8]
 8016a3c:	6259      	str	r1, [r3, #36]	@ 0x24
 8016a3e:	619a      	str	r2, [r3, #24]
 8016a40:	f7fb f91e 	bl	8011c80 <uxr_nanos>
 8016a44:	f003 fd1e 	bl	801a484 <srand>
 8016a48:	f003 fd4a 	bl	801a4e0 <rand>
 8016a4c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016a4e:	6298      	str	r0, [r3, #40]	@ 0x28
 8016a50:	2800      	cmp	r0, #0
 8016a52:	d0f9      	beq.n	8016a48 <rmw_init_options_init+0x98>
 8016a54:	2000      	movs	r0, #0
 8016a56:	b003      	add	sp, #12
 8016a58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016a5c:	b004      	add	sp, #16
 8016a5e:	4770      	bx	lr
 8016a60:	2001      	movs	r0, #1
 8016a62:	e7b4      	b.n	80169ce <rmw_init_options_init+0x1e>
 8016a64:	0801c6f0 	.word	0x0801c6f0
 8016a68:	24009760 	.word	0x24009760
 8016a6c:	240096dc 	.word	0x240096dc
 8016a70:	240095b0 	.word	0x240095b0

08016a74 <rmw_init_options_copy>:
 8016a74:	b570      	push	{r4, r5, r6, lr}
 8016a76:	b088      	sub	sp, #32
 8016a78:	b161      	cbz	r1, 8016a94 <rmw_init_options_copy+0x20>
 8016a7a:	4604      	mov	r4, r0
 8016a7c:	b150      	cbz	r0, 8016a94 <rmw_init_options_copy+0x20>
 8016a7e:	6880      	ldr	r0, [r0, #8]
 8016a80:	460d      	mov	r5, r1
 8016a82:	b128      	cbz	r0, 8016a90 <rmw_init_options_copy+0x1c>
 8016a84:	4b29      	ldr	r3, [pc, #164]	@ (8016b2c <rmw_init_options_copy+0xb8>)
 8016a86:	6819      	ldr	r1, [r3, #0]
 8016a88:	f7e9 fc32 	bl	80002f0 <strcmp>
 8016a8c:	2800      	cmp	r0, #0
 8016a8e:	d140      	bne.n	8016b12 <rmw_init_options_copy+0x9e>
 8016a90:	68ab      	ldr	r3, [r5, #8]
 8016a92:	b11b      	cbz	r3, 8016a9c <rmw_init_options_copy+0x28>
 8016a94:	240b      	movs	r4, #11
 8016a96:	4620      	mov	r0, r4
 8016a98:	b008      	add	sp, #32
 8016a9a:	bd70      	pop	{r4, r5, r6, pc}
 8016a9c:	2258      	movs	r2, #88	@ 0x58
 8016a9e:	4621      	mov	r1, r4
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	f004 f9e4 	bl	801ae6e <memcpy>
 8016aa6:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8016aaa:	f10d 0c0c 	add.w	ip, sp, #12
 8016aae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ab2:	4666      	mov	r6, ip
 8016ab4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ab8:	f8de 3000 	ldr.w	r3, [lr]
 8016abc:	4630      	mov	r0, r6
 8016abe:	f8cc 3000 	str.w	r3, [ip]
 8016ac2:	f7f7 fe1b 	bl	800e6fc <rcutils_allocator_is_valid>
 8016ac6:	2800      	cmp	r0, #0
 8016ac8:	d0e4      	beq.n	8016a94 <rmw_init_options_copy+0x20>
 8016aca:	ab08      	add	r3, sp, #32
 8016acc:	e913 0003 	ldmdb	r3, {r0, r1}
 8016ad0:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016ad4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8016ad8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8016ada:	f7ff fb67 	bl	80161ac <rcutils_strdup>
 8016ade:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8016ae0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8016ae2:	b103      	cbz	r3, 8016ae6 <rmw_init_options_copy+0x72>
 8016ae4:	b1f8      	cbz	r0, 8016b26 <rmw_init_options_copy+0xb2>
 8016ae6:	4812      	ldr	r0, [pc, #72]	@ (8016b30 <rmw_init_options_copy+0xbc>)
 8016ae8:	f7ff fed6 	bl	8016898 <get_memory>
 8016aec:	b1a8      	cbz	r0, 8016b1a <rmw_init_options_copy+0xa6>
 8016aee:	6883      	ldr	r3, [r0, #8]
 8016af0:	656b      	str	r3, [r5, #84]	@ 0x54
 8016af2:	f103 0510 	add.w	r5, r3, #16
 8016af6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016af8:	2400      	movs	r4, #0
 8016afa:	f102 0c10 	add.w	ip, r2, #16
 8016afe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016b02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016b04:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8016b08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	b008      	add	sp, #32
 8016b10:	bd70      	pop	{r4, r5, r6, pc}
 8016b12:	240c      	movs	r4, #12
 8016b14:	4620      	mov	r0, r4
 8016b16:	b008      	add	sp, #32
 8016b18:	bd70      	pop	{r4, r5, r6, pc}
 8016b1a:	9b04      	ldr	r3, [sp, #16]
 8016b1c:	2401      	movs	r4, #1
 8016b1e:	9907      	ldr	r1, [sp, #28]
 8016b20:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8016b22:	4798      	blx	r3
 8016b24:	e7b7      	b.n	8016a96 <rmw_init_options_copy+0x22>
 8016b26:	240a      	movs	r4, #10
 8016b28:	e7b5      	b.n	8016a96 <rmw_init_options_copy+0x22>
 8016b2a:	bf00      	nop
 8016b2c:	0801c6f0 	.word	0x0801c6f0
 8016b30:	24009760 	.word	0x24009760

08016b34 <rmw_init_options_fini>:
 8016b34:	2800      	cmp	r0, #0
 8016b36:	d031      	beq.n	8016b9c <rmw_init_options_fini+0x68>
 8016b38:	b510      	push	{r4, lr}
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	b096      	sub	sp, #88	@ 0x58
 8016b3e:	3040      	adds	r0, #64	@ 0x40
 8016b40:	f7f7 fddc 	bl	800e6fc <rcutils_allocator_is_valid>
 8016b44:	b310      	cbz	r0, 8016b8c <rmw_init_options_fini+0x58>
 8016b46:	68a0      	ldr	r0, [r4, #8]
 8016b48:	b120      	cbz	r0, 8016b54 <rmw_init_options_fini+0x20>
 8016b4a:	4b15      	ldr	r3, [pc, #84]	@ (8016ba0 <rmw_init_options_fini+0x6c>)
 8016b4c:	6819      	ldr	r1, [r3, #0]
 8016b4e:	f7e9 fbcf 	bl	80002f0 <strcmp>
 8016b52:	bb08      	cbnz	r0, 8016b98 <rmw_init_options_fini+0x64>
 8016b54:	4b13      	ldr	r3, [pc, #76]	@ (8016ba4 <rmw_init_options_fini+0x70>)
 8016b56:	6819      	ldr	r1, [r3, #0]
 8016b58:	b1d9      	cbz	r1, 8016b92 <rmw_init_options_fini+0x5e>
 8016b5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016b5c:	e001      	b.n	8016b62 <rmw_init_options_fini+0x2e>
 8016b5e:	6849      	ldr	r1, [r1, #4]
 8016b60:	b1b9      	cbz	r1, 8016b92 <rmw_init_options_fini+0x5e>
 8016b62:	688b      	ldr	r3, [r1, #8]
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d1fa      	bne.n	8016b5e <rmw_init_options_fini+0x2a>
 8016b68:	480e      	ldr	r0, [pc, #56]	@ (8016ba4 <rmw_init_options_fini+0x70>)
 8016b6a:	f7ff fea5 	bl	80168b8 <put_memory>
 8016b6e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016b70:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8016b72:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8016b74:	4798      	blx	r3
 8016b76:	4668      	mov	r0, sp
 8016b78:	f7ff fcac 	bl	80164d4 <rmw_get_zero_initialized_init_options>
 8016b7c:	2258      	movs	r2, #88	@ 0x58
 8016b7e:	4669      	mov	r1, sp
 8016b80:	4620      	mov	r0, r4
 8016b82:	f004 f974 	bl	801ae6e <memcpy>
 8016b86:	2000      	movs	r0, #0
 8016b88:	b016      	add	sp, #88	@ 0x58
 8016b8a:	bd10      	pop	{r4, pc}
 8016b8c:	200b      	movs	r0, #11
 8016b8e:	b016      	add	sp, #88	@ 0x58
 8016b90:	bd10      	pop	{r4, pc}
 8016b92:	2001      	movs	r0, #1
 8016b94:	b016      	add	sp, #88	@ 0x58
 8016b96:	bd10      	pop	{r4, pc}
 8016b98:	200c      	movs	r0, #12
 8016b9a:	e7f5      	b.n	8016b88 <rmw_init_options_fini+0x54>
 8016b9c:	200b      	movs	r0, #11
 8016b9e:	4770      	bx	lr
 8016ba0:	0801c6f0 	.word	0x0801c6f0
 8016ba4:	24009760 	.word	0x24009760

08016ba8 <rmw_init>:
 8016ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bac:	b083      	sub	sp, #12
 8016bae:	2900      	cmp	r1, #0
 8016bb0:	f000 80d4 	beq.w	8016d5c <rmw_init+0x1b4>
 8016bb4:	4605      	mov	r5, r0
 8016bb6:	2800      	cmp	r0, #0
 8016bb8:	f000 80d0 	beq.w	8016d5c <rmw_init+0x1b4>
 8016bbc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	f000 80cc 	beq.w	8016d5c <rmw_init+0x1b4>
 8016bc4:	4b76      	ldr	r3, [pc, #472]	@ (8016da0 <rmw_init+0x1f8>)
 8016bc6:	460e      	mov	r6, r1
 8016bc8:	6880      	ldr	r0, [r0, #8]
 8016bca:	681f      	ldr	r7, [r3, #0]
 8016bcc:	b128      	cbz	r0, 8016bda <rmw_init+0x32>
 8016bce:	4639      	mov	r1, r7
 8016bd0:	f7e9 fb8e 	bl	80002f0 <strcmp>
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	f040 80d0 	bne.w	8016d7a <rmw_init+0x1d2>
 8016bda:	4c72      	ldr	r4, [pc, #456]	@ (8016da4 <rmw_init+0x1fc>)
 8016bdc:	f04f 0800 	mov.w	r8, #0
 8016be0:	4971      	ldr	r1, [pc, #452]	@ (8016da8 <rmw_init+0x200>)
 8016be2:	4872      	ldr	r0, [pc, #456]	@ (8016dac <rmw_init+0x204>)
 8016be4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016be8:	60b7      	str	r7, [r6, #8]
 8016bea:	e9c6 2300 	strd	r2, r3, [r6]
 8016bee:	68eb      	ldr	r3, [r5, #12]
 8016bf0:	2201      	movs	r2, #1
 8016bf2:	66b3      	str	r3, [r6, #104]	@ 0x68
 8016bf4:	f7f8 f874 	bl	800ece0 <rmw_uxrce_init_session_memory>
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	2204      	movs	r2, #4
 8016bfc:	496c      	ldr	r1, [pc, #432]	@ (8016db0 <rmw_init+0x208>)
 8016bfe:	f7f8 f8af 	bl	800ed60 <rmw_uxrce_init_static_input_buffer_memory>
 8016c02:	486a      	ldr	r0, [pc, #424]	@ (8016dac <rmw_init+0x204>)
 8016c04:	f884 800d 	strb.w	r8, [r4, #13]
 8016c08:	f7ff fe46 	bl	8016898 <get_memory>
 8016c0c:	2800      	cmp	r0, #0
 8016c0e:	f000 80b2 	beq.w	8016d76 <rmw_init+0x1ce>
 8016c12:	6884      	ldr	r4, [r0, #8]
 8016c14:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8016c16:	f104 0910 	add.w	r9, r4, #16
 8016c1a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8016c1c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8016c20:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016c24:	9101      	str	r1, [sp, #4]
 8016c26:	4661      	mov	r1, ip
 8016c28:	6a00      	ldr	r0, [r0, #32]
 8016c2a:	9000      	str	r0, [sp, #0]
 8016c2c:	4648      	mov	r0, r9
 8016c2e:	f001 f909 	bl	8017e44 <uxr_set_custom_transport_callbacks>
 8016c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016c36:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8016c3a:	495e      	ldr	r1, [pc, #376]	@ (8016db4 <rmw_init+0x20c>)
 8016c3c:	485e      	ldr	r0, [pc, #376]	@ (8016db8 <rmw_init+0x210>)
 8016c3e:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 8016c42:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8016c46:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8016c4a:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8016c4e:	2201      	movs	r2, #1
 8016c50:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8016c54:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8016c58:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8016c5c:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8016c60:	66f4      	str	r4, [r6, #108]	@ 0x6c
 8016c62:	f7f8 f81d 	bl	800eca0 <rmw_uxrce_init_node_memory>
 8016c66:	2205      	movs	r2, #5
 8016c68:	4954      	ldr	r1, [pc, #336]	@ (8016dbc <rmw_init+0x214>)
 8016c6a:	4855      	ldr	r0, [pc, #340]	@ (8016dc0 <rmw_init+0x218>)
 8016c6c:	f7f7 fff8 	bl	800ec60 <rmw_uxrce_init_subscription_memory>
 8016c70:	220a      	movs	r2, #10
 8016c72:	4954      	ldr	r1, [pc, #336]	@ (8016dc4 <rmw_init+0x21c>)
 8016c74:	4854      	ldr	r0, [pc, #336]	@ (8016dc8 <rmw_init+0x220>)
 8016c76:	f7f7 ffd3 	bl	800ec20 <rmw_uxrce_init_publisher_memory>
 8016c7a:	2201      	movs	r2, #1
 8016c7c:	4953      	ldr	r1, [pc, #332]	@ (8016dcc <rmw_init+0x224>)
 8016c7e:	4854      	ldr	r0, [pc, #336]	@ (8016dd0 <rmw_init+0x228>)
 8016c80:	f7f7 ff8e 	bl	800eba0 <rmw_uxrce_init_service_memory>
 8016c84:	2201      	movs	r2, #1
 8016c86:	4953      	ldr	r1, [pc, #332]	@ (8016dd4 <rmw_init+0x22c>)
 8016c88:	4853      	ldr	r0, [pc, #332]	@ (8016dd8 <rmw_init+0x230>)
 8016c8a:	f7f7 ffa9 	bl	800ebe0 <rmw_uxrce_init_client_memory>
 8016c8e:	220f      	movs	r2, #15
 8016c90:	4952      	ldr	r1, [pc, #328]	@ (8016ddc <rmw_init+0x234>)
 8016c92:	4853      	ldr	r0, [pc, #332]	@ (8016de0 <rmw_init+0x238>)
 8016c94:	f7f8 f844 	bl	800ed20 <rmw_uxrce_init_topic_memory>
 8016c98:	2203      	movs	r2, #3
 8016c9a:	4952      	ldr	r1, [pc, #328]	@ (8016de4 <rmw_init+0x23c>)
 8016c9c:	4852      	ldr	r0, [pc, #328]	@ (8016de8 <rmw_init+0x240>)
 8016c9e:	f7f8 f87f 	bl	800eda0 <rmw_uxrce_init_init_options_impl_memory>
 8016ca2:	2204      	movs	r2, #4
 8016ca4:	4951      	ldr	r1, [pc, #324]	@ (8016dec <rmw_init+0x244>)
 8016ca6:	4852      	ldr	r0, [pc, #328]	@ (8016df0 <rmw_init+0x248>)
 8016ca8:	f7f8 f89a 	bl	800ede0 <rmw_uxrce_init_wait_set_memory>
 8016cac:	2204      	movs	r2, #4
 8016cae:	4951      	ldr	r1, [pc, #324]	@ (8016df4 <rmw_init+0x24c>)
 8016cb0:	4851      	ldr	r0, [pc, #324]	@ (8016df8 <rmw_init+0x250>)
 8016cb2:	f7f8 f8b5 	bl	800ee20 <rmw_uxrce_init_guard_condition_memory>
 8016cb6:	4642      	mov	r2, r8
 8016cb8:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8016cba:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8016cbc:	f000 fc98 	bl	80175f0 <rmw_uxrce_transport_init>
 8016cc0:	4607      	mov	r7, r0
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	d15e      	bne.n	8016d84 <rmw_init+0x1dc>
 8016cc6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8016cc8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8016ccc:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8016cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	f7f9 fe74 	bl	80109c0 <uxr_init_session>
 8016cd8:	4628      	mov	r0, r5
 8016cda:	4622      	mov	r2, r4
 8016cdc:	4947      	ldr	r1, [pc, #284]	@ (8016dfc <rmw_init+0x254>)
 8016cde:	f7f9 fe93 	bl	8010a08 <uxr_set_topic_callback>
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	463a      	mov	r2, r7
 8016ce6:	4946      	ldr	r1, [pc, #280]	@ (8016e00 <rmw_init+0x258>)
 8016ce8:	f7f9 fe8a 	bl	8010a00 <uxr_set_status_callback>
 8016cec:	4628      	mov	r0, r5
 8016cee:	463a      	mov	r2, r7
 8016cf0:	4944      	ldr	r1, [pc, #272]	@ (8016e04 <rmw_init+0x25c>)
 8016cf2:	f7f9 fe8d 	bl	8010a10 <uxr_set_request_callback>
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	463a      	mov	r2, r7
 8016cfa:	4943      	ldr	r1, [pc, #268]	@ (8016e08 <rmw_init+0x260>)
 8016cfc:	f7f9 fe8c 	bl	8010a18 <uxr_set_reply_callback>
 8016d00:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016d04:	2304      	movs	r3, #4
 8016d06:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8016d0a:	0092      	lsls	r2, r2, #2
 8016d0c:	4628      	mov	r0, r5
 8016d0e:	f7f9 feb3 	bl	8010a78 <uxr_create_input_reliable_stream>
 8016d12:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016d16:	2304      	movs	r3, #4
 8016d18:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8016d1c:	0092      	lsls	r2, r2, #2
 8016d1e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8016d22:	4628      	mov	r0, r5
 8016d24:	f7f9 fe8e 	bl	8010a44 <uxr_create_output_reliable_stream>
 8016d28:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8016d2c:	4628      	mov	r0, r5
 8016d2e:	f7f9 fe9d 	bl	8010a6c <uxr_create_input_best_effort_stream>
 8016d32:	f241 3194 	movw	r1, #5012	@ 0x1394
 8016d36:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016d3a:	4421      	add	r1, r4
 8016d3c:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8016d40:	4628      	mov	r0, r5
 8016d42:	f7f9 fe6d 	bl	8010a20 <uxr_create_output_best_effort_stream>
 8016d46:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8016d4a:	4628      	mov	r0, r5
 8016d4c:	f7fa fbcc 	bl	80114e8 <uxr_create_session>
 8016d50:	4605      	mov	r5, r0
 8016d52:	b140      	cbz	r0, 8016d66 <rmw_init+0x1be>
 8016d54:	4638      	mov	r0, r7
 8016d56:	b003      	add	sp, #12
 8016d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d5c:	270b      	movs	r7, #11
 8016d5e:	4638      	mov	r0, r7
 8016d60:	b003      	add	sp, #12
 8016d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d66:	4648      	mov	r0, r9
 8016d68:	f001 f8aa 	bl	8017ec0 <uxr_close_custom_transport>
 8016d6c:	4621      	mov	r1, r4
 8016d6e:	480f      	ldr	r0, [pc, #60]	@ (8016dac <rmw_init+0x204>)
 8016d70:	f7ff fda2 	bl	80168b8 <put_memory>
 8016d74:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8016d76:	2701      	movs	r7, #1
 8016d78:	e7ec      	b.n	8016d54 <rmw_init+0x1ac>
 8016d7a:	270c      	movs	r7, #12
 8016d7c:	4638      	mov	r0, r7
 8016d7e:	b003      	add	sp, #12
 8016d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d84:	4648      	mov	r0, r9
 8016d86:	f001 f89b 	bl	8017ec0 <uxr_close_custom_transport>
 8016d8a:	4621      	mov	r1, r4
 8016d8c:	4807      	ldr	r0, [pc, #28]	@ (8016dac <rmw_init+0x204>)
 8016d8e:	f7ff fd93 	bl	80168b8 <put_memory>
 8016d92:	4638      	mov	r0, r7
 8016d94:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 8016d98:	b003      	add	sp, #12
 8016d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d9e:	bf00      	nop
 8016da0:	0801c6f0 	.word	0x0801c6f0
 8016da4:	2400b870 	.word	0x2400b870
 8016da8:	2400c968 	.word	0x2400c968
 8016dac:	2400df10 	.word	0x2400df10
 8016db0:	24009770 	.word	0x24009770
 8016db4:	2400c8b0 	.word	0x2400c8b0
 8016db8:	2400c954 	.word	0x2400c954
 8016dbc:	2400bbe8 	.word	0x2400bbe8
 8016dc0:	2400c020 	.word	0x2400c020
 8016dc4:	2400c030 	.word	0x2400c030
 8016dc8:	2400c8a0 	.word	0x2400c8a0
 8016dcc:	2400bb10 	.word	0x2400bb10
 8016dd0:	2400bbd8 	.word	0x2400bbd8
 8016dd4:	2400ba38 	.word	0x2400ba38
 8016dd8:	2400bb00 	.word	0x2400bb00
 8016ddc:	2400b880 	.word	0x2400b880
 8016de0:	2400ba24 	.word	0x2400ba24
 8016de4:	240096dc 	.word	0x240096dc
 8016de8:	24009760 	.word	0x24009760
 8016dec:	2400965c 	.word	0x2400965c
 8016df0:	240096cc 	.word	0x240096cc
 8016df4:	240095cc 	.word	0x240095cc
 8016df8:	2400964c 	.word	0x2400964c
 8016dfc:	08019f1d 	.word	0x08019f1d
 8016e00:	08019f15 	.word	0x08019f15
 8016e04:	08019fb5 	.word	0x08019fb5
 8016e08:	0801a051 	.word	0x0801a051

08016e0c <rmw_context_fini>:
 8016e0c:	4b17      	ldr	r3, [pc, #92]	@ (8016e6c <rmw_context_fini+0x60>)
 8016e0e:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 8016e10:	b570      	push	{r4, r5, r6, lr}
 8016e12:	681c      	ldr	r4, [r3, #0]
 8016e14:	4605      	mov	r5, r0
 8016e16:	b334      	cbz	r4, 8016e66 <rmw_context_fini+0x5a>
 8016e18:	2600      	movs	r6, #0
 8016e1a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8016e1e:	6902      	ldr	r2, [r0, #16]
 8016e20:	428a      	cmp	r2, r1
 8016e22:	d018      	beq.n	8016e56 <rmw_context_fini+0x4a>
 8016e24:	2c00      	cmp	r4, #0
 8016e26:	d1f8      	bne.n	8016e1a <rmw_context_fini+0xe>
 8016e28:	b189      	cbz	r1, 8016e4e <rmw_context_fini+0x42>
 8016e2a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8016e2e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8016e32:	789b      	ldrb	r3, [r3, #2]
 8016e34:	2b01      	cmp	r3, #1
 8016e36:	bf14      	ite	ne
 8016e38:	210a      	movne	r1, #10
 8016e3a:	2100      	moveq	r1, #0
 8016e3c:	f7fa fb2c 	bl	8011498 <uxr_delete_session_retries>
 8016e40:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8016e42:	f7f8 f80d 	bl	800ee60 <rmw_uxrce_fini_session_memory>
 8016e46:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8016e48:	3010      	adds	r0, #16
 8016e4a:	f001 f839 	bl	8017ec0 <uxr_close_custom_transport>
 8016e4e:	2300      	movs	r3, #0
 8016e50:	4630      	mov	r0, r6
 8016e52:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8016e54:	bd70      	pop	{r4, r5, r6, pc}
 8016e56:	3018      	adds	r0, #24
 8016e58:	f000 f90a 	bl	8017070 <rmw_destroy_node>
 8016e5c:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 8016e5e:	4606      	mov	r6, r0
 8016e60:	2c00      	cmp	r4, #0
 8016e62:	d1da      	bne.n	8016e1a <rmw_context_fini+0xe>
 8016e64:	e7e0      	b.n	8016e28 <rmw_context_fini+0x1c>
 8016e66:	4626      	mov	r6, r4
 8016e68:	e7de      	b.n	8016e28 <rmw_context_fini+0x1c>
 8016e6a:	bf00      	nop
 8016e6c:	2400c954 	.word	0x2400c954

08016e70 <create_topic>:
 8016e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e74:	4604      	mov	r4, r0
 8016e76:	b084      	sub	sp, #16
 8016e78:	4824      	ldr	r0, [pc, #144]	@ (8016f0c <create_topic+0x9c>)
 8016e7a:	460f      	mov	r7, r1
 8016e7c:	4616      	mov	r6, r2
 8016e7e:	f7ff fd0b 	bl	8016898 <get_memory>
 8016e82:	2800      	cmp	r0, #0
 8016e84:	d03c      	beq.n	8016f00 <create_topic+0x90>
 8016e86:	6923      	ldr	r3, [r4, #16]
 8016e88:	2102      	movs	r1, #2
 8016e8a:	6885      	ldr	r5, [r0, #8]
 8016e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016e90:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016e94:	1c42      	adds	r2, r0, #1
 8016e96:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8016e9a:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016e9e:	f7f9 fcd1 	bl	8010844 <uxr_object_id>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	4638      	mov	r0, r7
 8016ea6:	4f1a      	ldr	r7, [pc, #104]	@ (8016f10 <create_topic+0xa0>)
 8016ea8:	223c      	movs	r2, #60	@ 0x3c
 8016eaa:	612b      	str	r3, [r5, #16]
 8016eac:	4639      	mov	r1, r7
 8016eae:	f7f8 f9c3 	bl	800f238 <generate_topic_name>
 8016eb2:	b310      	cbz	r0, 8016efa <create_topic+0x8a>
 8016eb4:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 8016f14 <create_topic+0xa4>
 8016eb8:	4630      	mov	r0, r6
 8016eba:	2264      	movs	r2, #100	@ 0x64
 8016ebc:	4641      	mov	r1, r8
 8016ebe:	f7f8 f98b 	bl	800f1d8 <generate_type_name>
 8016ec2:	b1d0      	cbz	r0, 8016efa <create_topic+0x8a>
 8016ec4:	6920      	ldr	r0, [r4, #16]
 8016ec6:	2106      	movs	r1, #6
 8016ec8:	6963      	ldr	r3, [r4, #20]
 8016eca:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016ece:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ed2:	9700      	str	r7, [sp, #0]
 8016ed4:	e9cd 8101 	strd	r8, r1, [sp, #4]
 8016ed8:	6811      	ldr	r1, [r2, #0]
 8016eda:	692a      	ldr	r2, [r5, #16]
 8016edc:	f7f9 fbec 	bl	80106b8 <uxr_buffer_create_topic_bin>
 8016ee0:	4602      	mov	r2, r0
 8016ee2:	6920      	ldr	r0, [r4, #16]
 8016ee4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016ee8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016eec:	f7f8 f93a 	bl	800f164 <run_xrce_session>
 8016ef0:	b118      	cbz	r0, 8016efa <create_topic+0x8a>
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	b004      	add	sp, #16
 8016ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016efa:	4628      	mov	r0, r5
 8016efc:	f7f8 f826 	bl	800ef4c <rmw_uxrce_fini_topic_memory>
 8016f00:	2500      	movs	r5, #0
 8016f02:	4628      	mov	r0, r5
 8016f04:	b004      	add	sp, #16
 8016f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f0a:	bf00      	nop
 8016f0c:	2400ba24 	.word	0x2400ba24
 8016f10:	2400dfa4 	.word	0x2400dfa4
 8016f14:	2400df40 	.word	0x2400df40

08016f18 <destroy_topic>:
 8016f18:	b538      	push	{r3, r4, r5, lr}
 8016f1a:	6984      	ldr	r4, [r0, #24]
 8016f1c:	b1dc      	cbz	r4, 8016f56 <destroy_topic+0x3e>
 8016f1e:	4605      	mov	r5, r0
 8016f20:	6920      	ldr	r0, [r4, #16]
 8016f22:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016f26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016f2a:	692a      	ldr	r2, [r5, #16]
 8016f2c:	6819      	ldr	r1, [r3, #0]
 8016f2e:	f7f9 fb47 	bl	80105c0 <uxr_buffer_delete_entity>
 8016f32:	4602      	mov	r2, r0
 8016f34:	6920      	ldr	r0, [r4, #16]
 8016f36:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016f3a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016f3e:	f7f8 f911 	bl	800f164 <run_xrce_session>
 8016f42:	4604      	mov	r4, r0
 8016f44:	4628      	mov	r0, r5
 8016f46:	f084 0401 	eor.w	r4, r4, #1
 8016f4a:	f7f7 ffff 	bl	800ef4c <rmw_uxrce_fini_topic_memory>
 8016f4e:	b2e4      	uxtb	r4, r4
 8016f50:	0064      	lsls	r4, r4, #1
 8016f52:	4620      	mov	r0, r4
 8016f54:	bd38      	pop	{r3, r4, r5, pc}
 8016f56:	2401      	movs	r4, #1
 8016f58:	4620      	mov	r0, r4
 8016f5a:	bd38      	pop	{r3, r4, r5, pc}

08016f5c <create_node>:
 8016f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f60:	b083      	sub	sp, #12
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d063      	beq.n	801702e <create_node+0xd2>
 8016f66:	4606      	mov	r6, r0
 8016f68:	4836      	ldr	r0, [pc, #216]	@ (8017044 <create_node+0xe8>)
 8016f6a:	460f      	mov	r7, r1
 8016f6c:	4690      	mov	r8, r2
 8016f6e:	461d      	mov	r5, r3
 8016f70:	f7ff fc92 	bl	8016898 <get_memory>
 8016f74:	2800      	cmp	r0, #0
 8016f76:	d05a      	beq.n	801702e <create_node+0xd2>
 8016f78:	6884      	ldr	r4, [r0, #8]
 8016f7a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8016f7c:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8016f80:	f104 0518 	add.w	r5, r4, #24
 8016f84:	6123      	str	r3, [r4, #16]
 8016f86:	f7ff fd0d 	bl	80169a4 <rmw_get_implementation_identifier>
 8016f8a:	f8c4 9020 	str.w	r9, [r4, #32]
 8016f8e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8016f92:	4630      	mov	r0, r6
 8016f94:	f7e9 fa0c 	bl	80003b0 <strlen>
 8016f98:	1c42      	adds	r2, r0, #1
 8016f9a:	2a3c      	cmp	r2, #60	@ 0x3c
 8016f9c:	d844      	bhi.n	8017028 <create_node+0xcc>
 8016f9e:	4648      	mov	r0, r9
 8016fa0:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8016fa4:	4631      	mov	r1, r6
 8016fa6:	f003 ff62 	bl	801ae6e <memcpy>
 8016faa:	4638      	mov	r0, r7
 8016fac:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8016fb0:	f7e9 f9fe 	bl	80003b0 <strlen>
 8016fb4:	1c42      	adds	r2, r0, #1
 8016fb6:	2a3c      	cmp	r2, #60	@ 0x3c
 8016fb8:	d836      	bhi.n	8017028 <create_node+0xcc>
 8016fba:	4639      	mov	r1, r7
 8016fbc:	4648      	mov	r0, r9
 8016fbe:	f003 ff56 	bl	801ae6e <memcpy>
 8016fc2:	6923      	ldr	r3, [r4, #16]
 8016fc4:	2101      	movs	r1, #1
 8016fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016fca:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8016fce:	1842      	adds	r2, r0, r1
 8016fd0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8016fd4:	f7f9 fc36 	bl	8010844 <uxr_object_id>
 8016fd8:	6160      	str	r0, [r4, #20]
 8016fda:	783b      	ldrb	r3, [r7, #0]
 8016fdc:	2b2f      	cmp	r3, #47	@ 0x2f
 8016fde:	d128      	bne.n	8017032 <create_node+0xd6>
 8016fe0:	787b      	ldrb	r3, [r7, #1]
 8016fe2:	bb33      	cbnz	r3, 8017032 <create_node+0xd6>
 8016fe4:	4633      	mov	r3, r6
 8016fe6:	4a18      	ldr	r2, [pc, #96]	@ (8017048 <create_node+0xec>)
 8016fe8:	213c      	movs	r1, #60	@ 0x3c
 8016fea:	4818      	ldr	r0, [pc, #96]	@ (801704c <create_node+0xf0>)
 8016fec:	f003 fc92 	bl	801a914 <sniprintf>
 8016ff0:	6920      	ldr	r0, [r4, #16]
 8016ff2:	2106      	movs	r1, #6
 8016ff4:	fa1f f388 	uxth.w	r3, r8
 8016ff8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016ffc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017000:	9101      	str	r1, [sp, #4]
 8017002:	4912      	ldr	r1, [pc, #72]	@ (801704c <create_node+0xf0>)
 8017004:	9100      	str	r1, [sp, #0]
 8017006:	6811      	ldr	r1, [r2, #0]
 8017008:	6962      	ldr	r2, [r4, #20]
 801700a:	f7f9 fb23 	bl	8010654 <uxr_buffer_create_participant_bin>
 801700e:	4602      	mov	r2, r0
 8017010:	6920      	ldr	r0, [r4, #16]
 8017012:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017016:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801701a:	f7f8 f8a3 	bl	800f164 <run_xrce_session>
 801701e:	b118      	cbz	r0, 8017028 <create_node+0xcc>
 8017020:	4628      	mov	r0, r5
 8017022:	b003      	add	sp, #12
 8017024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017028:	4628      	mov	r0, r5
 801702a:	f7f7 ff1f 	bl	800ee6c <rmw_uxrce_fini_node_memory>
 801702e:	2500      	movs	r5, #0
 8017030:	e7f6      	b.n	8017020 <create_node+0xc4>
 8017032:	463b      	mov	r3, r7
 8017034:	4a06      	ldr	r2, [pc, #24]	@ (8017050 <create_node+0xf4>)
 8017036:	213c      	movs	r1, #60	@ 0x3c
 8017038:	9600      	str	r6, [sp, #0]
 801703a:	4804      	ldr	r0, [pc, #16]	@ (801704c <create_node+0xf0>)
 801703c:	f003 fc6a 	bl	801a914 <sniprintf>
 8017040:	e7d6      	b.n	8016ff0 <create_node+0x94>
 8017042:	bf00      	nop
 8017044:	2400c954 	.word	0x2400c954
 8017048:	0801bd7c 	.word	0x0801bd7c
 801704c:	2400dfe0 	.word	0x2400dfe0
 8017050:	0801bf78 	.word	0x0801bf78

08017054 <rmw_create_node>:
 8017054:	4603      	mov	r3, r0
 8017056:	4608      	mov	r0, r1
 8017058:	4611      	mov	r1, r2
 801705a:	b138      	cbz	r0, 801706c <rmw_create_node+0x18>
 801705c:	7802      	ldrb	r2, [r0, #0]
 801705e:	b12a      	cbz	r2, 801706c <rmw_create_node+0x18>
 8017060:	b121      	cbz	r1, 801706c <rmw_create_node+0x18>
 8017062:	780a      	ldrb	r2, [r1, #0]
 8017064:	b112      	cbz	r2, 801706c <rmw_create_node+0x18>
 8017066:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017068:	f7ff bf78 	b.w	8016f5c <create_node>
 801706c:	2000      	movs	r0, #0
 801706e:	4770      	bx	lr

08017070 <rmw_destroy_node>:
 8017070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017072:	b328      	cbz	r0, 80170c0 <rmw_destroy_node+0x50>
 8017074:	4607      	mov	r7, r0
 8017076:	6800      	ldr	r0, [r0, #0]
 8017078:	b120      	cbz	r0, 8017084 <rmw_destroy_node+0x14>
 801707a:	4b37      	ldr	r3, [pc, #220]	@ (8017158 <rmw_destroy_node+0xe8>)
 801707c:	6819      	ldr	r1, [r3, #0]
 801707e:	f7e9 f937 	bl	80002f0 <strcmp>
 8017082:	b9e8      	cbnz	r0, 80170c0 <rmw_destroy_node+0x50>
 8017084:	687d      	ldr	r5, [r7, #4]
 8017086:	b1dd      	cbz	r5, 80170c0 <rmw_destroy_node+0x50>
 8017088:	4b34      	ldr	r3, [pc, #208]	@ (801715c <rmw_destroy_node+0xec>)
 801708a:	681c      	ldr	r4, [r3, #0]
 801708c:	2c00      	cmp	r4, #0
 801708e:	d060      	beq.n	8017152 <rmw_destroy_node+0xe2>
 8017090:	2600      	movs	r6, #0
 8017092:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017096:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801709a:	429d      	cmp	r5, r3
 801709c:	d013      	beq.n	80170c6 <rmw_destroy_node+0x56>
 801709e:	2c00      	cmp	r4, #0
 80170a0:	d1f7      	bne.n	8017092 <rmw_destroy_node+0x22>
 80170a2:	4b2f      	ldr	r3, [pc, #188]	@ (8017160 <rmw_destroy_node+0xf0>)
 80170a4:	681c      	ldr	r4, [r3, #0]
 80170a6:	b1c4      	cbz	r4, 80170da <rmw_destroy_node+0x6a>
 80170a8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80170ac:	6a0b      	ldr	r3, [r1, #32]
 80170ae:	429d      	cmp	r5, r3
 80170b0:	d1f9      	bne.n	80170a6 <rmw_destroy_node+0x36>
 80170b2:	317c      	adds	r1, #124	@ 0x7c
 80170b4:	4638      	mov	r0, r7
 80170b6:	f000 f9eb 	bl	8017490 <rmw_destroy_subscription>
 80170ba:	2801      	cmp	r0, #1
 80170bc:	4606      	mov	r6, r0
 80170be:	d1f2      	bne.n	80170a6 <rmw_destroy_node+0x36>
 80170c0:	2601      	movs	r6, #1
 80170c2:	4630      	mov	r0, r6
 80170c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170c6:	3184      	adds	r1, #132	@ 0x84
 80170c8:	4638      	mov	r0, r7
 80170ca:	f7f7 fd19 	bl	800eb00 <rmw_destroy_publisher>
 80170ce:	2801      	cmp	r0, #1
 80170d0:	4606      	mov	r6, r0
 80170d2:	d0f5      	beq.n	80170c0 <rmw_destroy_node+0x50>
 80170d4:	2c00      	cmp	r4, #0
 80170d6:	d1dc      	bne.n	8017092 <rmw_destroy_node+0x22>
 80170d8:	e7e3      	b.n	80170a2 <rmw_destroy_node+0x32>
 80170da:	4b22      	ldr	r3, [pc, #136]	@ (8017164 <rmw_destroy_node+0xf4>)
 80170dc:	681c      	ldr	r4, [r3, #0]
 80170de:	b16c      	cbz	r4, 80170fc <rmw_destroy_node+0x8c>
 80170e0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80170e4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80170e6:	429d      	cmp	r5, r3
 80170e8:	d1f9      	bne.n	80170de <rmw_destroy_node+0x6e>
 80170ea:	317c      	adds	r1, #124	@ 0x7c
 80170ec:	4638      	mov	r0, r7
 80170ee:	f000 f98b 	bl	8017408 <rmw_destroy_service>
 80170f2:	2801      	cmp	r0, #1
 80170f4:	4606      	mov	r6, r0
 80170f6:	d0e3      	beq.n	80170c0 <rmw_destroy_node+0x50>
 80170f8:	2c00      	cmp	r4, #0
 80170fa:	d1f1      	bne.n	80170e0 <rmw_destroy_node+0x70>
 80170fc:	4b1a      	ldr	r3, [pc, #104]	@ (8017168 <rmw_destroy_node+0xf8>)
 80170fe:	681c      	ldr	r4, [r3, #0]
 8017100:	b16c      	cbz	r4, 801711e <rmw_destroy_node+0xae>
 8017102:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017106:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8017108:	429d      	cmp	r5, r3
 801710a:	d1f9      	bne.n	8017100 <rmw_destroy_node+0x90>
 801710c:	317c      	adds	r1, #124	@ 0x7c
 801710e:	4638      	mov	r0, r7
 8017110:	f7ff fbe6 	bl	80168e0 <rmw_destroy_client>
 8017114:	2801      	cmp	r0, #1
 8017116:	4606      	mov	r6, r0
 8017118:	d0d2      	beq.n	80170c0 <rmw_destroy_node+0x50>
 801711a:	2c00      	cmp	r4, #0
 801711c:	d1f1      	bne.n	8017102 <rmw_destroy_node+0x92>
 801711e:	6928      	ldr	r0, [r5, #16]
 8017120:	696a      	ldr	r2, [r5, #20]
 8017122:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017126:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801712a:	6819      	ldr	r1, [r3, #0]
 801712c:	f7f9 fa48 	bl	80105c0 <uxr_buffer_delete_entity>
 8017130:	4602      	mov	r2, r0
 8017132:	6928      	ldr	r0, [r5, #16]
 8017134:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017138:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801713c:	f7f8 f812 	bl	800f164 <run_xrce_session>
 8017140:	4603      	mov	r3, r0
 8017142:	4638      	mov	r0, r7
 8017144:	2b00      	cmp	r3, #0
 8017146:	bf08      	it	eq
 8017148:	2602      	moveq	r6, #2
 801714a:	f7f7 fe8f 	bl	800ee6c <rmw_uxrce_fini_node_memory>
 801714e:	4630      	mov	r0, r6
 8017150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017152:	4626      	mov	r6, r4
 8017154:	e7a5      	b.n	80170a2 <rmw_destroy_node+0x32>
 8017156:	bf00      	nop
 8017158:	0801c6f0 	.word	0x0801c6f0
 801715c:	2400c8a0 	.word	0x2400c8a0
 8017160:	2400c020 	.word	0x2400c020
 8017164:	2400bbd8 	.word	0x2400bbd8
 8017168:	2400bb00 	.word	0x2400bb00

0801716c <rmw_node_get_graph_guard_condition>:
 801716c:	6843      	ldr	r3, [r0, #4]
 801716e:	6918      	ldr	r0, [r3, #16]
 8017170:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8017174:	4770      	bx	lr
 8017176:	bf00      	nop

08017178 <rmw_send_request>:
 8017178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801717c:	4604      	mov	r4, r0
 801717e:	6800      	ldr	r0, [r0, #0]
 8017180:	b08a      	sub	sp, #40	@ 0x28
 8017182:	460e      	mov	r6, r1
 8017184:	4615      	mov	r5, r2
 8017186:	b128      	cbz	r0, 8017194 <rmw_send_request+0x1c>
 8017188:	4b1e      	ldr	r3, [pc, #120]	@ (8017204 <rmw_send_request+0x8c>)
 801718a:	6819      	ldr	r1, [r3, #0]
 801718c:	f7e9 f8b0 	bl	80002f0 <strcmp>
 8017190:	2800      	cmp	r0, #0
 8017192:	d133      	bne.n	80171fc <rmw_send_request+0x84>
 8017194:	6864      	ldr	r4, [r4, #4]
 8017196:	6963      	ldr	r3, [r4, #20]
 8017198:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 801719a:	689b      	ldr	r3, [r3, #8]
 801719c:	4798      	blx	r3
 801719e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80171a2:	4630      	mov	r0, r6
 80171a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80171a8:	4798      	blx	r3
 80171aa:	693b      	ldr	r3, [r7, #16]
 80171ac:	9000      	str	r0, [sp, #0]
 80171ae:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80171b2:	6922      	ldr	r2, [r4, #16]
 80171b4:	ab02      	add	r3, sp, #8
 80171b6:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80171b8:	f7fa fe04 	bl	8011dc4 <uxr_prepare_output_stream>
 80171bc:	2300      	movs	r3, #0
 80171be:	6028      	str	r0, [r5, #0]
 80171c0:	606b      	str	r3, [r5, #4]
 80171c2:	b190      	cbz	r0, 80171ea <rmw_send_request+0x72>
 80171c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80171c8:	a902      	add	r1, sp, #8
 80171ca:	4630      	mov	r0, r6
 80171cc:	4798      	blx	r3
 80171ce:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80171d2:	6938      	ldr	r0, [r7, #16]
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d00c      	beq.n	80171f2 <rmw_send_request+0x7a>
 80171d8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80171da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171de:	f7fa f80f 	bl	8011200 <uxr_run_session_until_confirm_delivery>
 80171e2:	2000      	movs	r0, #0
 80171e4:	b00a      	add	sp, #40	@ 0x28
 80171e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171ea:	2001      	movs	r0, #1
 80171ec:	b00a      	add	sp, #40	@ 0x28
 80171ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171f6:	f7f9 fc55 	bl	8010aa4 <uxr_flash_output_streams>
 80171fa:	e7f2      	b.n	80171e2 <rmw_send_request+0x6a>
 80171fc:	200c      	movs	r0, #12
 80171fe:	b00a      	add	sp, #40	@ 0x28
 8017200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017204:	0801c6f0 	.word	0x0801c6f0

08017208 <rmw_take_request>:
 8017208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801720c:	4605      	mov	r5, r0
 801720e:	6800      	ldr	r0, [r0, #0]
 8017210:	b089      	sub	sp, #36	@ 0x24
 8017212:	460c      	mov	r4, r1
 8017214:	4690      	mov	r8, r2
 8017216:	461e      	mov	r6, r3
 8017218:	b128      	cbz	r0, 8017226 <rmw_take_request+0x1e>
 801721a:	4b28      	ldr	r3, [pc, #160]	@ (80172bc <rmw_take_request+0xb4>)
 801721c:	6819      	ldr	r1, [r3, #0]
 801721e:	f7e9 f867 	bl	80002f0 <strcmp>
 8017222:	2800      	cmp	r0, #0
 8017224:	d146      	bne.n	80172b4 <rmw_take_request+0xac>
 8017226:	b10e      	cbz	r6, 801722c <rmw_take_request+0x24>
 8017228:	2300      	movs	r3, #0
 801722a:	7033      	strb	r3, [r6, #0]
 801722c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017230:	f7f7 ff1a 	bl	800f068 <rmw_uxrce_clean_expired_static_input_buffer>
 8017234:	4648      	mov	r0, r9
 8017236:	f7f7 feef 	bl	800f018 <rmw_uxrce_find_static_input_buffer_by_owner>
 801723a:	4607      	mov	r7, r0
 801723c:	b3b0      	cbz	r0, 80172ac <rmw_take_request+0xa4>
 801723e:	6885      	ldr	r5, [r0, #8]
 8017240:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8017244:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8017248:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801724c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017250:	7423      	strb	r3, [r4, #16]
 8017252:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 8017256:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801725a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801725e:	74e3      	strb	r3, [r4, #19]
 8017260:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 8017264:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8017268:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801726c:	6161      	str	r1, [r4, #20]
 801726e:	61a2      	str	r2, [r4, #24]
 8017270:	61e3      	str	r3, [r4, #28]
 8017272:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017276:	689b      	ldr	r3, [r3, #8]
 8017278:	4798      	blx	r3
 801727a:	6844      	ldr	r4, [r0, #4]
 801727c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017280:	f105 0110 	add.w	r1, r5, #16
 8017284:	4668      	mov	r0, sp
 8017286:	f7f9 f8cb 	bl	8010420 <ucdr_init_buffer>
 801728a:	68e3      	ldr	r3, [r4, #12]
 801728c:	4641      	mov	r1, r8
 801728e:	4668      	mov	r0, sp
 8017290:	4798      	blx	r3
 8017292:	4639      	mov	r1, r7
 8017294:	4604      	mov	r4, r0
 8017296:	480a      	ldr	r0, [pc, #40]	@ (80172c0 <rmw_take_request+0xb8>)
 8017298:	f7ff fb0e 	bl	80168b8 <put_memory>
 801729c:	b106      	cbz	r6, 80172a0 <rmw_take_request+0x98>
 801729e:	7034      	strb	r4, [r6, #0]
 80172a0:	f084 0001 	eor.w	r0, r4, #1
 80172a4:	b2c0      	uxtb	r0, r0
 80172a6:	b009      	add	sp, #36	@ 0x24
 80172a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172ac:	2001      	movs	r0, #1
 80172ae:	b009      	add	sp, #36	@ 0x24
 80172b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172b4:	200c      	movs	r0, #12
 80172b6:	b009      	add	sp, #36	@ 0x24
 80172b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172bc:	0801c6f0 	.word	0x0801c6f0
 80172c0:	2400b870 	.word	0x2400b870

080172c4 <rmw_send_response>:
 80172c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172c6:	4605      	mov	r5, r0
 80172c8:	6800      	ldr	r0, [r0, #0]
 80172ca:	b091      	sub	sp, #68	@ 0x44
 80172cc:	460c      	mov	r4, r1
 80172ce:	4616      	mov	r6, r2
 80172d0:	b128      	cbz	r0, 80172de <rmw_send_response+0x1a>
 80172d2:	4b28      	ldr	r3, [pc, #160]	@ (8017374 <rmw_send_response+0xb0>)
 80172d4:	6819      	ldr	r1, [r3, #0]
 80172d6:	f7e9 f80b 	bl	80002f0 <strcmp>
 80172da:	2800      	cmp	r0, #0
 80172dc:	d141      	bne.n	8017362 <rmw_send_response+0x9e>
 80172de:	686d      	ldr	r5, [r5, #4]
 80172e0:	68a1      	ldr	r1, [r4, #8]
 80172e2:	6860      	ldr	r0, [r4, #4]
 80172e4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80172e6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80172ea:	9307      	str	r3, [sp, #28]
 80172ec:	4623      	mov	r3, r4
 80172ee:	9206      	str	r2, [sp, #24]
 80172f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172f4:	789b      	ldrb	r3, [r3, #2]
 80172f6:	f88d 2017 	strb.w	r2, [sp, #23]
 80172fa:	f88d 3016 	strb.w	r3, [sp, #22]
 80172fe:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8017302:	68e2      	ldr	r2, [r4, #12]
 8017304:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017308:	ab02      	add	r3, sp, #8
 801730a:	c307      	stmia	r3!, {r0, r1, r2}
 801730c:	696b      	ldr	r3, [r5, #20]
 801730e:	68db      	ldr	r3, [r3, #12]
 8017310:	4798      	blx	r3
 8017312:	6844      	ldr	r4, [r0, #4]
 8017314:	4630      	mov	r0, r6
 8017316:	6923      	ldr	r3, [r4, #16]
 8017318:	4798      	blx	r3
 801731a:	f100 0318 	add.w	r3, r0, #24
 801731e:	6938      	ldr	r0, [r7, #16]
 8017320:	9300      	str	r3, [sp, #0]
 8017322:	ab08      	add	r3, sp, #32
 8017324:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017328:	692a      	ldr	r2, [r5, #16]
 801732a:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801732c:	f7fa fd4a 	bl	8011dc4 <uxr_prepare_output_stream>
 8017330:	b910      	cbnz	r0, 8017338 <rmw_send_response+0x74>
 8017332:	2001      	movs	r0, #1
 8017334:	b011      	add	sp, #68	@ 0x44
 8017336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017338:	a902      	add	r1, sp, #8
 801733a:	a808      	add	r0, sp, #32
 801733c:	f7fb fd6a 	bl	8012e14 <uxr_serialize_SampleIdentity>
 8017340:	68a3      	ldr	r3, [r4, #8]
 8017342:	a908      	add	r1, sp, #32
 8017344:	4630      	mov	r0, r6
 8017346:	4798      	blx	r3
 8017348:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801734c:	6938      	ldr	r0, [r7, #16]
 801734e:	2b01      	cmp	r3, #1
 8017350:	d00a      	beq.n	8017368 <rmw_send_response+0xa4>
 8017352:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017354:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017358:	f7f9 ff52 	bl	8011200 <uxr_run_session_until_confirm_delivery>
 801735c:	2000      	movs	r0, #0
 801735e:	b011      	add	sp, #68	@ 0x44
 8017360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017362:	200c      	movs	r0, #12
 8017364:	b011      	add	sp, #68	@ 0x44
 8017366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017368:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801736c:	f7f9 fb9a 	bl	8010aa4 <uxr_flash_output_streams>
 8017370:	e7f4      	b.n	801735c <rmw_send_response+0x98>
 8017372:	bf00      	nop
 8017374:	0801c6f0 	.word	0x0801c6f0

08017378 <rmw_take_response>:
 8017378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801737c:	4604      	mov	r4, r0
 801737e:	6800      	ldr	r0, [r0, #0]
 8017380:	b088      	sub	sp, #32
 8017382:	460f      	mov	r7, r1
 8017384:	4690      	mov	r8, r2
 8017386:	461d      	mov	r5, r3
 8017388:	b120      	cbz	r0, 8017394 <rmw_take_response+0x1c>
 801738a:	4b1d      	ldr	r3, [pc, #116]	@ (8017400 <rmw_take_response+0x88>)
 801738c:	6819      	ldr	r1, [r3, #0]
 801738e:	f7e8 ffaf 	bl	80002f0 <strcmp>
 8017392:	bb68      	cbnz	r0, 80173f0 <rmw_take_response+0x78>
 8017394:	b10d      	cbz	r5, 801739a <rmw_take_response+0x22>
 8017396:	2300      	movs	r3, #0
 8017398:	702b      	strb	r3, [r5, #0]
 801739a:	6864      	ldr	r4, [r4, #4]
 801739c:	f7f7 fe64 	bl	800f068 <rmw_uxrce_clean_expired_static_input_buffer>
 80173a0:	4620      	mov	r0, r4
 80173a2:	f7f7 fe39 	bl	800f018 <rmw_uxrce_find_static_input_buffer_by_owner>
 80173a6:	4606      	mov	r6, r0
 80173a8:	b330      	cbz	r0, 80173f8 <rmw_take_response+0x80>
 80173aa:	6963      	ldr	r3, [r4, #20]
 80173ac:	6884      	ldr	r4, [r0, #8]
 80173ae:	68db      	ldr	r3, [r3, #12]
 80173b0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80173b4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80173b8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80173bc:	4798      	blx	r3
 80173be:	6847      	ldr	r7, [r0, #4]
 80173c0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80173c4:	f104 0110 	add.w	r1, r4, #16
 80173c8:	4668      	mov	r0, sp
 80173ca:	f7f9 f829 	bl	8010420 <ucdr_init_buffer>
 80173ce:	4641      	mov	r1, r8
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	4668      	mov	r0, sp
 80173d4:	4798      	blx	r3
 80173d6:	4631      	mov	r1, r6
 80173d8:	4604      	mov	r4, r0
 80173da:	480a      	ldr	r0, [pc, #40]	@ (8017404 <rmw_take_response+0x8c>)
 80173dc:	f7ff fa6c 	bl	80168b8 <put_memory>
 80173e0:	b105      	cbz	r5, 80173e4 <rmw_take_response+0x6c>
 80173e2:	702c      	strb	r4, [r5, #0]
 80173e4:	f084 0001 	eor.w	r0, r4, #1
 80173e8:	b2c0      	uxtb	r0, r0
 80173ea:	b008      	add	sp, #32
 80173ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173f0:	200c      	movs	r0, #12
 80173f2:	b008      	add	sp, #32
 80173f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173f8:	2001      	movs	r0, #1
 80173fa:	b008      	add	sp, #32
 80173fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017400:	0801c6f0 	.word	0x0801c6f0
 8017404:	2400b870 	.word	0x2400b870

08017408 <rmw_destroy_service>:
 8017408:	b570      	push	{r4, r5, r6, lr}
 801740a:	b128      	cbz	r0, 8017418 <rmw_destroy_service+0x10>
 801740c:	4604      	mov	r4, r0
 801740e:	6800      	ldr	r0, [r0, #0]
 8017410:	460d      	mov	r5, r1
 8017412:	f7f7 ff29 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 8017416:	b910      	cbnz	r0, 801741e <rmw_destroy_service+0x16>
 8017418:	2401      	movs	r4, #1
 801741a:	4620      	mov	r0, r4
 801741c:	bd70      	pop	{r4, r5, r6, pc}
 801741e:	6863      	ldr	r3, [r4, #4]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d0f9      	beq.n	8017418 <rmw_destroy_service+0x10>
 8017424:	2d00      	cmp	r5, #0
 8017426:	d0f7      	beq.n	8017418 <rmw_destroy_service+0x10>
 8017428:	6828      	ldr	r0, [r5, #0]
 801742a:	f7f7 ff1d 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 801742e:	2800      	cmp	r0, #0
 8017430:	d0f2      	beq.n	8017418 <rmw_destroy_service+0x10>
 8017432:	686e      	ldr	r6, [r5, #4]
 8017434:	2e00      	cmp	r6, #0
 8017436:	d0ef      	beq.n	8017418 <rmw_destroy_service+0x10>
 8017438:	6864      	ldr	r4, [r4, #4]
 801743a:	6932      	ldr	r2, [r6, #16]
 801743c:	6920      	ldr	r0, [r4, #16]
 801743e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017442:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017446:	6819      	ldr	r1, [r3, #0]
 8017448:	f001 fa6e 	bl	8018928 <uxr_buffer_cancel_data>
 801744c:	4602      	mov	r2, r0
 801744e:	6920      	ldr	r0, [r4, #16]
 8017450:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017454:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017458:	f7f7 fe84 	bl	800f164 <run_xrce_session>
 801745c:	6920      	ldr	r0, [r4, #16]
 801745e:	6932      	ldr	r2, [r6, #16]
 8017460:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017464:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017468:	6819      	ldr	r1, [r3, #0]
 801746a:	f7f9 f8a9 	bl	80105c0 <uxr_buffer_delete_entity>
 801746e:	4602      	mov	r2, r0
 8017470:	6920      	ldr	r0, [r4, #16]
 8017472:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017476:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801747a:	f7f7 fe73 	bl	800f164 <run_xrce_session>
 801747e:	4604      	mov	r4, r0
 8017480:	4628      	mov	r0, r5
 8017482:	f084 0401 	eor.w	r4, r4, #1
 8017486:	b2e4      	uxtb	r4, r4
 8017488:	0064      	lsls	r4, r4, #1
 801748a:	f7f7 fd33 	bl	800eef4 <rmw_uxrce_fini_service_memory>
 801748e:	e7c4      	b.n	801741a <rmw_destroy_service+0x12>

08017490 <rmw_destroy_subscription>:
 8017490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017492:	b128      	cbz	r0, 80174a0 <rmw_destroy_subscription+0x10>
 8017494:	4604      	mov	r4, r0
 8017496:	6800      	ldr	r0, [r0, #0]
 8017498:	460d      	mov	r5, r1
 801749a:	f7f7 fee5 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 801749e:	b910      	cbnz	r0, 80174a6 <rmw_destroy_subscription+0x16>
 80174a0:	2401      	movs	r4, #1
 80174a2:	4620      	mov	r0, r4
 80174a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174a6:	6863      	ldr	r3, [r4, #4]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d0f9      	beq.n	80174a0 <rmw_destroy_subscription+0x10>
 80174ac:	2d00      	cmp	r5, #0
 80174ae:	d0f7      	beq.n	80174a0 <rmw_destroy_subscription+0x10>
 80174b0:	6828      	ldr	r0, [r5, #0]
 80174b2:	f7f7 fed9 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 80174b6:	2800      	cmp	r0, #0
 80174b8:	d0f2      	beq.n	80174a0 <rmw_destroy_subscription+0x10>
 80174ba:	686c      	ldr	r4, [r5, #4]
 80174bc:	2c00      	cmp	r4, #0
 80174be:	d0ef      	beq.n	80174a0 <rmw_destroy_subscription+0x10>
 80174c0:	6a26      	ldr	r6, [r4, #32]
 80174c2:	6962      	ldr	r2, [r4, #20]
 80174c4:	6930      	ldr	r0, [r6, #16]
 80174c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80174ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80174ce:	6819      	ldr	r1, [r3, #0]
 80174d0:	f001 fa2a 	bl	8018928 <uxr_buffer_cancel_data>
 80174d4:	4602      	mov	r2, r0
 80174d6:	6930      	ldr	r0, [r6, #16]
 80174d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80174dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80174e0:	f7f7 fe40 	bl	800f164 <run_xrce_session>
 80174e4:	69e0      	ldr	r0, [r4, #28]
 80174e6:	f7ff fd17 	bl	8016f18 <destroy_topic>
 80174ea:	6a23      	ldr	r3, [r4, #32]
 80174ec:	6962      	ldr	r2, [r4, #20]
 80174ee:	6918      	ldr	r0, [r3, #16]
 80174f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80174f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80174f8:	6819      	ldr	r1, [r3, #0]
 80174fa:	f7f9 f861 	bl	80105c0 <uxr_buffer_delete_entity>
 80174fe:	6a23      	ldr	r3, [r4, #32]
 8017500:	6922      	ldr	r2, [r4, #16]
 8017502:	4604      	mov	r4, r0
 8017504:	6918      	ldr	r0, [r3, #16]
 8017506:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801750a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801750e:	6819      	ldr	r1, [r3, #0]
 8017510:	f7f9 f856 	bl	80105c0 <uxr_buffer_delete_entity>
 8017514:	4607      	mov	r7, r0
 8017516:	6930      	ldr	r0, [r6, #16]
 8017518:	4622      	mov	r2, r4
 801751a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801751e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017522:	f7f7 fe1f 	bl	800f164 <run_xrce_session>
 8017526:	4604      	mov	r4, r0
 8017528:	6930      	ldr	r0, [r6, #16]
 801752a:	463a      	mov	r2, r7
 801752c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017530:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017534:	f7f7 fe16 	bl	800f164 <run_xrce_session>
 8017538:	4603      	mov	r3, r0
 801753a:	4628      	mov	r0, r5
 801753c:	401c      	ands	r4, r3
 801753e:	f084 0401 	eor.w	r4, r4, #1
 8017542:	b2e4      	uxtb	r4, r4
 8017544:	0064      	lsls	r4, r4, #1
 8017546:	f7f7 fcbf 	bl	800eec8 <rmw_uxrce_fini_subscription_memory>
 801754a:	e7aa      	b.n	80174a2 <rmw_destroy_subscription+0x12>

0801754c <rmw_take_with_info>:
 801754c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801754e:	4604      	mov	r4, r0
 8017550:	6800      	ldr	r0, [r0, #0]
 8017552:	b089      	sub	sp, #36	@ 0x24
 8017554:	460f      	mov	r7, r1
 8017556:	4615      	mov	r5, r2
 8017558:	b128      	cbz	r0, 8017566 <rmw_take_with_info+0x1a>
 801755a:	4b23      	ldr	r3, [pc, #140]	@ (80175e8 <rmw_take_with_info+0x9c>)
 801755c:	6819      	ldr	r1, [r3, #0]
 801755e:	f7e8 fec7 	bl	80002f0 <strcmp>
 8017562:	2800      	cmp	r0, #0
 8017564:	d13d      	bne.n	80175e2 <rmw_take_with_info+0x96>
 8017566:	6864      	ldr	r4, [r4, #4]
 8017568:	b1fd      	cbz	r5, 80175aa <rmw_take_with_info+0x5e>
 801756a:	2300      	movs	r3, #0
 801756c:	702b      	strb	r3, [r5, #0]
 801756e:	f7f7 fd7b 	bl	800f068 <rmw_uxrce_clean_expired_static_input_buffer>
 8017572:	4620      	mov	r0, r4
 8017574:	f7f7 fd50 	bl	800f018 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017578:	4606      	mov	r6, r0
 801757a:	b1e8      	cbz	r0, 80175b8 <rmw_take_with_info+0x6c>
 801757c:	6881      	ldr	r1, [r0, #8]
 801757e:	4668      	mov	r0, sp
 8017580:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017584:	3110      	adds	r1, #16
 8017586:	f7f8 ff4b 	bl	8010420 <ucdr_init_buffer>
 801758a:	69a3      	ldr	r3, [r4, #24]
 801758c:	4639      	mov	r1, r7
 801758e:	4668      	mov	r0, sp
 8017590:	68db      	ldr	r3, [r3, #12]
 8017592:	4798      	blx	r3
 8017594:	4604      	mov	r4, r0
 8017596:	4631      	mov	r1, r6
 8017598:	4814      	ldr	r0, [pc, #80]	@ (80175ec <rmw_take_with_info+0xa0>)
 801759a:	f7ff f98d 	bl	80168b8 <put_memory>
 801759e:	702c      	strb	r4, [r5, #0]
 80175a0:	f084 0001 	eor.w	r0, r4, #1
 80175a4:	b2c0      	uxtb	r0, r0
 80175a6:	b009      	add	sp, #36	@ 0x24
 80175a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175aa:	f7f7 fd5d 	bl	800f068 <rmw_uxrce_clean_expired_static_input_buffer>
 80175ae:	4620      	mov	r0, r4
 80175b0:	f7f7 fd32 	bl	800f018 <rmw_uxrce_find_static_input_buffer_by_owner>
 80175b4:	4605      	mov	r5, r0
 80175b6:	b910      	cbnz	r0, 80175be <rmw_take_with_info+0x72>
 80175b8:	2001      	movs	r0, #1
 80175ba:	b009      	add	sp, #36	@ 0x24
 80175bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175be:	68a9      	ldr	r1, [r5, #8]
 80175c0:	4668      	mov	r0, sp
 80175c2:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80175c6:	3110      	adds	r1, #16
 80175c8:	f7f8 ff2a 	bl	8010420 <ucdr_init_buffer>
 80175cc:	69a3      	ldr	r3, [r4, #24]
 80175ce:	4639      	mov	r1, r7
 80175d0:	4668      	mov	r0, sp
 80175d2:	68db      	ldr	r3, [r3, #12]
 80175d4:	4798      	blx	r3
 80175d6:	4629      	mov	r1, r5
 80175d8:	4604      	mov	r4, r0
 80175da:	4804      	ldr	r0, [pc, #16]	@ (80175ec <rmw_take_with_info+0xa0>)
 80175dc:	f7ff f96c 	bl	80168b8 <put_memory>
 80175e0:	e7de      	b.n	80175a0 <rmw_take_with_info+0x54>
 80175e2:	200c      	movs	r0, #12
 80175e4:	b009      	add	sp, #36	@ 0x24
 80175e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175e8:	0801c6f0 	.word	0x0801c6f0
 80175ec:	2400b870 	.word	0x2400b870

080175f0 <rmw_uxrce_transport_init>:
 80175f0:	b508      	push	{r3, lr}
 80175f2:	b140      	cbz	r0, 8017606 <rmw_uxrce_transport_init+0x16>
 80175f4:	3010      	adds	r0, #16
 80175f6:	b149      	cbz	r1, 801760c <rmw_uxrce_transport_init+0x1c>
 80175f8:	6949      	ldr	r1, [r1, #20]
 80175fa:	f000 fc2d 	bl	8017e58 <uxr_init_custom_transport>
 80175fe:	f080 0001 	eor.w	r0, r0, #1
 8017602:	b2c0      	uxtb	r0, r0
 8017604:	bd08      	pop	{r3, pc}
 8017606:	4610      	mov	r0, r2
 8017608:	2900      	cmp	r1, #0
 801760a:	d1f5      	bne.n	80175f8 <rmw_uxrce_transport_init+0x8>
 801760c:	4b03      	ldr	r3, [pc, #12]	@ (801761c <rmw_uxrce_transport_init+0x2c>)
 801760e:	6859      	ldr	r1, [r3, #4]
 8017610:	f000 fc22 	bl	8017e58 <uxr_init_custom_transport>
 8017614:	f080 0001 	eor.w	r0, r0, #1
 8017618:	b2c0      	uxtb	r0, r0
 801761a:	bd08      	pop	{r3, pc}
 801761c:	240095b0 	.word	0x240095b0

08017620 <rmw_wait>:
 8017620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017624:	ea40 0401 	orr.w	r4, r0, r1
 8017628:	b089      	sub	sp, #36	@ 0x24
 801762a:	4607      	mov	r7, r0
 801762c:	431c      	orrs	r4, r3
 801762e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017630:	ea52 0004 	orrs.w	r0, r2, r4
 8017634:	f000 80e5 	beq.w	8017802 <rmw_wait+0x1e2>
 8017638:	4688      	mov	r8, r1
 801763a:	4699      	mov	r9, r3
 801763c:	4616      	mov	r6, r2
 801763e:	b16d      	cbz	r5, 801765c <rmw_wait+0x3c>
 8017640:	4bb4      	ldr	r3, [pc, #720]	@ (8017914 <rmw_wait+0x2f4>)
 8017642:	ac04      	add	r4, sp, #16
 8017644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801764a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801764e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017652:	f7fe ff6b 	bl	801652c <rmw_time_equal>
 8017656:	2800      	cmp	r0, #0
 8017658:	f000 8102 	beq.w	8017860 <rmw_wait+0x240>
 801765c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8017660:	f7f7 fd02 	bl	800f068 <rmw_uxrce_clean_expired_static_input_buffer>
 8017664:	4bac      	ldr	r3, [pc, #688]	@ (8017918 <rmw_wait+0x2f8>)
 8017666:	681c      	ldr	r4, [r3, #0]
 8017668:	2c00      	cmp	r4, #0
 801766a:	f000 810a 	beq.w	8017882 <rmw_wait+0x262>
 801766e:	4623      	mov	r3, r4
 8017670:	2100      	movs	r1, #0
 8017672:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017676:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801767a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801767e:	2b00      	cmp	r3, #0
 8017680:	d1f7      	bne.n	8017672 <rmw_wait+0x52>
 8017682:	2e00      	cmp	r6, #0
 8017684:	f000 8127 	beq.w	80178d6 <rmw_wait+0x2b6>
 8017688:	6830      	ldr	r0, [r6, #0]
 801768a:	b170      	cbz	r0, 80176aa <rmw_wait+0x8a>
 801768c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8017690:	2300      	movs	r3, #0
 8017692:	2101      	movs	r1, #1
 8017694:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017698:	3301      	adds	r3, #1
 801769a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801769c:	4298      	cmp	r0, r3
 801769e:	6912      	ldr	r2, [r2, #16]
 80176a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80176a4:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80176a8:	d1f4      	bne.n	8017694 <rmw_wait+0x74>
 80176aa:	f1b9 0f00 	cmp.w	r9, #0
 80176ae:	f000 811e 	beq.w	80178ee <rmw_wait+0x2ce>
 80176b2:	f8d9 1000 	ldr.w	r1, [r9]
 80176b6:	2900      	cmp	r1, #0
 80176b8:	f000 80fb 	beq.w	80178b2 <rmw_wait+0x292>
 80176bc:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80176c0:	2300      	movs	r3, #0
 80176c2:	2001      	movs	r0, #1
 80176c4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80176c8:	3301      	adds	r3, #1
 80176ca:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80176cc:	428b      	cmp	r3, r1
 80176ce:	6912      	ldr	r2, [r2, #16]
 80176d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80176d4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80176d8:	d1f4      	bne.n	80176c4 <rmw_wait+0xa4>
 80176da:	2f00      	cmp	r7, #0
 80176dc:	f000 80f4 	beq.w	80178c8 <rmw_wait+0x2a8>
 80176e0:	6839      	ldr	r1, [r7, #0]
 80176e2:	b171      	cbz	r1, 8017702 <rmw_wait+0xe2>
 80176e4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80176e8:	2300      	movs	r3, #0
 80176ea:	2001      	movs	r0, #1
 80176ec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80176f0:	3301      	adds	r3, #1
 80176f2:	6a12      	ldr	r2, [r2, #32]
 80176f4:	428b      	cmp	r3, r1
 80176f6:	6912      	ldr	r2, [r2, #16]
 80176f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80176fc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017700:	d1f4      	bne.n	80176ec <rmw_wait+0xcc>
 8017702:	b33c      	cbz	r4, 8017754 <rmw_wait+0x134>
 8017704:	4622      	mov	r2, r4
 8017706:	2300      	movs	r3, #0
 8017708:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801770c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017710:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017714:	440b      	add	r3, r1
 8017716:	b2db      	uxtb	r3, r3
 8017718:	2a00      	cmp	r2, #0
 801771a:	d1f5      	bne.n	8017708 <rmw_wait+0xe8>
 801771c:	2b00      	cmp	r3, #0
 801771e:	d073      	beq.n	8017808 <rmw_wait+0x1e8>
 8017720:	1c6a      	adds	r2, r5, #1
 8017722:	d00d      	beq.n	8017740 <rmw_wait+0x120>
 8017724:	ee07 5a90 	vmov	s15, r5
 8017728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801772c:	ee07 3a90 	vmov	s15, r3
 8017730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017738:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801773c:	ee17 5a90 	vmov	r5, s15
 8017740:	68a0      	ldr	r0, [r4, #8]
 8017742:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017746:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801774a:	2b00      	cmp	r3, #0
 801774c:	d17e      	bne.n	801784c <rmw_wait+0x22c>
 801774e:	6864      	ldr	r4, [r4, #4]
 8017750:	2c00      	cmp	r4, #0
 8017752:	d1f5      	bne.n	8017740 <rmw_wait+0x120>
 8017754:	2e00      	cmp	r6, #0
 8017756:	f000 80aa 	beq.w	80178ae <rmw_wait+0x28e>
 801775a:	6834      	ldr	r4, [r6, #0]
 801775c:	b174      	cbz	r4, 801777c <rmw_wait+0x15c>
 801775e:	2500      	movs	r5, #0
 8017760:	462c      	mov	r4, r5
 8017762:	6873      	ldr	r3, [r6, #4]
 8017764:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017768:	f7f7 fc56 	bl	800f018 <rmw_uxrce_find_static_input_buffer_by_owner>
 801776c:	2800      	cmp	r0, #0
 801776e:	d065      	beq.n	801783c <rmw_wait+0x21c>
 8017770:	3501      	adds	r5, #1
 8017772:	6833      	ldr	r3, [r6, #0]
 8017774:	2401      	movs	r4, #1
 8017776:	42ab      	cmp	r3, r5
 8017778:	d8f3      	bhi.n	8017762 <rmw_wait+0x142>
 801777a:	2401      	movs	r4, #1
 801777c:	f1b9 0f00 	cmp.w	r9, #0
 8017780:	d012      	beq.n	80177a8 <rmw_wait+0x188>
 8017782:	f8d9 1000 	ldr.w	r1, [r9]
 8017786:	b179      	cbz	r1, 80177a8 <rmw_wait+0x188>
 8017788:	2500      	movs	r5, #0
 801778a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801778e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017792:	f7f7 fc41 	bl	800f018 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017796:	2800      	cmp	r0, #0
 8017798:	d048      	beq.n	801782c <rmw_wait+0x20c>
 801779a:	3501      	adds	r5, #1
 801779c:	f8d9 3000 	ldr.w	r3, [r9]
 80177a0:	2401      	movs	r4, #1
 80177a2:	42ab      	cmp	r3, r5
 80177a4:	d8f1      	bhi.n	801778a <rmw_wait+0x16a>
 80177a6:	2401      	movs	r4, #1
 80177a8:	b177      	cbz	r7, 80177c8 <rmw_wait+0x1a8>
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	b163      	cbz	r3, 80177c8 <rmw_wait+0x1a8>
 80177ae:	2500      	movs	r5, #0
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80177b6:	f7f7 fc2f 	bl	800f018 <rmw_uxrce_find_static_input_buffer_by_owner>
 80177ba:	b378      	cbz	r0, 801781c <rmw_wait+0x1fc>
 80177bc:	3501      	adds	r5, #1
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	2401      	movs	r4, #1
 80177c2:	42ab      	cmp	r3, r5
 80177c4:	d8f4      	bhi.n	80177b0 <rmw_wait+0x190>
 80177c6:	2401      	movs	r4, #1
 80177c8:	f1b8 0f00 	cmp.w	r8, #0
 80177cc:	d016      	beq.n	80177fc <rmw_wait+0x1dc>
 80177ce:	f8d8 5000 	ldr.w	r5, [r8]
 80177d2:	b19d      	cbz	r5, 80177fc <rmw_wait+0x1dc>
 80177d4:	2300      	movs	r3, #0
 80177d6:	461e      	mov	r6, r3
 80177d8:	e004      	b.n	80177e4 <rmw_wait+0x1c4>
 80177da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80177de:	3301      	adds	r3, #1
 80177e0:	429d      	cmp	r5, r3
 80177e2:	d00b      	beq.n	80177fc <rmw_wait+0x1dc>
 80177e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80177e8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80177ec:	7c0a      	ldrb	r2, [r1, #16]
 80177ee:	2a00      	cmp	r2, #0
 80177f0:	d0f3      	beq.n	80177da <rmw_wait+0x1ba>
 80177f2:	3301      	adds	r3, #1
 80177f4:	4614      	mov	r4, r2
 80177f6:	740e      	strb	r6, [r1, #16]
 80177f8:	429d      	cmp	r5, r3
 80177fa:	d1f3      	bne.n	80177e4 <rmw_wait+0x1c4>
 80177fc:	f084 0401 	eor.w	r4, r4, #1
 8017800:	0060      	lsls	r0, r4, #1
 8017802:	b009      	add	sp, #36	@ 0x24
 8017804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017808:	68a0      	ldr	r0, [r4, #8]
 801780a:	2100      	movs	r1, #0
 801780c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017810:	f7f9 fcbc 	bl	801118c <uxr_run_session_timeout>
 8017814:	6864      	ldr	r4, [r4, #4]
 8017816:	2c00      	cmp	r4, #0
 8017818:	d1f6      	bne.n	8017808 <rmw_wait+0x1e8>
 801781a:	e79b      	b.n	8017754 <rmw_wait+0x134>
 801781c:	e9d7 3200 	ldrd	r3, r2, [r7]
 8017820:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 8017824:	3501      	adds	r5, #1
 8017826:	429d      	cmp	r5, r3
 8017828:	d3c2      	bcc.n	80177b0 <rmw_wait+0x190>
 801782a:	e7cd      	b.n	80177c8 <rmw_wait+0x1a8>
 801782c:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017830:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 8017834:	3501      	adds	r5, #1
 8017836:	429d      	cmp	r5, r3
 8017838:	d3a7      	bcc.n	801778a <rmw_wait+0x16a>
 801783a:	e7b5      	b.n	80177a8 <rmw_wait+0x188>
 801783c:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017840:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 8017844:	3501      	adds	r5, #1
 8017846:	42ab      	cmp	r3, r5
 8017848:	d88b      	bhi.n	8017762 <rmw_wait+0x142>
 801784a:	e797      	b.n	801777c <rmw_wait+0x15c>
 801784c:	4629      	mov	r1, r5
 801784e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017852:	f7f9 fcb5 	bl	80111c0 <uxr_run_session_until_data>
 8017856:	6864      	ldr	r4, [r4, #4]
 8017858:	2c00      	cmp	r4, #0
 801785a:	f47f af71 	bne.w	8017740 <rmw_wait+0x120>
 801785e:	e779      	b.n	8017754 <rmw_wait+0x134>
 8017860:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017864:	f7fe feb6 	bl	80165d4 <rmw_time_total_nsec>
 8017868:	4a2c      	ldr	r2, [pc, #176]	@ (801791c <rmw_wait+0x2fc>)
 801786a:	2300      	movs	r3, #0
 801786c:	f7e8 fdf8 	bl	8000460 <__aeabi_uldivmod>
 8017870:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017874:	4605      	mov	r5, r0
 8017876:	f171 0100 	sbcs.w	r1, r1, #0
 801787a:	bfa8      	it	ge
 801787c:	f06f 4500 	mvnge.w	r5, #2147483648	@ 0x80000000
 8017880:	e6ee      	b.n	8017660 <rmw_wait+0x40>
 8017882:	2e00      	cmp	r6, #0
 8017884:	f47f af00 	bne.w	8017688 <rmw_wait+0x68>
 8017888:	f1b9 0f00 	cmp.w	r9, #0
 801788c:	d009      	beq.n	80178a2 <rmw_wait+0x282>
 801788e:	f8d9 1000 	ldr.w	r1, [r9]
 8017892:	2900      	cmp	r1, #0
 8017894:	f47f af12 	bne.w	80176bc <rmw_wait+0x9c>
 8017898:	2f00      	cmp	r7, #0
 801789a:	f47f af21 	bne.w	80176e0 <rmw_wait+0xc0>
 801789e:	2400      	movs	r4, #0
 80178a0:	e792      	b.n	80177c8 <rmw_wait+0x1a8>
 80178a2:	2f00      	cmp	r7, #0
 80178a4:	d0fb      	beq.n	801789e <rmw_wait+0x27e>
 80178a6:	6839      	ldr	r1, [r7, #0]
 80178a8:	2900      	cmp	r1, #0
 80178aa:	f47f af1b 	bne.w	80176e4 <rmw_wait+0xc4>
 80178ae:	2400      	movs	r4, #0
 80178b0:	e764      	b.n	801777c <rmw_wait+0x15c>
 80178b2:	2f00      	cmp	r7, #0
 80178b4:	f47f af14 	bne.w	80176e0 <rmw_wait+0xc0>
 80178b8:	2c00      	cmp	r4, #0
 80178ba:	f47f af23 	bne.w	8017704 <rmw_wait+0xe4>
 80178be:	2800      	cmp	r0, #0
 80178c0:	f47f af4d 	bne.w	801775e <rmw_wait+0x13e>
 80178c4:	2400      	movs	r4, #0
 80178c6:	e75e      	b.n	8017786 <rmw_wait+0x166>
 80178c8:	2c00      	cmp	r4, #0
 80178ca:	f47f af1b 	bne.w	8017704 <rmw_wait+0xe4>
 80178ce:	2e00      	cmp	r6, #0
 80178d0:	f47f af43 	bne.w	801775a <rmw_wait+0x13a>
 80178d4:	e7f6      	b.n	80178c4 <rmw_wait+0x2a4>
 80178d6:	f1b9 0f00 	cmp.w	r9, #0
 80178da:	d012      	beq.n	8017902 <rmw_wait+0x2e2>
 80178dc:	f8d9 1000 	ldr.w	r1, [r9]
 80178e0:	2900      	cmp	r1, #0
 80178e2:	f47f aeeb 	bne.w	80176bc <rmw_wait+0x9c>
 80178e6:	2f00      	cmp	r7, #0
 80178e8:	f47f aefa 	bne.w	80176e0 <rmw_wait+0xc0>
 80178ec:	e70a      	b.n	8017704 <rmw_wait+0xe4>
 80178ee:	2f00      	cmp	r7, #0
 80178f0:	f47f aef6 	bne.w	80176e0 <rmw_wait+0xc0>
 80178f4:	2c00      	cmp	r4, #0
 80178f6:	f47f af05 	bne.w	8017704 <rmw_wait+0xe4>
 80178fa:	2800      	cmp	r0, #0
 80178fc:	f47f af2f 	bne.w	801775e <rmw_wait+0x13e>
 8017900:	e7cd      	b.n	801789e <rmw_wait+0x27e>
 8017902:	2f00      	cmp	r7, #0
 8017904:	f43f aefe 	beq.w	8017704 <rmw_wait+0xe4>
 8017908:	6839      	ldr	r1, [r7, #0]
 801790a:	2900      	cmp	r1, #0
 801790c:	f47f aeea 	bne.w	80176e4 <rmw_wait+0xc4>
 8017910:	e6f8      	b.n	8017704 <rmw_wait+0xe4>
 8017912:	bf00      	nop
 8017914:	0801bb88 	.word	0x0801bb88
 8017918:	2400df10 	.word	0x2400df10
 801791c:	000f4240 	.word	0x000f4240

08017920 <rmw_create_wait_set>:
 8017920:	b508      	push	{r3, lr}
 8017922:	4803      	ldr	r0, [pc, #12]	@ (8017930 <rmw_create_wait_set+0x10>)
 8017924:	f7fe ffb8 	bl	8016898 <get_memory>
 8017928:	b108      	cbz	r0, 801792e <rmw_create_wait_set+0xe>
 801792a:	6880      	ldr	r0, [r0, #8]
 801792c:	3010      	adds	r0, #16
 801792e:	bd08      	pop	{r3, pc}
 8017930:	240096cc 	.word	0x240096cc

08017934 <rmw_destroy_wait_set>:
 8017934:	b508      	push	{r3, lr}
 8017936:	4b08      	ldr	r3, [pc, #32]	@ (8017958 <rmw_destroy_wait_set+0x24>)
 8017938:	6819      	ldr	r1, [r3, #0]
 801793a:	b911      	cbnz	r1, 8017942 <rmw_destroy_wait_set+0xe>
 801793c:	e00a      	b.n	8017954 <rmw_destroy_wait_set+0x20>
 801793e:	6849      	ldr	r1, [r1, #4]
 8017940:	b141      	cbz	r1, 8017954 <rmw_destroy_wait_set+0x20>
 8017942:	688b      	ldr	r3, [r1, #8]
 8017944:	3310      	adds	r3, #16
 8017946:	4298      	cmp	r0, r3
 8017948:	d1f9      	bne.n	801793e <rmw_destroy_wait_set+0xa>
 801794a:	4803      	ldr	r0, [pc, #12]	@ (8017958 <rmw_destroy_wait_set+0x24>)
 801794c:	f7fe ffb4 	bl	80168b8 <put_memory>
 8017950:	2000      	movs	r0, #0
 8017952:	bd08      	pop	{r3, pc}
 8017954:	2001      	movs	r0, #1
 8017956:	bd08      	pop	{r3, pc}
 8017958:	240096cc 	.word	0x240096cc

0801795c <rmw_uros_epoch_nanos>:
 801795c:	4b05      	ldr	r3, [pc, #20]	@ (8017974 <rmw_uros_epoch_nanos+0x18>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	b123      	cbz	r3, 801796c <rmw_uros_epoch_nanos+0x10>
 8017962:	6898      	ldr	r0, [r3, #8]
 8017964:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017968:	f7f9 b892 	b.w	8010a90 <uxr_epoch_nanos>
 801796c:	2000      	movs	r0, #0
 801796e:	2100      	movs	r1, #0
 8017970:	4770      	bx	lr
 8017972:	bf00      	nop
 8017974:	2400df10 	.word	0x2400df10

08017978 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801797c:	6805      	ldr	r5, [r0, #0]
 801797e:	4604      	mov	r4, r0
 8017980:	460e      	mov	r6, r1
 8017982:	4628      	mov	r0, r5
 8017984:	f7e8 fcb4 	bl	80002f0 <strcmp>
 8017988:	b308      	cbz	r0, 80179ce <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 801798a:	4b12      	ldr	r3, [pc, #72]	@ (80179d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 801798c:	4628      	mov	r0, r5
 801798e:	6819      	ldr	r1, [r3, #0]
 8017990:	f7e8 fcae 	bl	80002f0 <strcmp>
 8017994:	4605      	mov	r5, r0
 8017996:	b980      	cbnz	r0, 80179ba <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8017998:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801799c:	f8d8 4000 	ldr.w	r4, [r8]
 80179a0:	b1ac      	cbz	r4, 80179ce <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 80179a2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80179a6:	3f04      	subs	r7, #4
 80179a8:	4631      	mov	r1, r6
 80179aa:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80179ae:	f7e8 fc9f 	bl	80002f0 <strcmp>
 80179b2:	b128      	cbz	r0, 80179c0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 80179b4:	3501      	adds	r5, #1
 80179b6:	42a5      	cmp	r5, r4
 80179b8:	d1f6      	bne.n	80179a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 80179ba:	2000      	movs	r0, #0
 80179bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80179c4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80179c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179cc:	4718      	bx	r3
 80179ce:	4620      	mov	r0, r4
 80179d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179d4:	2400017c 	.word	0x2400017c

080179d8 <std_msgs__msg__Int32__get_type_hash>:
 80179d8:	4800      	ldr	r0, [pc, #0]	@ (80179dc <std_msgs__msg__Int32__get_type_hash+0x4>)
 80179da:	4770      	bx	lr
 80179dc:	24000184 	.word	0x24000184

080179e0 <std_msgs__msg__Int32__get_type_description>:
 80179e0:	4b03      	ldr	r3, [pc, #12]	@ (80179f0 <std_msgs__msg__Int32__get_type_description+0x10>)
 80179e2:	781a      	ldrb	r2, [r3, #0]
 80179e4:	b90a      	cbnz	r2, 80179ea <std_msgs__msg__Int32__get_type_description+0xa>
 80179e6:	2201      	movs	r2, #1
 80179e8:	701a      	strb	r2, [r3, #0]
 80179ea:	4802      	ldr	r0, [pc, #8]	@ (80179f4 <std_msgs__msg__Int32__get_type_description+0x14>)
 80179ec:	4770      	bx	lr
 80179ee:	bf00      	nop
 80179f0:	2400e041 	.word	0x2400e041
 80179f4:	0801c724 	.word	0x0801c724

080179f8 <std_msgs__msg__Int32__get_type_description_sources>:
 80179f8:	4b09      	ldr	r3, [pc, #36]	@ (8017a20 <std_msgs__msg__Int32__get_type_description_sources+0x28>)
 80179fa:	781a      	ldrb	r2, [r3, #0]
 80179fc:	b96a      	cbnz	r2, 8017a1a <std_msgs__msg__Int32__get_type_description_sources+0x22>
 80179fe:	2201      	movs	r2, #1
 8017a00:	b430      	push	{r4, r5}
 8017a02:	4d08      	ldr	r5, [pc, #32]	@ (8017a24 <std_msgs__msg__Int32__get_type_description_sources+0x2c>)
 8017a04:	4c08      	ldr	r4, [pc, #32]	@ (8017a28 <std_msgs__msg__Int32__get_type_description_sources+0x30>)
 8017a06:	701a      	strb	r2, [r3, #0]
 8017a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a10:	682b      	ldr	r3, [r5, #0]
 8017a12:	4806      	ldr	r0, [pc, #24]	@ (8017a2c <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 8017a14:	6023      	str	r3, [r4, #0]
 8017a16:	bc30      	pop	{r4, r5}
 8017a18:	4770      	bx	lr
 8017a1a:	4804      	ldr	r0, [pc, #16]	@ (8017a2c <std_msgs__msg__Int32__get_type_description_sources+0x34>)
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop
 8017a20:	2400e040 	.word	0x2400e040
 8017a24:	0801c700 	.word	0x0801c700
 8017a28:	2400e01c 	.word	0x2400e01c
 8017a2c:	0801c6f4 	.word	0x0801c6f4

08017a30 <std_msgs__msg__Int32__init>:
 8017a30:	3800      	subs	r0, #0
 8017a32:	bf18      	it	ne
 8017a34:	2001      	movne	r0, #1
 8017a36:	4770      	bx	lr

08017a38 <std_msgs__msg__Int32__fini>:
 8017a38:	4770      	bx	lr
 8017a3a:	bf00      	nop

08017a3c <std_msgs__msg__String__get_type_hash>:
 8017a3c:	4800      	ldr	r0, [pc, #0]	@ (8017a40 <std_msgs__msg__String__get_type_hash+0x4>)
 8017a3e:	4770      	bx	lr
 8017a40:	2400031c 	.word	0x2400031c

08017a44 <std_msgs__msg__String__get_type_description>:
 8017a44:	4b03      	ldr	r3, [pc, #12]	@ (8017a54 <std_msgs__msg__String__get_type_description+0x10>)
 8017a46:	781a      	ldrb	r2, [r3, #0]
 8017a48:	b90a      	cbnz	r2, 8017a4e <std_msgs__msg__String__get_type_description+0xa>
 8017a4a:	2201      	movs	r2, #1
 8017a4c:	701a      	strb	r2, [r3, #0]
 8017a4e:	4802      	ldr	r0, [pc, #8]	@ (8017a58 <std_msgs__msg__String__get_type_description+0x14>)
 8017a50:	4770      	bx	lr
 8017a52:	bf00      	nop
 8017a54:	2400e069 	.word	0x2400e069
 8017a58:	0801c778 	.word	0x0801c778

08017a5c <std_msgs__msg__String__get_type_description_sources>:
 8017a5c:	4b09      	ldr	r3, [pc, #36]	@ (8017a84 <std_msgs__msg__String__get_type_description_sources+0x28>)
 8017a5e:	781a      	ldrb	r2, [r3, #0]
 8017a60:	b96a      	cbnz	r2, 8017a7e <std_msgs__msg__String__get_type_description_sources+0x22>
 8017a62:	2201      	movs	r2, #1
 8017a64:	b430      	push	{r4, r5}
 8017a66:	4d08      	ldr	r5, [pc, #32]	@ (8017a88 <std_msgs__msg__String__get_type_description_sources+0x2c>)
 8017a68:	4c08      	ldr	r4, [pc, #32]	@ (8017a8c <std_msgs__msg__String__get_type_description_sources+0x30>)
 8017a6a:	701a      	strb	r2, [r3, #0]
 8017a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a74:	682b      	ldr	r3, [r5, #0]
 8017a76:	4806      	ldr	r0, [pc, #24]	@ (8017a90 <std_msgs__msg__String__get_type_description_sources+0x34>)
 8017a78:	6023      	str	r3, [r4, #0]
 8017a7a:	bc30      	pop	{r4, r5}
 8017a7c:	4770      	bx	lr
 8017a7e:	4804      	ldr	r0, [pc, #16]	@ (8017a90 <std_msgs__msg__String__get_type_description_sources+0x34>)
 8017a80:	4770      	bx	lr
 8017a82:	bf00      	nop
 8017a84:	2400e068 	.word	0x2400e068
 8017a88:	0801c754 	.word	0x0801c754
 8017a8c:	2400e044 	.word	0x2400e044
 8017a90:	0801c748 	.word	0x0801c748

08017a94 <std_msgs__msg__String__init>:
 8017a94:	b150      	cbz	r0, 8017aac <std_msgs__msg__String__init+0x18>
 8017a96:	b510      	push	{r4, lr}
 8017a98:	4604      	mov	r4, r0
 8017a9a:	f002 fb5b 	bl	801a154 <rosidl_runtime_c__String__init>
 8017a9e:	b100      	cbz	r0, 8017aa2 <std_msgs__msg__String__init+0xe>
 8017aa0:	bd10      	pop	{r4, pc}
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f002 fb72 	bl	801a18c <rosidl_runtime_c__String__fini>
 8017aa8:	2000      	movs	r0, #0
 8017aaa:	bd10      	pop	{r4, pc}
 8017aac:	2000      	movs	r0, #0
 8017aae:	4770      	bx	lr

08017ab0 <std_msgs__msg__String__fini>:
 8017ab0:	b108      	cbz	r0, 8017ab6 <std_msgs__msg__String__fini+0x6>
 8017ab2:	f002 bb6b 	b.w	801a18c <rosidl_runtime_c__String__fini>
 8017ab6:	4770      	bx	lr

08017ab8 <ucdr_serialize_endian_array_char>:
 8017ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017abc:	4619      	mov	r1, r3
 8017abe:	461f      	mov	r7, r3
 8017ac0:	4605      	mov	r5, r0
 8017ac2:	4690      	mov	r8, r2
 8017ac4:	f7f8 fc58 	bl	8010378 <ucdr_check_buffer_available_for>
 8017ac8:	b9e0      	cbnz	r0, 8017b04 <ucdr_serialize_endian_array_char+0x4c>
 8017aca:	463e      	mov	r6, r7
 8017acc:	e00b      	b.n	8017ae6 <ucdr_serialize_endian_array_char+0x2e>
 8017ace:	4441      	add	r1, r8
 8017ad0:	68a8      	ldr	r0, [r5, #8]
 8017ad2:	4622      	mov	r2, r4
 8017ad4:	1b36      	subs	r6, r6, r4
 8017ad6:	f003 f9ca 	bl	801ae6e <memcpy>
 8017ada:	68ab      	ldr	r3, [r5, #8]
 8017adc:	6928      	ldr	r0, [r5, #16]
 8017ade:	4423      	add	r3, r4
 8017ae0:	4420      	add	r0, r4
 8017ae2:	60ab      	str	r3, [r5, #8]
 8017ae4:	6128      	str	r0, [r5, #16]
 8017ae6:	4631      	mov	r1, r6
 8017ae8:	2201      	movs	r2, #1
 8017aea:	4628      	mov	r0, r5
 8017aec:	f7f8 fcce 	bl	801048c <ucdr_check_final_buffer_behavior_array>
 8017af0:	1bb9      	subs	r1, r7, r6
 8017af2:	4604      	mov	r4, r0
 8017af4:	2800      	cmp	r0, #0
 8017af6:	d1ea      	bne.n	8017ace <ucdr_serialize_endian_array_char+0x16>
 8017af8:	2301      	movs	r3, #1
 8017afa:	7da8      	ldrb	r0, [r5, #22]
 8017afc:	756b      	strb	r3, [r5, #21]
 8017afe:	4058      	eors	r0, r3
 8017b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b04:	463a      	mov	r2, r7
 8017b06:	4641      	mov	r1, r8
 8017b08:	68a8      	ldr	r0, [r5, #8]
 8017b0a:	f003 f9b0 	bl	801ae6e <memcpy>
 8017b0e:	68aa      	ldr	r2, [r5, #8]
 8017b10:	692b      	ldr	r3, [r5, #16]
 8017b12:	443a      	add	r2, r7
 8017b14:	443b      	add	r3, r7
 8017b16:	60aa      	str	r2, [r5, #8]
 8017b18:	612b      	str	r3, [r5, #16]
 8017b1a:	e7ed      	b.n	8017af8 <ucdr_serialize_endian_array_char+0x40>

08017b1c <ucdr_deserialize_endian_array_char>:
 8017b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b20:	4619      	mov	r1, r3
 8017b22:	461f      	mov	r7, r3
 8017b24:	4605      	mov	r5, r0
 8017b26:	4690      	mov	r8, r2
 8017b28:	f7f8 fc26 	bl	8010378 <ucdr_check_buffer_available_for>
 8017b2c:	b9e8      	cbnz	r0, 8017b6a <ucdr_deserialize_endian_array_char+0x4e>
 8017b2e:	463e      	mov	r6, r7
 8017b30:	e00c      	b.n	8017b4c <ucdr_deserialize_endian_array_char+0x30>
 8017b32:	4622      	mov	r2, r4
 8017b34:	eb08 0003 	add.w	r0, r8, r3
 8017b38:	68a9      	ldr	r1, [r5, #8]
 8017b3a:	1b36      	subs	r6, r6, r4
 8017b3c:	f003 f997 	bl	801ae6e <memcpy>
 8017b40:	68ab      	ldr	r3, [r5, #8]
 8017b42:	692a      	ldr	r2, [r5, #16]
 8017b44:	4423      	add	r3, r4
 8017b46:	4414      	add	r4, r2
 8017b48:	60ab      	str	r3, [r5, #8]
 8017b4a:	612c      	str	r4, [r5, #16]
 8017b4c:	2201      	movs	r2, #1
 8017b4e:	4631      	mov	r1, r6
 8017b50:	4628      	mov	r0, r5
 8017b52:	f7f8 fc9b 	bl	801048c <ucdr_check_final_buffer_behavior_array>
 8017b56:	1bbb      	subs	r3, r7, r6
 8017b58:	4604      	mov	r4, r0
 8017b5a:	2800      	cmp	r0, #0
 8017b5c:	d1e9      	bne.n	8017b32 <ucdr_deserialize_endian_array_char+0x16>
 8017b5e:	2301      	movs	r3, #1
 8017b60:	7da8      	ldrb	r0, [r5, #22]
 8017b62:	756b      	strb	r3, [r5, #21]
 8017b64:	4058      	eors	r0, r3
 8017b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b6a:	463a      	mov	r2, r7
 8017b6c:	68a9      	ldr	r1, [r5, #8]
 8017b6e:	4640      	mov	r0, r8
 8017b70:	f003 f97d 	bl	801ae6e <memcpy>
 8017b74:	68aa      	ldr	r2, [r5, #8]
 8017b76:	692b      	ldr	r3, [r5, #16]
 8017b78:	443a      	add	r2, r7
 8017b7a:	443b      	add	r3, r7
 8017b7c:	60aa      	str	r2, [r5, #8]
 8017b7e:	612b      	str	r3, [r5, #16]
 8017b80:	e7ed      	b.n	8017b5e <ucdr_deserialize_endian_array_char+0x42>
 8017b82:	bf00      	nop

08017b84 <ucdr_serialize_array_uint8_t>:
 8017b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b88:	4688      	mov	r8, r1
 8017b8a:	4611      	mov	r1, r2
 8017b8c:	4617      	mov	r7, r2
 8017b8e:	4605      	mov	r5, r0
 8017b90:	f7f8 fbf2 	bl	8010378 <ucdr_check_buffer_available_for>
 8017b94:	b9e0      	cbnz	r0, 8017bd0 <ucdr_serialize_array_uint8_t+0x4c>
 8017b96:	463e      	mov	r6, r7
 8017b98:	e00b      	b.n	8017bb2 <ucdr_serialize_array_uint8_t+0x2e>
 8017b9a:	4622      	mov	r2, r4
 8017b9c:	4441      	add	r1, r8
 8017b9e:	68a8      	ldr	r0, [r5, #8]
 8017ba0:	1b36      	subs	r6, r6, r4
 8017ba2:	f003 f964 	bl	801ae6e <memcpy>
 8017ba6:	68aa      	ldr	r2, [r5, #8]
 8017ba8:	692b      	ldr	r3, [r5, #16]
 8017baa:	4422      	add	r2, r4
 8017bac:	4423      	add	r3, r4
 8017bae:	60aa      	str	r2, [r5, #8]
 8017bb0:	612b      	str	r3, [r5, #16]
 8017bb2:	4631      	mov	r1, r6
 8017bb4:	2201      	movs	r2, #1
 8017bb6:	4628      	mov	r0, r5
 8017bb8:	f7f8 fc68 	bl	801048c <ucdr_check_final_buffer_behavior_array>
 8017bbc:	1bb9      	subs	r1, r7, r6
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	d1ea      	bne.n	8017b9a <ucdr_serialize_array_uint8_t+0x16>
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	7da8      	ldrb	r0, [r5, #22]
 8017bc8:	756b      	strb	r3, [r5, #21]
 8017bca:	4058      	eors	r0, r3
 8017bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bd0:	463a      	mov	r2, r7
 8017bd2:	4641      	mov	r1, r8
 8017bd4:	68a8      	ldr	r0, [r5, #8]
 8017bd6:	f003 f94a 	bl	801ae6e <memcpy>
 8017bda:	68aa      	ldr	r2, [r5, #8]
 8017bdc:	692b      	ldr	r3, [r5, #16]
 8017bde:	443a      	add	r2, r7
 8017be0:	443b      	add	r3, r7
 8017be2:	60aa      	str	r2, [r5, #8]
 8017be4:	612b      	str	r3, [r5, #16]
 8017be6:	e7ed      	b.n	8017bc4 <ucdr_serialize_array_uint8_t+0x40>

08017be8 <ucdr_serialize_endian_array_uint8_t>:
 8017be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bec:	4619      	mov	r1, r3
 8017bee:	461f      	mov	r7, r3
 8017bf0:	4605      	mov	r5, r0
 8017bf2:	4690      	mov	r8, r2
 8017bf4:	f7f8 fbc0 	bl	8010378 <ucdr_check_buffer_available_for>
 8017bf8:	b9e0      	cbnz	r0, 8017c34 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017bfa:	463e      	mov	r6, r7
 8017bfc:	e00b      	b.n	8017c16 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8017bfe:	4441      	add	r1, r8
 8017c00:	68a8      	ldr	r0, [r5, #8]
 8017c02:	4622      	mov	r2, r4
 8017c04:	1b36      	subs	r6, r6, r4
 8017c06:	f003 f932 	bl	801ae6e <memcpy>
 8017c0a:	68ab      	ldr	r3, [r5, #8]
 8017c0c:	6928      	ldr	r0, [r5, #16]
 8017c0e:	4423      	add	r3, r4
 8017c10:	4420      	add	r0, r4
 8017c12:	60ab      	str	r3, [r5, #8]
 8017c14:	6128      	str	r0, [r5, #16]
 8017c16:	4631      	mov	r1, r6
 8017c18:	2201      	movs	r2, #1
 8017c1a:	4628      	mov	r0, r5
 8017c1c:	f7f8 fc36 	bl	801048c <ucdr_check_final_buffer_behavior_array>
 8017c20:	1bb9      	subs	r1, r7, r6
 8017c22:	4604      	mov	r4, r0
 8017c24:	2800      	cmp	r0, #0
 8017c26:	d1ea      	bne.n	8017bfe <ucdr_serialize_endian_array_uint8_t+0x16>
 8017c28:	2301      	movs	r3, #1
 8017c2a:	7da8      	ldrb	r0, [r5, #22]
 8017c2c:	756b      	strb	r3, [r5, #21]
 8017c2e:	4058      	eors	r0, r3
 8017c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c34:	463a      	mov	r2, r7
 8017c36:	4641      	mov	r1, r8
 8017c38:	68a8      	ldr	r0, [r5, #8]
 8017c3a:	f003 f918 	bl	801ae6e <memcpy>
 8017c3e:	68aa      	ldr	r2, [r5, #8]
 8017c40:	692b      	ldr	r3, [r5, #16]
 8017c42:	443a      	add	r2, r7
 8017c44:	443b      	add	r3, r7
 8017c46:	60aa      	str	r2, [r5, #8]
 8017c48:	612b      	str	r3, [r5, #16]
 8017c4a:	e7ed      	b.n	8017c28 <ucdr_serialize_endian_array_uint8_t+0x40>

08017c4c <ucdr_deserialize_array_uint8_t>:
 8017c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c50:	4688      	mov	r8, r1
 8017c52:	4611      	mov	r1, r2
 8017c54:	4617      	mov	r7, r2
 8017c56:	4605      	mov	r5, r0
 8017c58:	f7f8 fb8e 	bl	8010378 <ucdr_check_buffer_available_for>
 8017c5c:	b9e8      	cbnz	r0, 8017c9a <ucdr_deserialize_array_uint8_t+0x4e>
 8017c5e:	463e      	mov	r6, r7
 8017c60:	e00c      	b.n	8017c7c <ucdr_deserialize_array_uint8_t+0x30>
 8017c62:	eb08 0003 	add.w	r0, r8, r3
 8017c66:	4622      	mov	r2, r4
 8017c68:	68a9      	ldr	r1, [r5, #8]
 8017c6a:	1b36      	subs	r6, r6, r4
 8017c6c:	f003 f8ff 	bl	801ae6e <memcpy>
 8017c70:	68aa      	ldr	r2, [r5, #8]
 8017c72:	692b      	ldr	r3, [r5, #16]
 8017c74:	4422      	add	r2, r4
 8017c76:	4423      	add	r3, r4
 8017c78:	60aa      	str	r2, [r5, #8]
 8017c7a:	612b      	str	r3, [r5, #16]
 8017c7c:	2201      	movs	r2, #1
 8017c7e:	4631      	mov	r1, r6
 8017c80:	4628      	mov	r0, r5
 8017c82:	f7f8 fc03 	bl	801048c <ucdr_check_final_buffer_behavior_array>
 8017c86:	1bbb      	subs	r3, r7, r6
 8017c88:	4604      	mov	r4, r0
 8017c8a:	2800      	cmp	r0, #0
 8017c8c:	d1e9      	bne.n	8017c62 <ucdr_deserialize_array_uint8_t+0x16>
 8017c8e:	2301      	movs	r3, #1
 8017c90:	7da8      	ldrb	r0, [r5, #22]
 8017c92:	756b      	strb	r3, [r5, #21]
 8017c94:	4058      	eors	r0, r3
 8017c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c9a:	463a      	mov	r2, r7
 8017c9c:	68a9      	ldr	r1, [r5, #8]
 8017c9e:	4640      	mov	r0, r8
 8017ca0:	f003 f8e5 	bl	801ae6e <memcpy>
 8017ca4:	68aa      	ldr	r2, [r5, #8]
 8017ca6:	692b      	ldr	r3, [r5, #16]
 8017ca8:	443a      	add	r2, r7
 8017caa:	443b      	add	r3, r7
 8017cac:	60aa      	str	r2, [r5, #8]
 8017cae:	612b      	str	r3, [r5, #16]
 8017cb0:	e7ed      	b.n	8017c8e <ucdr_deserialize_array_uint8_t+0x42>
 8017cb2:	bf00      	nop

08017cb4 <ucdr_deserialize_endian_array_uint8_t>:
 8017cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb8:	4619      	mov	r1, r3
 8017cba:	461f      	mov	r7, r3
 8017cbc:	4605      	mov	r5, r0
 8017cbe:	4690      	mov	r8, r2
 8017cc0:	f7f8 fb5a 	bl	8010378 <ucdr_check_buffer_available_for>
 8017cc4:	b9e8      	cbnz	r0, 8017d02 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8017cc6:	463e      	mov	r6, r7
 8017cc8:	e00c      	b.n	8017ce4 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8017cca:	4622      	mov	r2, r4
 8017ccc:	eb08 0003 	add.w	r0, r8, r3
 8017cd0:	68a9      	ldr	r1, [r5, #8]
 8017cd2:	1b36      	subs	r6, r6, r4
 8017cd4:	f003 f8cb 	bl	801ae6e <memcpy>
 8017cd8:	68ab      	ldr	r3, [r5, #8]
 8017cda:	692a      	ldr	r2, [r5, #16]
 8017cdc:	4423      	add	r3, r4
 8017cde:	4414      	add	r4, r2
 8017ce0:	60ab      	str	r3, [r5, #8]
 8017ce2:	612c      	str	r4, [r5, #16]
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	4631      	mov	r1, r6
 8017ce8:	4628      	mov	r0, r5
 8017cea:	f7f8 fbcf 	bl	801048c <ucdr_check_final_buffer_behavior_array>
 8017cee:	1bbb      	subs	r3, r7, r6
 8017cf0:	4604      	mov	r4, r0
 8017cf2:	2800      	cmp	r0, #0
 8017cf4:	d1e9      	bne.n	8017cca <ucdr_deserialize_endian_array_uint8_t+0x16>
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	7da8      	ldrb	r0, [r5, #22]
 8017cfa:	756b      	strb	r3, [r5, #21]
 8017cfc:	4058      	eors	r0, r3
 8017cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d02:	463a      	mov	r2, r7
 8017d04:	68a9      	ldr	r1, [r5, #8]
 8017d06:	4640      	mov	r0, r8
 8017d08:	f003 f8b1 	bl	801ae6e <memcpy>
 8017d0c:	68aa      	ldr	r2, [r5, #8]
 8017d0e:	692b      	ldr	r3, [r5, #16]
 8017d10:	443a      	add	r2, r7
 8017d12:	443b      	add	r3, r7
 8017d14:	60aa      	str	r2, [r5, #8]
 8017d16:	612b      	str	r3, [r5, #16]
 8017d18:	e7ed      	b.n	8017cf6 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8017d1a:	bf00      	nop

08017d1c <ucdr_serialize_string>:
 8017d1c:	b538      	push	{r3, r4, r5, lr}
 8017d1e:	4605      	mov	r5, r0
 8017d20:	4608      	mov	r0, r1
 8017d22:	460c      	mov	r4, r1
 8017d24:	f7e8 fb44 	bl	80003b0 <strlen>
 8017d28:	4602      	mov	r2, r0
 8017d2a:	4628      	mov	r0, r5
 8017d2c:	4621      	mov	r1, r4
 8017d2e:	3201      	adds	r2, #1
 8017d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d34:	f7f8 bbe8 	b.w	8010508 <ucdr_serialize_sequence_char>

08017d38 <ucdr_deserialize_string>:
 8017d38:	b500      	push	{lr}
 8017d3a:	b083      	sub	sp, #12
 8017d3c:	ab01      	add	r3, sp, #4
 8017d3e:	f7f8 fbf5 	bl	801052c <ucdr_deserialize_sequence_char>
 8017d42:	b003      	add	sp, #12
 8017d44:	f85d fb04 	ldr.w	pc, [sp], #4

08017d48 <get_custom_error>:
 8017d48:	4b01      	ldr	r3, [pc, #4]	@ (8017d50 <get_custom_error+0x8>)
 8017d4a:	7818      	ldrb	r0, [r3, #0]
 8017d4c:	4770      	bx	lr
 8017d4e:	bf00      	nop
 8017d50:	2400e06a 	.word	0x2400e06a

08017d54 <recv_custom_msg>:
 8017d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d58:	4693      	mov	fp, r2
 8017d5a:	b089      	sub	sp, #36	@ 0x24
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	4604      	mov	r4, r0
 8017d60:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8017d64:	f88d 201e 	strb.w	r2, [sp, #30]
 8017d68:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8017d6c:	9305      	str	r3, [sp, #20]
 8017d6e:	9104      	str	r1, [sp, #16]
 8017d70:	b332      	cbz	r2, 8017dc0 <recv_custom_msg+0x6c>
 8017d72:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8017d76:	f10d 091f 	add.w	r9, sp, #31
 8017d7a:	f10d 0814 	add.w	r8, sp, #20
 8017d7e:	f10d 071e 	add.w	r7, sp, #30
 8017d82:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8017d86:	e004      	b.n	8017d92 <recv_custom_msg+0x3e>
 8017d88:	9b05      	ldr	r3, [sp, #20]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	dd10      	ble.n	8017db0 <recv_custom_msg+0x5c>
 8017d8e:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8017d92:	4623      	mov	r3, r4
 8017d94:	4622      	mov	r2, r4
 8017d96:	4629      	mov	r1, r5
 8017d98:	4650      	mov	r0, sl
 8017d9a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8017d9e:	e9cd 6700 	strd	r6, r7, [sp]
 8017da2:	f001 f8cb 	bl	8018f3c <uxr_read_framed_msg>
 8017da6:	2800      	cmp	r0, #0
 8017da8:	d0ee      	beq.n	8017d88 <recv_custom_msg+0x34>
 8017daa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017dae:	b1a3      	cbz	r3, 8017dda <recv_custom_msg+0x86>
 8017db0:	4b0e      	ldr	r3, [pc, #56]	@ (8017dec <recv_custom_msg+0x98>)
 8017db2:	2000      	movs	r0, #0
 8017db4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017db8:	701a      	strb	r2, [r3, #0]
 8017dba:	b009      	add	sp, #36	@ 0x24
 8017dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc0:	f10d 021f 	add.w	r2, sp, #31
 8017dc4:	4601      	mov	r1, r0
 8017dc6:	9200      	str	r2, [sp, #0]
 8017dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017dcc:	47a8      	blx	r5
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	d0ee      	beq.n	8017db0 <recv_custom_msg+0x5c>
 8017dd2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d1ea      	bne.n	8017db0 <recv_custom_msg+0x5c>
 8017dda:	f8cb 0000 	str.w	r0, [fp]
 8017dde:	2001      	movs	r0, #1
 8017de0:	9b04      	ldr	r3, [sp, #16]
 8017de2:	601c      	str	r4, [r3, #0]
 8017de4:	b009      	add	sp, #36	@ 0x24
 8017de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dea:	bf00      	nop
 8017dec:	2400e06a 	.word	0x2400e06a

08017df0 <send_custom_msg>:
 8017df0:	b570      	push	{r4, r5, r6, lr}
 8017df2:	f890 6200 	ldrb.w	r6, [r0, #512]	@ 0x200
 8017df6:	b086      	sub	sp, #24
 8017df8:	4614      	mov	r4, r2
 8017dfa:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8017dfe:	b986      	cbnz	r6, 8017e22 <send_custom_msg+0x32>
 8017e00:	f10d 0317 	add.w	r3, sp, #23
 8017e04:	47a8      	blx	r5
 8017e06:	4603      	mov	r3, r0
 8017e08:	1e18      	subs	r0, r3, #0
 8017e0a:	bf18      	it	ne
 8017e0c:	2001      	movne	r0, #1
 8017e0e:	42a3      	cmp	r3, r4
 8017e10:	bf18      	it	ne
 8017e12:	2000      	movne	r0, #0
 8017e14:	b918      	cbnz	r0, 8017e1e <send_custom_msg+0x2e>
 8017e16:	4b0a      	ldr	r3, [pc, #40]	@ (8017e40 <send_custom_msg+0x50>)
 8017e18:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8017e1c:	701a      	strb	r2, [r3, #0]
 8017e1e:	b006      	add	sp, #24
 8017e20:	bd70      	pop	{r4, r5, r6, pc}
 8017e22:	f10d 0217 	add.w	r2, sp, #23
 8017e26:	460b      	mov	r3, r1
 8017e28:	9400      	str	r4, [sp, #0]
 8017e2a:	4629      	mov	r1, r5
 8017e2c:	9202      	str	r2, [sp, #8]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	9201      	str	r2, [sp, #4]
 8017e32:	4602      	mov	r2, r0
 8017e34:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017e38:	f000 fe98 	bl	8018b6c <uxr_write_framed_msg>
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	e7e3      	b.n	8017e08 <send_custom_msg+0x18>
 8017e40:	2400e06a 	.word	0x2400e06a

08017e44 <uxr_set_custom_transport_callbacks>:
 8017e44:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8017e48:	9901      	ldr	r1, [sp, #4]
 8017e4a:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8017e4e:	9b00      	ldr	r3, [sp, #0]
 8017e50:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8017e54:	4770      	bx	lr
 8017e56:	bf00      	nop

08017e58 <uxr_init_custom_transport>:
 8017e58:	b538      	push	{r3, r4, r5, lr}
 8017e5a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8017e5e:	b303      	cbz	r3, 8017ea2 <uxr_init_custom_transport+0x4a>
 8017e60:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8017e64:	4604      	mov	r4, r0
 8017e66:	b1e2      	cbz	r2, 8017ea2 <uxr_init_custom_transport+0x4a>
 8017e68:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8017e6c:	b1ca      	cbz	r2, 8017ea2 <uxr_init_custom_transport+0x4a>
 8017e6e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8017e72:	b1b2      	cbz	r2, 8017ea2 <uxr_init_custom_transport+0x4a>
 8017e74:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8017e78:	4798      	blx	r3
 8017e7a:	4605      	mov	r5, r0
 8017e7c:	b188      	cbz	r0, 8017ea2 <uxr_init_custom_transport+0x4a>
 8017e7e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8017e82:	b98b      	cbnz	r3, 8017ea8 <uxr_init_custom_transport+0x50>
 8017e84:	4b0b      	ldr	r3, [pc, #44]	@ (8017eb4 <uxr_init_custom_transport+0x5c>)
 8017e86:	4628      	mov	r0, r5
 8017e88:	490b      	ldr	r1, [pc, #44]	@ (8017eb8 <uxr_init_custom_transport+0x60>)
 8017e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8017ebc <uxr_init_custom_transport+0x64>)
 8017e8c:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8017e90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017e94:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8017e98:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8017e9c:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8017ea0:	bd38      	pop	{r3, r4, r5, pc}
 8017ea2:	2500      	movs	r5, #0
 8017ea4:	4628      	mov	r0, r5
 8017ea6:	bd38      	pop	{r3, r4, r5, pc}
 8017ea8:	2100      	movs	r1, #0
 8017eaa:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8017eae:	f000 fe57 	bl	8018b60 <uxr_init_framing_io>
 8017eb2:	e7e7      	b.n	8017e84 <uxr_init_custom_transport+0x2c>
 8017eb4:	08017d55 	.word	0x08017d55
 8017eb8:	08017df1 	.word	0x08017df1
 8017ebc:	08017d49 	.word	0x08017d49

08017ec0 <uxr_close_custom_transport>:
 8017ec0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8017ec4:	4718      	bx	r3
 8017ec6:	bf00      	nop

08017ec8 <uxr_init_input_best_effort_stream>:
 8017ec8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ecc:	8003      	strh	r3, [r0, #0]
 8017ece:	4770      	bx	lr

08017ed0 <uxr_reset_input_best_effort_stream>:
 8017ed0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ed4:	8003      	strh	r3, [r0, #0]
 8017ed6:	4770      	bx	lr

08017ed8 <uxr_receive_best_effort_message>:
 8017ed8:	b538      	push	{r3, r4, r5, lr}
 8017eda:	4604      	mov	r4, r0
 8017edc:	8800      	ldrh	r0, [r0, #0]
 8017ede:	460d      	mov	r5, r1
 8017ee0:	f000 fe28 	bl	8018b34 <uxr_seq_num_cmp>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	0fc0      	lsrs	r0, r0, #31
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	bfb8      	it	lt
 8017eec:	8025      	strhlt	r5, [r4, #0]
 8017eee:	bd38      	pop	{r3, r4, r5, pc}

08017ef0 <on_full_input_buffer>:
 8017ef0:	b570      	push	{r4, r5, r6, lr}
 8017ef2:	460c      	mov	r4, r1
 8017ef4:	4605      	mov	r5, r0
 8017ef6:	8908      	ldrh	r0, [r1, #8]
 8017ef8:	682b      	ldr	r3, [r5, #0]
 8017efa:	7d26      	ldrb	r6, [r4, #20]
 8017efc:	e9d1 1200 	ldrd	r1, r2, [r1]
 8017f00:	fbb2 f2f0 	udiv	r2, r2, r0
 8017f04:	1a5b      	subs	r3, r3, r1
 8017f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8017f0a:	3301      	adds	r3, #1
 8017f0c:	b29b      	uxth	r3, r3
 8017f0e:	fbb3 fcf0 	udiv	ip, r3, r0
 8017f12:	fb00 331c 	mls	r3, r0, ip, r3
 8017f16:	b29b      	uxth	r3, r3
 8017f18:	fb02 f303 	mul.w	r3, r2, r3
 8017f1c:	1d18      	adds	r0, r3, #4
 8017f1e:	4408      	add	r0, r1
 8017f20:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017f24:	b116      	cbz	r6, 8017f2c <on_full_input_buffer+0x3c>
 8017f26:	2600      	movs	r6, #0
 8017f28:	f840 6c04 	str.w	r6, [r0, #-4]
 8017f2c:	2a03      	cmp	r2, #3
 8017f2e:	d801      	bhi.n	8017f34 <on_full_input_buffer+0x44>
 8017f30:	2001      	movs	r0, #1
 8017f32:	bd70      	pop	{r4, r5, r6, pc}
 8017f34:	3308      	adds	r3, #8
 8017f36:	4628      	mov	r0, r5
 8017f38:	3a04      	subs	r2, #4
 8017f3a:	4419      	add	r1, r3
 8017f3c:	692b      	ldr	r3, [r5, #16]
 8017f3e:	f7f8 fa67 	bl	8010410 <ucdr_init_buffer_origin>
 8017f42:	4628      	mov	r0, r5
 8017f44:	4622      	mov	r2, r4
 8017f46:	4902      	ldr	r1, [pc, #8]	@ (8017f50 <on_full_input_buffer+0x60>)
 8017f48:	f7f8 fa3e 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 8017f4c:	2000      	movs	r0, #0
 8017f4e:	bd70      	pop	{r4, r5, r6, pc}
 8017f50:	08017ef1 	.word	0x08017ef1

08017f54 <uxr_init_input_reliable_stream>:
 8017f54:	b510      	push	{r4, lr}
 8017f56:	e9c0 1200 	strd	r1, r2, [r0]
 8017f5a:	2400      	movs	r4, #0
 8017f5c:	9a02      	ldr	r2, [sp, #8]
 8017f5e:	8103      	strh	r3, [r0, #8]
 8017f60:	6102      	str	r2, [r0, #16]
 8017f62:	7504      	strb	r4, [r0, #20]
 8017f64:	b1c3      	cbz	r3, 8017f98 <uxr_init_input_reliable_stream+0x44>
 8017f66:	600c      	str	r4, [r1, #0]
 8017f68:	8901      	ldrh	r1, [r0, #8]
 8017f6a:	2901      	cmp	r1, #1
 8017f6c:	d914      	bls.n	8017f98 <uxr_init_input_reliable_stream+0x44>
 8017f6e:	f04f 0c01 	mov.w	ip, #1
 8017f72:	6843      	ldr	r3, [r0, #4]
 8017f74:	f10c 0e01 	add.w	lr, ip, #1
 8017f78:	fbbc f2f1 	udiv	r2, ip, r1
 8017f7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017f80:	fb01 c212 	mls	r2, r1, r2, ip
 8017f84:	fa1f fc8e 	uxth.w	ip, lr
 8017f88:	b292      	uxth	r2, r2
 8017f8a:	fb02 f303 	mul.w	r3, r2, r3
 8017f8e:	6802      	ldr	r2, [r0, #0]
 8017f90:	50d4      	str	r4, [r2, r3]
 8017f92:	8901      	ldrh	r1, [r0, #8]
 8017f94:	4561      	cmp	r1, ip
 8017f96:	d8ec      	bhi.n	8017f72 <uxr_init_input_reliable_stream+0x1e>
 8017f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017f9c:	60c3      	str	r3, [r0, #12]
 8017f9e:	bd10      	pop	{r4, pc}

08017fa0 <uxr_reset_input_reliable_stream>:
 8017fa0:	8901      	ldrh	r1, [r0, #8]
 8017fa2:	b1d9      	cbz	r1, 8017fdc <uxr_reset_input_reliable_stream+0x3c>
 8017fa4:	b510      	push	{r4, lr}
 8017fa6:	f04f 0e00 	mov.w	lr, #0
 8017faa:	46f4      	mov	ip, lr
 8017fac:	4674      	mov	r4, lr
 8017fae:	6843      	ldr	r3, [r0, #4]
 8017fb0:	f10e 0e01 	add.w	lr, lr, #1
 8017fb4:	fbbc f2f1 	udiv	r2, ip, r1
 8017fb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fbc:	fb01 c212 	mls	r2, r1, r2, ip
 8017fc0:	fa1f fc8e 	uxth.w	ip, lr
 8017fc4:	b292      	uxth	r2, r2
 8017fc6:	fb02 f303 	mul.w	r3, r2, r3
 8017fca:	6802      	ldr	r2, [r0, #0]
 8017fcc:	50d4      	str	r4, [r2, r3]
 8017fce:	8901      	ldrh	r1, [r0, #8]
 8017fd0:	4561      	cmp	r1, ip
 8017fd2:	d8ec      	bhi.n	8017fae <uxr_reset_input_reliable_stream+0xe>
 8017fd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017fd8:	60c3      	str	r3, [r0, #12]
 8017fda:	bd10      	pop	{r4, pc}
 8017fdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017fe0:	60c3      	str	r3, [r0, #12]
 8017fe2:	4770      	bx	lr

08017fe4 <uxr_receive_reliable_message>:
 8017fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe8:	4604      	mov	r4, r0
 8017fea:	460d      	mov	r5, r1
 8017fec:	8901      	ldrh	r1, [r0, #8]
 8017fee:	4690      	mov	r8, r2
 8017ff0:	8980      	ldrh	r0, [r0, #12]
 8017ff2:	461f      	mov	r7, r3
 8017ff4:	f000 fd96 	bl	8018b24 <uxr_seq_num_add>
 8017ff8:	4629      	mov	r1, r5
 8017ffa:	4606      	mov	r6, r0
 8017ffc:	89a0      	ldrh	r0, [r4, #12]
 8017ffe:	f000 fd99 	bl	8018b34 <uxr_seq_num_cmp>
 8018002:	2800      	cmp	r0, #0
 8018004:	db0a      	blt.n	801801c <uxr_receive_reliable_message+0x38>
 8018006:	2600      	movs	r6, #0
 8018008:	4629      	mov	r1, r5
 801800a:	89e0      	ldrh	r0, [r4, #14]
 801800c:	f000 fd92 	bl	8018b34 <uxr_seq_num_cmp>
 8018010:	2800      	cmp	r0, #0
 8018012:	4630      	mov	r0, r6
 8018014:	bfb8      	it	lt
 8018016:	81e5      	strhlt	r5, [r4, #14]
 8018018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801801c:	4630      	mov	r0, r6
 801801e:	4629      	mov	r1, r5
 8018020:	f000 fd88 	bl	8018b34 <uxr_seq_num_cmp>
 8018024:	2800      	cmp	r0, #0
 8018026:	dbee      	blt.n	8018006 <uxr_receive_reliable_message+0x22>
 8018028:	6923      	ldr	r3, [r4, #16]
 801802a:	4640      	mov	r0, r8
 801802c:	4798      	blx	r3
 801802e:	4606      	mov	r6, r0
 8018030:	2101      	movs	r1, #1
 8018032:	89a0      	ldrh	r0, [r4, #12]
 8018034:	f000 fd76 	bl	8018b24 <uxr_seq_num_add>
 8018038:	b93e      	cbnz	r6, 801804a <uxr_receive_reliable_message+0x66>
 801803a:	4285      	cmp	r5, r0
 801803c:	d105      	bne.n	801804a <uxr_receive_reliable_message+0x66>
 801803e:	2300      	movs	r3, #0
 8018040:	9a06      	ldr	r2, [sp, #24]
 8018042:	81a0      	strh	r0, [r4, #12]
 8018044:	7013      	strb	r3, [r2, #0]
 8018046:	2601      	movs	r6, #1
 8018048:	e7de      	b.n	8018008 <uxr_receive_reliable_message+0x24>
 801804a:	8921      	ldrh	r1, [r4, #8]
 801804c:	6863      	ldr	r3, [r4, #4]
 801804e:	6820      	ldr	r0, [r4, #0]
 8018050:	fbb5 f2f1 	udiv	r2, r5, r1
 8018054:	fbb3 f3f1 	udiv	r3, r3, r1
 8018058:	fb01 5212 	mls	r2, r1, r2, r5
 801805c:	b292      	uxth	r2, r2
 801805e:	fb02 f303 	mul.w	r3, r2, r3
 8018062:	3304      	adds	r3, #4
 8018064:	4418      	add	r0, r3
 8018066:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d1cb      	bne.n	8018006 <uxr_receive_reliable_message+0x22>
 801806e:	4641      	mov	r1, r8
 8018070:	463a      	mov	r2, r7
 8018072:	f002 fefc 	bl	801ae6e <memcpy>
 8018076:	8921      	ldrh	r1, [r4, #8]
 8018078:	6863      	ldr	r3, [r4, #4]
 801807a:	fbb5 f2f1 	udiv	r2, r5, r1
 801807e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018082:	fb01 5212 	mls	r2, r1, r2, r5
 8018086:	b292      	uxth	r2, r2
 8018088:	fb02 f303 	mul.w	r3, r2, r3
 801808c:	6822      	ldr	r2, [r4, #0]
 801808e:	50d7      	str	r7, [r2, r3]
 8018090:	2301      	movs	r3, #1
 8018092:	9a06      	ldr	r2, [sp, #24]
 8018094:	7013      	strb	r3, [r2, #0]
 8018096:	2e00      	cmp	r6, #0
 8018098:	d0b5      	beq.n	8018006 <uxr_receive_reliable_message+0x22>
 801809a:	89a6      	ldrh	r6, [r4, #12]
 801809c:	2101      	movs	r1, #1
 801809e:	4630      	mov	r0, r6
 80180a0:	f000 fd40 	bl	8018b24 <uxr_seq_num_add>
 80180a4:	8921      	ldrh	r1, [r4, #8]
 80180a6:	6863      	ldr	r3, [r4, #4]
 80180a8:	4606      	mov	r6, r0
 80180aa:	fbb0 f2f1 	udiv	r2, r0, r1
 80180ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80180b2:	fb01 0212 	mls	r2, r1, r2, r0
 80180b6:	6820      	ldr	r0, [r4, #0]
 80180b8:	b292      	uxth	r2, r2
 80180ba:	fb02 f303 	mul.w	r3, r2, r3
 80180be:	3304      	adds	r3, #4
 80180c0:	4418      	add	r0, r3
 80180c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d09d      	beq.n	8018006 <uxr_receive_reliable_message+0x22>
 80180ca:	6923      	ldr	r3, [r4, #16]
 80180cc:	4798      	blx	r3
 80180ce:	2802      	cmp	r0, #2
 80180d0:	d0b9      	beq.n	8018046 <uxr_receive_reliable_message+0x62>
 80180d2:	2801      	cmp	r0, #1
 80180d4:	d0e2      	beq.n	801809c <uxr_receive_reliable_message+0xb8>
 80180d6:	e796      	b.n	8018006 <uxr_receive_reliable_message+0x22>

080180d8 <uxr_next_input_reliable_buffer_available>:
 80180d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180dc:	4604      	mov	r4, r0
 80180de:	460f      	mov	r7, r1
 80180e0:	8980      	ldrh	r0, [r0, #12]
 80180e2:	2101      	movs	r1, #1
 80180e4:	4690      	mov	r8, r2
 80180e6:	f000 fd1d 	bl	8018b24 <uxr_seq_num_add>
 80180ea:	8921      	ldrh	r1, [r4, #8]
 80180ec:	6863      	ldr	r3, [r4, #4]
 80180ee:	6826      	ldr	r6, [r4, #0]
 80180f0:	fbb0 f2f1 	udiv	r2, r0, r1
 80180f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80180f8:	fb01 0212 	mls	r2, r1, r2, r0
 80180fc:	b292      	uxth	r2, r2
 80180fe:	fb02 f303 	mul.w	r3, r2, r3
 8018102:	3304      	adds	r3, #4
 8018104:	441e      	add	r6, r3
 8018106:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801810a:	f1b9 0f00 	cmp.w	r9, #0
 801810e:	d023      	beq.n	8018158 <uxr_next_input_reliable_buffer_available+0x80>
 8018110:	4605      	mov	r5, r0
 8018112:	6923      	ldr	r3, [r4, #16]
 8018114:	4630      	mov	r0, r6
 8018116:	4798      	blx	r3
 8018118:	4682      	mov	sl, r0
 801811a:	b300      	cbz	r0, 801815e <uxr_next_input_reliable_buffer_available+0x86>
 801811c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018120:	2101      	movs	r1, #1
 8018122:	4650      	mov	r0, sl
 8018124:	f000 fcfe 	bl	8018b24 <uxr_seq_num_add>
 8018128:	8921      	ldrh	r1, [r4, #8]
 801812a:	4682      	mov	sl, r0
 801812c:	6863      	ldr	r3, [r4, #4]
 801812e:	6820      	ldr	r0, [r4, #0]
 8018130:	fbba f2f1 	udiv	r2, sl, r1
 8018134:	fbb3 f3f1 	udiv	r3, r3, r1
 8018138:	fb01 a212 	mls	r2, r1, r2, sl
 801813c:	b292      	uxth	r2, r2
 801813e:	fb02 f303 	mul.w	r3, r2, r3
 8018142:	3304      	adds	r3, #4
 8018144:	4418      	add	r0, r3
 8018146:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801814a:	b12b      	cbz	r3, 8018158 <uxr_next_input_reliable_buffer_available+0x80>
 801814c:	6923      	ldr	r3, [r4, #16]
 801814e:	4798      	blx	r3
 8018150:	2802      	cmp	r0, #2
 8018152:	d01b      	beq.n	801818c <uxr_next_input_reliable_buffer_available+0xb4>
 8018154:	2801      	cmp	r0, #1
 8018156:	d0e3      	beq.n	8018120 <uxr_next_input_reliable_buffer_available+0x48>
 8018158:	2000      	movs	r0, #0
 801815a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801815e:	464a      	mov	r2, r9
 8018160:	4631      	mov	r1, r6
 8018162:	4638      	mov	r0, r7
 8018164:	f7f8 f95c 	bl	8010420 <ucdr_init_buffer>
 8018168:	8921      	ldrh	r1, [r4, #8]
 801816a:	6863      	ldr	r3, [r4, #4]
 801816c:	fbb5 f2f1 	udiv	r2, r5, r1
 8018170:	fbb3 f3f1 	udiv	r3, r3, r1
 8018174:	fb01 5212 	mls	r2, r1, r2, r5
 8018178:	b292      	uxth	r2, r2
 801817a:	fb02 f303 	mul.w	r3, r2, r3
 801817e:	6822      	ldr	r2, [r4, #0]
 8018180:	f842 a003 	str.w	sl, [r2, r3]
 8018184:	2001      	movs	r0, #1
 8018186:	81a5      	strh	r5, [r4, #12]
 8018188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801818c:	eb06 0108 	add.w	r1, r6, r8
 8018190:	8926      	ldrh	r6, [r4, #8]
 8018192:	6863      	ldr	r3, [r4, #4]
 8018194:	eba9 0208 	sub.w	r2, r9, r8
 8018198:	fbb5 f0f6 	udiv	r0, r5, r6
 801819c:	fbb3 f3f6 	udiv	r3, r3, r6
 80181a0:	fb06 5010 	mls	r0, r6, r0, r5
 80181a4:	2500      	movs	r5, #0
 80181a6:	b280      	uxth	r0, r0
 80181a8:	fb00 f303 	mul.w	r3, r0, r3
 80181ac:	6820      	ldr	r0, [r4, #0]
 80181ae:	50c5      	str	r5, [r0, r3]
 80181b0:	4638      	mov	r0, r7
 80181b2:	f7f8 f935 	bl	8010420 <ucdr_init_buffer>
 80181b6:	4622      	mov	r2, r4
 80181b8:	4902      	ldr	r1, [pc, #8]	@ (80181c4 <uxr_next_input_reliable_buffer_available+0xec>)
 80181ba:	4638      	mov	r0, r7
 80181bc:	4655      	mov	r5, sl
 80181be:	f7f8 f903 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 80181c2:	e7df      	b.n	8018184 <uxr_next_input_reliable_buffer_available+0xac>
 80181c4:	08017ef1 	.word	0x08017ef1

080181c8 <uxr_process_heartbeat>:
 80181c8:	b538      	push	{r3, r4, r5, lr}
 80181ca:	4611      	mov	r1, r2
 80181cc:	4604      	mov	r4, r0
 80181ce:	89c0      	ldrh	r0, [r0, #14]
 80181d0:	4615      	mov	r5, r2
 80181d2:	f000 fcaf 	bl	8018b34 <uxr_seq_num_cmp>
 80181d6:	2800      	cmp	r0, #0
 80181d8:	bfb8      	it	lt
 80181da:	81e5      	strhlt	r5, [r4, #14]
 80181dc:	bd38      	pop	{r3, r4, r5, pc}
 80181de:	bf00      	nop

080181e0 <uxr_compute_acknack>:
 80181e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181e4:	8903      	ldrh	r3, [r0, #8]
 80181e6:	4604      	mov	r4, r0
 80181e8:	460d      	mov	r5, r1
 80181ea:	8986      	ldrh	r6, [r0, #12]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d04a      	beq.n	8018286 <uxr_compute_acknack+0xa6>
 80181f0:	4630      	mov	r0, r6
 80181f2:	2701      	movs	r7, #1
 80181f4:	e004      	b.n	8018200 <uxr_compute_acknack+0x20>
 80181f6:	4567      	cmp	r7, ip
 80181f8:	f107 0701 	add.w	r7, r7, #1
 80181fc:	d243      	bcs.n	8018286 <uxr_compute_acknack+0xa6>
 80181fe:	89a0      	ldrh	r0, [r4, #12]
 8018200:	b2b9      	uxth	r1, r7
 8018202:	f000 fc8f 	bl	8018b24 <uxr_seq_num_add>
 8018206:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801820a:	fbb0 f2fc 	udiv	r2, r0, ip
 801820e:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018212:	fb0c 0212 	mls	r2, ip, r2, r0
 8018216:	fbb3 f3fc 	udiv	r3, r3, ip
 801821a:	b292      	uxth	r2, r2
 801821c:	fb02 f303 	mul.w	r3, r2, r3
 8018220:	58cb      	ldr	r3, [r1, r3]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d1e7      	bne.n	80181f6 <uxr_compute_acknack+0x16>
 8018226:	8028      	strh	r0, [r5, #0]
 8018228:	2101      	movs	r1, #1
 801822a:	89e6      	ldrh	r6, [r4, #14]
 801822c:	f000 fc7e 	bl	8018b2c <uxr_seq_num_sub>
 8018230:	4601      	mov	r1, r0
 8018232:	4630      	mov	r0, r6
 8018234:	f000 fc7a 	bl	8018b2c <uxr_seq_num_sub>
 8018238:	4681      	mov	r9, r0
 801823a:	4606      	mov	r6, r0
 801823c:	b300      	cbz	r0, 8018280 <uxr_compute_acknack+0xa0>
 801823e:	f04f 0800 	mov.w	r8, #0
 8018242:	2701      	movs	r7, #1
 8018244:	46c1      	mov	r9, r8
 8018246:	fa1f f188 	uxth.w	r1, r8
 801824a:	8828      	ldrh	r0, [r5, #0]
 801824c:	f000 fc6a 	bl	8018b24 <uxr_seq_num_add>
 8018250:	8921      	ldrh	r1, [r4, #8]
 8018252:	6863      	ldr	r3, [r4, #4]
 8018254:	fa07 fc08 	lsl.w	ip, r7, r8
 8018258:	6822      	ldr	r2, [r4, #0]
 801825a:	f108 0801 	add.w	r8, r8, #1
 801825e:	ea49 0c0c 	orr.w	ip, r9, ip
 8018262:	fbb0 fef1 	udiv	lr, r0, r1
 8018266:	fbb3 f3f1 	udiv	r3, r3, r1
 801826a:	fb0e 0011 	mls	r0, lr, r1, r0
 801826e:	b280      	uxth	r0, r0
 8018270:	fb00 f303 	mul.w	r3, r0, r3
 8018274:	58d3      	ldr	r3, [r2, r3]
 8018276:	b90b      	cbnz	r3, 801827c <uxr_compute_acknack+0x9c>
 8018278:	fa1f f98c 	uxth.w	r9, ip
 801827c:	4546      	cmp	r6, r8
 801827e:	d1e2      	bne.n	8018246 <uxr_compute_acknack+0x66>
 8018280:	4648      	mov	r0, r9
 8018282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018286:	4630      	mov	r0, r6
 8018288:	e7cd      	b.n	8018226 <uxr_compute_acknack+0x46>
 801828a:	bf00      	nop

0801828c <uxr_init_output_best_effort_stream>:
 801828c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018290:	6001      	str	r1, [r0, #0]
 8018292:	7303      	strb	r3, [r0, #12]
 8018294:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018298:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801829c:	4770      	bx	lr
 801829e:	bf00      	nop

080182a0 <uxr_reset_output_best_effort_stream>:
 80182a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80182a4:	7b03      	ldrb	r3, [r0, #12]
 80182a6:	81c2      	strh	r2, [r0, #14]
 80182a8:	6043      	str	r3, [r0, #4]
 80182aa:	4770      	bx	lr

080182ac <uxr_prepare_best_effort_buffer_to_write>:
 80182ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182ae:	4604      	mov	r4, r0
 80182b0:	b083      	sub	sp, #12
 80182b2:	6840      	ldr	r0, [r0, #4]
 80182b4:	460d      	mov	r5, r1
 80182b6:	4616      	mov	r6, r2
 80182b8:	f7f9 fcc0 	bl	8011c3c <uxr_submessage_padding>
 80182bc:	6863      	ldr	r3, [r4, #4]
 80182be:	4418      	add	r0, r3
 80182c0:	68a3      	ldr	r3, [r4, #8]
 80182c2:	1942      	adds	r2, r0, r5
 80182c4:	4293      	cmp	r3, r2
 80182c6:	bf2c      	ite	cs
 80182c8:	2701      	movcs	r7, #1
 80182ca:	2700      	movcc	r7, #0
 80182cc:	d202      	bcs.n	80182d4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80182ce:	4638      	mov	r0, r7
 80182d0:	b003      	add	sp, #12
 80182d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182d4:	9000      	str	r0, [sp, #0]
 80182d6:	2300      	movs	r3, #0
 80182d8:	4630      	mov	r0, r6
 80182da:	6821      	ldr	r1, [r4, #0]
 80182dc:	f7f8 f88e 	bl	80103fc <ucdr_init_buffer_origin_offset>
 80182e0:	6863      	ldr	r3, [r4, #4]
 80182e2:	4638      	mov	r0, r7
 80182e4:	442b      	add	r3, r5
 80182e6:	6063      	str	r3, [r4, #4]
 80182e8:	b003      	add	sp, #12
 80182ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080182ec <uxr_prepare_best_effort_buffer_to_send>:
 80182ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182f0:	4604      	mov	r4, r0
 80182f2:	461d      	mov	r5, r3
 80182f4:	6840      	ldr	r0, [r0, #4]
 80182f6:	7b23      	ldrb	r3, [r4, #12]
 80182f8:	4298      	cmp	r0, r3
 80182fa:	bf8c      	ite	hi
 80182fc:	2601      	movhi	r6, #1
 80182fe:	2600      	movls	r6, #0
 8018300:	d802      	bhi.n	8018308 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8018302:	4630      	mov	r0, r6
 8018304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018308:	4688      	mov	r8, r1
 801830a:	89e0      	ldrh	r0, [r4, #14]
 801830c:	2101      	movs	r1, #1
 801830e:	4617      	mov	r7, r2
 8018310:	f000 fc08 	bl	8018b24 <uxr_seq_num_add>
 8018314:	6823      	ldr	r3, [r4, #0]
 8018316:	81e0      	strh	r0, [r4, #14]
 8018318:	8028      	strh	r0, [r5, #0]
 801831a:	4630      	mov	r0, r6
 801831c:	f8c8 3000 	str.w	r3, [r8]
 8018320:	6863      	ldr	r3, [r4, #4]
 8018322:	603b      	str	r3, [r7, #0]
 8018324:	7b23      	ldrb	r3, [r4, #12]
 8018326:	6063      	str	r3, [r4, #4]
 8018328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801832c <on_full_output_buffer>:
 801832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801832e:	890a      	ldrh	r2, [r1, #8]
 8018330:	460c      	mov	r4, r1
 8018332:	4605      	mov	r5, r0
 8018334:	7b26      	ldrb	r6, [r4, #12]
 8018336:	e9d1 1300 	ldrd	r1, r3, [r1]
 801833a:	fbb3 fef2 	udiv	lr, r3, r2
 801833e:	6803      	ldr	r3, [r0, #0]
 8018340:	eba3 0c01 	sub.w	ip, r3, r1
 8018344:	6903      	ldr	r3, [r0, #16]
 8018346:	fbbc fcfe 	udiv	ip, ip, lr
 801834a:	f10c 0c01 	add.w	ip, ip, #1
 801834e:	fa1f fc8c 	uxth.w	ip, ip
 8018352:	fbbc f7f2 	udiv	r7, ip, r2
 8018356:	fb02 cc17 	mls	ip, r2, r7, ip
 801835a:	fa1f fc8c 	uxth.w	ip, ip
 801835e:	fb0e fc0c 	mul.w	ip, lr, ip
 8018362:	f851 200c 	ldr.w	r2, [r1, ip]
 8018366:	44b4      	add	ip, r6
 8018368:	1b92      	subs	r2, r2, r6
 801836a:	f10c 0c08 	add.w	ip, ip, #8
 801836e:	3a04      	subs	r2, #4
 8018370:	4461      	add	r1, ip
 8018372:	f7f8 f84d 	bl	8010410 <ucdr_init_buffer_origin>
 8018376:	4628      	mov	r0, r5
 8018378:	4622      	mov	r2, r4
 801837a:	4902      	ldr	r1, [pc, #8]	@ (8018384 <on_full_output_buffer+0x58>)
 801837c:	f7f8 f824 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 8018380:	2000      	movs	r0, #0
 8018382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018384:	0801832d 	.word	0x0801832d

08018388 <uxr_init_output_reliable_stream>:
 8018388:	b530      	push	{r4, r5, lr}
 801838a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801838e:	8103      	strh	r3, [r0, #8]
 8018390:	7304      	strb	r4, [r0, #12]
 8018392:	e9c0 1200 	strd	r1, r2, [r0]
 8018396:	b1e3      	cbz	r3, 80183d2 <uxr_init_output_reliable_stream+0x4a>
 8018398:	600c      	str	r4, [r1, #0]
 801839a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801839e:	f1bc 0f01 	cmp.w	ip, #1
 80183a2:	d916      	bls.n	80183d2 <uxr_init_output_reliable_stream+0x4a>
 80183a4:	f04f 0e01 	mov.w	lr, #1
 80183a8:	6843      	ldr	r3, [r0, #4]
 80183aa:	f10e 0501 	add.w	r5, lr, #1
 80183ae:	7b04      	ldrb	r4, [r0, #12]
 80183b0:	6801      	ldr	r1, [r0, #0]
 80183b2:	fbbe f2fc 	udiv	r2, lr, ip
 80183b6:	fbb3 f3fc 	udiv	r3, r3, ip
 80183ba:	fb0c e212 	mls	r2, ip, r2, lr
 80183be:	fa1f fe85 	uxth.w	lr, r5
 80183c2:	b292      	uxth	r2, r2
 80183c4:	fb02 f303 	mul.w	r3, r2, r3
 80183c8:	50cc      	str	r4, [r1, r3]
 80183ca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80183ce:	45f4      	cmp	ip, lr
 80183d0:	d8ea      	bhi.n	80183a8 <uxr_init_output_reliable_stream+0x20>
 80183d2:	4b07      	ldr	r3, [pc, #28]	@ (80183f0 <uxr_init_output_reliable_stream+0x68>)
 80183d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80183d8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80183dc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80183e0:	f8c0 300e 	str.w	r3, [r0, #14]
 80183e4:	2300      	movs	r3, #0
 80183e6:	8242      	strh	r2, [r0, #18]
 80183e8:	8403      	strh	r3, [r0, #32]
 80183ea:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80183ee:	bd30      	pop	{r4, r5, pc}
 80183f0:	ffff0000 	.word	0xffff0000
 80183f4:	00000000 	.word	0x00000000

080183f8 <uxr_reset_output_reliable_stream>:
 80183f8:	8901      	ldrh	r1, [r0, #8]
 80183fa:	b510      	push	{r4, lr}
 80183fc:	b1b1      	cbz	r1, 801842c <uxr_reset_output_reliable_stream+0x34>
 80183fe:	f04f 0e00 	mov.w	lr, #0
 8018402:	46f4      	mov	ip, lr
 8018404:	6843      	ldr	r3, [r0, #4]
 8018406:	f10e 0e01 	add.w	lr, lr, #1
 801840a:	7b04      	ldrb	r4, [r0, #12]
 801840c:	fbbc f2f1 	udiv	r2, ip, r1
 8018410:	fbb3 f3f1 	udiv	r3, r3, r1
 8018414:	fb01 c212 	mls	r2, r1, r2, ip
 8018418:	fa1f fc8e 	uxth.w	ip, lr
 801841c:	b292      	uxth	r2, r2
 801841e:	fb02 f303 	mul.w	r3, r2, r3
 8018422:	6802      	ldr	r2, [r0, #0]
 8018424:	50d4      	str	r4, [r2, r3]
 8018426:	8901      	ldrh	r1, [r0, #8]
 8018428:	4561      	cmp	r1, ip
 801842a:	d8eb      	bhi.n	8018404 <uxr_reset_output_reliable_stream+0xc>
 801842c:	4b08      	ldr	r3, [pc, #32]	@ (8018450 <uxr_reset_output_reliable_stream+0x58>)
 801842e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018432:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 8018448 <uxr_reset_output_reliable_stream+0x50>
 8018436:	f8c0 300e 	str.w	r3, [r0, #14]
 801843a:	2300      	movs	r3, #0
 801843c:	8242      	strh	r2, [r0, #18]
 801843e:	8403      	strh	r3, [r0, #32]
 8018440:	ed80 7b06 	vstr	d7, [r0, #24]
 8018444:	bd10      	pop	{r4, pc}
 8018446:	bf00      	nop
 8018448:	ffffffff 	.word	0xffffffff
 801844c:	7fffffff 	.word	0x7fffffff
 8018450:	ffff0000 	.word	0xffff0000

08018454 <uxr_prepare_reliable_buffer_to_write>:
 8018454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018458:	8903      	ldrh	r3, [r0, #8]
 801845a:	468b      	mov	fp, r1
 801845c:	89c7      	ldrh	r7, [r0, #14]
 801845e:	b091      	sub	sp, #68	@ 0x44
 8018460:	6845      	ldr	r5, [r0, #4]
 8018462:	4604      	mov	r4, r0
 8018464:	f8d0 9000 	ldr.w	r9, [r0]
 8018468:	f890 a00c 	ldrb.w	sl, [r0, #12]
 801846c:	9205      	str	r2, [sp, #20]
 801846e:	fbb7 f1f3 	udiv	r1, r7, r3
 8018472:	fbb5 f5f3 	udiv	r5, r5, r3
 8018476:	fb03 7111 	mls	r1, r3, r1, r7
 801847a:	1f2a      	subs	r2, r5, #4
 801847c:	b289      	uxth	r1, r1
 801847e:	fb05 9101 	mla	r1, r5, r1, r9
 8018482:	1d08      	adds	r0, r1, #4
 8018484:	f8d1 8000 	ldr.w	r8, [r1]
 8018488:	9004      	str	r0, [sp, #16]
 801848a:	2b00      	cmp	r3, #0
 801848c:	f000 8145 	beq.w	801871a <uxr_prepare_reliable_buffer_to_write+0x2c6>
 8018490:	2000      	movs	r0, #0
 8018492:	4606      	mov	r6, r0
 8018494:	b281      	uxth	r1, r0
 8018496:	3001      	adds	r0, #1
 8018498:	fbb1 fcf3 	udiv	ip, r1, r3
 801849c:	fb03 111c 	mls	r1, r3, ip, r1
 80184a0:	b289      	uxth	r1, r1
 80184a2:	fb05 f101 	mul.w	r1, r5, r1
 80184a6:	f859 1001 	ldr.w	r1, [r9, r1]
 80184aa:	4551      	cmp	r1, sl
 80184ac:	d101      	bne.n	80184b2 <uxr_prepare_reliable_buffer_to_write+0x5e>
 80184ae:	3601      	adds	r6, #1
 80184b0:	b2b6      	uxth	r6, r6
 80184b2:	4298      	cmp	r0, r3
 80184b4:	d1ee      	bne.n	8018494 <uxr_prepare_reliable_buffer_to_write+0x40>
 80184b6:	4640      	mov	r0, r8
 80184b8:	2104      	movs	r1, #4
 80184ba:	9603      	str	r6, [sp, #12]
 80184bc:	9203      	str	r2, [sp, #12]
 80184be:	f7f7 ffb3 	bl	8010428 <ucdr_alignment>
 80184c2:	eb00 0908 	add.w	r9, r0, r8
 80184c6:	9a03      	ldr	r2, [sp, #12]
 80184c8:	eb09 080b 	add.w	r8, r9, fp
 80184cc:	4590      	cmp	r8, r2
 80184ce:	f240 80c5 	bls.w	801865c <uxr_prepare_reliable_buffer_to_write+0x208>
 80184d2:	7b21      	ldrb	r1, [r4, #12]
 80184d4:	4459      	add	r1, fp
 80184d6:	4291      	cmp	r1, r2
 80184d8:	f240 80ad 	bls.w	8018636 <uxr_prepare_reliable_buffer_to_write+0x1e2>
 80184dc:	f64f 78fc 	movw	r8, #65532	@ 0xfffc
 80184e0:	b293      	uxth	r3, r2
 80184e2:	eba8 080a 	sub.w	r8, r8, sl
 80184e6:	4498      	add	r8, r3
 80184e8:	fa1f f888 	uxth.w	r8, r8
 80184ec:	fb06 fa08 	mul.w	sl, r6, r8
 80184f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80184f4:	45da      	cmp	sl, fp
 80184f6:	f0c0 80ad 	bcc.w	8018654 <uxr_prepare_reliable_buffer_to_write+0x200>
 80184fa:	f109 0104 	add.w	r1, r9, #4
 80184fe:	4291      	cmp	r1, r2
 8018500:	f080 80d5 	bcs.w	80186ae <uxr_prepare_reliable_buffer_to_write+0x25a>
 8018504:	f1a3 0a04 	sub.w	sl, r3, #4
 8018508:	ebaa 0a09 	sub.w	sl, sl, r9
 801850c:	fa1f fa8a 	uxth.w	sl, sl
 8018510:	ebab 0b0a 	sub.w	fp, fp, sl
 8018514:	fbbb fcf8 	udiv	ip, fp, r8
 8018518:	fb08 b31c 	mls	r3, r8, ip, fp
 801851c:	fa1f fc8c 	uxth.w	ip, ip
 8018520:	2b00      	cmp	r3, #0
 8018522:	f040 80bc 	bne.w	801869e <uxr_prepare_reliable_buffer_to_write+0x24a>
 8018526:	45b4      	cmp	ip, r6
 8018528:	f200 8094 	bhi.w	8018654 <uxr_prepare_reliable_buffer_to_write+0x200>
 801852c:	f1bc 0f00 	cmp.w	ip, #0
 8018530:	f000 80f5 	beq.w	801871e <uxr_prepare_reliable_buffer_to_write+0x2ca>
 8018534:	f8cd 9018 	str.w	r9, [sp, #24]
 8018538:	2600      	movs	r6, #0
 801853a:	9507      	str	r5, [sp, #28]
 801853c:	f10d 0b20 	add.w	fp, sp, #32
 8018540:	46e1      	mov	r9, ip
 8018542:	4615      	mov	r5, r2
 8018544:	e000      	b.n	8018548 <uxr_prepare_reliable_buffer_to_write+0xf4>
 8018546:	46c2      	mov	sl, r8
 8018548:	8921      	ldrh	r1, [r4, #8]
 801854a:	4658      	mov	r0, fp
 801854c:	6863      	ldr	r3, [r4, #4]
 801854e:	3601      	adds	r6, #1
 8018550:	fbb7 f2f1 	udiv	r2, r7, r1
 8018554:	fbb3 f3f1 	udiv	r3, r3, r1
 8018558:	fb01 7212 	mls	r2, r1, r2, r7
 801855c:	6821      	ldr	r1, [r4, #0]
 801855e:	b292      	uxth	r2, r2
 8018560:	fb02 f303 	mul.w	r3, r2, r3
 8018564:	462a      	mov	r2, r5
 8018566:	3304      	adds	r3, #4
 8018568:	4419      	add	r1, r3
 801856a:	2300      	movs	r3, #0
 801856c:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8018570:	f8cd c000 	str.w	ip, [sp]
 8018574:	f7f7 ff42 	bl	80103fc <ucdr_init_buffer_origin_offset>
 8018578:	4652      	mov	r2, sl
 801857a:	2300      	movs	r3, #0
 801857c:	210d      	movs	r1, #13
 801857e:	4658      	mov	r0, fp
 8018580:	f7f9 fb1c 	bl	8011bbc <uxr_buffer_submessage_header>
 8018584:	8921      	ldrh	r1, [r4, #8]
 8018586:	6863      	ldr	r3, [r4, #4]
 8018588:	4638      	mov	r0, r7
 801858a:	fbb7 f2f1 	udiv	r2, r7, r1
 801858e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018592:	fb01 7212 	mls	r2, r1, r2, r7
 8018596:	2101      	movs	r1, #1
 8018598:	b292      	uxth	r2, r2
 801859a:	fb02 f303 	mul.w	r3, r2, r3
 801859e:	6822      	ldr	r2, [r4, #0]
 80185a0:	50d5      	str	r5, [r2, r3]
 80185a2:	f000 fabf 	bl	8018b24 <uxr_seq_num_add>
 80185a6:	454e      	cmp	r6, r9
 80185a8:	4607      	mov	r7, r0
 80185aa:	d1cc      	bne.n	8018546 <uxr_prepare_reliable_buffer_to_write+0xf2>
 80185ac:	462a      	mov	r2, r5
 80185ae:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80185b2:	9d07      	ldr	r5, [sp, #28]
 80185b4:	8920      	ldrh	r0, [r4, #8]
 80185b6:	6863      	ldr	r3, [r4, #4]
 80185b8:	fbb7 f1f0 	udiv	r1, r7, r0
 80185bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80185c0:	fb00 7111 	mls	r1, r0, r1, r7
 80185c4:	4658      	mov	r0, fp
 80185c6:	b289      	uxth	r1, r1
 80185c8:	fb01 f303 	mul.w	r3, r1, r3
 80185cc:	6821      	ldr	r1, [r4, #0]
 80185ce:	3304      	adds	r3, #4
 80185d0:	4419      	add	r1, r3
 80185d2:	2300      	movs	r3, #0
 80185d4:	f851 6c04 	ldr.w	r6, [r1, #-4]
 80185d8:	9600      	str	r6, [sp, #0]
 80185da:	f7f7 ff0f 	bl	80103fc <ucdr_init_buffer_origin_offset>
 80185de:	9e03      	ldr	r6, [sp, #12]
 80185e0:	2302      	movs	r3, #2
 80185e2:	210d      	movs	r1, #13
 80185e4:	b2b2      	uxth	r2, r6
 80185e6:	4658      	mov	r0, fp
 80185e8:	f7f9 fae8 	bl	8011bbc <uxr_buffer_submessage_header>
 80185ec:	f1a5 0208 	sub.w	r2, r5, #8
 80185f0:	f109 0104 	add.w	r1, r9, #4
 80185f4:	8925      	ldrh	r5, [r4, #8]
 80185f6:	9b04      	ldr	r3, [sp, #16]
 80185f8:	eba2 0209 	sub.w	r2, r2, r9
 80185fc:	fbb7 f0f5 	udiv	r0, r7, r5
 8018600:	440b      	add	r3, r1
 8018602:	fb05 7010 	mls	r0, r5, r0, r7
 8018606:	4619      	mov	r1, r3
 8018608:	6863      	ldr	r3, [r4, #4]
 801860a:	b280      	uxth	r0, r0
 801860c:	fbb3 f3f5 	udiv	r3, r3, r5
 8018610:	fb00 f303 	mul.w	r3, r0, r3
 8018614:	7b20      	ldrb	r0, [r4, #12]
 8018616:	6825      	ldr	r5, [r4, #0]
 8018618:	3004      	adds	r0, #4
 801861a:	4430      	add	r0, r6
 801861c:	50e8      	str	r0, [r5, r3]
 801861e:	9d05      	ldr	r5, [sp, #20]
 8018620:	4628      	mov	r0, r5
 8018622:	f7f7 fefd 	bl	8010420 <ucdr_init_buffer>
 8018626:	4622      	mov	r2, r4
 8018628:	493e      	ldr	r1, [pc, #248]	@ (8018724 <uxr_prepare_reliable_buffer_to_write+0x2d0>)
 801862a:	4628      	mov	r0, r5
 801862c:	f7f7 fecc 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 8018630:	81e7      	strh	r7, [r4, #14]
 8018632:	2001      	movs	r0, #1
 8018634:	e00f      	b.n	8018656 <uxr_prepare_reliable_buffer_to_write+0x202>
 8018636:	2101      	movs	r1, #1
 8018638:	89e0      	ldrh	r0, [r4, #14]
 801863a:	f000 fa73 	bl	8018b24 <uxr_seq_num_add>
 801863e:	4605      	mov	r5, r0
 8018640:	8921      	ldrh	r1, [r4, #8]
 8018642:	8a60      	ldrh	r0, [r4, #18]
 8018644:	f000 fa6e 	bl	8018b24 <uxr_seq_num_add>
 8018648:	4601      	mov	r1, r0
 801864a:	4628      	mov	r0, r5
 801864c:	f000 fa72 	bl	8018b34 <uxr_seq_num_cmp>
 8018650:	2800      	cmp	r0, #0
 8018652:	dd48      	ble.n	80186e6 <uxr_prepare_reliable_buffer_to_write+0x292>
 8018654:	2000      	movs	r0, #0
 8018656:	b011      	add	sp, #68	@ 0x44
 8018658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801865c:	8921      	ldrh	r1, [r4, #8]
 801865e:	8a60      	ldrh	r0, [r4, #18]
 8018660:	f000 fa60 	bl	8018b24 <uxr_seq_num_add>
 8018664:	4601      	mov	r1, r0
 8018666:	4638      	mov	r0, r7
 8018668:	f000 fa64 	bl	8018b34 <uxr_seq_num_cmp>
 801866c:	2800      	cmp	r0, #0
 801866e:	dcf1      	bgt.n	8018654 <uxr_prepare_reliable_buffer_to_write+0x200>
 8018670:	8925      	ldrh	r5, [r4, #8]
 8018672:	fbb7 f2f5 	udiv	r2, r7, r5
 8018676:	e9d4 4300 	ldrd	r4, r3, [r4]
 801867a:	fb05 7212 	mls	r2, r5, r2, r7
 801867e:	fbb3 f3f5 	udiv	r3, r3, r5
 8018682:	b292      	uxth	r2, r2
 8018684:	fb02 f303 	mul.w	r3, r2, r3
 8018688:	4642      	mov	r2, r8
 801868a:	f844 8003 	str.w	r8, [r4, r3]
 801868e:	2300      	movs	r3, #0
 8018690:	f8cd 9000 	str.w	r9, [sp]
 8018694:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8018698:	f7f7 feb0 	bl	80103fc <ucdr_init_buffer_origin_offset>
 801869c:	e7c9      	b.n	8018632 <uxr_prepare_reliable_buffer_to_write+0x1de>
 801869e:	f10c 0c01 	add.w	ip, ip, #1
 80186a2:	9303      	str	r3, [sp, #12]
 80186a4:	fa1f fc8c 	uxth.w	ip, ip
 80186a8:	45b4      	cmp	ip, r6
 80186aa:	d8d3      	bhi.n	8018654 <uxr_prepare_reliable_buffer_to_write+0x200>
 80186ac:	e73e      	b.n	801852c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80186ae:	4638      	mov	r0, r7
 80186b0:	2101      	movs	r1, #1
 80186b2:	e9cd 3206 	strd	r3, r2, [sp, #24]
 80186b6:	f000 fa35 	bl	8018b24 <uxr_seq_num_add>
 80186ba:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80186be:	4607      	mov	r7, r0
 80186c0:	6861      	ldr	r1, [r4, #4]
 80186c2:	fbb0 f0fc 	udiv	r0, r0, ip
 80186c6:	fbb1 f1fc 	udiv	r1, r1, ip
 80186ca:	fb0c 7010 	mls	r0, ip, r0, r7
 80186ce:	b280      	uxth	r0, r0
 80186d0:	fb00 f101 	mul.w	r1, r0, r1
 80186d4:	6820      	ldr	r0, [r4, #0]
 80186d6:	3104      	adds	r1, #4
 80186d8:	1843      	adds	r3, r0, r1
 80186da:	f853 9c04 	ldr.w	r9, [r3, #-4]
 80186de:	9304      	str	r3, [sp, #16]
 80186e0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80186e4:	e70e      	b.n	8018504 <uxr_prepare_reliable_buffer_to_write+0xb0>
 80186e6:	8921      	ldrh	r1, [r4, #8]
 80186e8:	6863      	ldr	r3, [r4, #4]
 80186ea:	9805      	ldr	r0, [sp, #20]
 80186ec:	fbb5 f2f1 	udiv	r2, r5, r1
 80186f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80186f4:	fb01 5212 	mls	r2, r1, r2, r5
 80186f8:	6821      	ldr	r1, [r4, #0]
 80186fa:	b292      	uxth	r2, r2
 80186fc:	fb02 f303 	mul.w	r3, r2, r3
 8018700:	7b22      	ldrb	r2, [r4, #12]
 8018702:	3304      	adds	r3, #4
 8018704:	445a      	add	r2, fp
 8018706:	4419      	add	r1, r3
 8018708:	f841 2c04 	str.w	r2, [r1, #-4]
 801870c:	7b23      	ldrb	r3, [r4, #12]
 801870e:	9300      	str	r3, [sp, #0]
 8018710:	2300      	movs	r3, #0
 8018712:	f7f7 fe73 	bl	80103fc <ucdr_init_buffer_origin_offset>
 8018716:	81e5      	strh	r5, [r4, #14]
 8018718:	e78b      	b.n	8018632 <uxr_prepare_reliable_buffer_to_write+0x1de>
 801871a:	461e      	mov	r6, r3
 801871c:	e6cb      	b.n	80184b6 <uxr_prepare_reliable_buffer_to_write+0x62>
 801871e:	f10d 0b20 	add.w	fp, sp, #32
 8018722:	e747      	b.n	80185b4 <uxr_prepare_reliable_buffer_to_write+0x160>
 8018724:	0801832d 	.word	0x0801832d

08018728 <uxr_prepare_next_reliable_buffer_to_send>:
 8018728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801872a:	4604      	mov	r4, r0
 801872c:	461e      	mov	r6, r3
 801872e:	460f      	mov	r7, r1
 8018730:	8a00      	ldrh	r0, [r0, #16]
 8018732:	2101      	movs	r1, #1
 8018734:	4615      	mov	r5, r2
 8018736:	f000 f9f5 	bl	8018b24 <uxr_seq_num_add>
 801873a:	8030      	strh	r0, [r6, #0]
 801873c:	8922      	ldrh	r2, [r4, #8]
 801873e:	6863      	ldr	r3, [r4, #4]
 8018740:	fbb0 f1f2 	udiv	r1, r0, r2
 8018744:	fbb3 f3f2 	udiv	r3, r3, r2
 8018748:	fb02 0c11 	mls	ip, r2, r1, r0
 801874c:	89e1      	ldrh	r1, [r4, #14]
 801874e:	fa1f fc8c 	uxth.w	ip, ip
 8018752:	fb0c fc03 	mul.w	ip, ip, r3
 8018756:	6823      	ldr	r3, [r4, #0]
 8018758:	f10c 0c04 	add.w	ip, ip, #4
 801875c:	4463      	add	r3, ip
 801875e:	603b      	str	r3, [r7, #0]
 8018760:	6823      	ldr	r3, [r4, #0]
 8018762:	4463      	add	r3, ip
 8018764:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018768:	602b      	str	r3, [r5, #0]
 801876a:	f000 f9e3 	bl	8018b34 <uxr_seq_num_cmp>
 801876e:	2800      	cmp	r0, #0
 8018770:	dd01      	ble.n	8018776 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018772:	2000      	movs	r0, #0
 8018774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018776:	7b23      	ldrb	r3, [r4, #12]
 8018778:	682a      	ldr	r2, [r5, #0]
 801877a:	429a      	cmp	r2, r3
 801877c:	d9f9      	bls.n	8018772 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801877e:	8a61      	ldrh	r1, [r4, #18]
 8018780:	8a20      	ldrh	r0, [r4, #16]
 8018782:	f000 f9d3 	bl	8018b2c <uxr_seq_num_sub>
 8018786:	8923      	ldrh	r3, [r4, #8]
 8018788:	4283      	cmp	r3, r0
 801878a:	d0f2      	beq.n	8018772 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801878c:	8830      	ldrh	r0, [r6, #0]
 801878e:	89e3      	ldrh	r3, [r4, #14]
 8018790:	8220      	strh	r0, [r4, #16]
 8018792:	4298      	cmp	r0, r3
 8018794:	d001      	beq.n	801879a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018796:	2001      	movs	r0, #1
 8018798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801879a:	2101      	movs	r1, #1
 801879c:	f000 f9c2 	bl	8018b24 <uxr_seq_num_add>
 80187a0:	81e0      	strh	r0, [r4, #14]
 80187a2:	e7f8      	b.n	8018796 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

080187a4 <uxr_update_output_stream_heartbeat_timestamp>:
 80187a4:	b570      	push	{r4, r5, r6, lr}
 80187a6:	8a01      	ldrh	r1, [r0, #16]
 80187a8:	4604      	mov	r4, r0
 80187aa:	8a40      	ldrh	r0, [r0, #18]
 80187ac:	4615      	mov	r5, r2
 80187ae:	461e      	mov	r6, r3
 80187b0:	f000 f9c0 	bl	8018b34 <uxr_seq_num_cmp>
 80187b4:	2800      	cmp	r0, #0
 80187b6:	db07      	blt.n	80187c8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80187b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80187bc:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80187c0:	2000      	movs	r0, #0
 80187c2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80187c6:	bd70      	pop	{r4, r5, r6, pc}
 80187c8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80187cc:	b953      	cbnz	r3, 80187e4 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 80187ce:	2301      	movs	r3, #1
 80187d0:	f884 3020 	strb.w	r3, [r4, #32]
 80187d4:	3564      	adds	r5, #100	@ 0x64
 80187d6:	f04f 0000 	mov.w	r0, #0
 80187da:	f146 0600 	adc.w	r6, r6, #0
 80187de:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80187e2:	bd70      	pop	{r4, r5, r6, pc}
 80187e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80187e8:	428d      	cmp	r5, r1
 80187ea:	eb76 0202 	sbcs.w	r2, r6, r2
 80187ee:	dbf1      	blt.n	80187d4 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80187f0:	3301      	adds	r3, #1
 80187f2:	3564      	adds	r5, #100	@ 0x64
 80187f4:	f04f 0001 	mov.w	r0, #1
 80187f8:	f146 0600 	adc.w	r6, r6, #0
 80187fc:	f884 3020 	strb.w	r3, [r4, #32]
 8018800:	e7ed      	b.n	80187de <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8018802:	bf00      	nop

08018804 <uxr_begin_output_nack_buffer_it>:
 8018804:	8a40      	ldrh	r0, [r0, #18]
 8018806:	4770      	bx	lr

08018808 <uxr_next_reliable_nack_buffer_to_send>:
 8018808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801880c:	461d      	mov	r5, r3
 801880e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8018812:	b91b      	cbnz	r3, 801881c <uxr_next_reliable_nack_buffer_to_send+0x14>
 8018814:	2600      	movs	r6, #0
 8018816:	4630      	mov	r0, r6
 8018818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801881c:	4604      	mov	r4, r0
 801881e:	460f      	mov	r7, r1
 8018820:	4690      	mov	r8, r2
 8018822:	2600      	movs	r6, #0
 8018824:	2101      	movs	r1, #1
 8018826:	2e00      	cmp	r6, #0
 8018828:	d1f5      	bne.n	8018816 <uxr_next_reliable_nack_buffer_to_send+0xe>
 801882a:	8828      	ldrh	r0, [r5, #0]
 801882c:	f000 f97a 	bl	8018b24 <uxr_seq_num_add>
 8018830:	8028      	strh	r0, [r5, #0]
 8018832:	8a21      	ldrh	r1, [r4, #16]
 8018834:	f000 f97e 	bl	8018b34 <uxr_seq_num_cmp>
 8018838:	2800      	cmp	r0, #0
 801883a:	dd02      	ble.n	8018842 <uxr_next_reliable_nack_buffer_to_send+0x3a>
 801883c:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018840:	e7e8      	b.n	8018814 <uxr_next_reliable_nack_buffer_to_send+0xc>
 8018842:	8921      	ldrh	r1, [r4, #8]
 8018844:	882b      	ldrh	r3, [r5, #0]
 8018846:	6862      	ldr	r2, [r4, #4]
 8018848:	fbb3 f0f1 	udiv	r0, r3, r1
 801884c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018850:	fb01 3310 	mls	r3, r1, r0, r3
 8018854:	b29b      	uxth	r3, r3
 8018856:	fb02 f303 	mul.w	r3, r2, r3
 801885a:	6822      	ldr	r2, [r4, #0]
 801885c:	3304      	adds	r3, #4
 801885e:	441a      	add	r2, r3
 8018860:	603a      	str	r2, [r7, #0]
 8018862:	6822      	ldr	r2, [r4, #0]
 8018864:	441a      	add	r2, r3
 8018866:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801886a:	f8c8 3000 	str.w	r3, [r8]
 801886e:	7b26      	ldrb	r6, [r4, #12]
 8018870:	1af6      	subs	r6, r6, r3
 8018872:	bf18      	it	ne
 8018874:	2601      	movne	r6, #1
 8018876:	e7d5      	b.n	8018824 <uxr_next_reliable_nack_buffer_to_send+0x1c>

08018878 <uxr_process_acknack>:
 8018878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801887a:	4604      	mov	r4, r0
 801887c:	460e      	mov	r6, r1
 801887e:	4610      	mov	r0, r2
 8018880:	2101      	movs	r1, #1
 8018882:	f000 f953 	bl	8018b2c <uxr_seq_num_sub>
 8018886:	8a61      	ldrh	r1, [r4, #18]
 8018888:	f000 f950 	bl	8018b2c <uxr_seq_num_sub>
 801888c:	b1d0      	cbz	r0, 80188c4 <uxr_process_acknack+0x4c>
 801888e:	4605      	mov	r5, r0
 8018890:	2700      	movs	r7, #0
 8018892:	2101      	movs	r1, #1
 8018894:	8a60      	ldrh	r0, [r4, #18]
 8018896:	f000 f945 	bl	8018b24 <uxr_seq_num_add>
 801889a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801889e:	6863      	ldr	r3, [r4, #4]
 80188a0:	3701      	adds	r7, #1
 80188a2:	8260      	strh	r0, [r4, #18]
 80188a4:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80188a8:	42bd      	cmp	r5, r7
 80188aa:	6822      	ldr	r2, [r4, #0]
 80188ac:	fbb3 f1fc 	udiv	r1, r3, ip
 80188b0:	fbb0 f3fc 	udiv	r3, r0, ip
 80188b4:	fb0c 0013 	mls	r0, ip, r3, r0
 80188b8:	b283      	uxth	r3, r0
 80188ba:	fb01 f303 	mul.w	r3, r1, r3
 80188be:	f842 e003 	str.w	lr, [r2, r3]
 80188c2:	d1e6      	bne.n	8018892 <uxr_process_acknack+0x1a>
 80188c4:	3e00      	subs	r6, #0
 80188c6:	f04f 0300 	mov.w	r3, #0
 80188ca:	bf18      	it	ne
 80188cc:	2601      	movne	r6, #1
 80188ce:	f884 3020 	strb.w	r3, [r4, #32]
 80188d2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80188d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080188d8 <uxr_is_output_up_to_date>:
 80188d8:	8a01      	ldrh	r1, [r0, #16]
 80188da:	8a40      	ldrh	r0, [r0, #18]
 80188dc:	b508      	push	{r3, lr}
 80188de:	f000 f929 	bl	8018b34 <uxr_seq_num_cmp>
 80188e2:	fab0 f080 	clz	r0, r0
 80188e6:	0940      	lsrs	r0, r0, #5
 80188e8:	bd08      	pop	{r3, pc}
 80188ea:	bf00      	nop

080188ec <get_available_free_slots>:
 80188ec:	8901      	ldrh	r1, [r0, #8]
 80188ee:	b1c1      	cbz	r1, 8018922 <get_available_free_slots+0x36>
 80188f0:	6843      	ldr	r3, [r0, #4]
 80188f2:	2200      	movs	r2, #0
 80188f4:	b530      	push	{r4, r5, lr}
 80188f6:	fbb3 fef1 	udiv	lr, r3, r1
 80188fa:	6805      	ldr	r5, [r0, #0]
 80188fc:	7b04      	ldrb	r4, [r0, #12]
 80188fe:	4610      	mov	r0, r2
 8018900:	b293      	uxth	r3, r2
 8018902:	3201      	adds	r2, #1
 8018904:	fbb3 fcf1 	udiv	ip, r3, r1
 8018908:	fb01 331c 	mls	r3, r1, ip, r3
 801890c:	b29b      	uxth	r3, r3
 801890e:	fb0e f303 	mul.w	r3, lr, r3
 8018912:	58eb      	ldr	r3, [r5, r3]
 8018914:	429c      	cmp	r4, r3
 8018916:	d101      	bne.n	801891c <get_available_free_slots+0x30>
 8018918:	3001      	adds	r0, #1
 801891a:	b280      	uxth	r0, r0
 801891c:	4291      	cmp	r1, r2
 801891e:	d1ef      	bne.n	8018900 <get_available_free_slots+0x14>
 8018920:	bd30      	pop	{r4, r5, pc}
 8018922:	4608      	mov	r0, r1
 8018924:	4770      	bx	lr
 8018926:	bf00      	nop

08018928 <uxr_buffer_cancel_data>:
 8018928:	b510      	push	{r4, lr}
 801892a:	2300      	movs	r3, #0
 801892c:	b094      	sub	sp, #80	@ 0x50
 801892e:	4604      	mov	r4, r0
 8018930:	9301      	str	r3, [sp, #4]
 8018932:	9205      	str	r2, [sp, #20]
 8018934:	2201      	movs	r2, #1
 8018936:	f8ad 301c 	strh.w	r3, [sp, #28]
 801893a:	f88d 301e 	strb.w	r3, [sp, #30]
 801893e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8018942:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8018946:	2308      	movs	r3, #8
 8018948:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801894c:	2210      	movs	r2, #16
 801894e:	9300      	str	r3, [sp, #0]
 8018950:	ab0c      	add	r3, sp, #48	@ 0x30
 8018952:	f7f8 feaf 	bl	80116b4 <uxr_prepare_stream_to_write_submessage>
 8018956:	b918      	cbnz	r0, 8018960 <uxr_buffer_cancel_data+0x38>
 8018958:	4604      	mov	r4, r0
 801895a:	4620      	mov	r0, r4
 801895c:	b014      	add	sp, #80	@ 0x50
 801895e:	bd10      	pop	{r4, pc}
 8018960:	9905      	ldr	r1, [sp, #20]
 8018962:	aa06      	add	r2, sp, #24
 8018964:	4620      	mov	r0, r4
 8018966:	f7f8 ffdd 	bl	8011924 <uxr_init_base_object_request>
 801896a:	4604      	mov	r4, r0
 801896c:	a906      	add	r1, sp, #24
 801896e:	a80c      	add	r0, sp, #48	@ 0x30
 8018970:	f7fa f9aa 	bl	8012cc8 <uxr_serialize_READ_DATA_Payload>
 8018974:	4620      	mov	r0, r4
 8018976:	b014      	add	sp, #80	@ 0x50
 8018978:	bd10      	pop	{r4, pc}
 801897a:	bf00      	nop

0801897c <read_submessage_format>:
 801897c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018980:	b095      	sub	sp, #84	@ 0x54
 8018982:	f8bd 8078 	ldrh.w	r8, [sp, #120]	@ 0x78
 8018986:	b113      	cbz	r3, 801898e <read_submessage_format+0x12>
 8018988:	b015      	add	sp, #84	@ 0x54
 801898a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801898e:	461d      	mov	r5, r3
 8018990:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8018992:	460c      	mov	r4, r1
 8018994:	4616      	mov	r6, r2
 8018996:	9304      	str	r3, [sp, #16]
 8018998:	4607      	mov	r7, r0
 801899a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801899c:	a80c      	add	r0, sp, #48	@ 0x30
 801899e:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 80189a2:	9305      	str	r3, [sp, #20]
 80189a4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80189a8:	1a52      	subs	r2, r2, r1
 80189aa:	f7f7 fd39 	bl	8010420 <ucdr_init_buffer>
 80189ae:	a80c      	add	r0, sp, #48	@ 0x30
 80189b0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80189b4:	f7f7 fd08 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 80189b8:	69e3      	ldr	r3, [r4, #28]
 80189ba:	b35b      	cbz	r3, 8018a14 <read_submessage_format+0x98>
 80189bc:	f1b9 0f07 	cmp.w	r9, #7
 80189c0:	751d      	strb	r5, [r3, #20]
 80189c2:	d043      	beq.n	8018a4c <read_submessage_format+0xd0>
 80189c4:	f1b9 0f08 	cmp.w	r9, #8
 80189c8:	d032      	beq.n	8018a30 <read_submessage_format+0xb4>
 80189ca:	f1b9 0f06 	cmp.w	r9, #6
 80189ce:	d008      	beq.n	80189e2 <read_submessage_format+0x66>
 80189d0:	2201      	movs	r2, #1
 80189d2:	751a      	strb	r2, [r3, #20]
 80189d4:	4631      	mov	r1, r6
 80189d6:	4620      	mov	r0, r4
 80189d8:	f7f7 fd76 	bl	80104c8 <ucdr_advance_buffer>
 80189dc:	b015      	add	sp, #84	@ 0x54
 80189de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189e2:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 80189e6:	2d00      	cmp	r5, #0
 80189e8:	d0f2      	beq.n	80189d0 <read_submessage_format+0x54>
 80189ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80189ec:	9601      	str	r6, [sp, #4]
 80189ee:	4642      	mov	r2, r8
 80189f0:	4638      	mov	r0, r7
 80189f2:	9300      	str	r3, [sp, #0]
 80189f4:	2306      	movs	r3, #6
 80189f6:	f88d 3016 	strb.w	r3, [sp, #22]
 80189fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80189fe:	9302      	str	r3, [sp, #8]
 8018a00:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018a04:	47a8      	blx	r5
 8018a06:	2201      	movs	r2, #1
 8018a08:	69e3      	ldr	r3, [r4, #28]
 8018a0a:	f887 20b4 	strb.w	r2, [r7, #180]	@ 0xb4
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d1de      	bne.n	80189d0 <read_submessage_format+0x54>
 8018a12:	e7df      	b.n	80189d4 <read_submessage_format+0x58>
 8018a14:	f1b9 0f07 	cmp.w	r9, #7
 8018a18:	d032      	beq.n	8018a80 <read_submessage_format+0x104>
 8018a1a:	f1b9 0f08 	cmp.w	r9, #8
 8018a1e:	d02a      	beq.n	8018a76 <read_submessage_format+0xfa>
 8018a20:	f1b9 0f06 	cmp.w	r9, #6
 8018a24:	d1d6      	bne.n	80189d4 <read_submessage_format+0x58>
 8018a26:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 8018a2a:	2d00      	cmp	r5, #0
 8018a2c:	d1dd      	bne.n	80189ea <read_submessage_format+0x6e>
 8018a2e:	e7d1      	b.n	80189d4 <read_submessage_format+0x58>
 8018a30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8018a34:	2a00      	cmp	r2, #0
 8018a36:	d0cb      	beq.n	80189d0 <read_submessage_format+0x54>
 8018a38:	a80c      	add	r0, sp, #48	@ 0x30
 8018a3a:	a906      	add	r1, sp, #24
 8018a3c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018a3e:	f7fa fa0f 	bl	8012e60 <uxr_deserialize_SampleIdentity>
 8018a42:	bb28      	cbnz	r0, 8018a90 <read_submessage_format+0x114>
 8018a44:	69e3      	ldr	r3, [r4, #28]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d1c2      	bne.n	80189d0 <read_submessage_format+0x54>
 8018a4a:	e7c3      	b.n	80189d4 <read_submessage_format+0x58>
 8018a4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8018a50:	b16a      	cbz	r2, 8018a6e <read_submessage_format+0xf2>
 8018a52:	a906      	add	r1, sp, #24
 8018a54:	a80c      	add	r0, sp, #48	@ 0x30
 8018a56:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018a58:	f7f9 feea 	bl	8012830 <uxr_deserialize_BaseObjectRequest>
 8018a5c:	2800      	cmp	r0, #0
 8018a5e:	d13a      	bne.n	8018ad6 <read_submessage_format+0x15a>
 8018a60:	68a2      	ldr	r2, [r4, #8]
 8018a62:	69e3      	ldr	r3, [r4, #28]
 8018a64:	4432      	add	r2, r6
 8018a66:	60a2      	str	r2, [r4, #8]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d1b1      	bne.n	80189d0 <read_submessage_format+0x54>
 8018a6c:	e7b2      	b.n	80189d4 <read_submessage_format+0x58>
 8018a6e:	68a2      	ldr	r2, [r4, #8]
 8018a70:	4432      	add	r2, r6
 8018a72:	60a2      	str	r2, [r4, #8]
 8018a74:	e7ac      	b.n	80189d0 <read_submessage_format+0x54>
 8018a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	d1dc      	bne.n	8018a38 <read_submessage_format+0xbc>
 8018a7e:	e7a9      	b.n	80189d4 <read_submessage_format+0x58>
 8018a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d1e4      	bne.n	8018a52 <read_submessage_format+0xd6>
 8018a88:	68a3      	ldr	r3, [r4, #8]
 8018a8a:	4433      	add	r3, r6
 8018a8c:	60a3      	str	r3, [r4, #8]
 8018a8e:	e7a1      	b.n	80189d4 <read_submessage_format+0x58>
 8018a90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018a92:	a80c      	add	r0, sp, #48	@ 0x30
 8018a94:	1aed      	subs	r5, r5, r3
 8018a96:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8018a9a:	4435      	add	r5, r6
 8018a9c:	1a52      	subs	r2, r2, r1
 8018a9e:	f7f7 fcbf 	bl	8010420 <ucdr_init_buffer>
 8018aa2:	a80c      	add	r0, sp, #48	@ 0x30
 8018aa4:	b2ad      	uxth	r5, r5
 8018aa6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018aaa:	f7f7 fc8d 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 8018aae:	ab0c      	add	r3, sp, #48	@ 0x30
 8018ab0:	2108      	movs	r1, #8
 8018ab2:	9501      	str	r5, [sp, #4]
 8018ab4:	9300      	str	r3, [sp, #0]
 8018ab6:	4642      	mov	r2, r8
 8018ab8:	f88d 1016 	strb.w	r1, [sp, #22]
 8018abc:	ab06      	add	r3, sp, #24
 8018abe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8018ac2:	4638      	mov	r0, r7
 8018ac4:	9102      	str	r1, [sp, #8]
 8018ac6:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 8018aca:	9905      	ldr	r1, [sp, #20]
 8018acc:	47a8      	blx	r5
 8018ace:	2301      	movs	r3, #1
 8018ad0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018ad4:	e7b6      	b.n	8018a44 <read_submessage_format+0xc8>
 8018ad6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018ad8:	a80c      	add	r0, sp, #48	@ 0x30
 8018ada:	1aed      	subs	r5, r5, r3
 8018adc:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8018ae0:	4435      	add	r5, r6
 8018ae2:	1a52      	subs	r2, r2, r1
 8018ae4:	f7f7 fc9c 	bl	8010420 <ucdr_init_buffer>
 8018ae8:	a80c      	add	r0, sp, #48	@ 0x30
 8018aea:	b2ad      	uxth	r5, r5
 8018aec:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018af0:	f7f7 fc6a 	bl	80103c8 <ucdr_set_on_full_buffer_callback>
 8018af4:	ab0c      	add	r3, sp, #48	@ 0x30
 8018af6:	2107      	movs	r1, #7
 8018af8:	9501      	str	r5, [sp, #4]
 8018afa:	9300      	str	r3, [sp, #0]
 8018afc:	4642      	mov	r2, r8
 8018afe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8018b02:	4638      	mov	r0, r7
 8018b04:	f88d 1016 	strb.w	r1, [sp, #22]
 8018b08:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8018b0c:	ba5b      	rev16	r3, r3
 8018b0e:	9102      	str	r1, [sp, #8]
 8018b10:	b29b      	uxth	r3, r3
 8018b12:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 8018b16:	9905      	ldr	r1, [sp, #20]
 8018b18:	47a8      	blx	r5
 8018b1a:	2301      	movs	r3, #1
 8018b1c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018b20:	e79e      	b.n	8018a60 <read_submessage_format+0xe4>
 8018b22:	bf00      	nop

08018b24 <uxr_seq_num_add>:
 8018b24:	4408      	add	r0, r1
 8018b26:	b280      	uxth	r0, r0
 8018b28:	4770      	bx	lr
 8018b2a:	bf00      	nop

08018b2c <uxr_seq_num_sub>:
 8018b2c:	1a40      	subs	r0, r0, r1
 8018b2e:	b280      	uxth	r0, r0
 8018b30:	4770      	bx	lr
 8018b32:	bf00      	nop

08018b34 <uxr_seq_num_cmp>:
 8018b34:	4288      	cmp	r0, r1
 8018b36:	d010      	beq.n	8018b5a <uxr_seq_num_cmp+0x26>
 8018b38:	d207      	bcs.n	8018b4a <uxr_seq_num_cmp+0x16>
 8018b3a:	1a09      	subs	r1, r1, r0
 8018b3c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018b40:	bfb4      	ite	lt
 8018b42:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
 8018b46:	2001      	movge	r0, #1
 8018b48:	4770      	bx	lr
 8018b4a:	1a41      	subs	r1, r0, r1
 8018b4c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018b50:	bfcc      	ite	gt
 8018b52:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018b56:	2001      	movle	r0, #1
 8018b58:	4770      	bx	lr
 8018b5a:	2000      	movs	r0, #0
 8018b5c:	4770      	bx	lr
 8018b5e:	bf00      	nop

08018b60 <uxr_init_framing_io>:
 8018b60:	2300      	movs	r3, #0
 8018b62:	7041      	strb	r1, [r0, #1]
 8018b64:	7003      	strb	r3, [r0, #0]
 8018b66:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018b68:	4770      	bx	lr
 8018b6a:	bf00      	nop

08018b6c <uxr_write_framed_msg>:
 8018b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b70:	4617      	mov	r7, r2
 8018b72:	7845      	ldrb	r5, [r0, #1]
 8018b74:	227e      	movs	r2, #126	@ 0x7e
 8018b76:	b085      	sub	sp, #20
 8018b78:	4604      	mov	r4, r0
 8018b7a:	460e      	mov	r6, r1
 8018b7c:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 8018b80:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018b84:	469b      	mov	fp, r3
 8018b86:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8018b8a:	2a01      	cmp	r2, #1
 8018b8c:	f89d c03c 	ldrb.w	ip, [sp, #60]	@ 0x3c
 8018b90:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8018b94:	f240 812c 	bls.w	8018df0 <uxr_write_framed_msg+0x284>
 8018b98:	2003      	movs	r0, #3
 8018b9a:	2202      	movs	r2, #2
 8018b9c:	f04f 0a05 	mov.w	sl, #5
 8018ba0:	2104      	movs	r1, #4
 8018ba2:	4686      	mov	lr, r0
 8018ba4:	4613      	mov	r3, r2
 8018ba6:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 8018baa:	f1ac 057d 	sub.w	r5, ip, #125	@ 0x7d
 8018bae:	4422      	add	r2, r4
 8018bb0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018bb4:	2d01      	cmp	r5, #1
 8018bb6:	f240 8110 	bls.w	8018dda <uxr_write_framed_msg+0x26e>
 8018bba:	f882 c038 	strb.w	ip, [r2, #56]	@ 0x38
 8018bbe:	fa5f fc89 	uxtb.w	ip, r9
 8018bc2:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8018bc6:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 8018bca:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 8018bce:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8018bd2:	f1be 0f01 	cmp.w	lr, #1
 8018bd6:	b2d2      	uxtb	r2, r2
 8018bd8:	d94b      	bls.n	8018c72 <uxr_write_framed_msg+0x106>
 8018bda:	4420      	add	r0, r4
 8018bdc:	2a01      	cmp	r2, #1
 8018bde:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8018be2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018be6:	d95c      	bls.n	8018ca2 <uxr_write_framed_msg+0x136>
 8018be8:	1c4a      	adds	r2, r1, #1
 8018bea:	4421      	add	r1, r4
 8018bec:	b2d2      	uxtb	r2, r2
 8018bee:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8018bf2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018bf6:	f1b9 0f00 	cmp.w	r9, #0
 8018bfa:	f000 8106 	beq.w	8018e0a <uxr_write_framed_msg+0x29e>
 8018bfe:	f04f 0c00 	mov.w	ip, #0
 8018c02:	465b      	mov	r3, fp
 8018c04:	4649      	mov	r1, r9
 8018c06:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8018e14 <uxr_write_framed_msg+0x2a8>
 8018c0a:	46e3      	mov	fp, ip
 8018c0c:	46e1      	mov	r9, ip
 8018c0e:	f813 000b 	ldrb.w	r0, [r3, fp]
 8018c12:	f1a0 057d 	sub.w	r5, r0, #125	@ 0x7d
 8018c16:	2d01      	cmp	r5, #1
 8018c18:	d91b      	bls.n	8018c52 <uxr_write_framed_msg+0xe6>
 8018c1a:	2a29      	cmp	r2, #41	@ 0x29
 8018c1c:	d84e      	bhi.n	8018cbc <uxr_write_framed_msg+0x150>
 8018c1e:	1c55      	adds	r5, r2, #1
 8018c20:	4422      	add	r2, r4
 8018c22:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8018c26:	b2ea      	uxtb	r2, r5
 8018c28:	ea89 0000 	eor.w	r0, r9, r0
 8018c2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018c30:	f10b 0b01 	add.w	fp, fp, #1
 8018c34:	b2c0      	uxtb	r0, r0
 8018c36:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
 8018c3a:	ea82 2919 	eor.w	r9, r2, r9, lsr #8
 8018c3e:	4559      	cmp	r1, fp
 8018c40:	d95b      	bls.n	8018cfa <uxr_write_framed_msg+0x18e>
 8018c42:	f813 000b 	ldrb.w	r0, [r3, fp]
 8018c46:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018c4a:	f1a0 057d 	sub.w	r5, r0, #125	@ 0x7d
 8018c4e:	2d01      	cmp	r5, #1
 8018c50:	d8e3      	bhi.n	8018c1a <uxr_write_framed_msg+0xae>
 8018c52:	1c55      	adds	r5, r2, #1
 8018c54:	b2ed      	uxtb	r5, r5
 8018c56:	2d29      	cmp	r5, #41	@ 0x29
 8018c58:	d830      	bhi.n	8018cbc <uxr_write_framed_msg+0x150>
 8018c5a:	18a5      	adds	r5, r4, r2
 8018c5c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018c60:	3202      	adds	r2, #2
 8018c62:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8018c66:	f080 0c20 	eor.w	ip, r0, #32
 8018c6a:	b2d2      	uxtb	r2, r2
 8018c6c:	f885 c039 	strb.w	ip, [r5, #57]	@ 0x39
 8018c70:	e7da      	b.n	8018c28 <uxr_write_framed_msg+0xbc>
 8018c72:	f08c 0c20 	eor.w	ip, ip, #32
 8018c76:	eb04 0e00 	add.w	lr, r4, r0
 8018c7a:	1c81      	adds	r1, r0, #2
 8018c7c:	2a01      	cmp	r2, #1
 8018c7e:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 8018c82:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018c86:	b2c9      	uxtb	r1, r1
 8018c88:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 8018c8c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8018c90:	d907      	bls.n	8018ca2 <uxr_write_framed_msg+0x136>
 8018c92:	1cc2      	adds	r2, r0, #3
 8018c94:	4421      	add	r1, r4
 8018c96:	b2d2      	uxtb	r2, r2
 8018c98:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8018c9c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018ca0:	e7ad      	b.n	8018bfe <uxr_write_framed_msg+0x92>
 8018ca2:	1c8a      	adds	r2, r1, #2
 8018ca4:	f085 0520 	eor.w	r5, r5, #32
 8018ca8:	4421      	add	r1, r4
 8018caa:	207d      	movs	r0, #125	@ 0x7d
 8018cac:	b2d2      	uxtb	r2, r2
 8018cae:	f881 5039 	strb.w	r5, [r1, #57]	@ 0x39
 8018cb2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8018cb6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018cba:	e7a0      	b.n	8018bfe <uxr_write_framed_msg+0x92>
 8018cbc:	e9cd 9b00 	strd	r9, fp, [sp]
 8018cc0:	2500      	movs	r5, #0
 8018cc2:	4699      	mov	r9, r3
 8018cc4:	468b      	mov	fp, r1
 8018cc6:	e000      	b.n	8018cca <uxr_write_framed_msg+0x15e>
 8018cc8:	b158      	cbz	r0, 8018ce2 <uxr_write_framed_msg+0x176>
 8018cca:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018cce:	1b52      	subs	r2, r2, r5
 8018cd0:	4643      	mov	r3, r8
 8018cd2:	4638      	mov	r0, r7
 8018cd4:	4421      	add	r1, r4
 8018cd6:	47b0      	blx	r6
 8018cd8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018cdc:	4405      	add	r5, r0
 8018cde:	4295      	cmp	r5, r2
 8018ce0:	d3f2      	bcc.n	8018cc8 <uxr_write_framed_msg+0x15c>
 8018ce2:	4295      	cmp	r5, r2
 8018ce4:	464b      	mov	r3, r9
 8018ce6:	4659      	mov	r1, fp
 8018ce8:	f8dd 9000 	ldr.w	r9, [sp]
 8018cec:	f8dd b004 	ldr.w	fp, [sp, #4]
 8018cf0:	d06f      	beq.n	8018dd2 <uxr_write_framed_msg+0x266>
 8018cf2:	2000      	movs	r0, #0
 8018cf4:	b005      	add	sp, #20
 8018cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cfa:	46cc      	mov	ip, r9
 8018cfc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018d00:	4689      	mov	r9, r1
 8018d02:	f8ad c00c 	strh.w	ip, [sp, #12]
 8018d06:	fa5f fc8c 	uxtb.w	ip, ip
 8018d0a:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8018d0e:	f04f 0a00 	mov.w	sl, #0
 8018d12:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8018d16:	2b01      	cmp	r3, #1
 8018d18:	d930      	bls.n	8018d7c <uxr_write_framed_msg+0x210>
 8018d1a:	2a29      	cmp	r2, #41	@ 0x29
 8018d1c:	d91c      	bls.n	8018d58 <uxr_write_framed_msg+0x1ec>
 8018d1e:	2500      	movs	r5, #0
 8018d20:	e000      	b.n	8018d24 <uxr_write_framed_msg+0x1b8>
 8018d22:	b158      	cbz	r0, 8018d3c <uxr_write_framed_msg+0x1d0>
 8018d24:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018d28:	1b52      	subs	r2, r2, r5
 8018d2a:	4643      	mov	r3, r8
 8018d2c:	4638      	mov	r0, r7
 8018d2e:	4421      	add	r1, r4
 8018d30:	47b0      	blx	r6
 8018d32:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018d36:	4405      	add	r5, r0
 8018d38:	4295      	cmp	r5, r2
 8018d3a:	d3f2      	bcc.n	8018d22 <uxr_write_framed_msg+0x1b6>
 8018d3c:	4295      	cmp	r5, r2
 8018d3e:	d1d8      	bne.n	8018cf2 <uxr_write_framed_msg+0x186>
 8018d40:	f10a 0310 	add.w	r3, sl, #16
 8018d44:	2200      	movs	r2, #0
 8018d46:	446b      	add	r3, sp
 8018d48:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 8018d4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018d50:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8018d54:	2b01      	cmp	r3, #1
 8018d56:	d911      	bls.n	8018d7c <uxr_write_framed_msg+0x210>
 8018d58:	18a3      	adds	r3, r4, r2
 8018d5a:	3201      	adds	r2, #1
 8018d5c:	b2d2      	uxtb	r2, r2
 8018d5e:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8018d62:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018d66:	f1ba 0f00 	cmp.w	sl, #0
 8018d6a:	d119      	bne.n	8018da0 <uxr_write_framed_msg+0x234>
 8018d6c:	f89d c00d 	ldrb.w	ip, [sp, #13]
 8018d70:	f04f 0a01 	mov.w	sl, #1
 8018d74:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8018d78:	2b01      	cmp	r3, #1
 8018d7a:	d8ce      	bhi.n	8018d1a <uxr_write_framed_msg+0x1ae>
 8018d7c:	1c53      	adds	r3, r2, #1
 8018d7e:	b2db      	uxtb	r3, r3
 8018d80:	2b29      	cmp	r3, #41	@ 0x29
 8018d82:	d8cc      	bhi.n	8018d1e <uxr_write_framed_msg+0x1b2>
 8018d84:	18a3      	adds	r3, r4, r2
 8018d86:	3202      	adds	r2, #2
 8018d88:	f08c 0c20 	eor.w	ip, ip, #32
 8018d8c:	b2d2      	uxtb	r2, r2
 8018d8e:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8018d92:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 8018d96:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018d9a:	f1ba 0f00 	cmp.w	sl, #0
 8018d9e:	d0e5      	beq.n	8018d6c <uxr_write_framed_msg+0x200>
 8018da0:	2500      	movs	r5, #0
 8018da2:	e000      	b.n	8018da6 <uxr_write_framed_msg+0x23a>
 8018da4:	b158      	cbz	r0, 8018dbe <uxr_write_framed_msg+0x252>
 8018da6:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018daa:	1b52      	subs	r2, r2, r5
 8018dac:	4643      	mov	r3, r8
 8018dae:	4638      	mov	r0, r7
 8018db0:	4421      	add	r1, r4
 8018db2:	47b0      	blx	r6
 8018db4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018db8:	4405      	add	r5, r0
 8018dba:	4295      	cmp	r5, r2
 8018dbc:	d3f2      	bcc.n	8018da4 <uxr_write_framed_msg+0x238>
 8018dbe:	4295      	cmp	r5, r2
 8018dc0:	d197      	bne.n	8018cf2 <uxr_write_framed_msg+0x186>
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	fa1f f089 	uxth.w	r0, r9
 8018dc8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018dcc:	b005      	add	sp, #20
 8018dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018dd8:	e731      	b.n	8018c3e <uxr_write_framed_msg+0xd2>
 8018dda:	44a6      	add	lr, r4
 8018ddc:	f08c 0c20 	eor.w	ip, ip, #32
 8018de0:	257d      	movs	r5, #125	@ 0x7d
 8018de2:	4608      	mov	r0, r1
 8018de4:	4651      	mov	r1, sl
 8018de6:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8018dea:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 8018dee:	e6e6      	b.n	8018bbe <uxr_write_framed_msg+0x52>
 8018df0:	f085 0520 	eor.w	r5, r5, #32
 8018df4:	2203      	movs	r2, #3
 8018df6:	f04f 0a06 	mov.w	sl, #6
 8018dfa:	2105      	movs	r1, #5
 8018dfc:	f880 503a 	strb.w	r5, [r0, #58]	@ 0x3a
 8018e00:	2004      	movs	r0, #4
 8018e02:	4613      	mov	r3, r2
 8018e04:	257d      	movs	r5, #125	@ 0x7d
 8018e06:	4686      	mov	lr, r0
 8018e08:	e6cd      	b.n	8018ba6 <uxr_write_framed_msg+0x3a>
 8018e0a:	46cc      	mov	ip, r9
 8018e0c:	f8ad 900c 	strh.w	r9, [sp, #12]
 8018e10:	e77b      	b.n	8018d0a <uxr_write_framed_msg+0x19e>
 8018e12:	bf00      	nop
 8018e14:	0801c79c 	.word	0x0801c79c

08018e18 <uxr_framing_read_transport>:
 8018e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e1c:	4604      	mov	r4, r0
 8018e1e:	b085      	sub	sp, #20
 8018e20:	461d      	mov	r5, r3
 8018e22:	4689      	mov	r9, r1
 8018e24:	4692      	mov	sl, r2
 8018e26:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018e28:	f7f8 ff0e 	bl	8011c48 <uxr_millis>
 8018e2c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018e30:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8018e34:	4680      	mov	r8, r0
 8018e36:	42b3      	cmp	r3, r6
 8018e38:	d05d      	beq.n	8018ef6 <uxr_framing_read_transport+0xde>
 8018e3a:	d819      	bhi.n	8018e70 <uxr_framing_read_transport+0x58>
 8018e3c:	1e72      	subs	r2, r6, #1
 8018e3e:	2600      	movs	r6, #0
 8018e40:	1ad2      	subs	r2, r2, r3
 8018e42:	b2d2      	uxtb	r2, r2
 8018e44:	42ba      	cmp	r2, r7
 8018e46:	d81c      	bhi.n	8018e82 <uxr_framing_read_transport+0x6a>
 8018e48:	1993      	adds	r3, r2, r6
 8018e4a:	42bb      	cmp	r3, r7
 8018e4c:	d901      	bls.n	8018e52 <uxr_framing_read_transport+0x3a>
 8018e4e:	1abf      	subs	r7, r7, r2
 8018e50:	b2fe      	uxtb	r6, r7
 8018e52:	b9d2      	cbnz	r2, 8018e8a <uxr_framing_read_transport+0x72>
 8018e54:	2700      	movs	r7, #0
 8018e56:	f7f8 fef7 	bl	8011c48 <uxr_millis>
 8018e5a:	682b      	ldr	r3, [r5, #0]
 8018e5c:	eba0 0008 	sub.w	r0, r0, r8
 8018e60:	1a1b      	subs	r3, r3, r0
 8018e62:	4638      	mov	r0, r7
 8018e64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e68:	602b      	str	r3, [r5, #0]
 8018e6a:	b005      	add	sp, #20
 8018e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e70:	2e00      	cmp	r6, #0
 8018e72:	d05c      	beq.n	8018f2e <uxr_framing_read_transport+0x116>
 8018e74:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8018e78:	3e01      	subs	r6, #1
 8018e7a:	b2da      	uxtb	r2, r3
 8018e7c:	b2f6      	uxtb	r6, r6
 8018e7e:	42ba      	cmp	r2, r7
 8018e80:	d9e2      	bls.n	8018e48 <uxr_framing_read_transport+0x30>
 8018e82:	b2fa      	uxtb	r2, r7
 8018e84:	2600      	movs	r6, #0
 8018e86:	2a00      	cmp	r2, #0
 8018e88:	d0e4      	beq.n	8018e54 <uxr_framing_read_transport+0x3c>
 8018e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e8c:	4650      	mov	r0, sl
 8018e8e:	9203      	str	r2, [sp, #12]
 8018e90:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8018e94:	9300      	str	r3, [sp, #0]
 8018e96:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018e9a:	682b      	ldr	r3, [r5, #0]
 8018e9c:	3102      	adds	r1, #2
 8018e9e:	4421      	add	r1, r4
 8018ea0:	47c8      	blx	r9
 8018ea2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018ea6:	4a24      	ldr	r2, [pc, #144]	@ (8018f38 <uxr_framing_read_transport+0x120>)
 8018ea8:	4607      	mov	r7, r0
 8018eaa:	4403      	add	r3, r0
 8018eac:	0859      	lsrs	r1, r3, #1
 8018eae:	fba2 0101 	umull	r0, r1, r2, r1
 8018eb2:	0889      	lsrs	r1, r1, #2
 8018eb4:	fb0b 3111 	mls	r1, fp, r1, r3
 8018eb8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018ebc:	2f00      	cmp	r7, #0
 8018ebe:	d0c9      	beq.n	8018e54 <uxr_framing_read_transport+0x3c>
 8018ec0:	2e00      	cmp	r6, #0
 8018ec2:	d0c8      	beq.n	8018e56 <uxr_framing_read_transport+0x3e>
 8018ec4:	9a03      	ldr	r2, [sp, #12]
 8018ec6:	4297      	cmp	r7, r2
 8018ec8:	d1c5      	bne.n	8018e56 <uxr_framing_read_transport+0x3e>
 8018eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ecc:	3102      	adds	r1, #2
 8018ece:	4632      	mov	r2, r6
 8018ed0:	4650      	mov	r0, sl
 8018ed2:	4421      	add	r1, r4
 8018ed4:	9300      	str	r3, [sp, #0]
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	47c8      	blx	r9
 8018eda:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018ede:	4916      	ldr	r1, [pc, #88]	@ (8018f38 <uxr_framing_read_transport+0x120>)
 8018ee0:	4407      	add	r7, r0
 8018ee2:	4403      	add	r3, r0
 8018ee4:	085a      	lsrs	r2, r3, #1
 8018ee6:	fba1 1202 	umull	r1, r2, r1, r2
 8018eea:	0892      	lsrs	r2, r2, #2
 8018eec:	fb0b 3312 	mls	r3, fp, r2, r3
 8018ef0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018ef4:	e7af      	b.n	8018e56 <uxr_framing_read_transport+0x3e>
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	2f28      	cmp	r7, #40	@ 0x28
 8018efa:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8018efc:	d9c1      	bls.n	8018e82 <uxr_framing_read_transport+0x6a>
 8018efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018f00:	2229      	movs	r2, #41	@ 0x29
 8018f02:	1ca1      	adds	r1, r4, #2
 8018f04:	4650      	mov	r0, sl
 8018f06:	9300      	str	r3, [sp, #0]
 8018f08:	682b      	ldr	r3, [r5, #0]
 8018f0a:	47c8      	blx	r9
 8018f0c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018f10:	4909      	ldr	r1, [pc, #36]	@ (8018f38 <uxr_framing_read_transport+0x120>)
 8018f12:	4607      	mov	r7, r0
 8018f14:	4403      	add	r3, r0
 8018f16:	202a      	movs	r0, #42	@ 0x2a
 8018f18:	085a      	lsrs	r2, r3, #1
 8018f1a:	fba1 1202 	umull	r1, r2, r1, r2
 8018f1e:	0892      	lsrs	r2, r2, #2
 8018f20:	fb00 3312 	mls	r3, r0, r2, r3
 8018f24:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018f28:	2f00      	cmp	r7, #0
 8018f2a:	d093      	beq.n	8018e54 <uxr_framing_read_transport+0x3c>
 8018f2c:	e793      	b.n	8018e56 <uxr_framing_read_transport+0x3e>
 8018f2e:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 8018f32:	b2da      	uxtb	r2, r3
 8018f34:	e786      	b.n	8018e44 <uxr_framing_read_transport+0x2c>
 8018f36:	bf00      	nop
 8018f38:	30c30c31 	.word	0x30c30c31

08018f3c <uxr_read_framed_msg>:
 8018f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f40:	461e      	mov	r6, r3
 8018f42:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8018f46:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8018f4a:	b085      	sub	sp, #20
 8018f4c:	4604      	mov	r4, r0
 8018f4e:	4688      	mov	r8, r1
 8018f50:	429d      	cmp	r5, r3
 8018f52:	4617      	mov	r7, r2
 8018f54:	f000 819b 	beq.w	801928e <uxr_read_framed_msg+0x352>
 8018f58:	2000      	movs	r0, #0
 8018f5a:	2800      	cmp	r0, #0
 8018f5c:	d135      	bne.n	8018fca <uxr_read_framed_msg+0x8e>
 8018f5e:	7823      	ldrb	r3, [r4, #0]
 8018f60:	2b07      	cmp	r3, #7
 8018f62:	d8fd      	bhi.n	8018f60 <uxr_read_framed_msg+0x24>
 8018f64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8018f68:	01100134 	.word	0x01100134
 8018f6c:	00c900eb 	.word	0x00c900eb
 8018f70:	0057009d 	.word	0x0057009d
 8018f74:	00080035 	.word	0x00080035
 8018f78:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018f7c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018f80:	4290      	cmp	r0, r2
 8018f82:	f000 815f 	beq.w	8019244 <uxr_read_framed_msg+0x308>
 8018f86:	1c55      	adds	r5, r2, #1
 8018f88:	18a3      	adds	r3, r4, r2
 8018f8a:	f8df c39c 	ldr.w	ip, [pc, #924]	@ 8019328 <uxr_read_framed_msg+0x3ec>
 8018f8e:	7899      	ldrb	r1, [r3, #2]
 8018f90:	086b      	lsrs	r3, r5, #1
 8018f92:	fbac e303 	umull	lr, r3, ip, r3
 8018f96:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018f9a:	297d      	cmp	r1, #125	@ 0x7d
 8018f9c:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8018fa0:	fb0e 5313 	mls	r3, lr, r3, r5
 8018fa4:	b2dd      	uxtb	r5, r3
 8018fa6:	f000 8198 	beq.w	80192da <uxr_read_framed_msg+0x39e>
 8018faa:	297e      	cmp	r1, #126	@ 0x7e
 8018fac:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 8018fb0:	f000 8211 	beq.w	80193d6 <uxr_read_framed_msg+0x49a>
 8018fb4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8018fb6:	2000      	movs	r0, #0
 8018fb8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018fba:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018fbe:	7020      	strb	r0, [r4, #0]
 8018fc0:	b29b      	uxth	r3, r3
 8018fc2:	429a      	cmp	r2, r3
 8018fc4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8018fc6:	f000 8180 	beq.w	80192ca <uxr_read_framed_msg+0x38e>
 8018fca:	2000      	movs	r0, #0
 8018fcc:	b005      	add	sp, #20
 8018fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8018fd6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8018fda:	4290      	cmp	r0, r2
 8018fdc:	f000 8140 	beq.w	8019260 <uxr_read_framed_msg+0x324>
 8018fe0:	1c55      	adds	r5, r2, #1
 8018fe2:	18a3      	adds	r3, r4, r2
 8018fe4:	f8df c340 	ldr.w	ip, [pc, #832]	@ 8019328 <uxr_read_framed_msg+0x3ec>
 8018fe8:	7899      	ldrb	r1, [r3, #2]
 8018fea:	086b      	lsrs	r3, r5, #1
 8018fec:	fbac e303 	umull	lr, r3, ip, r3
 8018ff0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018ff4:	297d      	cmp	r1, #125	@ 0x7d
 8018ff6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8018ffa:	fb0e 5313 	mls	r3, lr, r3, r5
 8018ffe:	b2dd      	uxtb	r5, r3
 8019000:	f000 817e 	beq.w	8019300 <uxr_read_framed_msg+0x3c4>
 8019004:	297e      	cmp	r1, #126	@ 0x7e
 8019006:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 801900a:	f000 81f3 	beq.w	80193f4 <uxr_read_framed_msg+0x4b8>
 801900e:	2307      	movs	r3, #7
 8019010:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8019012:	7023      	strb	r3, [r4, #0]
 8019014:	e7a3      	b.n	8018f5e <uxr_read_framed_msg+0x22>
 8019016:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019018:	f8b4 c030 	ldrh.w	ip, [r4, #48]	@ 0x30
 801901c:	459c      	cmp	ip, r3
 801901e:	f240 814c 	bls.w	80192ba <uxr_read_framed_msg+0x37e>
 8019022:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8019026:	f8df a304 	ldr.w	sl, [pc, #772]	@ 801932c <uxr_read_framed_msg+0x3f0>
 801902a:	9703      	str	r7, [sp, #12]
 801902c:	e027      	b.n	801907e <uxr_read_framed_msg+0x142>
 801902e:	4fbe      	ldr	r7, [pc, #760]	@ (8019328 <uxr_read_framed_msg+0x3ec>)
 8019030:	f89e e002 	ldrb.w	lr, [lr, #2]
 8019034:	fba7 9101 	umull	r9, r1, r7, r1
 8019038:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 801903c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8019040:	fb0b 0111 	mls	r1, fp, r1, r0
 8019044:	b2c8      	uxtb	r0, r1
 8019046:	f000 80de 	beq.w	8019206 <uxr_read_framed_msg+0x2ca>
 801904a:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801904e:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8019052:	f000 80f0 	beq.w	8019236 <uxr_read_framed_msg+0x2fa>
 8019056:	f806 e003 	strb.w	lr, [r6, r3]
 801905a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801905c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801905e:	ea81 020e 	eor.w	r2, r1, lr
 8019062:	f8b4 c030 	ldrh.w	ip, [r4, #48]	@ 0x30
 8019066:	3301      	adds	r3, #1
 8019068:	b2d2      	uxtb	r2, r2
 801906a:	b29b      	uxth	r3, r3
 801906c:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
 8019070:	4563      	cmp	r3, ip
 8019072:	8663      	strh	r3, [r4, #50]	@ 0x32
 8019074:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8019078:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801907a:	f080 81cd 	bcs.w	8019418 <uxr_read_framed_msg+0x4dc>
 801907e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019082:	f894 502c 	ldrb.w	r5, [r4, #44]	@ 0x2c
 8019086:	1c50      	adds	r0, r2, #1
 8019088:	eb04 0e02 	add.w	lr, r4, r2
 801908c:	4295      	cmp	r5, r2
 801908e:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8019092:	d1cc      	bne.n	801902e <uxr_read_framed_msg+0xf2>
 8019094:	4563      	cmp	r3, ip
 8019096:	9f03      	ldr	r7, [sp, #12]
 8019098:	f040 8111 	bne.w	80192be <uxr_read_framed_msg+0x382>
 801909c:	2306      	movs	r3, #6
 801909e:	7023      	strb	r3, [r4, #0]
 80190a0:	e75d      	b.n	8018f5e <uxr_read_framed_msg+0x22>
 80190a2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80190a6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80190aa:	4290      	cmp	r0, r2
 80190ac:	f000 80ca 	beq.w	8019244 <uxr_read_framed_msg+0x308>
 80190b0:	1c55      	adds	r5, r2, #1
 80190b2:	18a3      	adds	r3, r4, r2
 80190b4:	f8df c270 	ldr.w	ip, [pc, #624]	@ 8019328 <uxr_read_framed_msg+0x3ec>
 80190b8:	7899      	ldrb	r1, [r3, #2]
 80190ba:	086b      	lsrs	r3, r5, #1
 80190bc:	fbac e303 	umull	lr, r3, ip, r3
 80190c0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80190c4:	297d      	cmp	r1, #125	@ 0x7d
 80190c6:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80190ca:	fb0e 5313 	mls	r3, lr, r3, r5
 80190ce:	b2dd      	uxtb	r5, r3
 80190d0:	f000 812e 	beq.w	8019330 <uxr_read_framed_msg+0x3f4>
 80190d4:	297e      	cmp	r1, #126	@ 0x7e
 80190d6:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 80190da:	f000 817c 	beq.w	80193d6 <uxr_read_framed_msg+0x49a>
 80190de:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80190e0:	2200      	movs	r2, #0
 80190e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80190e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80190e8:	8662      	strh	r2, [r4, #50]	@ 0x32
 80190ea:	b29b      	uxth	r3, r3
 80190ec:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80190ee:	428b      	cmp	r3, r1
 80190f0:	8623      	strh	r3, [r4, #48]	@ 0x30
 80190f2:	f240 80df 	bls.w	80192b4 <uxr_read_framed_msg+0x378>
 80190f6:	7022      	strb	r2, [r4, #0]
 80190f8:	e767      	b.n	8018fca <uxr_read_framed_msg+0x8e>
 80190fa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80190fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019102:	4290      	cmp	r0, r2
 8019104:	f000 80ac 	beq.w	8019260 <uxr_read_framed_msg+0x324>
 8019108:	1c55      	adds	r5, r2, #1
 801910a:	18a3      	adds	r3, r4, r2
 801910c:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8019328 <uxr_read_framed_msg+0x3ec>
 8019110:	7899      	ldrb	r1, [r3, #2]
 8019112:	086b      	lsrs	r3, r5, #1
 8019114:	fbac e303 	umull	lr, r3, ip, r3
 8019118:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801911c:	297d      	cmp	r1, #125	@ 0x7d
 801911e:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019122:	fb0e 5313 	mls	r3, lr, r3, r5
 8019126:	b2dd      	uxtb	r5, r3
 8019128:	f000 812d 	beq.w	8019386 <uxr_read_framed_msg+0x44a>
 801912c:	297e      	cmp	r1, #126	@ 0x7e
 801912e:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 8019132:	f000 815f 	beq.w	80193f4 <uxr_read_framed_msg+0x4b8>
 8019136:	2304      	movs	r3, #4
 8019138:	8621      	strh	r1, [r4, #48]	@ 0x30
 801913a:	7023      	strb	r3, [r4, #0]
 801913c:	e70f      	b.n	8018f5e <uxr_read_framed_msg+0x22>
 801913e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8019142:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019146:	4290      	cmp	r0, r2
 8019148:	f000 80b0 	beq.w	80192ac <uxr_read_framed_msg+0x370>
 801914c:	1c55      	adds	r5, r2, #1
 801914e:	18a3      	adds	r3, r4, r2
 8019150:	f8df c1d4 	ldr.w	ip, [pc, #468]	@ 8019328 <uxr_read_framed_msg+0x3ec>
 8019154:	7899      	ldrb	r1, [r3, #2]
 8019156:	086b      	lsrs	r3, r5, #1
 8019158:	fbac e303 	umull	lr, r3, ip, r3
 801915c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8019160:	297d      	cmp	r1, #125	@ 0x7d
 8019162:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019166:	fb0e 5313 	mls	r3, lr, r3, r5
 801916a:	b2dd      	uxtb	r5, r3
 801916c:	f000 811f 	beq.w	80193ae <uxr_read_framed_msg+0x472>
 8019170:	297e      	cmp	r1, #126	@ 0x7e
 8019172:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 8019176:	f000 814b 	beq.w	8019410 <uxr_read_framed_msg+0x4d4>
 801917a:	7863      	ldrb	r3, [r4, #1]
 801917c:	428b      	cmp	r3, r1
 801917e:	bf0c      	ite	eq
 8019180:	2303      	moveq	r3, #3
 8019182:	2300      	movne	r3, #0
 8019184:	7023      	strb	r3, [r4, #0]
 8019186:	e6ea      	b.n	8018f5e <uxr_read_framed_msg+0x22>
 8019188:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801918c:	2300      	movs	r3, #0
 801918e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8019192:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8019196:	4291      	cmp	r1, r2
 8019198:	d066      	beq.n	8019268 <uxr_read_framed_msg+0x32c>
 801919a:	1c55      	adds	r5, r2, #1
 801919c:	18a3      	adds	r3, r4, r2
 801919e:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8019328 <uxr_read_framed_msg+0x3ec>
 80191a2:	7898      	ldrb	r0, [r3, #2]
 80191a4:	086b      	lsrs	r3, r5, #1
 80191a6:	fbac e303 	umull	lr, r3, ip, r3
 80191aa:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80191ae:	287d      	cmp	r0, #125	@ 0x7d
 80191b0:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80191b4:	fb0e 5313 	mls	r3, lr, r3, r5
 80191b8:	b2dd      	uxtb	r5, r3
 80191ba:	f000 80cc 	beq.w	8019356 <uxr_read_framed_msg+0x41a>
 80191be:	287e      	cmp	r0, #126	@ 0x7e
 80191c0:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 80191c4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80191c8:	d04e      	beq.n	8019268 <uxr_read_framed_msg+0x32c>
 80191ca:	2302      	movs	r3, #2
 80191cc:	7023      	strb	r3, [r4, #0]
 80191ce:	e6c6      	b.n	8018f5e <uxr_read_framed_msg+0x22>
 80191d0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80191d4:	252a      	movs	r5, #42	@ 0x2a
 80191d6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80191da:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 8019328 <uxr_read_framed_msg+0x3ec>
 80191de:	e00a      	b.n	80191f6 <uxr_read_framed_msg+0x2ba>
 80191e0:	fbac e303 	umull	lr, r3, ip, r3
 80191e4:	7889      	ldrb	r1, [r1, #2]
 80191e6:	089b      	lsrs	r3, r3, #2
 80191e8:	297e      	cmp	r1, #126	@ 0x7e
 80191ea:	fb05 2313 	mls	r3, r5, r3, r2
 80191ee:	b2db      	uxtb	r3, r3
 80191f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80191f4:	d023      	beq.n	801923e <uxr_read_framed_msg+0x302>
 80191f6:	1c5a      	adds	r2, r3, #1
 80191f8:	4298      	cmp	r0, r3
 80191fa:	eb04 0103 	add.w	r1, r4, r3
 80191fe:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8019202:	d1ed      	bne.n	80191e0 <uxr_read_framed_msg+0x2a4>
 8019204:	e6e1      	b.n	8018fca <uxr_read_framed_msg+0x8e>
 8019206:	3202      	adds	r2, #2
 8019208:	4285      	cmp	r5, r0
 801920a:	4421      	add	r1, r4
 801920c:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8019210:	f43f af40 	beq.w	8019094 <uxr_read_framed_msg+0x158>
 8019214:	4d44      	ldr	r5, [pc, #272]	@ (8019328 <uxr_read_framed_msg+0x3ec>)
 8019216:	f891 e002 	ldrb.w	lr, [r1, #2]
 801921a:	fba5 5000 	umull	r5, r0, r5, r0
 801921e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8019222:	f08e 0e20 	eor.w	lr, lr, #32
 8019226:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801922a:	fb0b 2210 	mls	r2, fp, r0, r2
 801922e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019232:	f47f af10 	bne.w	8019056 <uxr_read_framed_msg+0x11a>
 8019236:	4563      	cmp	r3, ip
 8019238:	9f03      	ldr	r7, [sp, #12]
 801923a:	f43f af2f 	beq.w	801909c <uxr_read_framed_msg+0x160>
 801923e:	2301      	movs	r3, #1
 8019240:	7023      	strb	r3, [r4, #0]
 8019242:	e68c      	b.n	8018f5e <uxr_read_framed_msg+0x22>
 8019244:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019246:	9300      	str	r3, [sp, #0]
 8019248:	2301      	movs	r3, #1
 801924a:	9301      	str	r3, [sp, #4]
 801924c:	463a      	mov	r2, r7
 801924e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019250:	4641      	mov	r1, r8
 8019252:	4620      	mov	r0, r4
 8019254:	f7ff fde0 	bl	8018e18 <uxr_framing_read_transport>
 8019258:	fab0 f080 	clz	r0, r0
 801925c:	0940      	lsrs	r0, r0, #5
 801925e:	e67c      	b.n	8018f5a <uxr_read_framed_msg+0x1e>
 8019260:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019262:	9300      	str	r3, [sp, #0]
 8019264:	2302      	movs	r3, #2
 8019266:	e7f0      	b.n	801924a <uxr_read_framed_msg+0x30e>
 8019268:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801926a:	463a      	mov	r2, r7
 801926c:	4641      	mov	r1, r8
 801926e:	4620      	mov	r0, r4
 8019270:	9300      	str	r3, [sp, #0]
 8019272:	2304      	movs	r3, #4
 8019274:	9301      	str	r3, [sp, #4]
 8019276:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019278:	f7ff fdce 	bl	8018e18 <uxr_framing_read_transport>
 801927c:	2800      	cmp	r0, #0
 801927e:	f47f ae6e 	bne.w	8018f5e <uxr_read_framed_msg+0x22>
 8019282:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8019286:	387e      	subs	r0, #126	@ 0x7e
 8019288:	bf18      	it	ne
 801928a:	2001      	movne	r0, #1
 801928c:	e665      	b.n	8018f5a <uxr_read_framed_msg+0x1e>
 801928e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019290:	9300      	str	r3, [sp, #0]
 8019292:	2305      	movs	r3, #5
 8019294:	9301      	str	r3, [sp, #4]
 8019296:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019298:	f7ff fdbe 	bl	8018e18 <uxr_framing_read_transport>
 801929c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80192a0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80192a4:	429a      	cmp	r2, r3
 80192a6:	f43f ae90 	beq.w	8018fca <uxr_read_framed_msg+0x8e>
 80192aa:	e655      	b.n	8018f58 <uxr_read_framed_msg+0x1c>
 80192ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80192ae:	9300      	str	r3, [sp, #0]
 80192b0:	2303      	movs	r3, #3
 80192b2:	e7ca      	b.n	801924a <uxr_read_framed_msg+0x30e>
 80192b4:	2305      	movs	r3, #5
 80192b6:	7023      	strb	r3, [r4, #0]
 80192b8:	e651      	b.n	8018f5e <uxr_read_framed_msg+0x22>
 80192ba:	f43f aeef 	beq.w	801909c <uxr_read_framed_msg+0x160>
 80192be:	ebac 0303 	sub.w	r3, ip, r3
 80192c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80192c4:	3302      	adds	r3, #2
 80192c6:	9200      	str	r2, [sp, #0]
 80192c8:	e7bf      	b.n	801924a <uxr_read_framed_msg+0x30e>
 80192ca:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80192ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80192d0:	7013      	strb	r3, [r2, #0]
 80192d2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80192d4:	b005      	add	sp, #20
 80192d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192da:	4285      	cmp	r5, r0
 80192dc:	d0b2      	beq.n	8019244 <uxr_read_framed_msg+0x308>
 80192de:	3202      	adds	r2, #2
 80192e0:	4423      	add	r3, r4
 80192e2:	7899      	ldrb	r1, [r3, #2]
 80192e4:	0853      	lsrs	r3, r2, #1
 80192e6:	fbac c303 	umull	ip, r3, ip, r3
 80192ea:	297e      	cmp	r1, #126	@ 0x7e
 80192ec:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80192f0:	fb0e 2213 	mls	r2, lr, r3, r2
 80192f4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80192f8:	d06d      	beq.n	80193d6 <uxr_read_framed_msg+0x49a>
 80192fa:	f081 0120 	eor.w	r1, r1, #32
 80192fe:	e659      	b.n	8018fb4 <uxr_read_framed_msg+0x78>
 8019300:	4285      	cmp	r5, r0
 8019302:	d0ad      	beq.n	8019260 <uxr_read_framed_msg+0x324>
 8019304:	3202      	adds	r2, #2
 8019306:	4423      	add	r3, r4
 8019308:	7899      	ldrb	r1, [r3, #2]
 801930a:	0853      	lsrs	r3, r2, #1
 801930c:	fbac c303 	umull	ip, r3, ip, r3
 8019310:	297e      	cmp	r1, #126	@ 0x7e
 8019312:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019316:	fb0e 2213 	mls	r2, lr, r3, r2
 801931a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801931e:	d069      	beq.n	80193f4 <uxr_read_framed_msg+0x4b8>
 8019320:	f081 0120 	eor.w	r1, r1, #32
 8019324:	e673      	b.n	801900e <uxr_read_framed_msg+0xd2>
 8019326:	bf00      	nop
 8019328:	30c30c31 	.word	0x30c30c31
 801932c:	0801c79c 	.word	0x0801c79c
 8019330:	42a8      	cmp	r0, r5
 8019332:	d087      	beq.n	8019244 <uxr_read_framed_msg+0x308>
 8019334:	3202      	adds	r2, #2
 8019336:	4423      	add	r3, r4
 8019338:	7899      	ldrb	r1, [r3, #2]
 801933a:	0853      	lsrs	r3, r2, #1
 801933c:	fbac c303 	umull	ip, r3, ip, r3
 8019340:	297e      	cmp	r1, #126	@ 0x7e
 8019342:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019346:	fb0e 2213 	mls	r2, lr, r3, r2
 801934a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801934e:	d042      	beq.n	80193d6 <uxr_read_framed_msg+0x49a>
 8019350:	f081 0120 	eor.w	r1, r1, #32
 8019354:	e6c3      	b.n	80190de <uxr_read_framed_msg+0x1a2>
 8019356:	42a9      	cmp	r1, r5
 8019358:	d086      	beq.n	8019268 <uxr_read_framed_msg+0x32c>
 801935a:	3202      	adds	r2, #2
 801935c:	4423      	add	r3, r4
 801935e:	7899      	ldrb	r1, [r3, #2]
 8019360:	0853      	lsrs	r3, r2, #1
 8019362:	fbac c303 	umull	ip, r3, ip, r3
 8019366:	297e      	cmp	r1, #126	@ 0x7e
 8019368:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801936c:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8019370:	fb0e 2213 	mls	r2, lr, r3, r2
 8019374:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019378:	f43f af76 	beq.w	8019268 <uxr_read_framed_msg+0x32c>
 801937c:	f081 0120 	eor.w	r1, r1, #32
 8019380:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8019384:	e721      	b.n	80191ca <uxr_read_framed_msg+0x28e>
 8019386:	42a8      	cmp	r0, r5
 8019388:	f43f af6a 	beq.w	8019260 <uxr_read_framed_msg+0x324>
 801938c:	3202      	adds	r2, #2
 801938e:	4423      	add	r3, r4
 8019390:	7899      	ldrb	r1, [r3, #2]
 8019392:	0853      	lsrs	r3, r2, #1
 8019394:	fbac c303 	umull	ip, r3, ip, r3
 8019398:	297e      	cmp	r1, #126	@ 0x7e
 801939a:	ea4f 0393 	mov.w	r3, r3, lsr #2
 801939e:	fb0e 2213 	mls	r2, lr, r3, r2
 80193a2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80193a6:	d025      	beq.n	80193f4 <uxr_read_framed_msg+0x4b8>
 80193a8:	f081 0120 	eor.w	r1, r1, #32
 80193ac:	e6c3      	b.n	8019136 <uxr_read_framed_msg+0x1fa>
 80193ae:	4285      	cmp	r5, r0
 80193b0:	f43f af7c 	beq.w	80192ac <uxr_read_framed_msg+0x370>
 80193b4:	3202      	adds	r2, #2
 80193b6:	4423      	add	r3, r4
 80193b8:	7899      	ldrb	r1, [r3, #2]
 80193ba:	0853      	lsrs	r3, r2, #1
 80193bc:	fbac c303 	umull	ip, r3, ip, r3
 80193c0:	297e      	cmp	r1, #126	@ 0x7e
 80193c2:	ea4f 0393 	mov.w	r3, r3, lsr #2
 80193c6:	fb0e 2213 	mls	r2, lr, r3, r2
 80193ca:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80193ce:	d01f      	beq.n	8019410 <uxr_read_framed_msg+0x4d4>
 80193d0:	f081 0120 	eor.w	r1, r1, #32
 80193d4:	e6d1      	b.n	801917a <uxr_read_framed_msg+0x23e>
 80193d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80193d8:	2501      	movs	r5, #1
 80193da:	463a      	mov	r2, r7
 80193dc:	4641      	mov	r1, r8
 80193de:	9300      	str	r3, [sp, #0]
 80193e0:	4620      	mov	r0, r4
 80193e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80193e4:	9501      	str	r5, [sp, #4]
 80193e6:	f7ff fd17 	bl	8018e18 <uxr_framing_read_transport>
 80193ea:	2800      	cmp	r0, #0
 80193ec:	f47f adb7 	bne.w	8018f5e <uxr_read_framed_msg+0x22>
 80193f0:	7025      	strb	r5, [r4, #0]
 80193f2:	e5b4      	b.n	8018f5e <uxr_read_framed_msg+0x22>
 80193f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80193f6:	9300      	str	r3, [sp, #0]
 80193f8:	2302      	movs	r3, #2
 80193fa:	9301      	str	r3, [sp, #4]
 80193fc:	463a      	mov	r2, r7
 80193fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019400:	4641      	mov	r1, r8
 8019402:	4620      	mov	r0, r4
 8019404:	f7ff fd08 	bl	8018e18 <uxr_framing_read_transport>
 8019408:	2800      	cmp	r0, #0
 801940a:	f47f ada8 	bne.w	8018f5e <uxr_read_framed_msg+0x22>
 801940e:	e716      	b.n	801923e <uxr_read_framed_msg+0x302>
 8019410:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019412:	9300      	str	r3, [sp, #0]
 8019414:	2303      	movs	r3, #3
 8019416:	e7f0      	b.n	80193fa <uxr_read_framed_msg+0x4be>
 8019418:	9f03      	ldr	r7, [sp, #12]
 801941a:	f43f ae3f 	beq.w	801909c <uxr_read_framed_msg+0x160>
 801941e:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8019422:	f47f af4c 	bne.w	80192be <uxr_read_framed_msg+0x382>
 8019426:	2301      	movs	r3, #1
 8019428:	7023      	strb	r3, [r4, #0]
 801942a:	e598      	b.n	8018f5e <uxr_read_framed_msg+0x22>

0801942c <rcl_get_automatic_discovery_range>:
 801942c:	b530      	push	{r4, r5, lr}
 801942e:	2300      	movs	r3, #0
 8019430:	b083      	sub	sp, #12
 8019432:	9301      	str	r3, [sp, #4]
 8019434:	b1c0      	cbz	r0, 8019468 <rcl_get_automatic_discovery_range+0x3c>
 8019436:	4604      	mov	r4, r0
 8019438:	a901      	add	r1, sp, #4
 801943a:	4818      	ldr	r0, [pc, #96]	@ (801949c <rcl_get_automatic_discovery_range+0x70>)
 801943c:	f7fc fd62 	bl	8015f04 <rcutils_get_env>
 8019440:	b110      	cbz	r0, 8019448 <rcl_get_automatic_discovery_range+0x1c>
 8019442:	2001      	movs	r0, #1
 8019444:	b003      	add	sp, #12
 8019446:	bd30      	pop	{r4, r5, pc}
 8019448:	9d01      	ldr	r5, [sp, #4]
 801944a:	782b      	ldrb	r3, [r5, #0]
 801944c:	b923      	cbnz	r3, 8019458 <rcl_get_automatic_discovery_range+0x2c>
 801944e:	2303      	movs	r3, #3
 8019450:	7023      	strb	r3, [r4, #0]
 8019452:	2000      	movs	r0, #0
 8019454:	b003      	add	sp, #12
 8019456:	bd30      	pop	{r4, r5, pc}
 8019458:	4911      	ldr	r1, [pc, #68]	@ (80194a0 <rcl_get_automatic_discovery_range+0x74>)
 801945a:	4628      	mov	r0, r5
 801945c:	f7e6 ff48 	bl	80002f0 <strcmp>
 8019460:	b928      	cbnz	r0, 801946e <rcl_get_automatic_discovery_range+0x42>
 8019462:	2301      	movs	r3, #1
 8019464:	7023      	strb	r3, [r4, #0]
 8019466:	e7f4      	b.n	8019452 <rcl_get_automatic_discovery_range+0x26>
 8019468:	200b      	movs	r0, #11
 801946a:	b003      	add	sp, #12
 801946c:	bd30      	pop	{r4, r5, pc}
 801946e:	490d      	ldr	r1, [pc, #52]	@ (80194a4 <rcl_get_automatic_discovery_range+0x78>)
 8019470:	4628      	mov	r0, r5
 8019472:	f7e6 ff3d 	bl	80002f0 <strcmp>
 8019476:	b168      	cbz	r0, 8019494 <rcl_get_automatic_discovery_range+0x68>
 8019478:	490b      	ldr	r1, [pc, #44]	@ (80194a8 <rcl_get_automatic_discovery_range+0x7c>)
 801947a:	4628      	mov	r0, r5
 801947c:	f7e6 ff38 	bl	80002f0 <strcmp>
 8019480:	2800      	cmp	r0, #0
 8019482:	d0e4      	beq.n	801944e <rcl_get_automatic_discovery_range+0x22>
 8019484:	4909      	ldr	r1, [pc, #36]	@ (80194ac <rcl_get_automatic_discovery_range+0x80>)
 8019486:	4628      	mov	r0, r5
 8019488:	f7e6 ff32 	bl	80002f0 <strcmp>
 801948c:	b910      	cbnz	r0, 8019494 <rcl_get_automatic_discovery_range+0x68>
 801948e:	2304      	movs	r3, #4
 8019490:	7023      	strb	r3, [r4, #0]
 8019492:	e7de      	b.n	8019452 <rcl_get_automatic_discovery_range+0x26>
 8019494:	2302      	movs	r3, #2
 8019496:	7023      	strb	r3, [r4, #0]
 8019498:	e7db      	b.n	8019452 <rcl_get_automatic_discovery_range+0x26>
 801949a:	bf00      	nop
 801949c:	0801c2e8 	.word	0x0801c2e8
 80194a0:	0801c308 	.word	0x0801c308
 80194a4:	0801c30c 	.word	0x0801c30c
 80194a8:	0801c318 	.word	0x0801c318
 80194ac:	0801c320 	.word	0x0801c320

080194b0 <rcl_automatic_discovery_range_to_string>:
 80194b0:	2804      	cmp	r0, #4
 80194b2:	d803      	bhi.n	80194bc <rcl_automatic_discovery_range_to_string+0xc>
 80194b4:	4b02      	ldr	r3, [pc, #8]	@ (80194c0 <rcl_automatic_discovery_range_to_string+0x10>)
 80194b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80194ba:	4770      	bx	lr
 80194bc:	2000      	movs	r0, #0
 80194be:	4770      	bx	lr
 80194c0:	0801c99c 	.word	0x0801c99c

080194c4 <rcl_get_discovery_static_peers>:
 80194c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194c8:	2300      	movs	r3, #0
 80194ca:	b08c      	sub	sp, #48	@ 0x30
 80194cc:	9304      	str	r3, [sp, #16]
 80194ce:	2900      	cmp	r1, #0
 80194d0:	d04e      	beq.n	8019570 <rcl_get_discovery_static_peers+0xac>
 80194d2:	4605      	mov	r5, r0
 80194d4:	2800      	cmp	r0, #0
 80194d6:	d04b      	beq.n	8019570 <rcl_get_discovery_static_peers+0xac>
 80194d8:	460c      	mov	r4, r1
 80194da:	482e      	ldr	r0, [pc, #184]	@ (8019594 <rcl_get_discovery_static_peers+0xd0>)
 80194dc:	a904      	add	r1, sp, #16
 80194de:	f7fc fd11 	bl	8015f04 <rcutils_get_env>
 80194e2:	b118      	cbz	r0, 80194ec <rcl_get_discovery_static_peers+0x28>
 80194e4:	2001      	movs	r0, #1
 80194e6:	b00c      	add	sp, #48	@ 0x30
 80194e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194ec:	9b04      	ldr	r3, [sp, #16]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d0f8      	beq.n	80194e4 <rcl_get_discovery_static_peers+0x20>
 80194f2:	af05      	add	r7, sp, #20
 80194f4:	4638      	mov	r0, r7
 80194f6:	f000 fc73 	bl	8019de0 <rcutils_get_zero_initialized_string_array>
 80194fa:	f104 0308 	add.w	r3, r4, #8
 80194fe:	9703      	str	r7, [sp, #12]
 8019500:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019504:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019508:	213b      	movs	r1, #59	@ 0x3b
 801950a:	9804      	ldr	r0, [sp, #16]
 801950c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8019510:	f000 fbb4 	bl	8019c7c <rcutils_split>
 8019514:	2800      	cmp	r0, #0
 8019516:	d1e5      	bne.n	80194e4 <rcl_get_discovery_static_peers+0x20>
 8019518:	4622      	mov	r2, r4
 801951a:	9905      	ldr	r1, [sp, #20]
 801951c:	4628      	mov	r0, r5
 801951e:	f000 fccd 	bl	8019ebc <rmw_discovery_options_init>
 8019522:	4606      	mov	r6, r0
 8019524:	bb90      	cbnz	r0, 801958c <rcl_get_discovery_static_peers+0xc8>
 8019526:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801952a:	f1b9 0f00 	cmp.w	r9, #0
 801952e:	d026      	beq.n	801957e <rcl_get_discovery_static_peers+0xba>
 8019530:	f8dd a018 	ldr.w	sl, [sp, #24]
 8019534:	4680      	mov	r8, r0
 8019536:	f85a 4026 	ldr.w	r4, [sl, r6, lsl #2]
 801953a:	4620      	mov	r0, r4
 801953c:	f7e6 ff38 	bl	80003b0 <strlen>
 8019540:	28ff      	cmp	r0, #255	@ 0xff
 8019542:	4621      	mov	r1, r4
 8019544:	ea4f 2406 	mov.w	r4, r6, lsl #8
 8019548:	d816      	bhi.n	8019578 <rcl_get_discovery_static_peers+0xb4>
 801954a:	6868      	ldr	r0, [r5, #4]
 801954c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019550:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8019554:	3601      	adds	r6, #1
 8019556:	f001 fb78 	bl	801ac4a <strncpy>
 801955a:	686b      	ldr	r3, [r5, #4]
 801955c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8019560:	4423      	add	r3, r4
 8019562:	454e      	cmp	r6, r9
 8019564:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8019568:	d209      	bcs.n	801957e <rcl_get_discovery_static_peers+0xba>
 801956a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801956e:	e7e2      	b.n	8019536 <rcl_get_discovery_static_peers+0x72>
 8019570:	200b      	movs	r0, #11
 8019572:	b00c      	add	sp, #48	@ 0x30
 8019574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019578:	3601      	adds	r6, #1
 801957a:	454e      	cmp	r6, r9
 801957c:	d3db      	bcc.n	8019536 <rcl_get_discovery_static_peers+0x72>
 801957e:	4638      	mov	r0, r7
 8019580:	f000 fc6e 	bl	8019e60 <rcutils_string_array_fini>
 8019584:	3800      	subs	r0, #0
 8019586:	bf18      	it	ne
 8019588:	2001      	movne	r0, #1
 801958a:	e7ac      	b.n	80194e6 <rcl_get_discovery_static_peers+0x22>
 801958c:	f7f9 fd62 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 8019590:	e7a9      	b.n	80194e6 <rcl_get_discovery_static_peers+0x22>
 8019592:	bf00      	nop
 8019594:	0801c330 	.word	0x0801c330

08019598 <rcl_get_default_domain_id>:
 8019598:	b530      	push	{r4, r5, lr}
 801959a:	2300      	movs	r3, #0
 801959c:	b083      	sub	sp, #12
 801959e:	9300      	str	r3, [sp, #0]
 80195a0:	b1f0      	cbz	r0, 80195e0 <rcl_get_default_domain_id+0x48>
 80195a2:	4604      	mov	r4, r0
 80195a4:	4669      	mov	r1, sp
 80195a6:	4812      	ldr	r0, [pc, #72]	@ (80195f0 <rcl_get_default_domain_id+0x58>)
 80195a8:	f7fc fcac 	bl	8015f04 <rcutils_get_env>
 80195ac:	4602      	mov	r2, r0
 80195ae:	b108      	cbz	r0, 80195b4 <rcl_get_default_domain_id+0x1c>
 80195b0:	2001      	movs	r0, #1
 80195b2:	e004      	b.n	80195be <rcl_get_default_domain_id+0x26>
 80195b4:	9800      	ldr	r0, [sp, #0]
 80195b6:	b108      	cbz	r0, 80195bc <rcl_get_default_domain_id+0x24>
 80195b8:	7803      	ldrb	r3, [r0, #0]
 80195ba:	b913      	cbnz	r3, 80195c2 <rcl_get_default_domain_id+0x2a>
 80195bc:	2000      	movs	r0, #0
 80195be:	b003      	add	sp, #12
 80195c0:	bd30      	pop	{r4, r5, pc}
 80195c2:	a901      	add	r1, sp, #4
 80195c4:	9201      	str	r2, [sp, #4]
 80195c6:	f001 f86d 	bl	801a6a4 <strtoul>
 80195ca:	4605      	mov	r5, r0
 80195cc:	b158      	cbz	r0, 80195e6 <rcl_get_default_domain_id+0x4e>
 80195ce:	1c43      	adds	r3, r0, #1
 80195d0:	d104      	bne.n	80195dc <rcl_get_default_domain_id+0x44>
 80195d2:	f001 fc17 	bl	801ae04 <__errno>
 80195d6:	6803      	ldr	r3, [r0, #0]
 80195d8:	2b22      	cmp	r3, #34	@ 0x22
 80195da:	d0e9      	beq.n	80195b0 <rcl_get_default_domain_id+0x18>
 80195dc:	6025      	str	r5, [r4, #0]
 80195de:	e7ed      	b.n	80195bc <rcl_get_default_domain_id+0x24>
 80195e0:	200b      	movs	r0, #11
 80195e2:	b003      	add	sp, #12
 80195e4:	bd30      	pop	{r4, r5, pc}
 80195e6:	9b01      	ldr	r3, [sp, #4]
 80195e8:	781b      	ldrb	r3, [r3, #0]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d0f6      	beq.n	80195dc <rcl_get_default_domain_id+0x44>
 80195ee:	e7df      	b.n	80195b0 <rcl_get_default_domain_id+0x18>
 80195f0:	0801c410 	.word	0x0801c410

080195f4 <rcl_expand_topic_name>:
 80195f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f8:	b08b      	sub	sp, #44	@ 0x2c
 80195fa:	4698      	mov	r8, r3
 80195fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80195fe:	2b00      	cmp	r3, #0
 8019600:	bf18      	it	ne
 8019602:	f1b8 0f00 	cmpne.w	r8, #0
 8019606:	bf0c      	ite	eq
 8019608:	2301      	moveq	r3, #1
 801960a:	2300      	movne	r3, #0
 801960c:	2a00      	cmp	r2, #0
 801960e:	bf08      	it	eq
 8019610:	f043 0301 	orreq.w	r3, r3, #1
 8019614:	2900      	cmp	r1, #0
 8019616:	bf08      	it	eq
 8019618:	f043 0301 	orreq.w	r3, r3, #1
 801961c:	2b00      	cmp	r3, #0
 801961e:	d13c      	bne.n	801969a <rcl_expand_topic_name+0xa6>
 8019620:	4616      	mov	r6, r2
 8019622:	fab0 f280 	clz	r2, r0
 8019626:	4604      	mov	r4, r0
 8019628:	0952      	lsrs	r2, r2, #5
 801962a:	2800      	cmp	r0, #0
 801962c:	d035      	beq.n	801969a <rcl_expand_topic_name+0xa6>
 801962e:	468b      	mov	fp, r1
 8019630:	a909      	add	r1, sp, #36	@ 0x24
 8019632:	f000 fa43 	bl	8019abc <rcl_validate_topic_name>
 8019636:	4605      	mov	r5, r0
 8019638:	bb58      	cbnz	r0, 8019692 <rcl_expand_topic_name+0x9e>
 801963a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801963c:	2b00      	cmp	r3, #0
 801963e:	d135      	bne.n	80196ac <rcl_expand_topic_name+0xb8>
 8019640:	4602      	mov	r2, r0
 8019642:	a909      	add	r1, sp, #36	@ 0x24
 8019644:	4658      	mov	r0, fp
 8019646:	f7fd f8d1 	bl	80167ec <rmw_validate_node_name>
 801964a:	bb58      	cbnz	r0, 80196a4 <rcl_expand_topic_name+0xb0>
 801964c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801964e:	bb93      	cbnz	r3, 80196b6 <rcl_expand_topic_name+0xc2>
 8019650:	462a      	mov	r2, r5
 8019652:	a909      	add	r1, sp, #36	@ 0x24
 8019654:	4630      	mov	r0, r6
 8019656:	f7fd f8ab 	bl	80167b0 <rmw_validate_namespace>
 801965a:	bb18      	cbnz	r0, 80196a4 <rcl_expand_topic_name+0xb0>
 801965c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801965e:	2d00      	cmp	r5, #0
 8019660:	f040 809c 	bne.w	801979c <rcl_expand_topic_name+0x1a8>
 8019664:	217b      	movs	r1, #123	@ 0x7b
 8019666:	4620      	mov	r0, r4
 8019668:	f001 fad0 	bl	801ac0c <strchr>
 801966c:	7823      	ldrb	r3, [r4, #0]
 801966e:	4681      	mov	r9, r0
 8019670:	bb18      	cbnz	r0, 80196ba <rcl_expand_topic_name+0xc6>
 8019672:	2b2f      	cmp	r3, #47	@ 0x2f
 8019674:	d121      	bne.n	80196ba <rcl_expand_topic_name+0xc6>
 8019676:	ab17      	add	r3, sp, #92	@ 0x5c
 8019678:	e893 0003 	ldmia.w	r3, {r0, r1}
 801967c:	ab14      	add	r3, sp, #80	@ 0x50
 801967e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019682:	4620      	mov	r0, r4
 8019684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019686:	f7fc fd91 	bl	80161ac <rcutils_strdup>
 801968a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801968c:	6018      	str	r0, [r3, #0]
 801968e:	b900      	cbnz	r0, 8019692 <rcl_expand_topic_name+0x9e>
 8019690:	250a      	movs	r5, #10
 8019692:	4628      	mov	r0, r5
 8019694:	b00b      	add	sp, #44	@ 0x2c
 8019696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801969a:	250b      	movs	r5, #11
 801969c:	4628      	mov	r0, r5
 801969e:	b00b      	add	sp, #44	@ 0x2c
 80196a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196a4:	f7f9 fcd6 	bl	8013054 <rcl_convert_rmw_ret_to_rcl_ret>
 80196a8:	4605      	mov	r5, r0
 80196aa:	e7f2      	b.n	8019692 <rcl_expand_topic_name+0x9e>
 80196ac:	2567      	movs	r5, #103	@ 0x67
 80196ae:	4628      	mov	r0, r5
 80196b0:	b00b      	add	sp, #44	@ 0x2c
 80196b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196b6:	25c9      	movs	r5, #201	@ 0xc9
 80196b8:	e7eb      	b.n	8019692 <rcl_expand_topic_name+0x9e>
 80196ba:	2b7e      	cmp	r3, #126	@ 0x7e
 80196bc:	d070      	beq.n	80197a0 <rcl_expand_topic_name+0x1ac>
 80196be:	f1b9 0f00 	cmp.w	r9, #0
 80196c2:	f000 80bd 	beq.w	8019840 <rcl_expand_topic_name+0x24c>
 80196c6:	2300      	movs	r3, #0
 80196c8:	4627      	mov	r7, r4
 80196ca:	469a      	mov	sl, r3
 80196cc:	e9cd 5406 	strd	r5, r4, [sp, #24]
 80196d0:	464c      	mov	r4, r9
 80196d2:	2c00      	cmp	r4, #0
 80196d4:	f000 80ae 	beq.w	8019834 <rcl_expand_topic_name+0x240>
 80196d8:	217d      	movs	r1, #125	@ 0x7d
 80196da:	4638      	mov	r0, r7
 80196dc:	f001 fa96 	bl	801ac0c <strchr>
 80196e0:	1b05      	subs	r5, r0, r4
 80196e2:	4621      	mov	r1, r4
 80196e4:	4867      	ldr	r0, [pc, #412]	@ (8019884 <rcl_expand_topic_name+0x290>)
 80196e6:	f105 0901 	add.w	r9, r5, #1
 80196ea:	464a      	mov	r2, r9
 80196ec:	f001 fa9b 	bl	801ac26 <strncmp>
 80196f0:	2800      	cmp	r0, #0
 80196f2:	d051      	beq.n	8019798 <rcl_expand_topic_name+0x1a4>
 80196f4:	464a      	mov	r2, r9
 80196f6:	4621      	mov	r1, r4
 80196f8:	4863      	ldr	r0, [pc, #396]	@ (8019888 <rcl_expand_topic_name+0x294>)
 80196fa:	f001 fa94 	bl	801ac26 <strncmp>
 80196fe:	b128      	cbz	r0, 801970c <rcl_expand_topic_name+0x118>
 8019700:	464a      	mov	r2, r9
 8019702:	4621      	mov	r1, r4
 8019704:	4861      	ldr	r0, [pc, #388]	@ (801988c <rcl_expand_topic_name+0x298>)
 8019706:	f001 fa8e 	bl	801ac26 <strncmp>
 801970a:	bb38      	cbnz	r0, 801975c <rcl_expand_topic_name+0x168>
 801970c:	4635      	mov	r5, r6
 801970e:	ab16      	add	r3, sp, #88	@ 0x58
 8019710:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019714:	ab14      	add	r3, sp, #80	@ 0x50
 8019716:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801971a:	4620      	mov	r0, r4
 801971c:	4649      	mov	r1, r9
 801971e:	cb0c      	ldmia	r3, {r2, r3}
 8019720:	f7fc fd7a 	bl	8016218 <rcutils_strndup>
 8019724:	4604      	mov	r4, r0
 8019726:	2800      	cmp	r0, #0
 8019728:	f000 80a2 	beq.w	8019870 <rcl_expand_topic_name+0x27c>
 801972c:	462a      	mov	r2, r5
 801972e:	4638      	mov	r0, r7
 8019730:	ab14      	add	r3, sp, #80	@ 0x50
 8019732:	4621      	mov	r1, r4
 8019734:	f7fc fc36 	bl	8015fa4 <rcutils_repl_str>
 8019738:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801973a:	4607      	mov	r7, r0
 801973c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801973e:	4620      	mov	r0, r4
 8019740:	4798      	blx	r3
 8019742:	4650      	mov	r0, sl
 8019744:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019746:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019748:	4798      	blx	r3
 801974a:	2f00      	cmp	r7, #0
 801974c:	d06e      	beq.n	801982c <rcl_expand_topic_name+0x238>
 801974e:	217b      	movs	r1, #123	@ 0x7b
 8019750:	4638      	mov	r0, r7
 8019752:	f001 fa5b 	bl	801ac0c <strchr>
 8019756:	46ba      	mov	sl, r7
 8019758:	4604      	mov	r4, r0
 801975a:	e7ba      	b.n	80196d2 <rcl_expand_topic_name+0xde>
 801975c:	1e6a      	subs	r2, r5, #1
 801975e:	1c61      	adds	r1, r4, #1
 8019760:	4640      	mov	r0, r8
 8019762:	f7fc fe75 	bl	8016450 <rcutils_string_map_getn>
 8019766:	4605      	mov	r5, r0
 8019768:	2800      	cmp	r0, #0
 801976a:	d1d0      	bne.n	801970e <rcl_expand_topic_name+0x11a>
 801976c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801976e:	2569      	movs	r5, #105	@ 0x69
 8019770:	6018      	str	r0, [r3, #0]
 8019772:	ab16      	add	r3, sp, #88	@ 0x58
 8019774:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019778:	ab14      	add	r3, sp, #80	@ 0x50
 801977a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801977e:	4649      	mov	r1, r9
 8019780:	4620      	mov	r0, r4
 8019782:	cb0c      	ldmia	r3, {r2, r3}
 8019784:	f7fc fd48 	bl	8016218 <rcutils_strndup>
 8019788:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801978a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801978c:	4798      	blx	r3
 801978e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019790:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019792:	4650      	mov	r0, sl
 8019794:	4798      	blx	r3
 8019796:	e77c      	b.n	8019692 <rcl_expand_topic_name+0x9e>
 8019798:	465d      	mov	r5, fp
 801979a:	e7b8      	b.n	801970e <rcl_expand_topic_name+0x11a>
 801979c:	25ca      	movs	r5, #202	@ 0xca
 801979e:	e778      	b.n	8019692 <rcl_expand_topic_name+0x9e>
 80197a0:	4630      	mov	r0, r6
 80197a2:	f7e6 fe05 	bl	80003b0 <strlen>
 80197a6:	4a3a      	ldr	r2, [pc, #232]	@ (8019890 <rcl_expand_topic_name+0x29c>)
 80197a8:	4b3a      	ldr	r3, [pc, #232]	@ (8019894 <rcl_expand_topic_name+0x2a0>)
 80197aa:	2801      	cmp	r0, #1
 80197ac:	bf08      	it	eq
 80197ae:	4613      	moveq	r3, r2
 80197b0:	9302      	str	r3, [sp, #8]
 80197b2:	1c63      	adds	r3, r4, #1
 80197b4:	9305      	str	r3, [sp, #20]
 80197b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80197ba:	9301      	str	r3, [sp, #4]
 80197bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80197be:	9300      	str	r3, [sp, #0]
 80197c0:	ab14      	add	r3, sp, #80	@ 0x50
 80197c2:	e9cd 6b03 	strd	r6, fp, [sp, #12]
 80197c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80197c8:	f7fc fbb4 	bl	8015f34 <rcutils_format_string_limit>
 80197cc:	4682      	mov	sl, r0
 80197ce:	b368      	cbz	r0, 801982c <rcl_expand_topic_name+0x238>
 80197d0:	f1b9 0f00 	cmp.w	r9, #0
 80197d4:	d005      	beq.n	80197e2 <rcl_expand_topic_name+0x1ee>
 80197d6:	217b      	movs	r1, #123	@ 0x7b
 80197d8:	4657      	mov	r7, sl
 80197da:	f001 fa17 	bl	801ac0c <strchr>
 80197de:	4681      	mov	r9, r0
 80197e0:	e774      	b.n	80196cc <rcl_expand_topic_name+0xd8>
 80197e2:	f89a 3000 	ldrb.w	r3, [sl]
 80197e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80197e8:	d01c      	beq.n	8019824 <rcl_expand_topic_name+0x230>
 80197ea:	4630      	mov	r0, r6
 80197ec:	f7e6 fde0 	bl	80003b0 <strlen>
 80197f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80197f4:	4a28      	ldr	r2, [pc, #160]	@ (8019898 <rcl_expand_topic_name+0x2a4>)
 80197f6:	9301      	str	r3, [sp, #4]
 80197f8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80197fa:	f8cd a010 	str.w	sl, [sp, #16]
 80197fe:	9300      	str	r3, [sp, #0]
 8019800:	4b26      	ldr	r3, [pc, #152]	@ (801989c <rcl_expand_topic_name+0x2a8>)
 8019802:	9603      	str	r6, [sp, #12]
 8019804:	2801      	cmp	r0, #1
 8019806:	bf18      	it	ne
 8019808:	4613      	movne	r3, r2
 801980a:	9302      	str	r3, [sp, #8]
 801980c:	ab14      	add	r3, sp, #80	@ 0x50
 801980e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019810:	f7fc fb90 	bl	8015f34 <rcutils_format_string_limit>
 8019814:	4604      	mov	r4, r0
 8019816:	4650      	mov	r0, sl
 8019818:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801981a:	46a2      	mov	sl, r4
 801981c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801981e:	4798      	blx	r3
 8019820:	4653      	mov	r3, sl
 8019822:	b11b      	cbz	r3, 801982c <rcl_expand_topic_name+0x238>
 8019824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019826:	f8c3 a000 	str.w	sl, [r3]
 801982a:	e732      	b.n	8019692 <rcl_expand_topic_name+0x9e>
 801982c:	2300      	movs	r3, #0
 801982e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019830:	6013      	str	r3, [r2, #0]
 8019832:	e72d      	b.n	8019690 <rcl_expand_topic_name+0x9c>
 8019834:	4653      	mov	r3, sl
 8019836:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d1d1      	bne.n	80197e2 <rcl_expand_topic_name+0x1ee>
 801983e:	7823      	ldrb	r3, [r4, #0]
 8019840:	2b2f      	cmp	r3, #47	@ 0x2f
 8019842:	d01c      	beq.n	801987e <rcl_expand_topic_name+0x28a>
 8019844:	4630      	mov	r0, r6
 8019846:	f7e6 fdb3 	bl	80003b0 <strlen>
 801984a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801984e:	4a12      	ldr	r2, [pc, #72]	@ (8019898 <rcl_expand_topic_name+0x2a4>)
 8019850:	9301      	str	r3, [sp, #4]
 8019852:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019854:	9404      	str	r4, [sp, #16]
 8019856:	9300      	str	r3, [sp, #0]
 8019858:	4b10      	ldr	r3, [pc, #64]	@ (801989c <rcl_expand_topic_name+0x2a8>)
 801985a:	9603      	str	r6, [sp, #12]
 801985c:	2801      	cmp	r0, #1
 801985e:	bf18      	it	ne
 8019860:	4613      	movne	r3, r2
 8019862:	9302      	str	r3, [sp, #8]
 8019864:	ab14      	add	r3, sp, #80	@ 0x50
 8019866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019868:	f7fc fb64 	bl	8015f34 <rcutils_format_string_limit>
 801986c:	4682      	mov	sl, r0
 801986e:	e7d7      	b.n	8019820 <rcl_expand_topic_name+0x22c>
 8019870:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8019874:	4650      	mov	r0, sl
 8019876:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019878:	6014      	str	r4, [r2, #0]
 801987a:	4798      	blx	r3
 801987c:	e708      	b.n	8019690 <rcl_expand_topic_name+0x9c>
 801987e:	2300      	movs	r3, #0
 8019880:	469a      	mov	sl, r3
 8019882:	e7cf      	b.n	8019824 <rcl_expand_topic_name+0x230>
 8019884:	0801c428 	.word	0x0801c428
 8019888:	0801c430 	.word	0x0801c430
 801988c:	0801c438 	.word	0x0801c438
 8019890:	0801bd78 	.word	0x0801bd78
 8019894:	0801c420 	.word	0x0801c420
 8019898:	0801bf78 	.word	0x0801bf78
 801989c:	0801bd88 	.word	0x0801bd88

080198a0 <rcl_get_default_topic_name_substitutions>:
 80198a0:	2800      	cmp	r0, #0
 80198a2:	bf0c      	ite	eq
 80198a4:	200b      	moveq	r0, #11
 80198a6:	2000      	movne	r0, #0
 80198a8:	4770      	bx	lr
 80198aa:	bf00      	nop

080198ac <rcl_get_zero_initialized_guard_condition>:
 80198ac:	4a03      	ldr	r2, [pc, #12]	@ (80198bc <rcl_get_zero_initialized_guard_condition+0x10>)
 80198ae:	4603      	mov	r3, r0
 80198b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80198b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80198b8:	4618      	mov	r0, r3
 80198ba:	4770      	bx	lr
 80198bc:	0801c9b0 	.word	0x0801c9b0

080198c0 <rcl_guard_condition_init>:
 80198c0:	b082      	sub	sp, #8
 80198c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198c4:	b087      	sub	sp, #28
 80198c6:	4604      	mov	r4, r0
 80198c8:	460d      	mov	r5, r1
 80198ca:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 80198ce:	f10d 0c04 	add.w	ip, sp, #4
 80198d2:	e9ce 2300 	strd	r2, r3, [lr]
 80198d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80198da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80198de:	f8de 3000 	ldr.w	r3, [lr]
 80198e2:	a801      	add	r0, sp, #4
 80198e4:	f8cc 3000 	str.w	r3, [ip]
 80198e8:	f7f4 ff08 	bl	800e6fc <rcutils_allocator_is_valid>
 80198ec:	b354      	cbz	r4, 8019944 <rcl_guard_condition_init+0x84>
 80198ee:	f080 0301 	eor.w	r3, r0, #1
 80198f2:	b2db      	uxtb	r3, r3
 80198f4:	bb33      	cbnz	r3, 8019944 <rcl_guard_condition_init+0x84>
 80198f6:	6866      	ldr	r6, [r4, #4]
 80198f8:	b9ee      	cbnz	r6, 8019936 <rcl_guard_condition_init+0x76>
 80198fa:	b31d      	cbz	r5, 8019944 <rcl_guard_condition_init+0x84>
 80198fc:	4628      	mov	r0, r5
 80198fe:	f7f9 fbc9 	bl	8013094 <rcl_context_is_valid>
 8019902:	b308      	cbz	r0, 8019948 <rcl_guard_condition_init+0x88>
 8019904:	9b01      	ldr	r3, [sp, #4]
 8019906:	201c      	movs	r0, #28
 8019908:	9905      	ldr	r1, [sp, #20]
 801990a:	4798      	blx	r3
 801990c:	4607      	mov	r7, r0
 801990e:	6060      	str	r0, [r4, #4]
 8019910:	b310      	cbz	r0, 8019958 <rcl_guard_condition_init+0x98>
 8019912:	6828      	ldr	r0, [r5, #0]
 8019914:	3028      	adds	r0, #40	@ 0x28
 8019916:	f000 fbe5 	bl	801a0e4 <rmw_create_guard_condition>
 801991a:	6038      	str	r0, [r7, #0]
 801991c:	6860      	ldr	r0, [r4, #4]
 801991e:	6807      	ldr	r7, [r0, #0]
 8019920:	b1a7      	cbz	r7, 801994c <rcl_guard_condition_init+0x8c>
 8019922:	2301      	movs	r3, #1
 8019924:	ac01      	add	r4, sp, #4
 8019926:	f100 0708 	add.w	r7, r0, #8
 801992a:	7103      	strb	r3, [r0, #4]
 801992c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801992e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019930:	6823      	ldr	r3, [r4, #0]
 8019932:	603b      	str	r3, [r7, #0]
 8019934:	e000      	b.n	8019938 <rcl_guard_condition_init+0x78>
 8019936:	2664      	movs	r6, #100	@ 0x64
 8019938:	4630      	mov	r0, r6
 801993a:	b007      	add	sp, #28
 801993c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019940:	b002      	add	sp, #8
 8019942:	4770      	bx	lr
 8019944:	260b      	movs	r6, #11
 8019946:	e7f7      	b.n	8019938 <rcl_guard_condition_init+0x78>
 8019948:	2665      	movs	r6, #101	@ 0x65
 801994a:	e7f5      	b.n	8019938 <rcl_guard_condition_init+0x78>
 801994c:	9b02      	ldr	r3, [sp, #8]
 801994e:	2601      	movs	r6, #1
 8019950:	9905      	ldr	r1, [sp, #20]
 8019952:	4798      	blx	r3
 8019954:	6067      	str	r7, [r4, #4]
 8019956:	e7ef      	b.n	8019938 <rcl_guard_condition_init+0x78>
 8019958:	260a      	movs	r6, #10
 801995a:	e7ed      	b.n	8019938 <rcl_guard_condition_init+0x78>

0801995c <rcl_guard_condition_init_from_rmw>:
 801995c:	b082      	sub	sp, #8
 801995e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019962:	b086      	sub	sp, #24
 8019964:	4604      	mov	r4, r0
 8019966:	460e      	mov	r6, r1
 8019968:	4615      	mov	r5, r2
 801996a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801996e:	f10d 0e04 	add.w	lr, sp, #4
 8019972:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019976:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801997a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801997e:	f8dc 3000 	ldr.w	r3, [ip]
 8019982:	a801      	add	r0, sp, #4
 8019984:	f8ce 3000 	str.w	r3, [lr]
 8019988:	f7f4 feb8 	bl	800e6fc <rcutils_allocator_is_valid>
 801998c:	f080 0301 	eor.w	r3, r0, #1
 8019990:	b2db      	uxtb	r3, r3
 8019992:	bb3b      	cbnz	r3, 80199e4 <rcl_guard_condition_init_from_rmw+0x88>
 8019994:	b334      	cbz	r4, 80199e4 <rcl_guard_condition_init_from_rmw+0x88>
 8019996:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801999a:	f1b8 0f00 	cmp.w	r8, #0
 801999e:	d11a      	bne.n	80199d6 <rcl_guard_condition_init_from_rmw+0x7a>
 80199a0:	b305      	cbz	r5, 80199e4 <rcl_guard_condition_init_from_rmw+0x88>
 80199a2:	4628      	mov	r0, r5
 80199a4:	f7f9 fb76 	bl	8013094 <rcl_context_is_valid>
 80199a8:	b1f0      	cbz	r0, 80199e8 <rcl_guard_condition_init_from_rmw+0x8c>
 80199aa:	9b01      	ldr	r3, [sp, #4]
 80199ac:	201c      	movs	r0, #28
 80199ae:	9905      	ldr	r1, [sp, #20]
 80199b0:	4798      	blx	r3
 80199b2:	4607      	mov	r7, r0
 80199b4:	6060      	str	r0, [r4, #4]
 80199b6:	b320      	cbz	r0, 8019a02 <rcl_guard_condition_init_from_rmw+0xa6>
 80199b8:	b1c6      	cbz	r6, 80199ec <rcl_guard_condition_init_from_rmw+0x90>
 80199ba:	6006      	str	r6, [r0, #0]
 80199bc:	f880 8004 	strb.w	r8, [r0, #4]
 80199c0:	ac01      	add	r4, sp, #4
 80199c2:	f107 0c08 	add.w	ip, r7, #8
 80199c6:	2500      	movs	r5, #0
 80199c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80199ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80199ce:	6823      	ldr	r3, [r4, #0]
 80199d0:	f8cc 3000 	str.w	r3, [ip]
 80199d4:	e000      	b.n	80199d8 <rcl_guard_condition_init_from_rmw+0x7c>
 80199d6:	2564      	movs	r5, #100	@ 0x64
 80199d8:	4628      	mov	r0, r5
 80199da:	b006      	add	sp, #24
 80199dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199e0:	b002      	add	sp, #8
 80199e2:	4770      	bx	lr
 80199e4:	250b      	movs	r5, #11
 80199e6:	e7f7      	b.n	80199d8 <rcl_guard_condition_init_from_rmw+0x7c>
 80199e8:	2565      	movs	r5, #101	@ 0x65
 80199ea:	e7f5      	b.n	80199d8 <rcl_guard_condition_init_from_rmw+0x7c>
 80199ec:	6828      	ldr	r0, [r5, #0]
 80199ee:	3028      	adds	r0, #40	@ 0x28
 80199f0:	f000 fb78 	bl	801a0e4 <rmw_create_guard_condition>
 80199f4:	6038      	str	r0, [r7, #0]
 80199f6:	6867      	ldr	r7, [r4, #4]
 80199f8:	683e      	ldr	r6, [r7, #0]
 80199fa:	b126      	cbz	r6, 8019a06 <rcl_guard_condition_init_from_rmw+0xaa>
 80199fc:	2301      	movs	r3, #1
 80199fe:	713b      	strb	r3, [r7, #4]
 8019a00:	e7de      	b.n	80199c0 <rcl_guard_condition_init_from_rmw+0x64>
 8019a02:	250a      	movs	r5, #10
 8019a04:	e7e8      	b.n	80199d8 <rcl_guard_condition_init_from_rmw+0x7c>
 8019a06:	9b02      	ldr	r3, [sp, #8]
 8019a08:	4638      	mov	r0, r7
 8019a0a:	9905      	ldr	r1, [sp, #20]
 8019a0c:	2501      	movs	r5, #1
 8019a0e:	4798      	blx	r3
 8019a10:	6066      	str	r6, [r4, #4]
 8019a12:	e7e1      	b.n	80199d8 <rcl_guard_condition_init_from_rmw+0x7c>

08019a14 <rcl_guard_condition_fini>:
 8019a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a16:	b1e0      	cbz	r0, 8019a52 <rcl_guard_condition_fini+0x3e>
 8019a18:	4604      	mov	r4, r0
 8019a1a:	6840      	ldr	r0, [r0, #4]
 8019a1c:	b158      	cbz	r0, 8019a36 <rcl_guard_condition_fini+0x22>
 8019a1e:	6803      	ldr	r3, [r0, #0]
 8019a20:	68c6      	ldr	r6, [r0, #12]
 8019a22:	6987      	ldr	r7, [r0, #24]
 8019a24:	b153      	cbz	r3, 8019a3c <rcl_guard_condition_fini+0x28>
 8019a26:	7905      	ldrb	r5, [r0, #4]
 8019a28:	b955      	cbnz	r5, 8019a40 <rcl_guard_condition_fini+0x2c>
 8019a2a:	4639      	mov	r1, r7
 8019a2c:	47b0      	blx	r6
 8019a2e:	2300      	movs	r3, #0
 8019a30:	4628      	mov	r0, r5
 8019a32:	6063      	str	r3, [r4, #4]
 8019a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a36:	4605      	mov	r5, r0
 8019a38:	4628      	mov	r0, r5
 8019a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a3c:	461d      	mov	r5, r3
 8019a3e:	e7f4      	b.n	8019a2a <rcl_guard_condition_fini+0x16>
 8019a40:	4618      	mov	r0, r3
 8019a42:	f000 fb63 	bl	801a10c <rmw_destroy_guard_condition>
 8019a46:	4605      	mov	r5, r0
 8019a48:	6860      	ldr	r0, [r4, #4]
 8019a4a:	3d00      	subs	r5, #0
 8019a4c:	bf18      	it	ne
 8019a4e:	2501      	movne	r5, #1
 8019a50:	e7eb      	b.n	8019a2a <rcl_guard_condition_fini+0x16>
 8019a52:	250b      	movs	r5, #11
 8019a54:	4628      	mov	r0, r5
 8019a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019a58 <rcl_guard_condition_get_default_options>:
 8019a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a5a:	b087      	sub	sp, #28
 8019a5c:	4606      	mov	r6, r0
 8019a5e:	4c0b      	ldr	r4, [pc, #44]	@ (8019a8c <rcl_guard_condition_get_default_options+0x34>)
 8019a60:	4668      	mov	r0, sp
 8019a62:	f7f4 fe1f 	bl	800e6a4 <rcutils_get_default_allocator>
 8019a66:	46ee      	mov	lr, sp
 8019a68:	46a4      	mov	ip, r4
 8019a6a:	4625      	mov	r5, r4
 8019a6c:	4634      	mov	r4, r6
 8019a6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019a72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a78:	f8de 7000 	ldr.w	r7, [lr]
 8019a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019a7e:	4630      	mov	r0, r6
 8019a80:	f8cc 7000 	str.w	r7, [ip]
 8019a84:	6027      	str	r7, [r4, #0]
 8019a86:	b007      	add	sp, #28
 8019a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a8a:	bf00      	nop
 8019a8c:	2400e06c 	.word	0x2400e06c

08019a90 <rcl_trigger_guard_condition>:
 8019a90:	b148      	cbz	r0, 8019aa6 <rcl_trigger_guard_condition+0x16>
 8019a92:	b508      	push	{r3, lr}
 8019a94:	6843      	ldr	r3, [r0, #4]
 8019a96:	b143      	cbz	r3, 8019aaa <rcl_trigger_guard_condition+0x1a>
 8019a98:	6818      	ldr	r0, [r3, #0]
 8019a9a:	f000 fb4b 	bl	801a134 <rmw_trigger_guard_condition>
 8019a9e:	3800      	subs	r0, #0
 8019aa0:	bf18      	it	ne
 8019aa2:	2001      	movne	r0, #1
 8019aa4:	bd08      	pop	{r3, pc}
 8019aa6:	200b      	movs	r0, #11
 8019aa8:	4770      	bx	lr
 8019aaa:	200b      	movs	r0, #11
 8019aac:	bd08      	pop	{r3, pc}
 8019aae:	bf00      	nop

08019ab0 <rcl_guard_condition_get_rmw_handle>:
 8019ab0:	b110      	cbz	r0, 8019ab8 <rcl_guard_condition_get_rmw_handle+0x8>
 8019ab2:	6840      	ldr	r0, [r0, #4]
 8019ab4:	b100      	cbz	r0, 8019ab8 <rcl_guard_condition_get_rmw_handle+0x8>
 8019ab6:	6800      	ldr	r0, [r0, #0]
 8019ab8:	4770      	bx	lr
 8019aba:	bf00      	nop

08019abc <rcl_validate_topic_name>:
 8019abc:	2800      	cmp	r0, #0
 8019abe:	d06b      	beq.n	8019b98 <rcl_validate_topic_name+0xdc>
 8019ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac4:	460e      	mov	r6, r1
 8019ac6:	2900      	cmp	r1, #0
 8019ac8:	d06d      	beq.n	8019ba6 <rcl_validate_topic_name+0xea>
 8019aca:	4604      	mov	r4, r0
 8019acc:	4615      	mov	r5, r2
 8019ace:	f7e6 fc6f 	bl	80003b0 <strlen>
 8019ad2:	b190      	cbz	r0, 8019afa <rcl_validate_topic_name+0x3e>
 8019ad4:	7821      	ldrb	r1, [r4, #0]
 8019ad6:	4a68      	ldr	r2, [pc, #416]	@ (8019c78 <rcl_validate_topic_name+0x1bc>)
 8019ad8:	5c53      	ldrb	r3, [r2, r1]
 8019ada:	f013 0304 	ands.w	r3, r3, #4
 8019ade:	d15d      	bne.n	8019b9c <rcl_validate_topic_name+0xe0>
 8019ae0:	1e47      	subs	r7, r0, #1
 8019ae2:	f814 c007 	ldrb.w	ip, [r4, r7]
 8019ae6:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8019aea:	d10d      	bne.n	8019b08 <rcl_validate_topic_name+0x4c>
 8019aec:	2302      	movs	r3, #2
 8019aee:	6033      	str	r3, [r6, #0]
 8019af0:	b145      	cbz	r5, 8019b04 <rcl_validate_topic_name+0x48>
 8019af2:	2000      	movs	r0, #0
 8019af4:	602f      	str	r7, [r5, #0]
 8019af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019afa:	2301      	movs	r3, #1
 8019afc:	6033      	str	r3, [r6, #0]
 8019afe:	b10d      	cbz	r5, 8019b04 <rcl_validate_topic_name+0x48>
 8019b00:	2300      	movs	r3, #0
 8019b02:	602b      	str	r3, [r5, #0]
 8019b04:	2000      	movs	r0, #0
 8019b06:	e7f6      	b.n	8019af6 <rcl_validate_topic_name+0x3a>
 8019b08:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8019b0c:	4699      	mov	r9, r3
 8019b0e:	469c      	mov	ip, r3
 8019b10:	f818 af01 	ldrb.w	sl, [r8, #1]!
 8019b14:	f1aa 0e2f 	sub.w	lr, sl, #47	@ 0x2f
 8019b18:	f1be 0f4f 	cmp.w	lr, #79	@ 0x4f
 8019b1c:	d85a      	bhi.n	8019bd4 <rcl_validate_topic_name+0x118>
 8019b1e:	e8df f00e 	tbb	[pc, lr]
 8019b22:	4464      	.short	0x4464
 8019b24:	44444444 	.word	0x44444444
 8019b28:	44444444 	.word	0x44444444
 8019b2c:	59595944 	.word	0x59595944
 8019b30:	59595959 	.word	0x59595959
 8019b34:	44444444 	.word	0x44444444
 8019b38:	44444444 	.word	0x44444444
 8019b3c:	44444444 	.word	0x44444444
 8019b40:	44444444 	.word	0x44444444
 8019b44:	44444444 	.word	0x44444444
 8019b48:	44444444 	.word	0x44444444
 8019b4c:	59594444 	.word	0x59594444
 8019b50:	592e5959 	.word	0x592e5959
 8019b54:	44444444 	.word	0x44444444
 8019b58:	44444444 	.word	0x44444444
 8019b5c:	44444444 	.word	0x44444444
 8019b60:	44444444 	.word	0x44444444
 8019b64:	44444444 	.word	0x44444444
 8019b68:	44444444 	.word	0x44444444
 8019b6c:	59284444 	.word	0x59284444
 8019b70:	6c74      	.short	0x6c74
 8019b72:	f1b9 0f00 	cmp.w	r9, #0
 8019b76:	d13b      	bne.n	8019bf0 <rcl_validate_topic_name+0x134>
 8019b78:	4663      	mov	r3, ip
 8019b7a:	f04f 0901 	mov.w	r9, #1
 8019b7e:	f10c 0c01 	add.w	ip, ip, #1
 8019b82:	4560      	cmp	r0, ip
 8019b84:	d1c4      	bne.n	8019b10 <rcl_validate_topic_name+0x54>
 8019b86:	f1b9 0f00 	cmp.w	r9, #0
 8019b8a:	d04e      	beq.n	8019c2a <rcl_validate_topic_name+0x16e>
 8019b8c:	2205      	movs	r2, #5
 8019b8e:	6032      	str	r2, [r6, #0]
 8019b90:	2d00      	cmp	r5, #0
 8019b92:	d0b7      	beq.n	8019b04 <rcl_validate_topic_name+0x48>
 8019b94:	602b      	str	r3, [r5, #0]
 8019b96:	e7b5      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019b98:	200b      	movs	r0, #11
 8019b9a:	4770      	bx	lr
 8019b9c:	2304      	movs	r3, #4
 8019b9e:	6033      	str	r3, [r6, #0]
 8019ba0:	2d00      	cmp	r5, #0
 8019ba2:	d1ad      	bne.n	8019b00 <rcl_validate_topic_name+0x44>
 8019ba4:	e7ae      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019ba6:	200b      	movs	r0, #11
 8019ba8:	e7a5      	b.n	8019af6 <rcl_validate_topic_name+0x3a>
 8019baa:	f812 e00a 	ldrb.w	lr, [r2, sl]
 8019bae:	f01e 0f04 	tst.w	lr, #4
 8019bb2:	d0e4      	beq.n	8019b7e <rcl_validate_topic_name+0xc2>
 8019bb4:	f1bc 0f00 	cmp.w	ip, #0
 8019bb8:	bf0c      	ite	eq
 8019bba:	f04f 0e00 	moveq.w	lr, #0
 8019bbe:	f009 0e01 	andne.w	lr, r9, #1
 8019bc2:	f1be 0f00 	cmp.w	lr, #0
 8019bc6:	d0da      	beq.n	8019b7e <rcl_validate_topic_name+0xc2>
 8019bc8:	f10c 39ff 	add.w	r9, ip, #4294967295	@ 0xffffffff
 8019bcc:	454b      	cmp	r3, r9
 8019bce:	d027      	beq.n	8019c20 <rcl_validate_topic_name+0x164>
 8019bd0:	46f1      	mov	r9, lr
 8019bd2:	e7d4      	b.n	8019b7e <rcl_validate_topic_name+0xc2>
 8019bd4:	f1b9 0f00 	cmp.w	r9, #0
 8019bd8:	bf0c      	ite	eq
 8019bda:	2303      	moveq	r3, #3
 8019bdc:	2308      	movne	r3, #8
 8019bde:	6033      	str	r3, [r6, #0]
 8019be0:	2d00      	cmp	r5, #0
 8019be2:	d08f      	beq.n	8019b04 <rcl_validate_topic_name+0x48>
 8019be4:	f8c5 c000 	str.w	ip, [r5]
 8019be8:	e78c      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019bea:	f1b9 0f00 	cmp.w	r9, #0
 8019bee:	d0c6      	beq.n	8019b7e <rcl_validate_topic_name+0xc2>
 8019bf0:	2308      	movs	r3, #8
 8019bf2:	6033      	str	r3, [r6, #0]
 8019bf4:	2d00      	cmp	r5, #0
 8019bf6:	d1f5      	bne.n	8019be4 <rcl_validate_topic_name+0x128>
 8019bf8:	e784      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019bfa:	f1bc 0f00 	cmp.w	ip, #0
 8019bfe:	d0be      	beq.n	8019b7e <rcl_validate_topic_name+0xc2>
 8019c00:	2306      	movs	r3, #6
 8019c02:	6033      	str	r3, [r6, #0]
 8019c04:	2d00      	cmp	r5, #0
 8019c06:	d1ed      	bne.n	8019be4 <rcl_validate_topic_name+0x128>
 8019c08:	e77c      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019c0a:	f1b9 0f00 	cmp.w	r9, #0
 8019c0e:	d104      	bne.n	8019c1a <rcl_validate_topic_name+0x15e>
 8019c10:	2305      	movs	r3, #5
 8019c12:	6033      	str	r3, [r6, #0]
 8019c14:	2d00      	cmp	r5, #0
 8019c16:	d1e5      	bne.n	8019be4 <rcl_validate_topic_name+0x128>
 8019c18:	e774      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019c1a:	f04f 0900 	mov.w	r9, #0
 8019c1e:	e7ae      	b.n	8019b7e <rcl_validate_topic_name+0xc2>
 8019c20:	2309      	movs	r3, #9
 8019c22:	6033      	str	r3, [r6, #0]
 8019c24:	2d00      	cmp	r5, #0
 8019c26:	d1dd      	bne.n	8019be4 <rcl_validate_topic_name+0x128>
 8019c28:	e76c      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019c2a:	2301      	movs	r3, #1
 8019c2c:	e00c      	b.n	8019c48 <rcl_validate_topic_name+0x18c>
 8019c2e:	297e      	cmp	r1, #126	@ 0x7e
 8019c30:	d102      	bne.n	8019c38 <rcl_validate_topic_name+0x17c>
 8019c32:	f1b9 0f01 	cmp.w	r9, #1
 8019c36:	d018      	beq.n	8019c6a <rcl_validate_topic_name+0x1ae>
 8019c38:	1c58      	adds	r0, r3, #1
 8019c3a:	459c      	cmp	ip, r3
 8019c3c:	f109 0901 	add.w	r9, r9, #1
 8019c40:	f104 0401 	add.w	r4, r4, #1
 8019c44:	4603      	mov	r3, r0
 8019c46:	d90d      	bls.n	8019c64 <rcl_validate_topic_name+0x1a8>
 8019c48:	454f      	cmp	r7, r9
 8019c4a:	d0f5      	beq.n	8019c38 <rcl_validate_topic_name+0x17c>
 8019c4c:	7820      	ldrb	r0, [r4, #0]
 8019c4e:	282f      	cmp	r0, #47	@ 0x2f
 8019c50:	d1ed      	bne.n	8019c2e <rcl_validate_topic_name+0x172>
 8019c52:	7860      	ldrb	r0, [r4, #1]
 8019c54:	5c10      	ldrb	r0, [r2, r0]
 8019c56:	0740      	lsls	r0, r0, #29
 8019c58:	d5ee      	bpl.n	8019c38 <rcl_validate_topic_name+0x17c>
 8019c5a:	2204      	movs	r2, #4
 8019c5c:	6032      	str	r2, [r6, #0]
 8019c5e:	2d00      	cmp	r5, #0
 8019c60:	d198      	bne.n	8019b94 <rcl_validate_topic_name+0xd8>
 8019c62:	e74f      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019c64:	2300      	movs	r3, #0
 8019c66:	6033      	str	r3, [r6, #0]
 8019c68:	e74c      	b.n	8019b04 <rcl_validate_topic_name+0x48>
 8019c6a:	2307      	movs	r3, #7
 8019c6c:	6033      	str	r3, [r6, #0]
 8019c6e:	2d00      	cmp	r5, #0
 8019c70:	f43f af48 	beq.w	8019b04 <rcl_validate_topic_name+0x48>
 8019c74:	2301      	movs	r3, #1
 8019c76:	e78d      	b.n	8019b94 <rcl_validate_topic_name+0xd8>
 8019c78:	0801ca97 	.word	0x0801ca97

08019c7c <rcutils_split>:
 8019c7c:	b082      	sub	sp, #8
 8019c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c82:	b08b      	sub	sp, #44	@ 0x2c
 8019c84:	ac14      	add	r4, sp, #80	@ 0x50
 8019c86:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8019c88:	e884 000c 	stmia.w	r4, {r2, r3}
 8019c8c:	2f00      	cmp	r7, #0
 8019c8e:	f000 809f 	beq.w	8019dd0 <rcutils_split+0x154>
 8019c92:	4606      	mov	r6, r0
 8019c94:	2800      	cmp	r0, #0
 8019c96:	d071      	beq.n	8019d7c <rcutils_split+0x100>
 8019c98:	7804      	ldrb	r4, [r0, #0]
 8019c9a:	2c00      	cmp	r4, #0
 8019c9c:	d06e      	beq.n	8019d7c <rcutils_split+0x100>
 8019c9e:	460d      	mov	r5, r1
 8019ca0:	f7e6 fb86 	bl	80003b0 <strlen>
 8019ca4:	1833      	adds	r3, r6, r0
 8019ca6:	4680      	mov	r8, r0
 8019ca8:	1b64      	subs	r4, r4, r5
 8019caa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019cae:	fab4 f484 	clz	r4, r4
 8019cb2:	42ab      	cmp	r3, r5
 8019cb4:	bf08      	it	eq
 8019cb6:	f1a8 0801 	subeq.w	r8, r8, #1
 8019cba:	0964      	lsrs	r4, r4, #5
 8019cbc:	4544      	cmp	r4, r8
 8019cbe:	d278      	bcs.n	8019db2 <rcutils_split+0x136>
 8019cc0:	1933      	adds	r3, r6, r4
 8019cc2:	eb06 0008 	add.w	r0, r6, r8
 8019cc6:	2101      	movs	r1, #1
 8019cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ccc:	42aa      	cmp	r2, r5
 8019cce:	bf08      	it	eq
 8019cd0:	3101      	addeq	r1, #1
 8019cd2:	4283      	cmp	r3, r0
 8019cd4:	d1f8      	bne.n	8019cc8 <rcutils_split+0x4c>
 8019cd6:	aa14      	add	r2, sp, #80	@ 0x50
 8019cd8:	4638      	mov	r0, r7
 8019cda:	f000 f89f 	bl	8019e1c <rcutils_string_array_init>
 8019cde:	4681      	mov	r9, r0
 8019ce0:	2800      	cmp	r0, #0
 8019ce2:	d159      	bne.n	8019d98 <rcutils_split+0x11c>
 8019ce4:	46a2      	mov	sl, r4
 8019ce6:	687a      	ldr	r2, [r7, #4]
 8019ce8:	e002      	b.n	8019cf0 <rcutils_split+0x74>
 8019cea:	3401      	adds	r4, #1
 8019cec:	4544      	cmp	r4, r8
 8019cee:	d222      	bcs.n	8019d36 <rcutils_split+0xba>
 8019cf0:	5d33      	ldrb	r3, [r6, r4]
 8019cf2:	42ab      	cmp	r3, r5
 8019cf4:	d1f9      	bne.n	8019cea <rcutils_split+0x6e>
 8019cf6:	4554      	cmp	r4, sl
 8019cf8:	eba4 0b0a 	sub.w	fp, r4, sl
 8019cfc:	d037      	beq.n	8019d6e <rcutils_split+0xf2>
 8019cfe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019d00:	f10b 0002 	add.w	r0, fp, #2
 8019d04:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019d06:	9201      	str	r2, [sp, #4]
 8019d08:	4798      	blx	r3
 8019d0a:	9a01      	ldr	r2, [sp, #4]
 8019d0c:	eb06 030a 	add.w	r3, r6, sl
 8019d10:	f10b 0101 	add.w	r1, fp, #1
 8019d14:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 8019d18:	687a      	ldr	r2, [r7, #4]
 8019d1a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8019d1e:	2800      	cmp	r0, #0
 8019d20:	d038      	beq.n	8019d94 <rcutils_split+0x118>
 8019d22:	4a2e      	ldr	r2, [pc, #184]	@ (8019ddc <rcutils_split+0x160>)
 8019d24:	f109 0901 	add.w	r9, r9, #1
 8019d28:	f000 fdf4 	bl	801a914 <sniprintf>
 8019d2c:	687a      	ldr	r2, [r7, #4]
 8019d2e:	3401      	adds	r4, #1
 8019d30:	4544      	cmp	r4, r8
 8019d32:	46a2      	mov	sl, r4
 8019d34:	d3dc      	bcc.n	8019cf0 <rcutils_split+0x74>
 8019d36:	4554      	cmp	r4, sl
 8019d38:	d043      	beq.n	8019dc2 <rcutils_split+0x146>
 8019d3a:	eba4 040a 	sub.w	r4, r4, sl
 8019d3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8019d40:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019d42:	1ca0      	adds	r0, r4, #2
 8019d44:	9201      	str	r2, [sp, #4]
 8019d46:	4798      	blx	r3
 8019d48:	9a01      	ldr	r2, [sp, #4]
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
 8019d50:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8019d54:	b300      	cbz	r0, 8019d98 <rcutils_split+0x11c>
 8019d56:	eb06 030a 	add.w	r3, r6, sl
 8019d5a:	4a20      	ldr	r2, [pc, #128]	@ (8019ddc <rcutils_split+0x160>)
 8019d5c:	1c61      	adds	r1, r4, #1
 8019d5e:	f000 fdd9 	bl	801a914 <sniprintf>
 8019d62:	2000      	movs	r0, #0
 8019d64:	b00b      	add	sp, #44	@ 0x2c
 8019d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d6a:	b002      	add	sp, #8
 8019d6c:	4770      	bx	lr
 8019d6e:	683b      	ldr	r3, [r7, #0]
 8019d70:	2100      	movs	r1, #0
 8019d72:	3b01      	subs	r3, #1
 8019d74:	603b      	str	r3, [r7, #0]
 8019d76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8019d7a:	e7d8      	b.n	8019d2e <rcutils_split+0xb2>
 8019d7c:	ac02      	add	r4, sp, #8
 8019d7e:	a802      	add	r0, sp, #8
 8019d80:	f000 f82e 	bl	8019de0 <rcutils_get_zero_initialized_string_array>
 8019d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d86:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019d88:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019d8c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8019d90:	2000      	movs	r0, #0
 8019d92:	e7e7      	b.n	8019d64 <rcutils_split+0xe8>
 8019d94:	f8c7 9000 	str.w	r9, [r7]
 8019d98:	4638      	mov	r0, r7
 8019d9a:	f000 f861 	bl	8019e60 <rcutils_string_array_fini>
 8019d9e:	b928      	cbnz	r0, 8019dac <rcutils_split+0x130>
 8019da0:	200a      	movs	r0, #10
 8019da2:	b00b      	add	sp, #44	@ 0x2c
 8019da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da8:	b002      	add	sp, #8
 8019daa:	4770      	bx	lr
 8019dac:	f7f4 fccc 	bl	800e748 <rcutils_reset_error>
 8019db0:	e7f6      	b.n	8019da0 <rcutils_split+0x124>
 8019db2:	aa14      	add	r2, sp, #80	@ 0x50
 8019db4:	2101      	movs	r1, #1
 8019db6:	4638      	mov	r0, r7
 8019db8:	f000 f830 	bl	8019e1c <rcutils_string_array_init>
 8019dbc:	2800      	cmp	r0, #0
 8019dbe:	d1eb      	bne.n	8019d98 <rcutils_split+0x11c>
 8019dc0:	687a      	ldr	r2, [r7, #4]
 8019dc2:	683b      	ldr	r3, [r7, #0]
 8019dc4:	2100      	movs	r1, #0
 8019dc6:	3b01      	subs	r3, #1
 8019dc8:	603b      	str	r3, [r7, #0]
 8019dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8019dce:	e7df      	b.n	8019d90 <rcutils_split+0x114>
 8019dd0:	200b      	movs	r0, #11
 8019dd2:	b00b      	add	sp, #44	@ 0x2c
 8019dd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd8:	b002      	add	sp, #8
 8019dda:	4770      	bx	lr
 8019ddc:	0801bd7c 	.word	0x0801bd7c

08019de0 <rcutils_get_zero_initialized_string_array>:
 8019de0:	b570      	push	{r4, r5, r6, lr}
 8019de2:	b086      	sub	sp, #24
 8019de4:	4606      	mov	r6, r0
 8019de6:	4c0c      	ldr	r4, [pc, #48]	@ (8019e18 <rcutils_get_zero_initialized_string_array+0x38>)
 8019de8:	4668      	mov	r0, sp
 8019dea:	f7f4 fc4d 	bl	800e688 <rcutils_get_zero_initialized_allocator>
 8019dee:	46ee      	mov	lr, sp
 8019df0:	f104 0508 	add.w	r5, r4, #8
 8019df4:	46a4      	mov	ip, r4
 8019df6:	4634      	mov	r4, r6
 8019df8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019dfe:	f8de 3000 	ldr.w	r3, [lr]
 8019e02:	602b      	str	r3, [r5, #0]
 8019e04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e0a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8019e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019e12:	4630      	mov	r0, r6
 8019e14:	b006      	add	sp, #24
 8019e16:	bd70      	pop	{r4, r5, r6, pc}
 8019e18:	2400e080 	.word	0x2400e080

08019e1c <rcutils_string_array_init>:
 8019e1c:	b570      	push	{r4, r5, r6, lr}
 8019e1e:	b1d0      	cbz	r0, 8019e56 <rcutils_string_array_init+0x3a>
 8019e20:	4615      	mov	r5, r2
 8019e22:	b1c2      	cbz	r2, 8019e56 <rcutils_string_array_init+0x3a>
 8019e24:	460e      	mov	r6, r1
 8019e26:	4604      	mov	r4, r0
 8019e28:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8019e2c:	6001      	str	r1, [r0, #0]
 8019e2e:	2104      	movs	r1, #4
 8019e30:	4630      	mov	r0, r6
 8019e32:	4798      	blx	r3
 8019e34:	6060      	str	r0, [r4, #4]
 8019e36:	b106      	cbz	r6, 8019e3a <rcutils_string_array_init+0x1e>
 8019e38:	b180      	cbz	r0, 8019e5c <rcutils_string_array_init+0x40>
 8019e3a:	46ae      	mov	lr, r5
 8019e3c:	f104 0c08 	add.w	ip, r4, #8
 8019e40:	2400      	movs	r4, #0
 8019e42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019e46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e4a:	f8de 3000 	ldr.w	r3, [lr]
 8019e4e:	f8cc 3000 	str.w	r3, [ip]
 8019e52:	4620      	mov	r0, r4
 8019e54:	bd70      	pop	{r4, r5, r6, pc}
 8019e56:	240b      	movs	r4, #11
 8019e58:	4620      	mov	r0, r4
 8019e5a:	bd70      	pop	{r4, r5, r6, pc}
 8019e5c:	240a      	movs	r4, #10
 8019e5e:	e7f8      	b.n	8019e52 <rcutils_string_array_init+0x36>

08019e60 <rcutils_string_array_fini>:
 8019e60:	b310      	cbz	r0, 8019ea8 <rcutils_string_array_fini+0x48>
 8019e62:	6843      	ldr	r3, [r0, #4]
 8019e64:	b570      	push	{r4, r5, r6, lr}
 8019e66:	4604      	mov	r4, r0
 8019e68:	b1d3      	cbz	r3, 8019ea0 <rcutils_string_array_fini+0x40>
 8019e6a:	3008      	adds	r0, #8
 8019e6c:	f7f4 fc46 	bl	800e6fc <rcutils_allocator_is_valid>
 8019e70:	b1c0      	cbz	r0, 8019ea4 <rcutils_string_array_fini+0x44>
 8019e72:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019e76:	b16b      	cbz	r3, 8019e94 <rcutils_string_array_fini+0x34>
 8019e78:	2500      	movs	r5, #0
 8019e7a:	462e      	mov	r6, r5
 8019e7c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019e80:	68e3      	ldr	r3, [r4, #12]
 8019e82:	69a1      	ldr	r1, [r4, #24]
 8019e84:	4798      	blx	r3
 8019e86:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019e8a:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019e8e:	3501      	adds	r5, #1
 8019e90:	42ab      	cmp	r3, r5
 8019e92:	d8f3      	bhi.n	8019e7c <rcutils_string_array_fini+0x1c>
 8019e94:	68e3      	ldr	r3, [r4, #12]
 8019e96:	69a1      	ldr	r1, [r4, #24]
 8019e98:	4798      	blx	r3
 8019e9a:	2300      	movs	r3, #0
 8019e9c:	e9c4 3300 	strd	r3, r3, [r4]
 8019ea0:	2000      	movs	r0, #0
 8019ea2:	bd70      	pop	{r4, r5, r6, pc}
 8019ea4:	200b      	movs	r0, #11
 8019ea6:	bd70      	pop	{r4, r5, r6, pc}
 8019ea8:	200b      	movs	r0, #11
 8019eaa:	4770      	bx	lr

08019eac <rmw_get_zero_initialized_discovery_options>:
 8019eac:	b510      	push	{r4, lr}
 8019eae:	4604      	mov	r4, r0
 8019eb0:	2220      	movs	r2, #32
 8019eb2:	2100      	movs	r1, #0
 8019eb4:	f000 fea2 	bl	801abfc <memset>
 8019eb8:	4620      	mov	r0, r4
 8019eba:	bd10      	pop	{r4, pc}

08019ebc <rmw_discovery_options_init>:
 8019ebc:	b328      	cbz	r0, 8019f0a <rmw_discovery_options_init+0x4e>
 8019ebe:	b570      	push	{r4, r5, r6, lr}
 8019ec0:	4604      	mov	r4, r0
 8019ec2:	4610      	mov	r0, r2
 8019ec4:	460e      	mov	r6, r1
 8019ec6:	4615      	mov	r5, r2
 8019ec8:	f7f4 fc18 	bl	800e6fc <rcutils_allocator_is_valid>
 8019ecc:	b1d8      	cbz	r0, 8019f06 <rmw_discovery_options_init+0x4a>
 8019ece:	68a3      	ldr	r3, [r4, #8]
 8019ed0:	b9cb      	cbnz	r3, 8019f06 <rmw_discovery_options_init+0x4a>
 8019ed2:	6863      	ldr	r3, [r4, #4]
 8019ed4:	b9bb      	cbnz	r3, 8019f06 <rmw_discovery_options_init+0x4a>
 8019ed6:	7823      	ldrb	r3, [r4, #0]
 8019ed8:	b90b      	cbnz	r3, 8019ede <rmw_discovery_options_init+0x22>
 8019eda:	2302      	movs	r3, #2
 8019edc:	7023      	strb	r3, [r4, #0]
 8019ede:	b186      	cbz	r6, 8019f02 <rmw_discovery_options_init+0x46>
 8019ee0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019ee4:	4630      	mov	r0, r6
 8019ee6:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8019eea:	4798      	blx	r3
 8019eec:	6060      	str	r0, [r4, #4]
 8019eee:	b170      	cbz	r0, 8019f0e <rmw_discovery_options_init+0x52>
 8019ef0:	f104 0c0c 	add.w	ip, r4, #12
 8019ef4:	60a6      	str	r6, [r4, #8]
 8019ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019efc:	682b      	ldr	r3, [r5, #0]
 8019efe:	f8cc 3000 	str.w	r3, [ip]
 8019f02:	2000      	movs	r0, #0
 8019f04:	bd70      	pop	{r4, r5, r6, pc}
 8019f06:	200b      	movs	r0, #11
 8019f08:	bd70      	pop	{r4, r5, r6, pc}
 8019f0a:	200b      	movs	r0, #11
 8019f0c:	4770      	bx	lr
 8019f0e:	200a      	movs	r0, #10
 8019f10:	bd70      	pop	{r4, r5, r6, pc}
 8019f12:	bf00      	nop

08019f14 <on_status>:
 8019f14:	b082      	sub	sp, #8
 8019f16:	b002      	add	sp, #8
 8019f18:	4770      	bx	lr
 8019f1a:	bf00      	nop

08019f1c <on_topic>:
 8019f1c:	4a23      	ldr	r2, [pc, #140]	@ (8019fac <on_topic+0x90>)
 8019f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f22:	6812      	ldr	r2, [r2, #0]
 8019f24:	b094      	sub	sp, #80	@ 0x50
 8019f26:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019f28:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8019f2c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019f2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8019f30:	b3c2      	cbz	r2, 8019fa4 <on_topic+0x88>
 8019f32:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8019f36:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8019f3a:	e001      	b.n	8019f40 <on_topic+0x24>
 8019f3c:	6852      	ldr	r2, [r2, #4]
 8019f3e:	b38a      	cbz	r2, 8019fa4 <on_topic+0x88>
 8019f40:	6894      	ldr	r4, [r2, #8]
 8019f42:	8aa3      	ldrh	r3, [r4, #20]
 8019f44:	428b      	cmp	r3, r1
 8019f46:	d1f9      	bne.n	8019f3c <on_topic+0x20>
 8019f48:	7da3      	ldrb	r3, [r4, #22]
 8019f4a:	4283      	cmp	r3, r0
 8019f4c:	d1f6      	bne.n	8019f3c <on_topic+0x20>
 8019f4e:	2248      	movs	r2, #72	@ 0x48
 8019f50:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019f54:	4668      	mov	r0, sp
 8019f56:	f000 ff8a 	bl	801ae6e <memcpy>
 8019f5a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8019f5e:	4620      	mov	r0, r4
 8019f60:	cb0c      	ldmia	r3, {r2, r3}
 8019f62:	f7f4 ffff 	bl	800ef64 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019f66:	4607      	mov	r7, r0
 8019f68:	b1e0      	cbz	r0, 8019fa4 <on_topic+0x88>
 8019f6a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019f6e:	462a      	mov	r2, r5
 8019f70:	4630      	mov	r0, r6
 8019f72:	f108 0110 	add.w	r1, r8, #16
 8019f76:	f7fd fe69 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 8019f7a:	b930      	cbnz	r0, 8019f8a <on_topic+0x6e>
 8019f7c:	4639      	mov	r1, r7
 8019f7e:	480c      	ldr	r0, [pc, #48]	@ (8019fb0 <on_topic+0x94>)
 8019f80:	b014      	add	sp, #80	@ 0x50
 8019f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f86:	f7fc bc97 	b.w	80168b8 <put_memory>
 8019f8a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019f8e:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8019f92:	f7fd fce3 	bl	801795c <rmw_uros_epoch_nanos>
 8019f96:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019f9a:	2305      	movs	r3, #5
 8019f9c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019fa0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019fa4:	b014      	add	sp, #80	@ 0x50
 8019fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019faa:	bf00      	nop
 8019fac:	2400c020 	.word	0x2400c020
 8019fb0:	2400b870 	.word	0x2400b870

08019fb4 <on_request>:
 8019fb4:	4824      	ldr	r0, [pc, #144]	@ (801a048 <on_request+0x94>)
 8019fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fba:	6800      	ldr	r0, [r0, #0]
 8019fbc:	b094      	sub	sp, #80	@ 0x50
 8019fbe:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019fc0:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8019fc4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019fc6:	2800      	cmp	r0, #0
 8019fc8:	d03b      	beq.n	801a042 <on_request+0x8e>
 8019fca:	461d      	mov	r5, r3
 8019fcc:	e001      	b.n	8019fd2 <on_request+0x1e>
 8019fce:	6840      	ldr	r0, [r0, #4]
 8019fd0:	b3b8      	cbz	r0, 801a042 <on_request+0x8e>
 8019fd2:	6884      	ldr	r4, [r0, #8]
 8019fd4:	8b21      	ldrh	r1, [r4, #24]
 8019fd6:	4291      	cmp	r1, r2
 8019fd8:	d1f9      	bne.n	8019fce <on_request+0x1a>
 8019fda:	2248      	movs	r2, #72	@ 0x48
 8019fdc:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019fe0:	4668      	mov	r0, sp
 8019fe2:	f000 ff44 	bl	801ae6e <memcpy>
 8019fe6:	f104 0320 	add.w	r3, r4, #32
 8019fea:	4620      	mov	r0, r4
 8019fec:	cb0c      	ldmia	r3, {r2, r3}
 8019fee:	f7f4 ffb9 	bl	800ef64 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019ff2:	4680      	mov	r8, r0
 8019ff4:	b328      	cbz	r0, 801a042 <on_request+0x8e>
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8019ffc:	463a      	mov	r2, r7
 8019ffe:	f106 0110 	add.w	r1, r6, #16
 801a002:	f7fd fe23 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 801a006:	b930      	cbnz	r0, 801a016 <on_request+0x62>
 801a008:	4641      	mov	r1, r8
 801a00a:	4810      	ldr	r0, [pc, #64]	@ (801a04c <on_request+0x98>)
 801a00c:	b014      	add	sp, #80	@ 0x50
 801a00e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a012:	f7fc bc51 	b.w	80168b8 <put_memory>
 801a016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a018:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801a01c:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a020:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a024:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a028:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a02c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a030:	f7fd fc94 	bl	801795c <rmw_uros_epoch_nanos>
 801a034:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a038:	2303      	movs	r3, #3
 801a03a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a03e:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a042:	b014      	add	sp, #80	@ 0x50
 801a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a048:	2400bbd8 	.word	0x2400bbd8
 801a04c:	2400b870 	.word	0x2400b870

0801a050 <on_reply>:
 801a050:	4822      	ldr	r0, [pc, #136]	@ (801a0dc <on_reply+0x8c>)
 801a052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a056:	6800      	ldr	r0, [r0, #0]
 801a058:	b094      	sub	sp, #80	@ 0x50
 801a05a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a05c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a060:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a062:	b3b8      	cbz	r0, 801a0d4 <on_reply+0x84>
 801a064:	461d      	mov	r5, r3
 801a066:	e001      	b.n	801a06c <on_reply+0x1c>
 801a068:	6840      	ldr	r0, [r0, #4]
 801a06a:	b398      	cbz	r0, 801a0d4 <on_reply+0x84>
 801a06c:	6884      	ldr	r4, [r0, #8]
 801a06e:	8b21      	ldrh	r1, [r4, #24]
 801a070:	4291      	cmp	r1, r2
 801a072:	d1f9      	bne.n	801a068 <on_reply+0x18>
 801a074:	2248      	movs	r2, #72	@ 0x48
 801a076:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a07a:	4668      	mov	r0, sp
 801a07c:	f000 fef7 	bl	801ae6e <memcpy>
 801a080:	f104 0320 	add.w	r3, r4, #32
 801a084:	4620      	mov	r0, r4
 801a086:	cb0c      	ldmia	r3, {r2, r3}
 801a088:	f7f4 ff6c 	bl	800ef64 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a08c:	4680      	mov	r8, r0
 801a08e:	b308      	cbz	r0, 801a0d4 <on_reply+0x84>
 801a090:	4630      	mov	r0, r6
 801a092:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a096:	463a      	mov	r2, r7
 801a098:	f106 0110 	add.w	r1, r6, #16
 801a09c:	f7fd fdd6 	bl	8017c4c <ucdr_deserialize_array_uint8_t>
 801a0a0:	b930      	cbnz	r0, 801a0b0 <on_reply+0x60>
 801a0a2:	4641      	mov	r1, r8
 801a0a4:	480e      	ldr	r0, [pc, #56]	@ (801a0e0 <on_reply+0x90>)
 801a0a6:	b014      	add	sp, #80	@ 0x50
 801a0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ac:	f7fc bc04 	b.w	80168b8 <put_memory>
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a0b6:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a0ba:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801a0be:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801a0c2:	f7fd fc4b 	bl	801795c <rmw_uros_epoch_nanos>
 801a0c6:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a0ca:	2304      	movs	r3, #4
 801a0cc:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a0d0:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a0d4:	b014      	add	sp, #80	@ 0x50
 801a0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0da:	bf00      	nop
 801a0dc:	2400bb00 	.word	0x2400bb00
 801a0e0:	2400b870 	.word	0x2400b870

0801a0e4 <rmw_create_guard_condition>:
 801a0e4:	b538      	push	{r3, r4, r5, lr}
 801a0e6:	4605      	mov	r5, r0
 801a0e8:	4807      	ldr	r0, [pc, #28]	@ (801a108 <rmw_create_guard_condition+0x24>)
 801a0ea:	f7fc fbd5 	bl	8016898 <get_memory>
 801a0ee:	b150      	cbz	r0, 801a106 <rmw_create_guard_condition+0x22>
 801a0f0:	6884      	ldr	r4, [r0, #8]
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	61e5      	str	r5, [r4, #28]
 801a0f6:	7423      	strb	r3, [r4, #16]
 801a0f8:	f7fc fc54 	bl	80169a4 <rmw_get_implementation_identifier>
 801a0fc:	4603      	mov	r3, r0
 801a0fe:	f104 0014 	add.w	r0, r4, #20
 801a102:	e9c4 3405 	strd	r3, r4, [r4, #20]
 801a106:	bd38      	pop	{r3, r4, r5, pc}
 801a108:	2400964c 	.word	0x2400964c

0801a10c <rmw_destroy_guard_condition>:
 801a10c:	b508      	push	{r3, lr}
 801a10e:	4b08      	ldr	r3, [pc, #32]	@ (801a130 <rmw_destroy_guard_condition+0x24>)
 801a110:	6819      	ldr	r1, [r3, #0]
 801a112:	b911      	cbnz	r1, 801a11a <rmw_destroy_guard_condition+0xe>
 801a114:	e00a      	b.n	801a12c <rmw_destroy_guard_condition+0x20>
 801a116:	6849      	ldr	r1, [r1, #4]
 801a118:	b141      	cbz	r1, 801a12c <rmw_destroy_guard_condition+0x20>
 801a11a:	688b      	ldr	r3, [r1, #8]
 801a11c:	3314      	adds	r3, #20
 801a11e:	4298      	cmp	r0, r3
 801a120:	d1f9      	bne.n	801a116 <rmw_destroy_guard_condition+0xa>
 801a122:	4803      	ldr	r0, [pc, #12]	@ (801a130 <rmw_destroy_guard_condition+0x24>)
 801a124:	f7fc fbc8 	bl	80168b8 <put_memory>
 801a128:	2000      	movs	r0, #0
 801a12a:	bd08      	pop	{r3, pc}
 801a12c:	2001      	movs	r0, #1
 801a12e:	bd08      	pop	{r3, pc}
 801a130:	2400964c 	.word	0x2400964c

0801a134 <rmw_trigger_guard_condition>:
 801a134:	b160      	cbz	r0, 801a150 <rmw_trigger_guard_condition+0x1c>
 801a136:	b510      	push	{r4, lr}
 801a138:	4604      	mov	r4, r0
 801a13a:	6800      	ldr	r0, [r0, #0]
 801a13c:	f7f5 f894 	bl	800f268 <is_uxrce_rmw_identifier_valid>
 801a140:	b908      	cbnz	r0, 801a146 <rmw_trigger_guard_condition+0x12>
 801a142:	2001      	movs	r0, #1
 801a144:	bd10      	pop	{r4, pc}
 801a146:	6863      	ldr	r3, [r4, #4]
 801a148:	2201      	movs	r2, #1
 801a14a:	2000      	movs	r0, #0
 801a14c:	741a      	strb	r2, [r3, #16]
 801a14e:	bd10      	pop	{r4, pc}
 801a150:	2001      	movs	r0, #1
 801a152:	4770      	bx	lr

0801a154 <rosidl_runtime_c__String__init>:
 801a154:	b1b8      	cbz	r0, 801a186 <rosidl_runtime_c__String__init+0x32>
 801a156:	b510      	push	{r4, lr}
 801a158:	b086      	sub	sp, #24
 801a15a:	4604      	mov	r4, r0
 801a15c:	a801      	add	r0, sp, #4
 801a15e:	f7f4 faa1 	bl	800e6a4 <rcutils_get_default_allocator>
 801a162:	9b01      	ldr	r3, [sp, #4]
 801a164:	2001      	movs	r0, #1
 801a166:	9905      	ldr	r1, [sp, #20]
 801a168:	4798      	blx	r3
 801a16a:	4603      	mov	r3, r0
 801a16c:	6020      	str	r0, [r4, #0]
 801a16e:	b138      	cbz	r0, 801a180 <rosidl_runtime_c__String__init+0x2c>
 801a170:	2201      	movs	r2, #1
 801a172:	2100      	movs	r1, #0
 801a174:	4610      	mov	r0, r2
 801a176:	7019      	strb	r1, [r3, #0]
 801a178:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801a17c:	b006      	add	sp, #24
 801a17e:	bd10      	pop	{r4, pc}
 801a180:	2000      	movs	r0, #0
 801a182:	b006      	add	sp, #24
 801a184:	bd10      	pop	{r4, pc}
 801a186:	2000      	movs	r0, #0
 801a188:	4770      	bx	lr
 801a18a:	bf00      	nop

0801a18c <rosidl_runtime_c__String__fini>:
 801a18c:	b320      	cbz	r0, 801a1d8 <rosidl_runtime_c__String__fini+0x4c>
 801a18e:	6803      	ldr	r3, [r0, #0]
 801a190:	b510      	push	{r4, lr}
 801a192:	4604      	mov	r4, r0
 801a194:	b086      	sub	sp, #24
 801a196:	b173      	cbz	r3, 801a1b6 <rosidl_runtime_c__String__fini+0x2a>
 801a198:	6883      	ldr	r3, [r0, #8]
 801a19a:	b1f3      	cbz	r3, 801a1da <rosidl_runtime_c__String__fini+0x4e>
 801a19c:	a801      	add	r0, sp, #4
 801a19e:	f7f4 fa81 	bl	800e6a4 <rcutils_get_default_allocator>
 801a1a2:	9b02      	ldr	r3, [sp, #8]
 801a1a4:	9905      	ldr	r1, [sp, #20]
 801a1a6:	6820      	ldr	r0, [r4, #0]
 801a1a8:	4798      	blx	r3
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	e9c4 3300 	strd	r3, r3, [r4]
 801a1b0:	60a3      	str	r3, [r4, #8]
 801a1b2:	b006      	add	sp, #24
 801a1b4:	bd10      	pop	{r4, pc}
 801a1b6:	6843      	ldr	r3, [r0, #4]
 801a1b8:	b9db      	cbnz	r3, 801a1f2 <rosidl_runtime_c__String__fini+0x66>
 801a1ba:	6883      	ldr	r3, [r0, #8]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d0f8      	beq.n	801a1b2 <rosidl_runtime_c__String__fini+0x26>
 801a1c0:	4b12      	ldr	r3, [pc, #72]	@ (801a20c <rosidl_runtime_c__String__fini+0x80>)
 801a1c2:	2251      	movs	r2, #81	@ 0x51
 801a1c4:	2101      	movs	r1, #1
 801a1c6:	4812      	ldr	r0, [pc, #72]	@ (801a210 <rosidl_runtime_c__String__fini+0x84>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	68db      	ldr	r3, [r3, #12]
 801a1cc:	f000 fb82 	bl	801a8d4 <fwrite>
 801a1d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a1d4:	f000 f83e 	bl	801a254 <exit>
 801a1d8:	4770      	bx	lr
 801a1da:	4b0c      	ldr	r3, [pc, #48]	@ (801a20c <rosidl_runtime_c__String__fini+0x80>)
 801a1dc:	224c      	movs	r2, #76	@ 0x4c
 801a1de:	2101      	movs	r1, #1
 801a1e0:	480c      	ldr	r0, [pc, #48]	@ (801a214 <rosidl_runtime_c__String__fini+0x88>)
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	68db      	ldr	r3, [r3, #12]
 801a1e6:	f000 fb75 	bl	801a8d4 <fwrite>
 801a1ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a1ee:	f000 f831 	bl	801a254 <exit>
 801a1f2:	4b06      	ldr	r3, [pc, #24]	@ (801a20c <rosidl_runtime_c__String__fini+0x80>)
 801a1f4:	224e      	movs	r2, #78	@ 0x4e
 801a1f6:	2101      	movs	r1, #1
 801a1f8:	4807      	ldr	r0, [pc, #28]	@ (801a218 <rosidl_runtime_c__String__fini+0x8c>)
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	68db      	ldr	r3, [r3, #12]
 801a1fe:	f000 fb69 	bl	801a8d4 <fwrite>
 801a202:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a206:	f000 f825 	bl	801a254 <exit>
 801a20a:	bf00      	nop
 801a20c:	240004c0 	.word	0x240004c0
 801a210:	0801c4e4 	.word	0x0801c4e4
 801a214:	0801c444 	.word	0x0801c444
 801a218:	0801c494 	.word	0x0801c494

0801a21c <calloc>:
 801a21c:	4b02      	ldr	r3, [pc, #8]	@ (801a228 <calloc+0xc>)
 801a21e:	460a      	mov	r2, r1
 801a220:	4601      	mov	r1, r0
 801a222:	6818      	ldr	r0, [r3, #0]
 801a224:	f000 b802 	b.w	801a22c <_calloc_r>
 801a228:	240004c0 	.word	0x240004c0

0801a22c <_calloc_r>:
 801a22c:	b570      	push	{r4, r5, r6, lr}
 801a22e:	fba1 5402 	umull	r5, r4, r1, r2
 801a232:	b934      	cbnz	r4, 801a242 <_calloc_r+0x16>
 801a234:	4629      	mov	r1, r5
 801a236:	f000 f899 	bl	801a36c <_malloc_r>
 801a23a:	4606      	mov	r6, r0
 801a23c:	b928      	cbnz	r0, 801a24a <_calloc_r+0x1e>
 801a23e:	4630      	mov	r0, r6
 801a240:	bd70      	pop	{r4, r5, r6, pc}
 801a242:	220c      	movs	r2, #12
 801a244:	6002      	str	r2, [r0, #0]
 801a246:	2600      	movs	r6, #0
 801a248:	e7f9      	b.n	801a23e <_calloc_r+0x12>
 801a24a:	462a      	mov	r2, r5
 801a24c:	4621      	mov	r1, r4
 801a24e:	f000 fcd5 	bl	801abfc <memset>
 801a252:	e7f4      	b.n	801a23e <_calloc_r+0x12>

0801a254 <exit>:
 801a254:	b508      	push	{r3, lr}
 801a256:	4b06      	ldr	r3, [pc, #24]	@ (801a270 <exit+0x1c>)
 801a258:	4604      	mov	r4, r0
 801a25a:	b113      	cbz	r3, 801a262 <exit+0xe>
 801a25c:	2100      	movs	r1, #0
 801a25e:	f3af 8000 	nop.w
 801a262:	4b04      	ldr	r3, [pc, #16]	@ (801a274 <exit+0x20>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	b103      	cbz	r3, 801a26a <exit+0x16>
 801a268:	4798      	blx	r3
 801a26a:	4620      	mov	r0, r4
 801a26c:	f7e7 fbb4 	bl	80019d8 <_exit>
 801a270:	00000000 	.word	0x00000000
 801a274:	2400e1dc 	.word	0x2400e1dc

0801a278 <getenv>:
 801a278:	b507      	push	{r0, r1, r2, lr}
 801a27a:	4b04      	ldr	r3, [pc, #16]	@ (801a28c <getenv+0x14>)
 801a27c:	4601      	mov	r1, r0
 801a27e:	aa01      	add	r2, sp, #4
 801a280:	6818      	ldr	r0, [r3, #0]
 801a282:	f000 f805 	bl	801a290 <_findenv_r>
 801a286:	b003      	add	sp, #12
 801a288:	f85d fb04 	ldr.w	pc, [sp], #4
 801a28c:	240004c0 	.word	0x240004c0

0801a290 <_findenv_r>:
 801a290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a294:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801a304 <_findenv_r+0x74>
 801a298:	4606      	mov	r6, r0
 801a29a:	4689      	mov	r9, r1
 801a29c:	4617      	mov	r7, r2
 801a29e:	f000 fe13 	bl	801aec8 <__env_lock>
 801a2a2:	f8da 4000 	ldr.w	r4, [sl]
 801a2a6:	b134      	cbz	r4, 801a2b6 <_findenv_r+0x26>
 801a2a8:	464b      	mov	r3, r9
 801a2aa:	4698      	mov	r8, r3
 801a2ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a2b0:	b13a      	cbz	r2, 801a2c2 <_findenv_r+0x32>
 801a2b2:	2a3d      	cmp	r2, #61	@ 0x3d
 801a2b4:	d1f9      	bne.n	801a2aa <_findenv_r+0x1a>
 801a2b6:	4630      	mov	r0, r6
 801a2b8:	f000 fe0c 	bl	801aed4 <__env_unlock>
 801a2bc:	2000      	movs	r0, #0
 801a2be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c2:	eba8 0809 	sub.w	r8, r8, r9
 801a2c6:	46a3      	mov	fp, r4
 801a2c8:	f854 0b04 	ldr.w	r0, [r4], #4
 801a2cc:	2800      	cmp	r0, #0
 801a2ce:	d0f2      	beq.n	801a2b6 <_findenv_r+0x26>
 801a2d0:	4642      	mov	r2, r8
 801a2d2:	4649      	mov	r1, r9
 801a2d4:	f000 fca7 	bl	801ac26 <strncmp>
 801a2d8:	2800      	cmp	r0, #0
 801a2da:	d1f4      	bne.n	801a2c6 <_findenv_r+0x36>
 801a2dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a2e0:	eb03 0508 	add.w	r5, r3, r8
 801a2e4:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a2e8:	2b3d      	cmp	r3, #61	@ 0x3d
 801a2ea:	d1ec      	bne.n	801a2c6 <_findenv_r+0x36>
 801a2ec:	f8da 3000 	ldr.w	r3, [sl]
 801a2f0:	ebab 0303 	sub.w	r3, fp, r3
 801a2f4:	109b      	asrs	r3, r3, #2
 801a2f6:	4630      	mov	r0, r6
 801a2f8:	603b      	str	r3, [r7, #0]
 801a2fa:	f000 fdeb 	bl	801aed4 <__env_unlock>
 801a2fe:	1c68      	adds	r0, r5, #1
 801a300:	e7dd      	b.n	801a2be <_findenv_r+0x2e>
 801a302:	bf00      	nop
 801a304:	24000000 	.word	0x24000000

0801a308 <malloc>:
 801a308:	4b02      	ldr	r3, [pc, #8]	@ (801a314 <malloc+0xc>)
 801a30a:	4601      	mov	r1, r0
 801a30c:	6818      	ldr	r0, [r3, #0]
 801a30e:	f000 b82d 	b.w	801a36c <_malloc_r>
 801a312:	bf00      	nop
 801a314:	240004c0 	.word	0x240004c0

0801a318 <free>:
 801a318:	4b02      	ldr	r3, [pc, #8]	@ (801a324 <free+0xc>)
 801a31a:	4601      	mov	r1, r0
 801a31c:	6818      	ldr	r0, [r3, #0]
 801a31e:	f000 bddf 	b.w	801aee0 <_free_r>
 801a322:	bf00      	nop
 801a324:	240004c0 	.word	0x240004c0

0801a328 <sbrk_aligned>:
 801a328:	b570      	push	{r4, r5, r6, lr}
 801a32a:	4e0f      	ldr	r6, [pc, #60]	@ (801a368 <sbrk_aligned+0x40>)
 801a32c:	460c      	mov	r4, r1
 801a32e:	6831      	ldr	r1, [r6, #0]
 801a330:	4605      	mov	r5, r0
 801a332:	b911      	cbnz	r1, 801a33a <sbrk_aligned+0x12>
 801a334:	f000 fd44 	bl	801adc0 <_sbrk_r>
 801a338:	6030      	str	r0, [r6, #0]
 801a33a:	4621      	mov	r1, r4
 801a33c:	4628      	mov	r0, r5
 801a33e:	f000 fd3f 	bl	801adc0 <_sbrk_r>
 801a342:	1c43      	adds	r3, r0, #1
 801a344:	d103      	bne.n	801a34e <sbrk_aligned+0x26>
 801a346:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a34a:	4620      	mov	r0, r4
 801a34c:	bd70      	pop	{r4, r5, r6, pc}
 801a34e:	1cc4      	adds	r4, r0, #3
 801a350:	f024 0403 	bic.w	r4, r4, #3
 801a354:	42a0      	cmp	r0, r4
 801a356:	d0f8      	beq.n	801a34a <sbrk_aligned+0x22>
 801a358:	1a21      	subs	r1, r4, r0
 801a35a:	4628      	mov	r0, r5
 801a35c:	f000 fd30 	bl	801adc0 <_sbrk_r>
 801a360:	3001      	adds	r0, #1
 801a362:	d1f2      	bne.n	801a34a <sbrk_aligned+0x22>
 801a364:	e7ef      	b.n	801a346 <sbrk_aligned+0x1e>
 801a366:	bf00      	nop
 801a368:	2400e09c 	.word	0x2400e09c

0801a36c <_malloc_r>:
 801a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a370:	1ccd      	adds	r5, r1, #3
 801a372:	f025 0503 	bic.w	r5, r5, #3
 801a376:	3508      	adds	r5, #8
 801a378:	2d0c      	cmp	r5, #12
 801a37a:	bf38      	it	cc
 801a37c:	250c      	movcc	r5, #12
 801a37e:	2d00      	cmp	r5, #0
 801a380:	4606      	mov	r6, r0
 801a382:	db01      	blt.n	801a388 <_malloc_r+0x1c>
 801a384:	42a9      	cmp	r1, r5
 801a386:	d904      	bls.n	801a392 <_malloc_r+0x26>
 801a388:	230c      	movs	r3, #12
 801a38a:	6033      	str	r3, [r6, #0]
 801a38c:	2000      	movs	r0, #0
 801a38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a468 <_malloc_r+0xfc>
 801a396:	f000 f869 	bl	801a46c <__malloc_lock>
 801a39a:	f8d8 3000 	ldr.w	r3, [r8]
 801a39e:	461c      	mov	r4, r3
 801a3a0:	bb44      	cbnz	r4, 801a3f4 <_malloc_r+0x88>
 801a3a2:	4629      	mov	r1, r5
 801a3a4:	4630      	mov	r0, r6
 801a3a6:	f7ff ffbf 	bl	801a328 <sbrk_aligned>
 801a3aa:	1c43      	adds	r3, r0, #1
 801a3ac:	4604      	mov	r4, r0
 801a3ae:	d158      	bne.n	801a462 <_malloc_r+0xf6>
 801a3b0:	f8d8 4000 	ldr.w	r4, [r8]
 801a3b4:	4627      	mov	r7, r4
 801a3b6:	2f00      	cmp	r7, #0
 801a3b8:	d143      	bne.n	801a442 <_malloc_r+0xd6>
 801a3ba:	2c00      	cmp	r4, #0
 801a3bc:	d04b      	beq.n	801a456 <_malloc_r+0xea>
 801a3be:	6823      	ldr	r3, [r4, #0]
 801a3c0:	4639      	mov	r1, r7
 801a3c2:	4630      	mov	r0, r6
 801a3c4:	eb04 0903 	add.w	r9, r4, r3
 801a3c8:	f000 fcfa 	bl	801adc0 <_sbrk_r>
 801a3cc:	4581      	cmp	r9, r0
 801a3ce:	d142      	bne.n	801a456 <_malloc_r+0xea>
 801a3d0:	6821      	ldr	r1, [r4, #0]
 801a3d2:	1a6d      	subs	r5, r5, r1
 801a3d4:	4629      	mov	r1, r5
 801a3d6:	4630      	mov	r0, r6
 801a3d8:	f7ff ffa6 	bl	801a328 <sbrk_aligned>
 801a3dc:	3001      	adds	r0, #1
 801a3de:	d03a      	beq.n	801a456 <_malloc_r+0xea>
 801a3e0:	6823      	ldr	r3, [r4, #0]
 801a3e2:	442b      	add	r3, r5
 801a3e4:	6023      	str	r3, [r4, #0]
 801a3e6:	f8d8 3000 	ldr.w	r3, [r8]
 801a3ea:	685a      	ldr	r2, [r3, #4]
 801a3ec:	bb62      	cbnz	r2, 801a448 <_malloc_r+0xdc>
 801a3ee:	f8c8 7000 	str.w	r7, [r8]
 801a3f2:	e00f      	b.n	801a414 <_malloc_r+0xa8>
 801a3f4:	6822      	ldr	r2, [r4, #0]
 801a3f6:	1b52      	subs	r2, r2, r5
 801a3f8:	d420      	bmi.n	801a43c <_malloc_r+0xd0>
 801a3fa:	2a0b      	cmp	r2, #11
 801a3fc:	d917      	bls.n	801a42e <_malloc_r+0xc2>
 801a3fe:	1961      	adds	r1, r4, r5
 801a400:	42a3      	cmp	r3, r4
 801a402:	6025      	str	r5, [r4, #0]
 801a404:	bf18      	it	ne
 801a406:	6059      	strne	r1, [r3, #4]
 801a408:	6863      	ldr	r3, [r4, #4]
 801a40a:	bf08      	it	eq
 801a40c:	f8c8 1000 	streq.w	r1, [r8]
 801a410:	5162      	str	r2, [r4, r5]
 801a412:	604b      	str	r3, [r1, #4]
 801a414:	4630      	mov	r0, r6
 801a416:	f000 f82f 	bl	801a478 <__malloc_unlock>
 801a41a:	f104 000b 	add.w	r0, r4, #11
 801a41e:	1d23      	adds	r3, r4, #4
 801a420:	f020 0007 	bic.w	r0, r0, #7
 801a424:	1ac2      	subs	r2, r0, r3
 801a426:	bf1c      	itt	ne
 801a428:	1a1b      	subne	r3, r3, r0
 801a42a:	50a3      	strne	r3, [r4, r2]
 801a42c:	e7af      	b.n	801a38e <_malloc_r+0x22>
 801a42e:	6862      	ldr	r2, [r4, #4]
 801a430:	42a3      	cmp	r3, r4
 801a432:	bf0c      	ite	eq
 801a434:	f8c8 2000 	streq.w	r2, [r8]
 801a438:	605a      	strne	r2, [r3, #4]
 801a43a:	e7eb      	b.n	801a414 <_malloc_r+0xa8>
 801a43c:	4623      	mov	r3, r4
 801a43e:	6864      	ldr	r4, [r4, #4]
 801a440:	e7ae      	b.n	801a3a0 <_malloc_r+0x34>
 801a442:	463c      	mov	r4, r7
 801a444:	687f      	ldr	r7, [r7, #4]
 801a446:	e7b6      	b.n	801a3b6 <_malloc_r+0x4a>
 801a448:	461a      	mov	r2, r3
 801a44a:	685b      	ldr	r3, [r3, #4]
 801a44c:	42a3      	cmp	r3, r4
 801a44e:	d1fb      	bne.n	801a448 <_malloc_r+0xdc>
 801a450:	2300      	movs	r3, #0
 801a452:	6053      	str	r3, [r2, #4]
 801a454:	e7de      	b.n	801a414 <_malloc_r+0xa8>
 801a456:	230c      	movs	r3, #12
 801a458:	6033      	str	r3, [r6, #0]
 801a45a:	4630      	mov	r0, r6
 801a45c:	f000 f80c 	bl	801a478 <__malloc_unlock>
 801a460:	e794      	b.n	801a38c <_malloc_r+0x20>
 801a462:	6005      	str	r5, [r0, #0]
 801a464:	e7d6      	b.n	801a414 <_malloc_r+0xa8>
 801a466:	bf00      	nop
 801a468:	2400e0a0 	.word	0x2400e0a0

0801a46c <__malloc_lock>:
 801a46c:	4801      	ldr	r0, [pc, #4]	@ (801a474 <__malloc_lock+0x8>)
 801a46e:	f000 bcf4 	b.w	801ae5a <__retarget_lock_acquire_recursive>
 801a472:	bf00      	nop
 801a474:	2400e1e5 	.word	0x2400e1e5

0801a478 <__malloc_unlock>:
 801a478:	4801      	ldr	r0, [pc, #4]	@ (801a480 <__malloc_unlock+0x8>)
 801a47a:	f000 bcef 	b.w	801ae5c <__retarget_lock_release_recursive>
 801a47e:	bf00      	nop
 801a480:	2400e1e5 	.word	0x2400e1e5

0801a484 <srand>:
 801a484:	b538      	push	{r3, r4, r5, lr}
 801a486:	4b10      	ldr	r3, [pc, #64]	@ (801a4c8 <srand+0x44>)
 801a488:	681d      	ldr	r5, [r3, #0]
 801a48a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a48c:	4604      	mov	r4, r0
 801a48e:	b9b3      	cbnz	r3, 801a4be <srand+0x3a>
 801a490:	2018      	movs	r0, #24
 801a492:	f7ff ff39 	bl	801a308 <malloc>
 801a496:	4602      	mov	r2, r0
 801a498:	6328      	str	r0, [r5, #48]	@ 0x30
 801a49a:	b920      	cbnz	r0, 801a4a6 <srand+0x22>
 801a49c:	4b0b      	ldr	r3, [pc, #44]	@ (801a4cc <srand+0x48>)
 801a49e:	480c      	ldr	r0, [pc, #48]	@ (801a4d0 <srand+0x4c>)
 801a4a0:	2146      	movs	r1, #70	@ 0x46
 801a4a2:	f000 fcf3 	bl	801ae8c <__assert_func>
 801a4a6:	490b      	ldr	r1, [pc, #44]	@ (801a4d4 <srand+0x50>)
 801a4a8:	4b0b      	ldr	r3, [pc, #44]	@ (801a4d8 <srand+0x54>)
 801a4aa:	e9c0 1300 	strd	r1, r3, [r0]
 801a4ae:	4b0b      	ldr	r3, [pc, #44]	@ (801a4dc <srand+0x58>)
 801a4b0:	6083      	str	r3, [r0, #8]
 801a4b2:	230b      	movs	r3, #11
 801a4b4:	8183      	strh	r3, [r0, #12]
 801a4b6:	2100      	movs	r1, #0
 801a4b8:	2001      	movs	r0, #1
 801a4ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a4be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a4c0:	2200      	movs	r2, #0
 801a4c2:	611c      	str	r4, [r3, #16]
 801a4c4:	615a      	str	r2, [r3, #20]
 801a4c6:	bd38      	pop	{r3, r4, r5, pc}
 801a4c8:	240004c0 	.word	0x240004c0
 801a4cc:	0801c9b8 	.word	0x0801c9b8
 801a4d0:	0801c9cf 	.word	0x0801c9cf
 801a4d4:	abcd330e 	.word	0xabcd330e
 801a4d8:	e66d1234 	.word	0xe66d1234
 801a4dc:	0005deec 	.word	0x0005deec

0801a4e0 <rand>:
 801a4e0:	4b16      	ldr	r3, [pc, #88]	@ (801a53c <rand+0x5c>)
 801a4e2:	b510      	push	{r4, lr}
 801a4e4:	681c      	ldr	r4, [r3, #0]
 801a4e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a4e8:	b9b3      	cbnz	r3, 801a518 <rand+0x38>
 801a4ea:	2018      	movs	r0, #24
 801a4ec:	f7ff ff0c 	bl	801a308 <malloc>
 801a4f0:	4602      	mov	r2, r0
 801a4f2:	6320      	str	r0, [r4, #48]	@ 0x30
 801a4f4:	b920      	cbnz	r0, 801a500 <rand+0x20>
 801a4f6:	4b12      	ldr	r3, [pc, #72]	@ (801a540 <rand+0x60>)
 801a4f8:	4812      	ldr	r0, [pc, #72]	@ (801a544 <rand+0x64>)
 801a4fa:	2152      	movs	r1, #82	@ 0x52
 801a4fc:	f000 fcc6 	bl	801ae8c <__assert_func>
 801a500:	4911      	ldr	r1, [pc, #68]	@ (801a548 <rand+0x68>)
 801a502:	4b12      	ldr	r3, [pc, #72]	@ (801a54c <rand+0x6c>)
 801a504:	e9c0 1300 	strd	r1, r3, [r0]
 801a508:	4b11      	ldr	r3, [pc, #68]	@ (801a550 <rand+0x70>)
 801a50a:	6083      	str	r3, [r0, #8]
 801a50c:	230b      	movs	r3, #11
 801a50e:	8183      	strh	r3, [r0, #12]
 801a510:	2100      	movs	r1, #0
 801a512:	2001      	movs	r0, #1
 801a514:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a518:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a51a:	480e      	ldr	r0, [pc, #56]	@ (801a554 <rand+0x74>)
 801a51c:	690b      	ldr	r3, [r1, #16]
 801a51e:	694c      	ldr	r4, [r1, #20]
 801a520:	4a0d      	ldr	r2, [pc, #52]	@ (801a558 <rand+0x78>)
 801a522:	4358      	muls	r0, r3
 801a524:	fb02 0004 	mla	r0, r2, r4, r0
 801a528:	fba3 3202 	umull	r3, r2, r3, r2
 801a52c:	3301      	adds	r3, #1
 801a52e:	eb40 0002 	adc.w	r0, r0, r2
 801a532:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a536:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a53a:	bd10      	pop	{r4, pc}
 801a53c:	240004c0 	.word	0x240004c0
 801a540:	0801c9b8 	.word	0x0801c9b8
 801a544:	0801c9cf 	.word	0x0801c9cf
 801a548:	abcd330e 	.word	0xabcd330e
 801a54c:	e66d1234 	.word	0xe66d1234
 801a550:	0005deec 	.word	0x0005deec
 801a554:	5851f42d 	.word	0x5851f42d
 801a558:	4c957f2d 	.word	0x4c957f2d

0801a55c <realloc>:
 801a55c:	4b02      	ldr	r3, [pc, #8]	@ (801a568 <realloc+0xc>)
 801a55e:	460a      	mov	r2, r1
 801a560:	4601      	mov	r1, r0
 801a562:	6818      	ldr	r0, [r3, #0]
 801a564:	f000 b802 	b.w	801a56c <_realloc_r>
 801a568:	240004c0 	.word	0x240004c0

0801a56c <_realloc_r>:
 801a56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a570:	4607      	mov	r7, r0
 801a572:	4614      	mov	r4, r2
 801a574:	460d      	mov	r5, r1
 801a576:	b921      	cbnz	r1, 801a582 <_realloc_r+0x16>
 801a578:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a57c:	4611      	mov	r1, r2
 801a57e:	f7ff bef5 	b.w	801a36c <_malloc_r>
 801a582:	b92a      	cbnz	r2, 801a590 <_realloc_r+0x24>
 801a584:	f000 fcac 	bl	801aee0 <_free_r>
 801a588:	4625      	mov	r5, r4
 801a58a:	4628      	mov	r0, r5
 801a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a590:	f000 fcf0 	bl	801af74 <_malloc_usable_size_r>
 801a594:	4284      	cmp	r4, r0
 801a596:	4606      	mov	r6, r0
 801a598:	d802      	bhi.n	801a5a0 <_realloc_r+0x34>
 801a59a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a59e:	d8f4      	bhi.n	801a58a <_realloc_r+0x1e>
 801a5a0:	4621      	mov	r1, r4
 801a5a2:	4638      	mov	r0, r7
 801a5a4:	f7ff fee2 	bl	801a36c <_malloc_r>
 801a5a8:	4680      	mov	r8, r0
 801a5aa:	b908      	cbnz	r0, 801a5b0 <_realloc_r+0x44>
 801a5ac:	4645      	mov	r5, r8
 801a5ae:	e7ec      	b.n	801a58a <_realloc_r+0x1e>
 801a5b0:	42b4      	cmp	r4, r6
 801a5b2:	4622      	mov	r2, r4
 801a5b4:	4629      	mov	r1, r5
 801a5b6:	bf28      	it	cs
 801a5b8:	4632      	movcs	r2, r6
 801a5ba:	f000 fc58 	bl	801ae6e <memcpy>
 801a5be:	4629      	mov	r1, r5
 801a5c0:	4638      	mov	r0, r7
 801a5c2:	f000 fc8d 	bl	801aee0 <_free_r>
 801a5c6:	e7f1      	b.n	801a5ac <_realloc_r+0x40>

0801a5c8 <_strtoul_l.isra.0>:
 801a5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5cc:	4e34      	ldr	r6, [pc, #208]	@ (801a6a0 <_strtoul_l.isra.0+0xd8>)
 801a5ce:	4686      	mov	lr, r0
 801a5d0:	460d      	mov	r5, r1
 801a5d2:	4628      	mov	r0, r5
 801a5d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a5d8:	5d37      	ldrb	r7, [r6, r4]
 801a5da:	f017 0708 	ands.w	r7, r7, #8
 801a5de:	d1f8      	bne.n	801a5d2 <_strtoul_l.isra.0+0xa>
 801a5e0:	2c2d      	cmp	r4, #45	@ 0x2d
 801a5e2:	d110      	bne.n	801a606 <_strtoul_l.isra.0+0x3e>
 801a5e4:	782c      	ldrb	r4, [r5, #0]
 801a5e6:	2701      	movs	r7, #1
 801a5e8:	1c85      	adds	r5, r0, #2
 801a5ea:	f033 0010 	bics.w	r0, r3, #16
 801a5ee:	d115      	bne.n	801a61c <_strtoul_l.isra.0+0x54>
 801a5f0:	2c30      	cmp	r4, #48	@ 0x30
 801a5f2:	d10d      	bne.n	801a610 <_strtoul_l.isra.0+0x48>
 801a5f4:	7828      	ldrb	r0, [r5, #0]
 801a5f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801a5fa:	2858      	cmp	r0, #88	@ 0x58
 801a5fc:	d108      	bne.n	801a610 <_strtoul_l.isra.0+0x48>
 801a5fe:	786c      	ldrb	r4, [r5, #1]
 801a600:	3502      	adds	r5, #2
 801a602:	2310      	movs	r3, #16
 801a604:	e00a      	b.n	801a61c <_strtoul_l.isra.0+0x54>
 801a606:	2c2b      	cmp	r4, #43	@ 0x2b
 801a608:	bf04      	itt	eq
 801a60a:	782c      	ldrbeq	r4, [r5, #0]
 801a60c:	1c85      	addeq	r5, r0, #2
 801a60e:	e7ec      	b.n	801a5ea <_strtoul_l.isra.0+0x22>
 801a610:	2b00      	cmp	r3, #0
 801a612:	d1f6      	bne.n	801a602 <_strtoul_l.isra.0+0x3a>
 801a614:	2c30      	cmp	r4, #48	@ 0x30
 801a616:	bf14      	ite	ne
 801a618:	230a      	movne	r3, #10
 801a61a:	2308      	moveq	r3, #8
 801a61c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801a620:	2600      	movs	r6, #0
 801a622:	fbb8 f8f3 	udiv	r8, r8, r3
 801a626:	fb03 f908 	mul.w	r9, r3, r8
 801a62a:	ea6f 0909 	mvn.w	r9, r9
 801a62e:	4630      	mov	r0, r6
 801a630:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a634:	f1bc 0f09 	cmp.w	ip, #9
 801a638:	d810      	bhi.n	801a65c <_strtoul_l.isra.0+0x94>
 801a63a:	4664      	mov	r4, ip
 801a63c:	42a3      	cmp	r3, r4
 801a63e:	dd1e      	ble.n	801a67e <_strtoul_l.isra.0+0xb6>
 801a640:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801a644:	d007      	beq.n	801a656 <_strtoul_l.isra.0+0x8e>
 801a646:	4580      	cmp	r8, r0
 801a648:	d316      	bcc.n	801a678 <_strtoul_l.isra.0+0xb0>
 801a64a:	d101      	bne.n	801a650 <_strtoul_l.isra.0+0x88>
 801a64c:	45a1      	cmp	r9, r4
 801a64e:	db13      	blt.n	801a678 <_strtoul_l.isra.0+0xb0>
 801a650:	fb00 4003 	mla	r0, r0, r3, r4
 801a654:	2601      	movs	r6, #1
 801a656:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a65a:	e7e9      	b.n	801a630 <_strtoul_l.isra.0+0x68>
 801a65c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a660:	f1bc 0f19 	cmp.w	ip, #25
 801a664:	d801      	bhi.n	801a66a <_strtoul_l.isra.0+0xa2>
 801a666:	3c37      	subs	r4, #55	@ 0x37
 801a668:	e7e8      	b.n	801a63c <_strtoul_l.isra.0+0x74>
 801a66a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a66e:	f1bc 0f19 	cmp.w	ip, #25
 801a672:	d804      	bhi.n	801a67e <_strtoul_l.isra.0+0xb6>
 801a674:	3c57      	subs	r4, #87	@ 0x57
 801a676:	e7e1      	b.n	801a63c <_strtoul_l.isra.0+0x74>
 801a678:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a67c:	e7eb      	b.n	801a656 <_strtoul_l.isra.0+0x8e>
 801a67e:	1c73      	adds	r3, r6, #1
 801a680:	d106      	bne.n	801a690 <_strtoul_l.isra.0+0xc8>
 801a682:	2322      	movs	r3, #34	@ 0x22
 801a684:	f8ce 3000 	str.w	r3, [lr]
 801a688:	4630      	mov	r0, r6
 801a68a:	b932      	cbnz	r2, 801a69a <_strtoul_l.isra.0+0xd2>
 801a68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a690:	b107      	cbz	r7, 801a694 <_strtoul_l.isra.0+0xcc>
 801a692:	4240      	negs	r0, r0
 801a694:	2a00      	cmp	r2, #0
 801a696:	d0f9      	beq.n	801a68c <_strtoul_l.isra.0+0xc4>
 801a698:	b106      	cbz	r6, 801a69c <_strtoul_l.isra.0+0xd4>
 801a69a:	1e69      	subs	r1, r5, #1
 801a69c:	6011      	str	r1, [r2, #0]
 801a69e:	e7f5      	b.n	801a68c <_strtoul_l.isra.0+0xc4>
 801a6a0:	0801ca97 	.word	0x0801ca97

0801a6a4 <strtoul>:
 801a6a4:	4613      	mov	r3, r2
 801a6a6:	460a      	mov	r2, r1
 801a6a8:	4601      	mov	r1, r0
 801a6aa:	4802      	ldr	r0, [pc, #8]	@ (801a6b4 <strtoul+0x10>)
 801a6ac:	6800      	ldr	r0, [r0, #0]
 801a6ae:	f7ff bf8b 	b.w	801a5c8 <_strtoul_l.isra.0>
 801a6b2:	bf00      	nop
 801a6b4:	240004c0 	.word	0x240004c0

0801a6b8 <std>:
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	b510      	push	{r4, lr}
 801a6bc:	4604      	mov	r4, r0
 801a6be:	e9c0 3300 	strd	r3, r3, [r0]
 801a6c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a6c6:	6083      	str	r3, [r0, #8]
 801a6c8:	8181      	strh	r1, [r0, #12]
 801a6ca:	6643      	str	r3, [r0, #100]	@ 0x64
 801a6cc:	81c2      	strh	r2, [r0, #14]
 801a6ce:	6183      	str	r3, [r0, #24]
 801a6d0:	4619      	mov	r1, r3
 801a6d2:	2208      	movs	r2, #8
 801a6d4:	305c      	adds	r0, #92	@ 0x5c
 801a6d6:	f000 fa91 	bl	801abfc <memset>
 801a6da:	4b0d      	ldr	r3, [pc, #52]	@ (801a710 <std+0x58>)
 801a6dc:	6263      	str	r3, [r4, #36]	@ 0x24
 801a6de:	4b0d      	ldr	r3, [pc, #52]	@ (801a714 <std+0x5c>)
 801a6e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a6e2:	4b0d      	ldr	r3, [pc, #52]	@ (801a718 <std+0x60>)
 801a6e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a6e6:	4b0d      	ldr	r3, [pc, #52]	@ (801a71c <std+0x64>)
 801a6e8:	6323      	str	r3, [r4, #48]	@ 0x30
 801a6ea:	4b0d      	ldr	r3, [pc, #52]	@ (801a720 <std+0x68>)
 801a6ec:	6224      	str	r4, [r4, #32]
 801a6ee:	429c      	cmp	r4, r3
 801a6f0:	d006      	beq.n	801a700 <std+0x48>
 801a6f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a6f6:	4294      	cmp	r4, r2
 801a6f8:	d002      	beq.n	801a700 <std+0x48>
 801a6fa:	33d0      	adds	r3, #208	@ 0xd0
 801a6fc:	429c      	cmp	r4, r3
 801a6fe:	d105      	bne.n	801a70c <std+0x54>
 801a700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a708:	f000 bba6 	b.w	801ae58 <__retarget_lock_init_recursive>
 801a70c:	bd10      	pop	{r4, pc}
 801a70e:	bf00      	nop
 801a710:	0801a981 	.word	0x0801a981
 801a714:	0801a9a3 	.word	0x0801a9a3
 801a718:	0801a9db 	.word	0x0801a9db
 801a71c:	0801a9ff 	.word	0x0801a9ff
 801a720:	2400e0a4 	.word	0x2400e0a4

0801a724 <stdio_exit_handler>:
 801a724:	4a02      	ldr	r2, [pc, #8]	@ (801a730 <stdio_exit_handler+0xc>)
 801a726:	4903      	ldr	r1, [pc, #12]	@ (801a734 <stdio_exit_handler+0x10>)
 801a728:	4803      	ldr	r0, [pc, #12]	@ (801a738 <stdio_exit_handler+0x14>)
 801a72a:	f000 b869 	b.w	801a800 <_fwalk_sglue>
 801a72e:	bf00      	nop
 801a730:	240004b4 	.word	0x240004b4
 801a734:	0801b8d9 	.word	0x0801b8d9
 801a738:	240004c4 	.word	0x240004c4

0801a73c <cleanup_stdio>:
 801a73c:	6841      	ldr	r1, [r0, #4]
 801a73e:	4b0c      	ldr	r3, [pc, #48]	@ (801a770 <cleanup_stdio+0x34>)
 801a740:	4299      	cmp	r1, r3
 801a742:	b510      	push	{r4, lr}
 801a744:	4604      	mov	r4, r0
 801a746:	d001      	beq.n	801a74c <cleanup_stdio+0x10>
 801a748:	f001 f8c6 	bl	801b8d8 <_fflush_r>
 801a74c:	68a1      	ldr	r1, [r4, #8]
 801a74e:	4b09      	ldr	r3, [pc, #36]	@ (801a774 <cleanup_stdio+0x38>)
 801a750:	4299      	cmp	r1, r3
 801a752:	d002      	beq.n	801a75a <cleanup_stdio+0x1e>
 801a754:	4620      	mov	r0, r4
 801a756:	f001 f8bf 	bl	801b8d8 <_fflush_r>
 801a75a:	68e1      	ldr	r1, [r4, #12]
 801a75c:	4b06      	ldr	r3, [pc, #24]	@ (801a778 <cleanup_stdio+0x3c>)
 801a75e:	4299      	cmp	r1, r3
 801a760:	d004      	beq.n	801a76c <cleanup_stdio+0x30>
 801a762:	4620      	mov	r0, r4
 801a764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a768:	f001 b8b6 	b.w	801b8d8 <_fflush_r>
 801a76c:	bd10      	pop	{r4, pc}
 801a76e:	bf00      	nop
 801a770:	2400e0a4 	.word	0x2400e0a4
 801a774:	2400e10c 	.word	0x2400e10c
 801a778:	2400e174 	.word	0x2400e174

0801a77c <global_stdio_init.part.0>:
 801a77c:	b510      	push	{r4, lr}
 801a77e:	4b0b      	ldr	r3, [pc, #44]	@ (801a7ac <global_stdio_init.part.0+0x30>)
 801a780:	4c0b      	ldr	r4, [pc, #44]	@ (801a7b0 <global_stdio_init.part.0+0x34>)
 801a782:	4a0c      	ldr	r2, [pc, #48]	@ (801a7b4 <global_stdio_init.part.0+0x38>)
 801a784:	601a      	str	r2, [r3, #0]
 801a786:	4620      	mov	r0, r4
 801a788:	2200      	movs	r2, #0
 801a78a:	2104      	movs	r1, #4
 801a78c:	f7ff ff94 	bl	801a6b8 <std>
 801a790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a794:	2201      	movs	r2, #1
 801a796:	2109      	movs	r1, #9
 801a798:	f7ff ff8e 	bl	801a6b8 <std>
 801a79c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a7a0:	2202      	movs	r2, #2
 801a7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7a6:	2112      	movs	r1, #18
 801a7a8:	f7ff bf86 	b.w	801a6b8 <std>
 801a7ac:	2400e1dc 	.word	0x2400e1dc
 801a7b0:	2400e0a4 	.word	0x2400e0a4
 801a7b4:	0801a725 	.word	0x0801a725

0801a7b8 <__sfp_lock_acquire>:
 801a7b8:	4801      	ldr	r0, [pc, #4]	@ (801a7c0 <__sfp_lock_acquire+0x8>)
 801a7ba:	f000 bb4e 	b.w	801ae5a <__retarget_lock_acquire_recursive>
 801a7be:	bf00      	nop
 801a7c0:	2400e1e6 	.word	0x2400e1e6

0801a7c4 <__sfp_lock_release>:
 801a7c4:	4801      	ldr	r0, [pc, #4]	@ (801a7cc <__sfp_lock_release+0x8>)
 801a7c6:	f000 bb49 	b.w	801ae5c <__retarget_lock_release_recursive>
 801a7ca:	bf00      	nop
 801a7cc:	2400e1e6 	.word	0x2400e1e6

0801a7d0 <__sinit>:
 801a7d0:	b510      	push	{r4, lr}
 801a7d2:	4604      	mov	r4, r0
 801a7d4:	f7ff fff0 	bl	801a7b8 <__sfp_lock_acquire>
 801a7d8:	6a23      	ldr	r3, [r4, #32]
 801a7da:	b11b      	cbz	r3, 801a7e4 <__sinit+0x14>
 801a7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7e0:	f7ff bff0 	b.w	801a7c4 <__sfp_lock_release>
 801a7e4:	4b04      	ldr	r3, [pc, #16]	@ (801a7f8 <__sinit+0x28>)
 801a7e6:	6223      	str	r3, [r4, #32]
 801a7e8:	4b04      	ldr	r3, [pc, #16]	@ (801a7fc <__sinit+0x2c>)
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d1f5      	bne.n	801a7dc <__sinit+0xc>
 801a7f0:	f7ff ffc4 	bl	801a77c <global_stdio_init.part.0>
 801a7f4:	e7f2      	b.n	801a7dc <__sinit+0xc>
 801a7f6:	bf00      	nop
 801a7f8:	0801a73d 	.word	0x0801a73d
 801a7fc:	2400e1dc 	.word	0x2400e1dc

0801a800 <_fwalk_sglue>:
 801a800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a804:	4607      	mov	r7, r0
 801a806:	4688      	mov	r8, r1
 801a808:	4614      	mov	r4, r2
 801a80a:	2600      	movs	r6, #0
 801a80c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a810:	f1b9 0901 	subs.w	r9, r9, #1
 801a814:	d505      	bpl.n	801a822 <_fwalk_sglue+0x22>
 801a816:	6824      	ldr	r4, [r4, #0]
 801a818:	2c00      	cmp	r4, #0
 801a81a:	d1f7      	bne.n	801a80c <_fwalk_sglue+0xc>
 801a81c:	4630      	mov	r0, r6
 801a81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a822:	89ab      	ldrh	r3, [r5, #12]
 801a824:	2b01      	cmp	r3, #1
 801a826:	d907      	bls.n	801a838 <_fwalk_sglue+0x38>
 801a828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a82c:	3301      	adds	r3, #1
 801a82e:	d003      	beq.n	801a838 <_fwalk_sglue+0x38>
 801a830:	4629      	mov	r1, r5
 801a832:	4638      	mov	r0, r7
 801a834:	47c0      	blx	r8
 801a836:	4306      	orrs	r6, r0
 801a838:	3568      	adds	r5, #104	@ 0x68
 801a83a:	e7e9      	b.n	801a810 <_fwalk_sglue+0x10>

0801a83c <_fwrite_r>:
 801a83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a840:	9c08      	ldr	r4, [sp, #32]
 801a842:	468a      	mov	sl, r1
 801a844:	4690      	mov	r8, r2
 801a846:	fb02 f903 	mul.w	r9, r2, r3
 801a84a:	4606      	mov	r6, r0
 801a84c:	b118      	cbz	r0, 801a856 <_fwrite_r+0x1a>
 801a84e:	6a03      	ldr	r3, [r0, #32]
 801a850:	b90b      	cbnz	r3, 801a856 <_fwrite_r+0x1a>
 801a852:	f7ff ffbd 	bl	801a7d0 <__sinit>
 801a856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a858:	07dd      	lsls	r5, r3, #31
 801a85a:	d405      	bmi.n	801a868 <_fwrite_r+0x2c>
 801a85c:	89a3      	ldrh	r3, [r4, #12]
 801a85e:	0598      	lsls	r0, r3, #22
 801a860:	d402      	bmi.n	801a868 <_fwrite_r+0x2c>
 801a862:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a864:	f000 faf9 	bl	801ae5a <__retarget_lock_acquire_recursive>
 801a868:	89a3      	ldrh	r3, [r4, #12]
 801a86a:	0719      	lsls	r1, r3, #28
 801a86c:	d516      	bpl.n	801a89c <_fwrite_r+0x60>
 801a86e:	6923      	ldr	r3, [r4, #16]
 801a870:	b1a3      	cbz	r3, 801a89c <_fwrite_r+0x60>
 801a872:	2500      	movs	r5, #0
 801a874:	454d      	cmp	r5, r9
 801a876:	d01f      	beq.n	801a8b8 <_fwrite_r+0x7c>
 801a878:	68a7      	ldr	r7, [r4, #8]
 801a87a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801a87e:	3f01      	subs	r7, #1
 801a880:	2f00      	cmp	r7, #0
 801a882:	60a7      	str	r7, [r4, #8]
 801a884:	da04      	bge.n	801a890 <_fwrite_r+0x54>
 801a886:	69a3      	ldr	r3, [r4, #24]
 801a888:	429f      	cmp	r7, r3
 801a88a:	db0f      	blt.n	801a8ac <_fwrite_r+0x70>
 801a88c:	290a      	cmp	r1, #10
 801a88e:	d00d      	beq.n	801a8ac <_fwrite_r+0x70>
 801a890:	6823      	ldr	r3, [r4, #0]
 801a892:	1c5a      	adds	r2, r3, #1
 801a894:	6022      	str	r2, [r4, #0]
 801a896:	7019      	strb	r1, [r3, #0]
 801a898:	3501      	adds	r5, #1
 801a89a:	e7eb      	b.n	801a874 <_fwrite_r+0x38>
 801a89c:	4621      	mov	r1, r4
 801a89e:	4630      	mov	r0, r6
 801a8a0:	f000 f92c 	bl	801aafc <__swsetup_r>
 801a8a4:	2800      	cmp	r0, #0
 801a8a6:	d0e4      	beq.n	801a872 <_fwrite_r+0x36>
 801a8a8:	2500      	movs	r5, #0
 801a8aa:	e005      	b.n	801a8b8 <_fwrite_r+0x7c>
 801a8ac:	4622      	mov	r2, r4
 801a8ae:	4630      	mov	r0, r6
 801a8b0:	f000 f8e6 	bl	801aa80 <__swbuf_r>
 801a8b4:	3001      	adds	r0, #1
 801a8b6:	d1ef      	bne.n	801a898 <_fwrite_r+0x5c>
 801a8b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a8ba:	07da      	lsls	r2, r3, #31
 801a8bc:	d405      	bmi.n	801a8ca <_fwrite_r+0x8e>
 801a8be:	89a3      	ldrh	r3, [r4, #12]
 801a8c0:	059b      	lsls	r3, r3, #22
 801a8c2:	d402      	bmi.n	801a8ca <_fwrite_r+0x8e>
 801a8c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a8c6:	f000 fac9 	bl	801ae5c <__retarget_lock_release_recursive>
 801a8ca:	fbb5 f0f8 	udiv	r0, r5, r8
 801a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801a8d4 <fwrite>:
 801a8d4:	b507      	push	{r0, r1, r2, lr}
 801a8d6:	9300      	str	r3, [sp, #0]
 801a8d8:	4613      	mov	r3, r2
 801a8da:	460a      	mov	r2, r1
 801a8dc:	4601      	mov	r1, r0
 801a8de:	4803      	ldr	r0, [pc, #12]	@ (801a8ec <fwrite+0x18>)
 801a8e0:	6800      	ldr	r0, [r0, #0]
 801a8e2:	f7ff ffab 	bl	801a83c <_fwrite_r>
 801a8e6:	b003      	add	sp, #12
 801a8e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a8ec:	240004c0 	.word	0x240004c0

0801a8f0 <iprintf>:
 801a8f0:	b40f      	push	{r0, r1, r2, r3}
 801a8f2:	b507      	push	{r0, r1, r2, lr}
 801a8f4:	4906      	ldr	r1, [pc, #24]	@ (801a910 <iprintf+0x20>)
 801a8f6:	ab04      	add	r3, sp, #16
 801a8f8:	6808      	ldr	r0, [r1, #0]
 801a8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8fe:	6881      	ldr	r1, [r0, #8]
 801a900:	9301      	str	r3, [sp, #4]
 801a902:	f000 fcc1 	bl	801b288 <_vfiprintf_r>
 801a906:	b003      	add	sp, #12
 801a908:	f85d eb04 	ldr.w	lr, [sp], #4
 801a90c:	b004      	add	sp, #16
 801a90e:	4770      	bx	lr
 801a910:	240004c0 	.word	0x240004c0

0801a914 <sniprintf>:
 801a914:	b40c      	push	{r2, r3}
 801a916:	b530      	push	{r4, r5, lr}
 801a918:	4b18      	ldr	r3, [pc, #96]	@ (801a97c <sniprintf+0x68>)
 801a91a:	1e0c      	subs	r4, r1, #0
 801a91c:	681d      	ldr	r5, [r3, #0]
 801a91e:	b09d      	sub	sp, #116	@ 0x74
 801a920:	da08      	bge.n	801a934 <sniprintf+0x20>
 801a922:	238b      	movs	r3, #139	@ 0x8b
 801a924:	602b      	str	r3, [r5, #0]
 801a926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a92a:	b01d      	add	sp, #116	@ 0x74
 801a92c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a930:	b002      	add	sp, #8
 801a932:	4770      	bx	lr
 801a934:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a938:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a93c:	f04f 0300 	mov.w	r3, #0
 801a940:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a942:	bf14      	ite	ne
 801a944:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a948:	4623      	moveq	r3, r4
 801a94a:	9304      	str	r3, [sp, #16]
 801a94c:	9307      	str	r3, [sp, #28]
 801a94e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a952:	9002      	str	r0, [sp, #8]
 801a954:	9006      	str	r0, [sp, #24]
 801a956:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a95a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a95c:	ab21      	add	r3, sp, #132	@ 0x84
 801a95e:	a902      	add	r1, sp, #8
 801a960:	4628      	mov	r0, r5
 801a962:	9301      	str	r3, [sp, #4]
 801a964:	f000 fb6a 	bl	801b03c <_svfiprintf_r>
 801a968:	1c43      	adds	r3, r0, #1
 801a96a:	bfbc      	itt	lt
 801a96c:	238b      	movlt	r3, #139	@ 0x8b
 801a96e:	602b      	strlt	r3, [r5, #0]
 801a970:	2c00      	cmp	r4, #0
 801a972:	d0da      	beq.n	801a92a <sniprintf+0x16>
 801a974:	9b02      	ldr	r3, [sp, #8]
 801a976:	2200      	movs	r2, #0
 801a978:	701a      	strb	r2, [r3, #0]
 801a97a:	e7d6      	b.n	801a92a <sniprintf+0x16>
 801a97c:	240004c0 	.word	0x240004c0

0801a980 <__sread>:
 801a980:	b510      	push	{r4, lr}
 801a982:	460c      	mov	r4, r1
 801a984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a988:	f000 fa08 	bl	801ad9c <_read_r>
 801a98c:	2800      	cmp	r0, #0
 801a98e:	bfab      	itete	ge
 801a990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a992:	89a3      	ldrhlt	r3, [r4, #12]
 801a994:	181b      	addge	r3, r3, r0
 801a996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a99a:	bfac      	ite	ge
 801a99c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a99e:	81a3      	strhlt	r3, [r4, #12]
 801a9a0:	bd10      	pop	{r4, pc}

0801a9a2 <__swrite>:
 801a9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9a6:	461f      	mov	r7, r3
 801a9a8:	898b      	ldrh	r3, [r1, #12]
 801a9aa:	05db      	lsls	r3, r3, #23
 801a9ac:	4605      	mov	r5, r0
 801a9ae:	460c      	mov	r4, r1
 801a9b0:	4616      	mov	r6, r2
 801a9b2:	d505      	bpl.n	801a9c0 <__swrite+0x1e>
 801a9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9b8:	2302      	movs	r3, #2
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	f000 f9dc 	bl	801ad78 <_lseek_r>
 801a9c0:	89a3      	ldrh	r3, [r4, #12]
 801a9c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a9c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a9ca:	81a3      	strh	r3, [r4, #12]
 801a9cc:	4632      	mov	r2, r6
 801a9ce:	463b      	mov	r3, r7
 801a9d0:	4628      	mov	r0, r5
 801a9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a9d6:	f000 ba03 	b.w	801ade0 <_write_r>

0801a9da <__sseek>:
 801a9da:	b510      	push	{r4, lr}
 801a9dc:	460c      	mov	r4, r1
 801a9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9e2:	f000 f9c9 	bl	801ad78 <_lseek_r>
 801a9e6:	1c43      	adds	r3, r0, #1
 801a9e8:	89a3      	ldrh	r3, [r4, #12]
 801a9ea:	bf15      	itete	ne
 801a9ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a9ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a9f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a9f6:	81a3      	strheq	r3, [r4, #12]
 801a9f8:	bf18      	it	ne
 801a9fa:	81a3      	strhne	r3, [r4, #12]
 801a9fc:	bd10      	pop	{r4, pc}

0801a9fe <__sclose>:
 801a9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa02:	f000 b94b 	b.w	801ac9c <_close_r>

0801aa06 <_vsniprintf_r>:
 801aa06:	b530      	push	{r4, r5, lr}
 801aa08:	4614      	mov	r4, r2
 801aa0a:	2c00      	cmp	r4, #0
 801aa0c:	b09b      	sub	sp, #108	@ 0x6c
 801aa0e:	4605      	mov	r5, r0
 801aa10:	461a      	mov	r2, r3
 801aa12:	da05      	bge.n	801aa20 <_vsniprintf_r+0x1a>
 801aa14:	238b      	movs	r3, #139	@ 0x8b
 801aa16:	6003      	str	r3, [r0, #0]
 801aa18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801aa1c:	b01b      	add	sp, #108	@ 0x6c
 801aa1e:	bd30      	pop	{r4, r5, pc}
 801aa20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801aa24:	f8ad 300c 	strh.w	r3, [sp, #12]
 801aa28:	f04f 0300 	mov.w	r3, #0
 801aa2c:	9319      	str	r3, [sp, #100]	@ 0x64
 801aa2e:	bf14      	ite	ne
 801aa30:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801aa34:	4623      	moveq	r3, r4
 801aa36:	9302      	str	r3, [sp, #8]
 801aa38:	9305      	str	r3, [sp, #20]
 801aa3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801aa3e:	9100      	str	r1, [sp, #0]
 801aa40:	9104      	str	r1, [sp, #16]
 801aa42:	f8ad 300e 	strh.w	r3, [sp, #14]
 801aa46:	4669      	mov	r1, sp
 801aa48:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801aa4a:	f000 faf7 	bl	801b03c <_svfiprintf_r>
 801aa4e:	1c43      	adds	r3, r0, #1
 801aa50:	bfbc      	itt	lt
 801aa52:	238b      	movlt	r3, #139	@ 0x8b
 801aa54:	602b      	strlt	r3, [r5, #0]
 801aa56:	2c00      	cmp	r4, #0
 801aa58:	d0e0      	beq.n	801aa1c <_vsniprintf_r+0x16>
 801aa5a:	9b00      	ldr	r3, [sp, #0]
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	701a      	strb	r2, [r3, #0]
 801aa60:	e7dc      	b.n	801aa1c <_vsniprintf_r+0x16>
	...

0801aa64 <vsniprintf>:
 801aa64:	b507      	push	{r0, r1, r2, lr}
 801aa66:	9300      	str	r3, [sp, #0]
 801aa68:	4613      	mov	r3, r2
 801aa6a:	460a      	mov	r2, r1
 801aa6c:	4601      	mov	r1, r0
 801aa6e:	4803      	ldr	r0, [pc, #12]	@ (801aa7c <vsniprintf+0x18>)
 801aa70:	6800      	ldr	r0, [r0, #0]
 801aa72:	f7ff ffc8 	bl	801aa06 <_vsniprintf_r>
 801aa76:	b003      	add	sp, #12
 801aa78:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa7c:	240004c0 	.word	0x240004c0

0801aa80 <__swbuf_r>:
 801aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa82:	460e      	mov	r6, r1
 801aa84:	4614      	mov	r4, r2
 801aa86:	4605      	mov	r5, r0
 801aa88:	b118      	cbz	r0, 801aa92 <__swbuf_r+0x12>
 801aa8a:	6a03      	ldr	r3, [r0, #32]
 801aa8c:	b90b      	cbnz	r3, 801aa92 <__swbuf_r+0x12>
 801aa8e:	f7ff fe9f 	bl	801a7d0 <__sinit>
 801aa92:	69a3      	ldr	r3, [r4, #24]
 801aa94:	60a3      	str	r3, [r4, #8]
 801aa96:	89a3      	ldrh	r3, [r4, #12]
 801aa98:	071a      	lsls	r2, r3, #28
 801aa9a:	d501      	bpl.n	801aaa0 <__swbuf_r+0x20>
 801aa9c:	6923      	ldr	r3, [r4, #16]
 801aa9e:	b943      	cbnz	r3, 801aab2 <__swbuf_r+0x32>
 801aaa0:	4621      	mov	r1, r4
 801aaa2:	4628      	mov	r0, r5
 801aaa4:	f000 f82a 	bl	801aafc <__swsetup_r>
 801aaa8:	b118      	cbz	r0, 801aab2 <__swbuf_r+0x32>
 801aaaa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801aaae:	4638      	mov	r0, r7
 801aab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aab2:	6823      	ldr	r3, [r4, #0]
 801aab4:	6922      	ldr	r2, [r4, #16]
 801aab6:	1a98      	subs	r0, r3, r2
 801aab8:	6963      	ldr	r3, [r4, #20]
 801aaba:	b2f6      	uxtb	r6, r6
 801aabc:	4283      	cmp	r3, r0
 801aabe:	4637      	mov	r7, r6
 801aac0:	dc05      	bgt.n	801aace <__swbuf_r+0x4e>
 801aac2:	4621      	mov	r1, r4
 801aac4:	4628      	mov	r0, r5
 801aac6:	f000 ff07 	bl	801b8d8 <_fflush_r>
 801aaca:	2800      	cmp	r0, #0
 801aacc:	d1ed      	bne.n	801aaaa <__swbuf_r+0x2a>
 801aace:	68a3      	ldr	r3, [r4, #8]
 801aad0:	3b01      	subs	r3, #1
 801aad2:	60a3      	str	r3, [r4, #8]
 801aad4:	6823      	ldr	r3, [r4, #0]
 801aad6:	1c5a      	adds	r2, r3, #1
 801aad8:	6022      	str	r2, [r4, #0]
 801aada:	701e      	strb	r6, [r3, #0]
 801aadc:	6962      	ldr	r2, [r4, #20]
 801aade:	1c43      	adds	r3, r0, #1
 801aae0:	429a      	cmp	r2, r3
 801aae2:	d004      	beq.n	801aaee <__swbuf_r+0x6e>
 801aae4:	89a3      	ldrh	r3, [r4, #12]
 801aae6:	07db      	lsls	r3, r3, #31
 801aae8:	d5e1      	bpl.n	801aaae <__swbuf_r+0x2e>
 801aaea:	2e0a      	cmp	r6, #10
 801aaec:	d1df      	bne.n	801aaae <__swbuf_r+0x2e>
 801aaee:	4621      	mov	r1, r4
 801aaf0:	4628      	mov	r0, r5
 801aaf2:	f000 fef1 	bl	801b8d8 <_fflush_r>
 801aaf6:	2800      	cmp	r0, #0
 801aaf8:	d0d9      	beq.n	801aaae <__swbuf_r+0x2e>
 801aafa:	e7d6      	b.n	801aaaa <__swbuf_r+0x2a>

0801aafc <__swsetup_r>:
 801aafc:	b538      	push	{r3, r4, r5, lr}
 801aafe:	4b29      	ldr	r3, [pc, #164]	@ (801aba4 <__swsetup_r+0xa8>)
 801ab00:	4605      	mov	r5, r0
 801ab02:	6818      	ldr	r0, [r3, #0]
 801ab04:	460c      	mov	r4, r1
 801ab06:	b118      	cbz	r0, 801ab10 <__swsetup_r+0x14>
 801ab08:	6a03      	ldr	r3, [r0, #32]
 801ab0a:	b90b      	cbnz	r3, 801ab10 <__swsetup_r+0x14>
 801ab0c:	f7ff fe60 	bl	801a7d0 <__sinit>
 801ab10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab14:	0719      	lsls	r1, r3, #28
 801ab16:	d422      	bmi.n	801ab5e <__swsetup_r+0x62>
 801ab18:	06da      	lsls	r2, r3, #27
 801ab1a:	d407      	bmi.n	801ab2c <__swsetup_r+0x30>
 801ab1c:	2209      	movs	r2, #9
 801ab1e:	602a      	str	r2, [r5, #0]
 801ab20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ab24:	81a3      	strh	r3, [r4, #12]
 801ab26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ab2a:	e033      	b.n	801ab94 <__swsetup_r+0x98>
 801ab2c:	0758      	lsls	r0, r3, #29
 801ab2e:	d512      	bpl.n	801ab56 <__swsetup_r+0x5a>
 801ab30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ab32:	b141      	cbz	r1, 801ab46 <__swsetup_r+0x4a>
 801ab34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ab38:	4299      	cmp	r1, r3
 801ab3a:	d002      	beq.n	801ab42 <__swsetup_r+0x46>
 801ab3c:	4628      	mov	r0, r5
 801ab3e:	f000 f9cf 	bl	801aee0 <_free_r>
 801ab42:	2300      	movs	r3, #0
 801ab44:	6363      	str	r3, [r4, #52]	@ 0x34
 801ab46:	89a3      	ldrh	r3, [r4, #12]
 801ab48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ab4c:	81a3      	strh	r3, [r4, #12]
 801ab4e:	2300      	movs	r3, #0
 801ab50:	6063      	str	r3, [r4, #4]
 801ab52:	6923      	ldr	r3, [r4, #16]
 801ab54:	6023      	str	r3, [r4, #0]
 801ab56:	89a3      	ldrh	r3, [r4, #12]
 801ab58:	f043 0308 	orr.w	r3, r3, #8
 801ab5c:	81a3      	strh	r3, [r4, #12]
 801ab5e:	6923      	ldr	r3, [r4, #16]
 801ab60:	b94b      	cbnz	r3, 801ab76 <__swsetup_r+0x7a>
 801ab62:	89a3      	ldrh	r3, [r4, #12]
 801ab64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ab68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ab6c:	d003      	beq.n	801ab76 <__swsetup_r+0x7a>
 801ab6e:	4621      	mov	r1, r4
 801ab70:	4628      	mov	r0, r5
 801ab72:	f000 ff11 	bl	801b998 <__smakebuf_r>
 801ab76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab7a:	f013 0201 	ands.w	r2, r3, #1
 801ab7e:	d00a      	beq.n	801ab96 <__swsetup_r+0x9a>
 801ab80:	2200      	movs	r2, #0
 801ab82:	60a2      	str	r2, [r4, #8]
 801ab84:	6962      	ldr	r2, [r4, #20]
 801ab86:	4252      	negs	r2, r2
 801ab88:	61a2      	str	r2, [r4, #24]
 801ab8a:	6922      	ldr	r2, [r4, #16]
 801ab8c:	b942      	cbnz	r2, 801aba0 <__swsetup_r+0xa4>
 801ab8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ab92:	d1c5      	bne.n	801ab20 <__swsetup_r+0x24>
 801ab94:	bd38      	pop	{r3, r4, r5, pc}
 801ab96:	0799      	lsls	r1, r3, #30
 801ab98:	bf58      	it	pl
 801ab9a:	6962      	ldrpl	r2, [r4, #20]
 801ab9c:	60a2      	str	r2, [r4, #8]
 801ab9e:	e7f4      	b.n	801ab8a <__swsetup_r+0x8e>
 801aba0:	2000      	movs	r0, #0
 801aba2:	e7f7      	b.n	801ab94 <__swsetup_r+0x98>
 801aba4:	240004c0 	.word	0x240004c0

0801aba8 <memcmp>:
 801aba8:	b510      	push	{r4, lr}
 801abaa:	3901      	subs	r1, #1
 801abac:	4402      	add	r2, r0
 801abae:	4290      	cmp	r0, r2
 801abb0:	d101      	bne.n	801abb6 <memcmp+0xe>
 801abb2:	2000      	movs	r0, #0
 801abb4:	e005      	b.n	801abc2 <memcmp+0x1a>
 801abb6:	7803      	ldrb	r3, [r0, #0]
 801abb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801abbc:	42a3      	cmp	r3, r4
 801abbe:	d001      	beq.n	801abc4 <memcmp+0x1c>
 801abc0:	1b18      	subs	r0, r3, r4
 801abc2:	bd10      	pop	{r4, pc}
 801abc4:	3001      	adds	r0, #1
 801abc6:	e7f2      	b.n	801abae <memcmp+0x6>

0801abc8 <memmove>:
 801abc8:	4288      	cmp	r0, r1
 801abca:	b510      	push	{r4, lr}
 801abcc:	eb01 0402 	add.w	r4, r1, r2
 801abd0:	d902      	bls.n	801abd8 <memmove+0x10>
 801abd2:	4284      	cmp	r4, r0
 801abd4:	4623      	mov	r3, r4
 801abd6:	d807      	bhi.n	801abe8 <memmove+0x20>
 801abd8:	1e43      	subs	r3, r0, #1
 801abda:	42a1      	cmp	r1, r4
 801abdc:	d008      	beq.n	801abf0 <memmove+0x28>
 801abde:	f811 2b01 	ldrb.w	r2, [r1], #1
 801abe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801abe6:	e7f8      	b.n	801abda <memmove+0x12>
 801abe8:	4402      	add	r2, r0
 801abea:	4601      	mov	r1, r0
 801abec:	428a      	cmp	r2, r1
 801abee:	d100      	bne.n	801abf2 <memmove+0x2a>
 801abf0:	bd10      	pop	{r4, pc}
 801abf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801abf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801abfa:	e7f7      	b.n	801abec <memmove+0x24>

0801abfc <memset>:
 801abfc:	4402      	add	r2, r0
 801abfe:	4603      	mov	r3, r0
 801ac00:	4293      	cmp	r3, r2
 801ac02:	d100      	bne.n	801ac06 <memset+0xa>
 801ac04:	4770      	bx	lr
 801ac06:	f803 1b01 	strb.w	r1, [r3], #1
 801ac0a:	e7f9      	b.n	801ac00 <memset+0x4>

0801ac0c <strchr>:
 801ac0c:	b2c9      	uxtb	r1, r1
 801ac0e:	4603      	mov	r3, r0
 801ac10:	4618      	mov	r0, r3
 801ac12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac16:	b112      	cbz	r2, 801ac1e <strchr+0x12>
 801ac18:	428a      	cmp	r2, r1
 801ac1a:	d1f9      	bne.n	801ac10 <strchr+0x4>
 801ac1c:	4770      	bx	lr
 801ac1e:	2900      	cmp	r1, #0
 801ac20:	bf18      	it	ne
 801ac22:	2000      	movne	r0, #0
 801ac24:	4770      	bx	lr

0801ac26 <strncmp>:
 801ac26:	b510      	push	{r4, lr}
 801ac28:	b16a      	cbz	r2, 801ac46 <strncmp+0x20>
 801ac2a:	3901      	subs	r1, #1
 801ac2c:	1884      	adds	r4, r0, r2
 801ac2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ac36:	429a      	cmp	r2, r3
 801ac38:	d103      	bne.n	801ac42 <strncmp+0x1c>
 801ac3a:	42a0      	cmp	r0, r4
 801ac3c:	d001      	beq.n	801ac42 <strncmp+0x1c>
 801ac3e:	2a00      	cmp	r2, #0
 801ac40:	d1f5      	bne.n	801ac2e <strncmp+0x8>
 801ac42:	1ad0      	subs	r0, r2, r3
 801ac44:	bd10      	pop	{r4, pc}
 801ac46:	4610      	mov	r0, r2
 801ac48:	e7fc      	b.n	801ac44 <strncmp+0x1e>

0801ac4a <strncpy>:
 801ac4a:	b510      	push	{r4, lr}
 801ac4c:	3901      	subs	r1, #1
 801ac4e:	4603      	mov	r3, r0
 801ac50:	b132      	cbz	r2, 801ac60 <strncpy+0x16>
 801ac52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ac56:	f803 4b01 	strb.w	r4, [r3], #1
 801ac5a:	3a01      	subs	r2, #1
 801ac5c:	2c00      	cmp	r4, #0
 801ac5e:	d1f7      	bne.n	801ac50 <strncpy+0x6>
 801ac60:	441a      	add	r2, r3
 801ac62:	2100      	movs	r1, #0
 801ac64:	4293      	cmp	r3, r2
 801ac66:	d100      	bne.n	801ac6a <strncpy+0x20>
 801ac68:	bd10      	pop	{r4, pc}
 801ac6a:	f803 1b01 	strb.w	r1, [r3], #1
 801ac6e:	e7f9      	b.n	801ac64 <strncpy+0x1a>

0801ac70 <strstr>:
 801ac70:	780a      	ldrb	r2, [r1, #0]
 801ac72:	b570      	push	{r4, r5, r6, lr}
 801ac74:	b96a      	cbnz	r2, 801ac92 <strstr+0x22>
 801ac76:	bd70      	pop	{r4, r5, r6, pc}
 801ac78:	429a      	cmp	r2, r3
 801ac7a:	d109      	bne.n	801ac90 <strstr+0x20>
 801ac7c:	460c      	mov	r4, r1
 801ac7e:	4605      	mov	r5, r0
 801ac80:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d0f6      	beq.n	801ac76 <strstr+0x6>
 801ac88:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ac8c:	429e      	cmp	r6, r3
 801ac8e:	d0f7      	beq.n	801ac80 <strstr+0x10>
 801ac90:	3001      	adds	r0, #1
 801ac92:	7803      	ldrb	r3, [r0, #0]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d1ef      	bne.n	801ac78 <strstr+0x8>
 801ac98:	4618      	mov	r0, r3
 801ac9a:	e7ec      	b.n	801ac76 <strstr+0x6>

0801ac9c <_close_r>:
 801ac9c:	b538      	push	{r3, r4, r5, lr}
 801ac9e:	4d06      	ldr	r5, [pc, #24]	@ (801acb8 <_close_r+0x1c>)
 801aca0:	2300      	movs	r3, #0
 801aca2:	4604      	mov	r4, r0
 801aca4:	4608      	mov	r0, r1
 801aca6:	602b      	str	r3, [r5, #0]
 801aca8:	f7e6 febe 	bl	8001a28 <_close>
 801acac:	1c43      	adds	r3, r0, #1
 801acae:	d102      	bne.n	801acb6 <_close_r+0x1a>
 801acb0:	682b      	ldr	r3, [r5, #0]
 801acb2:	b103      	cbz	r3, 801acb6 <_close_r+0x1a>
 801acb4:	6023      	str	r3, [r4, #0]
 801acb6:	bd38      	pop	{r3, r4, r5, pc}
 801acb8:	2400e1e0 	.word	0x2400e1e0

0801acbc <_reclaim_reent>:
 801acbc:	4b2d      	ldr	r3, [pc, #180]	@ (801ad74 <_reclaim_reent+0xb8>)
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	4283      	cmp	r3, r0
 801acc2:	b570      	push	{r4, r5, r6, lr}
 801acc4:	4604      	mov	r4, r0
 801acc6:	d053      	beq.n	801ad70 <_reclaim_reent+0xb4>
 801acc8:	69c3      	ldr	r3, [r0, #28]
 801acca:	b31b      	cbz	r3, 801ad14 <_reclaim_reent+0x58>
 801accc:	68db      	ldr	r3, [r3, #12]
 801acce:	b163      	cbz	r3, 801acea <_reclaim_reent+0x2e>
 801acd0:	2500      	movs	r5, #0
 801acd2:	69e3      	ldr	r3, [r4, #28]
 801acd4:	68db      	ldr	r3, [r3, #12]
 801acd6:	5959      	ldr	r1, [r3, r5]
 801acd8:	b9b1      	cbnz	r1, 801ad08 <_reclaim_reent+0x4c>
 801acda:	3504      	adds	r5, #4
 801acdc:	2d80      	cmp	r5, #128	@ 0x80
 801acde:	d1f8      	bne.n	801acd2 <_reclaim_reent+0x16>
 801ace0:	69e3      	ldr	r3, [r4, #28]
 801ace2:	4620      	mov	r0, r4
 801ace4:	68d9      	ldr	r1, [r3, #12]
 801ace6:	f000 f8fb 	bl	801aee0 <_free_r>
 801acea:	69e3      	ldr	r3, [r4, #28]
 801acec:	6819      	ldr	r1, [r3, #0]
 801acee:	b111      	cbz	r1, 801acf6 <_reclaim_reent+0x3a>
 801acf0:	4620      	mov	r0, r4
 801acf2:	f000 f8f5 	bl	801aee0 <_free_r>
 801acf6:	69e3      	ldr	r3, [r4, #28]
 801acf8:	689d      	ldr	r5, [r3, #8]
 801acfa:	b15d      	cbz	r5, 801ad14 <_reclaim_reent+0x58>
 801acfc:	4629      	mov	r1, r5
 801acfe:	4620      	mov	r0, r4
 801ad00:	682d      	ldr	r5, [r5, #0]
 801ad02:	f000 f8ed 	bl	801aee0 <_free_r>
 801ad06:	e7f8      	b.n	801acfa <_reclaim_reent+0x3e>
 801ad08:	680e      	ldr	r6, [r1, #0]
 801ad0a:	4620      	mov	r0, r4
 801ad0c:	f000 f8e8 	bl	801aee0 <_free_r>
 801ad10:	4631      	mov	r1, r6
 801ad12:	e7e1      	b.n	801acd8 <_reclaim_reent+0x1c>
 801ad14:	6961      	ldr	r1, [r4, #20]
 801ad16:	b111      	cbz	r1, 801ad1e <_reclaim_reent+0x62>
 801ad18:	4620      	mov	r0, r4
 801ad1a:	f000 f8e1 	bl	801aee0 <_free_r>
 801ad1e:	69e1      	ldr	r1, [r4, #28]
 801ad20:	b111      	cbz	r1, 801ad28 <_reclaim_reent+0x6c>
 801ad22:	4620      	mov	r0, r4
 801ad24:	f000 f8dc 	bl	801aee0 <_free_r>
 801ad28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ad2a:	b111      	cbz	r1, 801ad32 <_reclaim_reent+0x76>
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	f000 f8d7 	bl	801aee0 <_free_r>
 801ad32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ad34:	b111      	cbz	r1, 801ad3c <_reclaim_reent+0x80>
 801ad36:	4620      	mov	r0, r4
 801ad38:	f000 f8d2 	bl	801aee0 <_free_r>
 801ad3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801ad3e:	b111      	cbz	r1, 801ad46 <_reclaim_reent+0x8a>
 801ad40:	4620      	mov	r0, r4
 801ad42:	f000 f8cd 	bl	801aee0 <_free_r>
 801ad46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801ad48:	b111      	cbz	r1, 801ad50 <_reclaim_reent+0x94>
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f000 f8c8 	bl	801aee0 <_free_r>
 801ad50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801ad52:	b111      	cbz	r1, 801ad5a <_reclaim_reent+0x9e>
 801ad54:	4620      	mov	r0, r4
 801ad56:	f000 f8c3 	bl	801aee0 <_free_r>
 801ad5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ad5c:	b111      	cbz	r1, 801ad64 <_reclaim_reent+0xa8>
 801ad5e:	4620      	mov	r0, r4
 801ad60:	f000 f8be 	bl	801aee0 <_free_r>
 801ad64:	6a23      	ldr	r3, [r4, #32]
 801ad66:	b11b      	cbz	r3, 801ad70 <_reclaim_reent+0xb4>
 801ad68:	4620      	mov	r0, r4
 801ad6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad6e:	4718      	bx	r3
 801ad70:	bd70      	pop	{r4, r5, r6, pc}
 801ad72:	bf00      	nop
 801ad74:	240004c0 	.word	0x240004c0

0801ad78 <_lseek_r>:
 801ad78:	b538      	push	{r3, r4, r5, lr}
 801ad7a:	4d07      	ldr	r5, [pc, #28]	@ (801ad98 <_lseek_r+0x20>)
 801ad7c:	4604      	mov	r4, r0
 801ad7e:	4608      	mov	r0, r1
 801ad80:	4611      	mov	r1, r2
 801ad82:	2200      	movs	r2, #0
 801ad84:	602a      	str	r2, [r5, #0]
 801ad86:	461a      	mov	r2, r3
 801ad88:	f7e6 fe75 	bl	8001a76 <_lseek>
 801ad8c:	1c43      	adds	r3, r0, #1
 801ad8e:	d102      	bne.n	801ad96 <_lseek_r+0x1e>
 801ad90:	682b      	ldr	r3, [r5, #0]
 801ad92:	b103      	cbz	r3, 801ad96 <_lseek_r+0x1e>
 801ad94:	6023      	str	r3, [r4, #0]
 801ad96:	bd38      	pop	{r3, r4, r5, pc}
 801ad98:	2400e1e0 	.word	0x2400e1e0

0801ad9c <_read_r>:
 801ad9c:	b538      	push	{r3, r4, r5, lr}
 801ad9e:	4d07      	ldr	r5, [pc, #28]	@ (801adbc <_read_r+0x20>)
 801ada0:	4604      	mov	r4, r0
 801ada2:	4608      	mov	r0, r1
 801ada4:	4611      	mov	r1, r2
 801ada6:	2200      	movs	r2, #0
 801ada8:	602a      	str	r2, [r5, #0]
 801adaa:	461a      	mov	r2, r3
 801adac:	f7e6 fe1f 	bl	80019ee <_read>
 801adb0:	1c43      	adds	r3, r0, #1
 801adb2:	d102      	bne.n	801adba <_read_r+0x1e>
 801adb4:	682b      	ldr	r3, [r5, #0]
 801adb6:	b103      	cbz	r3, 801adba <_read_r+0x1e>
 801adb8:	6023      	str	r3, [r4, #0]
 801adba:	bd38      	pop	{r3, r4, r5, pc}
 801adbc:	2400e1e0 	.word	0x2400e1e0

0801adc0 <_sbrk_r>:
 801adc0:	b538      	push	{r3, r4, r5, lr}
 801adc2:	4d06      	ldr	r5, [pc, #24]	@ (801addc <_sbrk_r+0x1c>)
 801adc4:	2300      	movs	r3, #0
 801adc6:	4604      	mov	r4, r0
 801adc8:	4608      	mov	r0, r1
 801adca:	602b      	str	r3, [r5, #0]
 801adcc:	f7e6 fe60 	bl	8001a90 <_sbrk>
 801add0:	1c43      	adds	r3, r0, #1
 801add2:	d102      	bne.n	801adda <_sbrk_r+0x1a>
 801add4:	682b      	ldr	r3, [r5, #0]
 801add6:	b103      	cbz	r3, 801adda <_sbrk_r+0x1a>
 801add8:	6023      	str	r3, [r4, #0]
 801adda:	bd38      	pop	{r3, r4, r5, pc}
 801addc:	2400e1e0 	.word	0x2400e1e0

0801ade0 <_write_r>:
 801ade0:	b538      	push	{r3, r4, r5, lr}
 801ade2:	4d07      	ldr	r5, [pc, #28]	@ (801ae00 <_write_r+0x20>)
 801ade4:	4604      	mov	r4, r0
 801ade6:	4608      	mov	r0, r1
 801ade8:	4611      	mov	r1, r2
 801adea:	2200      	movs	r2, #0
 801adec:	602a      	str	r2, [r5, #0]
 801adee:	461a      	mov	r2, r3
 801adf0:	f7e6 f9c4 	bl	800117c <_write>
 801adf4:	1c43      	adds	r3, r0, #1
 801adf6:	d102      	bne.n	801adfe <_write_r+0x1e>
 801adf8:	682b      	ldr	r3, [r5, #0]
 801adfa:	b103      	cbz	r3, 801adfe <_write_r+0x1e>
 801adfc:	6023      	str	r3, [r4, #0]
 801adfe:	bd38      	pop	{r3, r4, r5, pc}
 801ae00:	2400e1e0 	.word	0x2400e1e0

0801ae04 <__errno>:
 801ae04:	4b01      	ldr	r3, [pc, #4]	@ (801ae0c <__errno+0x8>)
 801ae06:	6818      	ldr	r0, [r3, #0]
 801ae08:	4770      	bx	lr
 801ae0a:	bf00      	nop
 801ae0c:	240004c0 	.word	0x240004c0

0801ae10 <__libc_init_array>:
 801ae10:	b570      	push	{r4, r5, r6, lr}
 801ae12:	4d0d      	ldr	r5, [pc, #52]	@ (801ae48 <__libc_init_array+0x38>)
 801ae14:	4c0d      	ldr	r4, [pc, #52]	@ (801ae4c <__libc_init_array+0x3c>)
 801ae16:	1b64      	subs	r4, r4, r5
 801ae18:	10a4      	asrs	r4, r4, #2
 801ae1a:	2600      	movs	r6, #0
 801ae1c:	42a6      	cmp	r6, r4
 801ae1e:	d109      	bne.n	801ae34 <__libc_init_array+0x24>
 801ae20:	4d0b      	ldr	r5, [pc, #44]	@ (801ae50 <__libc_init_array+0x40>)
 801ae22:	4c0c      	ldr	r4, [pc, #48]	@ (801ae54 <__libc_init_array+0x44>)
 801ae24:	f000 fe62 	bl	801baec <_init>
 801ae28:	1b64      	subs	r4, r4, r5
 801ae2a:	10a4      	asrs	r4, r4, #2
 801ae2c:	2600      	movs	r6, #0
 801ae2e:	42a6      	cmp	r6, r4
 801ae30:	d105      	bne.n	801ae3e <__libc_init_array+0x2e>
 801ae32:	bd70      	pop	{r4, r5, r6, pc}
 801ae34:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae38:	4798      	blx	r3
 801ae3a:	3601      	adds	r6, #1
 801ae3c:	e7ee      	b.n	801ae1c <__libc_init_array+0xc>
 801ae3e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae42:	4798      	blx	r3
 801ae44:	3601      	adds	r6, #1
 801ae46:	e7f2      	b.n	801ae2e <__libc_init_array+0x1e>
 801ae48:	0801cba0 	.word	0x0801cba0
 801ae4c:	0801cba0 	.word	0x0801cba0
 801ae50:	0801cba0 	.word	0x0801cba0
 801ae54:	0801cbac 	.word	0x0801cbac

0801ae58 <__retarget_lock_init_recursive>:
 801ae58:	4770      	bx	lr

0801ae5a <__retarget_lock_acquire_recursive>:
 801ae5a:	4770      	bx	lr

0801ae5c <__retarget_lock_release_recursive>:
 801ae5c:	4770      	bx	lr

0801ae5e <strcpy>:
 801ae5e:	4603      	mov	r3, r0
 801ae60:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae64:	f803 2b01 	strb.w	r2, [r3], #1
 801ae68:	2a00      	cmp	r2, #0
 801ae6a:	d1f9      	bne.n	801ae60 <strcpy+0x2>
 801ae6c:	4770      	bx	lr

0801ae6e <memcpy>:
 801ae6e:	440a      	add	r2, r1
 801ae70:	4291      	cmp	r1, r2
 801ae72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801ae76:	d100      	bne.n	801ae7a <memcpy+0xc>
 801ae78:	4770      	bx	lr
 801ae7a:	b510      	push	{r4, lr}
 801ae7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae80:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ae84:	4291      	cmp	r1, r2
 801ae86:	d1f9      	bne.n	801ae7c <memcpy+0xe>
 801ae88:	bd10      	pop	{r4, pc}
	...

0801ae8c <__assert_func>:
 801ae8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae8e:	4614      	mov	r4, r2
 801ae90:	461a      	mov	r2, r3
 801ae92:	4b09      	ldr	r3, [pc, #36]	@ (801aeb8 <__assert_func+0x2c>)
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	4605      	mov	r5, r0
 801ae98:	68d8      	ldr	r0, [r3, #12]
 801ae9a:	b14c      	cbz	r4, 801aeb0 <__assert_func+0x24>
 801ae9c:	4b07      	ldr	r3, [pc, #28]	@ (801aebc <__assert_func+0x30>)
 801ae9e:	9100      	str	r1, [sp, #0]
 801aea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801aea4:	4906      	ldr	r1, [pc, #24]	@ (801aec0 <__assert_func+0x34>)
 801aea6:	462b      	mov	r3, r5
 801aea8:	f000 fd3e 	bl	801b928 <fiprintf>
 801aeac:	f000 fdd2 	bl	801ba54 <abort>
 801aeb0:	4b04      	ldr	r3, [pc, #16]	@ (801aec4 <__assert_func+0x38>)
 801aeb2:	461c      	mov	r4, r3
 801aeb4:	e7f3      	b.n	801ae9e <__assert_func+0x12>
 801aeb6:	bf00      	nop
 801aeb8:	240004c0 	.word	0x240004c0
 801aebc:	0801ca27 	.word	0x0801ca27
 801aec0:	0801ca34 	.word	0x0801ca34
 801aec4:	0801ca62 	.word	0x0801ca62

0801aec8 <__env_lock>:
 801aec8:	4801      	ldr	r0, [pc, #4]	@ (801aed0 <__env_lock+0x8>)
 801aeca:	f7ff bfc6 	b.w	801ae5a <__retarget_lock_acquire_recursive>
 801aece:	bf00      	nop
 801aed0:	2400e1e4 	.word	0x2400e1e4

0801aed4 <__env_unlock>:
 801aed4:	4801      	ldr	r0, [pc, #4]	@ (801aedc <__env_unlock+0x8>)
 801aed6:	f7ff bfc1 	b.w	801ae5c <__retarget_lock_release_recursive>
 801aeda:	bf00      	nop
 801aedc:	2400e1e4 	.word	0x2400e1e4

0801aee0 <_free_r>:
 801aee0:	b538      	push	{r3, r4, r5, lr}
 801aee2:	4605      	mov	r5, r0
 801aee4:	2900      	cmp	r1, #0
 801aee6:	d041      	beq.n	801af6c <_free_r+0x8c>
 801aee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aeec:	1f0c      	subs	r4, r1, #4
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	bfb8      	it	lt
 801aef2:	18e4      	addlt	r4, r4, r3
 801aef4:	f7ff faba 	bl	801a46c <__malloc_lock>
 801aef8:	4a1d      	ldr	r2, [pc, #116]	@ (801af70 <_free_r+0x90>)
 801aefa:	6813      	ldr	r3, [r2, #0]
 801aefc:	b933      	cbnz	r3, 801af0c <_free_r+0x2c>
 801aefe:	6063      	str	r3, [r4, #4]
 801af00:	6014      	str	r4, [r2, #0]
 801af02:	4628      	mov	r0, r5
 801af04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af08:	f7ff bab6 	b.w	801a478 <__malloc_unlock>
 801af0c:	42a3      	cmp	r3, r4
 801af0e:	d908      	bls.n	801af22 <_free_r+0x42>
 801af10:	6820      	ldr	r0, [r4, #0]
 801af12:	1821      	adds	r1, r4, r0
 801af14:	428b      	cmp	r3, r1
 801af16:	bf01      	itttt	eq
 801af18:	6819      	ldreq	r1, [r3, #0]
 801af1a:	685b      	ldreq	r3, [r3, #4]
 801af1c:	1809      	addeq	r1, r1, r0
 801af1e:	6021      	streq	r1, [r4, #0]
 801af20:	e7ed      	b.n	801aefe <_free_r+0x1e>
 801af22:	461a      	mov	r2, r3
 801af24:	685b      	ldr	r3, [r3, #4]
 801af26:	b10b      	cbz	r3, 801af2c <_free_r+0x4c>
 801af28:	42a3      	cmp	r3, r4
 801af2a:	d9fa      	bls.n	801af22 <_free_r+0x42>
 801af2c:	6811      	ldr	r1, [r2, #0]
 801af2e:	1850      	adds	r0, r2, r1
 801af30:	42a0      	cmp	r0, r4
 801af32:	d10b      	bne.n	801af4c <_free_r+0x6c>
 801af34:	6820      	ldr	r0, [r4, #0]
 801af36:	4401      	add	r1, r0
 801af38:	1850      	adds	r0, r2, r1
 801af3a:	4283      	cmp	r3, r0
 801af3c:	6011      	str	r1, [r2, #0]
 801af3e:	d1e0      	bne.n	801af02 <_free_r+0x22>
 801af40:	6818      	ldr	r0, [r3, #0]
 801af42:	685b      	ldr	r3, [r3, #4]
 801af44:	6053      	str	r3, [r2, #4]
 801af46:	4408      	add	r0, r1
 801af48:	6010      	str	r0, [r2, #0]
 801af4a:	e7da      	b.n	801af02 <_free_r+0x22>
 801af4c:	d902      	bls.n	801af54 <_free_r+0x74>
 801af4e:	230c      	movs	r3, #12
 801af50:	602b      	str	r3, [r5, #0]
 801af52:	e7d6      	b.n	801af02 <_free_r+0x22>
 801af54:	6820      	ldr	r0, [r4, #0]
 801af56:	1821      	adds	r1, r4, r0
 801af58:	428b      	cmp	r3, r1
 801af5a:	bf04      	itt	eq
 801af5c:	6819      	ldreq	r1, [r3, #0]
 801af5e:	685b      	ldreq	r3, [r3, #4]
 801af60:	6063      	str	r3, [r4, #4]
 801af62:	bf04      	itt	eq
 801af64:	1809      	addeq	r1, r1, r0
 801af66:	6021      	streq	r1, [r4, #0]
 801af68:	6054      	str	r4, [r2, #4]
 801af6a:	e7ca      	b.n	801af02 <_free_r+0x22>
 801af6c:	bd38      	pop	{r3, r4, r5, pc}
 801af6e:	bf00      	nop
 801af70:	2400e0a0 	.word	0x2400e0a0

0801af74 <_malloc_usable_size_r>:
 801af74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af78:	1f18      	subs	r0, r3, #4
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	bfbc      	itt	lt
 801af7e:	580b      	ldrlt	r3, [r1, r0]
 801af80:	18c0      	addlt	r0, r0, r3
 801af82:	4770      	bx	lr

0801af84 <__ssputs_r>:
 801af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af88:	688e      	ldr	r6, [r1, #8]
 801af8a:	461f      	mov	r7, r3
 801af8c:	42be      	cmp	r6, r7
 801af8e:	680b      	ldr	r3, [r1, #0]
 801af90:	4682      	mov	sl, r0
 801af92:	460c      	mov	r4, r1
 801af94:	4690      	mov	r8, r2
 801af96:	d82d      	bhi.n	801aff4 <__ssputs_r+0x70>
 801af98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801af9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801afa0:	d026      	beq.n	801aff0 <__ssputs_r+0x6c>
 801afa2:	6965      	ldr	r5, [r4, #20]
 801afa4:	6909      	ldr	r1, [r1, #16]
 801afa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801afaa:	eba3 0901 	sub.w	r9, r3, r1
 801afae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801afb2:	1c7b      	adds	r3, r7, #1
 801afb4:	444b      	add	r3, r9
 801afb6:	106d      	asrs	r5, r5, #1
 801afb8:	429d      	cmp	r5, r3
 801afba:	bf38      	it	cc
 801afbc:	461d      	movcc	r5, r3
 801afbe:	0553      	lsls	r3, r2, #21
 801afc0:	d527      	bpl.n	801b012 <__ssputs_r+0x8e>
 801afc2:	4629      	mov	r1, r5
 801afc4:	f7ff f9d2 	bl	801a36c <_malloc_r>
 801afc8:	4606      	mov	r6, r0
 801afca:	b360      	cbz	r0, 801b026 <__ssputs_r+0xa2>
 801afcc:	6921      	ldr	r1, [r4, #16]
 801afce:	464a      	mov	r2, r9
 801afd0:	f7ff ff4d 	bl	801ae6e <memcpy>
 801afd4:	89a3      	ldrh	r3, [r4, #12]
 801afd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801afda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801afde:	81a3      	strh	r3, [r4, #12]
 801afe0:	6126      	str	r6, [r4, #16]
 801afe2:	6165      	str	r5, [r4, #20]
 801afe4:	444e      	add	r6, r9
 801afe6:	eba5 0509 	sub.w	r5, r5, r9
 801afea:	6026      	str	r6, [r4, #0]
 801afec:	60a5      	str	r5, [r4, #8]
 801afee:	463e      	mov	r6, r7
 801aff0:	42be      	cmp	r6, r7
 801aff2:	d900      	bls.n	801aff6 <__ssputs_r+0x72>
 801aff4:	463e      	mov	r6, r7
 801aff6:	6820      	ldr	r0, [r4, #0]
 801aff8:	4632      	mov	r2, r6
 801affa:	4641      	mov	r1, r8
 801affc:	f7ff fde4 	bl	801abc8 <memmove>
 801b000:	68a3      	ldr	r3, [r4, #8]
 801b002:	1b9b      	subs	r3, r3, r6
 801b004:	60a3      	str	r3, [r4, #8]
 801b006:	6823      	ldr	r3, [r4, #0]
 801b008:	4433      	add	r3, r6
 801b00a:	6023      	str	r3, [r4, #0]
 801b00c:	2000      	movs	r0, #0
 801b00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b012:	462a      	mov	r2, r5
 801b014:	f7ff faaa 	bl	801a56c <_realloc_r>
 801b018:	4606      	mov	r6, r0
 801b01a:	2800      	cmp	r0, #0
 801b01c:	d1e0      	bne.n	801afe0 <__ssputs_r+0x5c>
 801b01e:	6921      	ldr	r1, [r4, #16]
 801b020:	4650      	mov	r0, sl
 801b022:	f7ff ff5d 	bl	801aee0 <_free_r>
 801b026:	230c      	movs	r3, #12
 801b028:	f8ca 3000 	str.w	r3, [sl]
 801b02c:	89a3      	ldrh	r3, [r4, #12]
 801b02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b032:	81a3      	strh	r3, [r4, #12]
 801b034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b038:	e7e9      	b.n	801b00e <__ssputs_r+0x8a>
	...

0801b03c <_svfiprintf_r>:
 801b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b040:	4698      	mov	r8, r3
 801b042:	898b      	ldrh	r3, [r1, #12]
 801b044:	061b      	lsls	r3, r3, #24
 801b046:	b09d      	sub	sp, #116	@ 0x74
 801b048:	4607      	mov	r7, r0
 801b04a:	460d      	mov	r5, r1
 801b04c:	4614      	mov	r4, r2
 801b04e:	d510      	bpl.n	801b072 <_svfiprintf_r+0x36>
 801b050:	690b      	ldr	r3, [r1, #16]
 801b052:	b973      	cbnz	r3, 801b072 <_svfiprintf_r+0x36>
 801b054:	2140      	movs	r1, #64	@ 0x40
 801b056:	f7ff f989 	bl	801a36c <_malloc_r>
 801b05a:	6028      	str	r0, [r5, #0]
 801b05c:	6128      	str	r0, [r5, #16]
 801b05e:	b930      	cbnz	r0, 801b06e <_svfiprintf_r+0x32>
 801b060:	230c      	movs	r3, #12
 801b062:	603b      	str	r3, [r7, #0]
 801b064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b068:	b01d      	add	sp, #116	@ 0x74
 801b06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b06e:	2340      	movs	r3, #64	@ 0x40
 801b070:	616b      	str	r3, [r5, #20]
 801b072:	2300      	movs	r3, #0
 801b074:	9309      	str	r3, [sp, #36]	@ 0x24
 801b076:	2320      	movs	r3, #32
 801b078:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b07c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b080:	2330      	movs	r3, #48	@ 0x30
 801b082:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b220 <_svfiprintf_r+0x1e4>
 801b086:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b08a:	f04f 0901 	mov.w	r9, #1
 801b08e:	4623      	mov	r3, r4
 801b090:	469a      	mov	sl, r3
 801b092:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b096:	b10a      	cbz	r2, 801b09c <_svfiprintf_r+0x60>
 801b098:	2a25      	cmp	r2, #37	@ 0x25
 801b09a:	d1f9      	bne.n	801b090 <_svfiprintf_r+0x54>
 801b09c:	ebba 0b04 	subs.w	fp, sl, r4
 801b0a0:	d00b      	beq.n	801b0ba <_svfiprintf_r+0x7e>
 801b0a2:	465b      	mov	r3, fp
 801b0a4:	4622      	mov	r2, r4
 801b0a6:	4629      	mov	r1, r5
 801b0a8:	4638      	mov	r0, r7
 801b0aa:	f7ff ff6b 	bl	801af84 <__ssputs_r>
 801b0ae:	3001      	adds	r0, #1
 801b0b0:	f000 80a7 	beq.w	801b202 <_svfiprintf_r+0x1c6>
 801b0b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b0b6:	445a      	add	r2, fp
 801b0b8:	9209      	str	r2, [sp, #36]	@ 0x24
 801b0ba:	f89a 3000 	ldrb.w	r3, [sl]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	f000 809f 	beq.w	801b202 <_svfiprintf_r+0x1c6>
 801b0c4:	2300      	movs	r3, #0
 801b0c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b0ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b0ce:	f10a 0a01 	add.w	sl, sl, #1
 801b0d2:	9304      	str	r3, [sp, #16]
 801b0d4:	9307      	str	r3, [sp, #28]
 801b0d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b0da:	931a      	str	r3, [sp, #104]	@ 0x68
 801b0dc:	4654      	mov	r4, sl
 801b0de:	2205      	movs	r2, #5
 801b0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0e4:	484e      	ldr	r0, [pc, #312]	@ (801b220 <_svfiprintf_r+0x1e4>)
 801b0e6:	f7e5 f913 	bl	8000310 <memchr>
 801b0ea:	9a04      	ldr	r2, [sp, #16]
 801b0ec:	b9d8      	cbnz	r0, 801b126 <_svfiprintf_r+0xea>
 801b0ee:	06d0      	lsls	r0, r2, #27
 801b0f0:	bf44      	itt	mi
 801b0f2:	2320      	movmi	r3, #32
 801b0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b0f8:	0711      	lsls	r1, r2, #28
 801b0fa:	bf44      	itt	mi
 801b0fc:	232b      	movmi	r3, #43	@ 0x2b
 801b0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b102:	f89a 3000 	ldrb.w	r3, [sl]
 801b106:	2b2a      	cmp	r3, #42	@ 0x2a
 801b108:	d015      	beq.n	801b136 <_svfiprintf_r+0xfa>
 801b10a:	9a07      	ldr	r2, [sp, #28]
 801b10c:	4654      	mov	r4, sl
 801b10e:	2000      	movs	r0, #0
 801b110:	f04f 0c0a 	mov.w	ip, #10
 801b114:	4621      	mov	r1, r4
 801b116:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b11a:	3b30      	subs	r3, #48	@ 0x30
 801b11c:	2b09      	cmp	r3, #9
 801b11e:	d94b      	bls.n	801b1b8 <_svfiprintf_r+0x17c>
 801b120:	b1b0      	cbz	r0, 801b150 <_svfiprintf_r+0x114>
 801b122:	9207      	str	r2, [sp, #28]
 801b124:	e014      	b.n	801b150 <_svfiprintf_r+0x114>
 801b126:	eba0 0308 	sub.w	r3, r0, r8
 801b12a:	fa09 f303 	lsl.w	r3, r9, r3
 801b12e:	4313      	orrs	r3, r2
 801b130:	9304      	str	r3, [sp, #16]
 801b132:	46a2      	mov	sl, r4
 801b134:	e7d2      	b.n	801b0dc <_svfiprintf_r+0xa0>
 801b136:	9b03      	ldr	r3, [sp, #12]
 801b138:	1d19      	adds	r1, r3, #4
 801b13a:	681b      	ldr	r3, [r3, #0]
 801b13c:	9103      	str	r1, [sp, #12]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	bfbb      	ittet	lt
 801b142:	425b      	neglt	r3, r3
 801b144:	f042 0202 	orrlt.w	r2, r2, #2
 801b148:	9307      	strge	r3, [sp, #28]
 801b14a:	9307      	strlt	r3, [sp, #28]
 801b14c:	bfb8      	it	lt
 801b14e:	9204      	strlt	r2, [sp, #16]
 801b150:	7823      	ldrb	r3, [r4, #0]
 801b152:	2b2e      	cmp	r3, #46	@ 0x2e
 801b154:	d10a      	bne.n	801b16c <_svfiprintf_r+0x130>
 801b156:	7863      	ldrb	r3, [r4, #1]
 801b158:	2b2a      	cmp	r3, #42	@ 0x2a
 801b15a:	d132      	bne.n	801b1c2 <_svfiprintf_r+0x186>
 801b15c:	9b03      	ldr	r3, [sp, #12]
 801b15e:	1d1a      	adds	r2, r3, #4
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	9203      	str	r2, [sp, #12]
 801b164:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b168:	3402      	adds	r4, #2
 801b16a:	9305      	str	r3, [sp, #20]
 801b16c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b230 <_svfiprintf_r+0x1f4>
 801b170:	7821      	ldrb	r1, [r4, #0]
 801b172:	2203      	movs	r2, #3
 801b174:	4650      	mov	r0, sl
 801b176:	f7e5 f8cb 	bl	8000310 <memchr>
 801b17a:	b138      	cbz	r0, 801b18c <_svfiprintf_r+0x150>
 801b17c:	9b04      	ldr	r3, [sp, #16]
 801b17e:	eba0 000a 	sub.w	r0, r0, sl
 801b182:	2240      	movs	r2, #64	@ 0x40
 801b184:	4082      	lsls	r2, r0
 801b186:	4313      	orrs	r3, r2
 801b188:	3401      	adds	r4, #1
 801b18a:	9304      	str	r3, [sp, #16]
 801b18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b190:	4824      	ldr	r0, [pc, #144]	@ (801b224 <_svfiprintf_r+0x1e8>)
 801b192:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b196:	2206      	movs	r2, #6
 801b198:	f7e5 f8ba 	bl	8000310 <memchr>
 801b19c:	2800      	cmp	r0, #0
 801b19e:	d036      	beq.n	801b20e <_svfiprintf_r+0x1d2>
 801b1a0:	4b21      	ldr	r3, [pc, #132]	@ (801b228 <_svfiprintf_r+0x1ec>)
 801b1a2:	bb1b      	cbnz	r3, 801b1ec <_svfiprintf_r+0x1b0>
 801b1a4:	9b03      	ldr	r3, [sp, #12]
 801b1a6:	3307      	adds	r3, #7
 801b1a8:	f023 0307 	bic.w	r3, r3, #7
 801b1ac:	3308      	adds	r3, #8
 801b1ae:	9303      	str	r3, [sp, #12]
 801b1b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b1b2:	4433      	add	r3, r6
 801b1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1b6:	e76a      	b.n	801b08e <_svfiprintf_r+0x52>
 801b1b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b1bc:	460c      	mov	r4, r1
 801b1be:	2001      	movs	r0, #1
 801b1c0:	e7a8      	b.n	801b114 <_svfiprintf_r+0xd8>
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	3401      	adds	r4, #1
 801b1c6:	9305      	str	r3, [sp, #20]
 801b1c8:	4619      	mov	r1, r3
 801b1ca:	f04f 0c0a 	mov.w	ip, #10
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b1d4:	3a30      	subs	r2, #48	@ 0x30
 801b1d6:	2a09      	cmp	r2, #9
 801b1d8:	d903      	bls.n	801b1e2 <_svfiprintf_r+0x1a6>
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d0c6      	beq.n	801b16c <_svfiprintf_r+0x130>
 801b1de:	9105      	str	r1, [sp, #20]
 801b1e0:	e7c4      	b.n	801b16c <_svfiprintf_r+0x130>
 801b1e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b1e6:	4604      	mov	r4, r0
 801b1e8:	2301      	movs	r3, #1
 801b1ea:	e7f0      	b.n	801b1ce <_svfiprintf_r+0x192>
 801b1ec:	ab03      	add	r3, sp, #12
 801b1ee:	9300      	str	r3, [sp, #0]
 801b1f0:	462a      	mov	r2, r5
 801b1f2:	4b0e      	ldr	r3, [pc, #56]	@ (801b22c <_svfiprintf_r+0x1f0>)
 801b1f4:	a904      	add	r1, sp, #16
 801b1f6:	4638      	mov	r0, r7
 801b1f8:	f3af 8000 	nop.w
 801b1fc:	1c42      	adds	r2, r0, #1
 801b1fe:	4606      	mov	r6, r0
 801b200:	d1d6      	bne.n	801b1b0 <_svfiprintf_r+0x174>
 801b202:	89ab      	ldrh	r3, [r5, #12]
 801b204:	065b      	lsls	r3, r3, #25
 801b206:	f53f af2d 	bmi.w	801b064 <_svfiprintf_r+0x28>
 801b20a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b20c:	e72c      	b.n	801b068 <_svfiprintf_r+0x2c>
 801b20e:	ab03      	add	r3, sp, #12
 801b210:	9300      	str	r3, [sp, #0]
 801b212:	462a      	mov	r2, r5
 801b214:	4b05      	ldr	r3, [pc, #20]	@ (801b22c <_svfiprintf_r+0x1f0>)
 801b216:	a904      	add	r1, sp, #16
 801b218:	4638      	mov	r0, r7
 801b21a:	f000 f9bb 	bl	801b594 <_printf_i>
 801b21e:	e7ed      	b.n	801b1fc <_svfiprintf_r+0x1c0>
 801b220:	0801ca63 	.word	0x0801ca63
 801b224:	0801ca6d 	.word	0x0801ca6d
 801b228:	00000000 	.word	0x00000000
 801b22c:	0801af85 	.word	0x0801af85
 801b230:	0801ca69 	.word	0x0801ca69

0801b234 <__sfputc_r>:
 801b234:	6893      	ldr	r3, [r2, #8]
 801b236:	3b01      	subs	r3, #1
 801b238:	2b00      	cmp	r3, #0
 801b23a:	b410      	push	{r4}
 801b23c:	6093      	str	r3, [r2, #8]
 801b23e:	da08      	bge.n	801b252 <__sfputc_r+0x1e>
 801b240:	6994      	ldr	r4, [r2, #24]
 801b242:	42a3      	cmp	r3, r4
 801b244:	db01      	blt.n	801b24a <__sfputc_r+0x16>
 801b246:	290a      	cmp	r1, #10
 801b248:	d103      	bne.n	801b252 <__sfputc_r+0x1e>
 801b24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b24e:	f7ff bc17 	b.w	801aa80 <__swbuf_r>
 801b252:	6813      	ldr	r3, [r2, #0]
 801b254:	1c58      	adds	r0, r3, #1
 801b256:	6010      	str	r0, [r2, #0]
 801b258:	7019      	strb	r1, [r3, #0]
 801b25a:	4608      	mov	r0, r1
 801b25c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b260:	4770      	bx	lr

0801b262 <__sfputs_r>:
 801b262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b264:	4606      	mov	r6, r0
 801b266:	460f      	mov	r7, r1
 801b268:	4614      	mov	r4, r2
 801b26a:	18d5      	adds	r5, r2, r3
 801b26c:	42ac      	cmp	r4, r5
 801b26e:	d101      	bne.n	801b274 <__sfputs_r+0x12>
 801b270:	2000      	movs	r0, #0
 801b272:	e007      	b.n	801b284 <__sfputs_r+0x22>
 801b274:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b278:	463a      	mov	r2, r7
 801b27a:	4630      	mov	r0, r6
 801b27c:	f7ff ffda 	bl	801b234 <__sfputc_r>
 801b280:	1c43      	adds	r3, r0, #1
 801b282:	d1f3      	bne.n	801b26c <__sfputs_r+0xa>
 801b284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b288 <_vfiprintf_r>:
 801b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b28c:	460d      	mov	r5, r1
 801b28e:	b09d      	sub	sp, #116	@ 0x74
 801b290:	4614      	mov	r4, r2
 801b292:	4698      	mov	r8, r3
 801b294:	4606      	mov	r6, r0
 801b296:	b118      	cbz	r0, 801b2a0 <_vfiprintf_r+0x18>
 801b298:	6a03      	ldr	r3, [r0, #32]
 801b29a:	b90b      	cbnz	r3, 801b2a0 <_vfiprintf_r+0x18>
 801b29c:	f7ff fa98 	bl	801a7d0 <__sinit>
 801b2a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2a2:	07d9      	lsls	r1, r3, #31
 801b2a4:	d405      	bmi.n	801b2b2 <_vfiprintf_r+0x2a>
 801b2a6:	89ab      	ldrh	r3, [r5, #12]
 801b2a8:	059a      	lsls	r2, r3, #22
 801b2aa:	d402      	bmi.n	801b2b2 <_vfiprintf_r+0x2a>
 801b2ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b2ae:	f7ff fdd4 	bl	801ae5a <__retarget_lock_acquire_recursive>
 801b2b2:	89ab      	ldrh	r3, [r5, #12]
 801b2b4:	071b      	lsls	r3, r3, #28
 801b2b6:	d501      	bpl.n	801b2bc <_vfiprintf_r+0x34>
 801b2b8:	692b      	ldr	r3, [r5, #16]
 801b2ba:	b99b      	cbnz	r3, 801b2e4 <_vfiprintf_r+0x5c>
 801b2bc:	4629      	mov	r1, r5
 801b2be:	4630      	mov	r0, r6
 801b2c0:	f7ff fc1c 	bl	801aafc <__swsetup_r>
 801b2c4:	b170      	cbz	r0, 801b2e4 <_vfiprintf_r+0x5c>
 801b2c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b2c8:	07dc      	lsls	r4, r3, #31
 801b2ca:	d504      	bpl.n	801b2d6 <_vfiprintf_r+0x4e>
 801b2cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b2d0:	b01d      	add	sp, #116	@ 0x74
 801b2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2d6:	89ab      	ldrh	r3, [r5, #12]
 801b2d8:	0598      	lsls	r0, r3, #22
 801b2da:	d4f7      	bmi.n	801b2cc <_vfiprintf_r+0x44>
 801b2dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b2de:	f7ff fdbd 	bl	801ae5c <__retarget_lock_release_recursive>
 801b2e2:	e7f3      	b.n	801b2cc <_vfiprintf_r+0x44>
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b2e8:	2320      	movs	r3, #32
 801b2ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b2ee:	f8cd 800c 	str.w	r8, [sp, #12]
 801b2f2:	2330      	movs	r3, #48	@ 0x30
 801b2f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b4a4 <_vfiprintf_r+0x21c>
 801b2f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b2fc:	f04f 0901 	mov.w	r9, #1
 801b300:	4623      	mov	r3, r4
 801b302:	469a      	mov	sl, r3
 801b304:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b308:	b10a      	cbz	r2, 801b30e <_vfiprintf_r+0x86>
 801b30a:	2a25      	cmp	r2, #37	@ 0x25
 801b30c:	d1f9      	bne.n	801b302 <_vfiprintf_r+0x7a>
 801b30e:	ebba 0b04 	subs.w	fp, sl, r4
 801b312:	d00b      	beq.n	801b32c <_vfiprintf_r+0xa4>
 801b314:	465b      	mov	r3, fp
 801b316:	4622      	mov	r2, r4
 801b318:	4629      	mov	r1, r5
 801b31a:	4630      	mov	r0, r6
 801b31c:	f7ff ffa1 	bl	801b262 <__sfputs_r>
 801b320:	3001      	adds	r0, #1
 801b322:	f000 80a7 	beq.w	801b474 <_vfiprintf_r+0x1ec>
 801b326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b328:	445a      	add	r2, fp
 801b32a:	9209      	str	r2, [sp, #36]	@ 0x24
 801b32c:	f89a 3000 	ldrb.w	r3, [sl]
 801b330:	2b00      	cmp	r3, #0
 801b332:	f000 809f 	beq.w	801b474 <_vfiprintf_r+0x1ec>
 801b336:	2300      	movs	r3, #0
 801b338:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b33c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b340:	f10a 0a01 	add.w	sl, sl, #1
 801b344:	9304      	str	r3, [sp, #16]
 801b346:	9307      	str	r3, [sp, #28]
 801b348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b34c:	931a      	str	r3, [sp, #104]	@ 0x68
 801b34e:	4654      	mov	r4, sl
 801b350:	2205      	movs	r2, #5
 801b352:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b356:	4853      	ldr	r0, [pc, #332]	@ (801b4a4 <_vfiprintf_r+0x21c>)
 801b358:	f7e4 ffda 	bl	8000310 <memchr>
 801b35c:	9a04      	ldr	r2, [sp, #16]
 801b35e:	b9d8      	cbnz	r0, 801b398 <_vfiprintf_r+0x110>
 801b360:	06d1      	lsls	r1, r2, #27
 801b362:	bf44      	itt	mi
 801b364:	2320      	movmi	r3, #32
 801b366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b36a:	0713      	lsls	r3, r2, #28
 801b36c:	bf44      	itt	mi
 801b36e:	232b      	movmi	r3, #43	@ 0x2b
 801b370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b374:	f89a 3000 	ldrb.w	r3, [sl]
 801b378:	2b2a      	cmp	r3, #42	@ 0x2a
 801b37a:	d015      	beq.n	801b3a8 <_vfiprintf_r+0x120>
 801b37c:	9a07      	ldr	r2, [sp, #28]
 801b37e:	4654      	mov	r4, sl
 801b380:	2000      	movs	r0, #0
 801b382:	f04f 0c0a 	mov.w	ip, #10
 801b386:	4621      	mov	r1, r4
 801b388:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b38c:	3b30      	subs	r3, #48	@ 0x30
 801b38e:	2b09      	cmp	r3, #9
 801b390:	d94b      	bls.n	801b42a <_vfiprintf_r+0x1a2>
 801b392:	b1b0      	cbz	r0, 801b3c2 <_vfiprintf_r+0x13a>
 801b394:	9207      	str	r2, [sp, #28]
 801b396:	e014      	b.n	801b3c2 <_vfiprintf_r+0x13a>
 801b398:	eba0 0308 	sub.w	r3, r0, r8
 801b39c:	fa09 f303 	lsl.w	r3, r9, r3
 801b3a0:	4313      	orrs	r3, r2
 801b3a2:	9304      	str	r3, [sp, #16]
 801b3a4:	46a2      	mov	sl, r4
 801b3a6:	e7d2      	b.n	801b34e <_vfiprintf_r+0xc6>
 801b3a8:	9b03      	ldr	r3, [sp, #12]
 801b3aa:	1d19      	adds	r1, r3, #4
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	9103      	str	r1, [sp, #12]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	bfbb      	ittet	lt
 801b3b4:	425b      	neglt	r3, r3
 801b3b6:	f042 0202 	orrlt.w	r2, r2, #2
 801b3ba:	9307      	strge	r3, [sp, #28]
 801b3bc:	9307      	strlt	r3, [sp, #28]
 801b3be:	bfb8      	it	lt
 801b3c0:	9204      	strlt	r2, [sp, #16]
 801b3c2:	7823      	ldrb	r3, [r4, #0]
 801b3c4:	2b2e      	cmp	r3, #46	@ 0x2e
 801b3c6:	d10a      	bne.n	801b3de <_vfiprintf_r+0x156>
 801b3c8:	7863      	ldrb	r3, [r4, #1]
 801b3ca:	2b2a      	cmp	r3, #42	@ 0x2a
 801b3cc:	d132      	bne.n	801b434 <_vfiprintf_r+0x1ac>
 801b3ce:	9b03      	ldr	r3, [sp, #12]
 801b3d0:	1d1a      	adds	r2, r3, #4
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	9203      	str	r2, [sp, #12]
 801b3d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b3da:	3402      	adds	r4, #2
 801b3dc:	9305      	str	r3, [sp, #20]
 801b3de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b4b4 <_vfiprintf_r+0x22c>
 801b3e2:	7821      	ldrb	r1, [r4, #0]
 801b3e4:	2203      	movs	r2, #3
 801b3e6:	4650      	mov	r0, sl
 801b3e8:	f7e4 ff92 	bl	8000310 <memchr>
 801b3ec:	b138      	cbz	r0, 801b3fe <_vfiprintf_r+0x176>
 801b3ee:	9b04      	ldr	r3, [sp, #16]
 801b3f0:	eba0 000a 	sub.w	r0, r0, sl
 801b3f4:	2240      	movs	r2, #64	@ 0x40
 801b3f6:	4082      	lsls	r2, r0
 801b3f8:	4313      	orrs	r3, r2
 801b3fa:	3401      	adds	r4, #1
 801b3fc:	9304      	str	r3, [sp, #16]
 801b3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b402:	4829      	ldr	r0, [pc, #164]	@ (801b4a8 <_vfiprintf_r+0x220>)
 801b404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b408:	2206      	movs	r2, #6
 801b40a:	f7e4 ff81 	bl	8000310 <memchr>
 801b40e:	2800      	cmp	r0, #0
 801b410:	d03f      	beq.n	801b492 <_vfiprintf_r+0x20a>
 801b412:	4b26      	ldr	r3, [pc, #152]	@ (801b4ac <_vfiprintf_r+0x224>)
 801b414:	bb1b      	cbnz	r3, 801b45e <_vfiprintf_r+0x1d6>
 801b416:	9b03      	ldr	r3, [sp, #12]
 801b418:	3307      	adds	r3, #7
 801b41a:	f023 0307 	bic.w	r3, r3, #7
 801b41e:	3308      	adds	r3, #8
 801b420:	9303      	str	r3, [sp, #12]
 801b422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b424:	443b      	add	r3, r7
 801b426:	9309      	str	r3, [sp, #36]	@ 0x24
 801b428:	e76a      	b.n	801b300 <_vfiprintf_r+0x78>
 801b42a:	fb0c 3202 	mla	r2, ip, r2, r3
 801b42e:	460c      	mov	r4, r1
 801b430:	2001      	movs	r0, #1
 801b432:	e7a8      	b.n	801b386 <_vfiprintf_r+0xfe>
 801b434:	2300      	movs	r3, #0
 801b436:	3401      	adds	r4, #1
 801b438:	9305      	str	r3, [sp, #20]
 801b43a:	4619      	mov	r1, r3
 801b43c:	f04f 0c0a 	mov.w	ip, #10
 801b440:	4620      	mov	r0, r4
 801b442:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b446:	3a30      	subs	r2, #48	@ 0x30
 801b448:	2a09      	cmp	r2, #9
 801b44a:	d903      	bls.n	801b454 <_vfiprintf_r+0x1cc>
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d0c6      	beq.n	801b3de <_vfiprintf_r+0x156>
 801b450:	9105      	str	r1, [sp, #20]
 801b452:	e7c4      	b.n	801b3de <_vfiprintf_r+0x156>
 801b454:	fb0c 2101 	mla	r1, ip, r1, r2
 801b458:	4604      	mov	r4, r0
 801b45a:	2301      	movs	r3, #1
 801b45c:	e7f0      	b.n	801b440 <_vfiprintf_r+0x1b8>
 801b45e:	ab03      	add	r3, sp, #12
 801b460:	9300      	str	r3, [sp, #0]
 801b462:	462a      	mov	r2, r5
 801b464:	4b12      	ldr	r3, [pc, #72]	@ (801b4b0 <_vfiprintf_r+0x228>)
 801b466:	a904      	add	r1, sp, #16
 801b468:	4630      	mov	r0, r6
 801b46a:	f3af 8000 	nop.w
 801b46e:	4607      	mov	r7, r0
 801b470:	1c78      	adds	r0, r7, #1
 801b472:	d1d6      	bne.n	801b422 <_vfiprintf_r+0x19a>
 801b474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b476:	07d9      	lsls	r1, r3, #31
 801b478:	d405      	bmi.n	801b486 <_vfiprintf_r+0x1fe>
 801b47a:	89ab      	ldrh	r3, [r5, #12]
 801b47c:	059a      	lsls	r2, r3, #22
 801b47e:	d402      	bmi.n	801b486 <_vfiprintf_r+0x1fe>
 801b480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b482:	f7ff fceb 	bl	801ae5c <__retarget_lock_release_recursive>
 801b486:	89ab      	ldrh	r3, [r5, #12]
 801b488:	065b      	lsls	r3, r3, #25
 801b48a:	f53f af1f 	bmi.w	801b2cc <_vfiprintf_r+0x44>
 801b48e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b490:	e71e      	b.n	801b2d0 <_vfiprintf_r+0x48>
 801b492:	ab03      	add	r3, sp, #12
 801b494:	9300      	str	r3, [sp, #0]
 801b496:	462a      	mov	r2, r5
 801b498:	4b05      	ldr	r3, [pc, #20]	@ (801b4b0 <_vfiprintf_r+0x228>)
 801b49a:	a904      	add	r1, sp, #16
 801b49c:	4630      	mov	r0, r6
 801b49e:	f000 f879 	bl	801b594 <_printf_i>
 801b4a2:	e7e4      	b.n	801b46e <_vfiprintf_r+0x1e6>
 801b4a4:	0801ca63 	.word	0x0801ca63
 801b4a8:	0801ca6d 	.word	0x0801ca6d
 801b4ac:	00000000 	.word	0x00000000
 801b4b0:	0801b263 	.word	0x0801b263
 801b4b4:	0801ca69 	.word	0x0801ca69

0801b4b8 <_printf_common>:
 801b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4bc:	4616      	mov	r6, r2
 801b4be:	4698      	mov	r8, r3
 801b4c0:	688a      	ldr	r2, [r1, #8]
 801b4c2:	690b      	ldr	r3, [r1, #16]
 801b4c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b4c8:	4293      	cmp	r3, r2
 801b4ca:	bfb8      	it	lt
 801b4cc:	4613      	movlt	r3, r2
 801b4ce:	6033      	str	r3, [r6, #0]
 801b4d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b4d4:	4607      	mov	r7, r0
 801b4d6:	460c      	mov	r4, r1
 801b4d8:	b10a      	cbz	r2, 801b4de <_printf_common+0x26>
 801b4da:	3301      	adds	r3, #1
 801b4dc:	6033      	str	r3, [r6, #0]
 801b4de:	6823      	ldr	r3, [r4, #0]
 801b4e0:	0699      	lsls	r1, r3, #26
 801b4e2:	bf42      	ittt	mi
 801b4e4:	6833      	ldrmi	r3, [r6, #0]
 801b4e6:	3302      	addmi	r3, #2
 801b4e8:	6033      	strmi	r3, [r6, #0]
 801b4ea:	6825      	ldr	r5, [r4, #0]
 801b4ec:	f015 0506 	ands.w	r5, r5, #6
 801b4f0:	d106      	bne.n	801b500 <_printf_common+0x48>
 801b4f2:	f104 0a19 	add.w	sl, r4, #25
 801b4f6:	68e3      	ldr	r3, [r4, #12]
 801b4f8:	6832      	ldr	r2, [r6, #0]
 801b4fa:	1a9b      	subs	r3, r3, r2
 801b4fc:	42ab      	cmp	r3, r5
 801b4fe:	dc26      	bgt.n	801b54e <_printf_common+0x96>
 801b500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b504:	6822      	ldr	r2, [r4, #0]
 801b506:	3b00      	subs	r3, #0
 801b508:	bf18      	it	ne
 801b50a:	2301      	movne	r3, #1
 801b50c:	0692      	lsls	r2, r2, #26
 801b50e:	d42b      	bmi.n	801b568 <_printf_common+0xb0>
 801b510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b514:	4641      	mov	r1, r8
 801b516:	4638      	mov	r0, r7
 801b518:	47c8      	blx	r9
 801b51a:	3001      	adds	r0, #1
 801b51c:	d01e      	beq.n	801b55c <_printf_common+0xa4>
 801b51e:	6823      	ldr	r3, [r4, #0]
 801b520:	6922      	ldr	r2, [r4, #16]
 801b522:	f003 0306 	and.w	r3, r3, #6
 801b526:	2b04      	cmp	r3, #4
 801b528:	bf02      	ittt	eq
 801b52a:	68e5      	ldreq	r5, [r4, #12]
 801b52c:	6833      	ldreq	r3, [r6, #0]
 801b52e:	1aed      	subeq	r5, r5, r3
 801b530:	68a3      	ldr	r3, [r4, #8]
 801b532:	bf0c      	ite	eq
 801b534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b538:	2500      	movne	r5, #0
 801b53a:	4293      	cmp	r3, r2
 801b53c:	bfc4      	itt	gt
 801b53e:	1a9b      	subgt	r3, r3, r2
 801b540:	18ed      	addgt	r5, r5, r3
 801b542:	2600      	movs	r6, #0
 801b544:	341a      	adds	r4, #26
 801b546:	42b5      	cmp	r5, r6
 801b548:	d11a      	bne.n	801b580 <_printf_common+0xc8>
 801b54a:	2000      	movs	r0, #0
 801b54c:	e008      	b.n	801b560 <_printf_common+0xa8>
 801b54e:	2301      	movs	r3, #1
 801b550:	4652      	mov	r2, sl
 801b552:	4641      	mov	r1, r8
 801b554:	4638      	mov	r0, r7
 801b556:	47c8      	blx	r9
 801b558:	3001      	adds	r0, #1
 801b55a:	d103      	bne.n	801b564 <_printf_common+0xac>
 801b55c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b564:	3501      	adds	r5, #1
 801b566:	e7c6      	b.n	801b4f6 <_printf_common+0x3e>
 801b568:	18e1      	adds	r1, r4, r3
 801b56a:	1c5a      	adds	r2, r3, #1
 801b56c:	2030      	movs	r0, #48	@ 0x30
 801b56e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b572:	4422      	add	r2, r4
 801b574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b57c:	3302      	adds	r3, #2
 801b57e:	e7c7      	b.n	801b510 <_printf_common+0x58>
 801b580:	2301      	movs	r3, #1
 801b582:	4622      	mov	r2, r4
 801b584:	4641      	mov	r1, r8
 801b586:	4638      	mov	r0, r7
 801b588:	47c8      	blx	r9
 801b58a:	3001      	adds	r0, #1
 801b58c:	d0e6      	beq.n	801b55c <_printf_common+0xa4>
 801b58e:	3601      	adds	r6, #1
 801b590:	e7d9      	b.n	801b546 <_printf_common+0x8e>
	...

0801b594 <_printf_i>:
 801b594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b598:	7e0f      	ldrb	r7, [r1, #24]
 801b59a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b59c:	2f78      	cmp	r7, #120	@ 0x78
 801b59e:	4691      	mov	r9, r2
 801b5a0:	4680      	mov	r8, r0
 801b5a2:	460c      	mov	r4, r1
 801b5a4:	469a      	mov	sl, r3
 801b5a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b5aa:	d807      	bhi.n	801b5bc <_printf_i+0x28>
 801b5ac:	2f62      	cmp	r7, #98	@ 0x62
 801b5ae:	d80a      	bhi.n	801b5c6 <_printf_i+0x32>
 801b5b0:	2f00      	cmp	r7, #0
 801b5b2:	f000 80d1 	beq.w	801b758 <_printf_i+0x1c4>
 801b5b6:	2f58      	cmp	r7, #88	@ 0x58
 801b5b8:	f000 80b8 	beq.w	801b72c <_printf_i+0x198>
 801b5bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b5c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b5c4:	e03a      	b.n	801b63c <_printf_i+0xa8>
 801b5c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b5ca:	2b15      	cmp	r3, #21
 801b5cc:	d8f6      	bhi.n	801b5bc <_printf_i+0x28>
 801b5ce:	a101      	add	r1, pc, #4	@ (adr r1, 801b5d4 <_printf_i+0x40>)
 801b5d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b5d4:	0801b62d 	.word	0x0801b62d
 801b5d8:	0801b641 	.word	0x0801b641
 801b5dc:	0801b5bd 	.word	0x0801b5bd
 801b5e0:	0801b5bd 	.word	0x0801b5bd
 801b5e4:	0801b5bd 	.word	0x0801b5bd
 801b5e8:	0801b5bd 	.word	0x0801b5bd
 801b5ec:	0801b641 	.word	0x0801b641
 801b5f0:	0801b5bd 	.word	0x0801b5bd
 801b5f4:	0801b5bd 	.word	0x0801b5bd
 801b5f8:	0801b5bd 	.word	0x0801b5bd
 801b5fc:	0801b5bd 	.word	0x0801b5bd
 801b600:	0801b73f 	.word	0x0801b73f
 801b604:	0801b66b 	.word	0x0801b66b
 801b608:	0801b6f9 	.word	0x0801b6f9
 801b60c:	0801b5bd 	.word	0x0801b5bd
 801b610:	0801b5bd 	.word	0x0801b5bd
 801b614:	0801b761 	.word	0x0801b761
 801b618:	0801b5bd 	.word	0x0801b5bd
 801b61c:	0801b66b 	.word	0x0801b66b
 801b620:	0801b5bd 	.word	0x0801b5bd
 801b624:	0801b5bd 	.word	0x0801b5bd
 801b628:	0801b701 	.word	0x0801b701
 801b62c:	6833      	ldr	r3, [r6, #0]
 801b62e:	1d1a      	adds	r2, r3, #4
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	6032      	str	r2, [r6, #0]
 801b634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b63c:	2301      	movs	r3, #1
 801b63e:	e09c      	b.n	801b77a <_printf_i+0x1e6>
 801b640:	6833      	ldr	r3, [r6, #0]
 801b642:	6820      	ldr	r0, [r4, #0]
 801b644:	1d19      	adds	r1, r3, #4
 801b646:	6031      	str	r1, [r6, #0]
 801b648:	0606      	lsls	r6, r0, #24
 801b64a:	d501      	bpl.n	801b650 <_printf_i+0xbc>
 801b64c:	681d      	ldr	r5, [r3, #0]
 801b64e:	e003      	b.n	801b658 <_printf_i+0xc4>
 801b650:	0645      	lsls	r5, r0, #25
 801b652:	d5fb      	bpl.n	801b64c <_printf_i+0xb8>
 801b654:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b658:	2d00      	cmp	r5, #0
 801b65a:	da03      	bge.n	801b664 <_printf_i+0xd0>
 801b65c:	232d      	movs	r3, #45	@ 0x2d
 801b65e:	426d      	negs	r5, r5
 801b660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b664:	4858      	ldr	r0, [pc, #352]	@ (801b7c8 <_printf_i+0x234>)
 801b666:	230a      	movs	r3, #10
 801b668:	e011      	b.n	801b68e <_printf_i+0xfa>
 801b66a:	6821      	ldr	r1, [r4, #0]
 801b66c:	6833      	ldr	r3, [r6, #0]
 801b66e:	0608      	lsls	r0, r1, #24
 801b670:	f853 5b04 	ldr.w	r5, [r3], #4
 801b674:	d402      	bmi.n	801b67c <_printf_i+0xe8>
 801b676:	0649      	lsls	r1, r1, #25
 801b678:	bf48      	it	mi
 801b67a:	b2ad      	uxthmi	r5, r5
 801b67c:	2f6f      	cmp	r7, #111	@ 0x6f
 801b67e:	4852      	ldr	r0, [pc, #328]	@ (801b7c8 <_printf_i+0x234>)
 801b680:	6033      	str	r3, [r6, #0]
 801b682:	bf14      	ite	ne
 801b684:	230a      	movne	r3, #10
 801b686:	2308      	moveq	r3, #8
 801b688:	2100      	movs	r1, #0
 801b68a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b68e:	6866      	ldr	r6, [r4, #4]
 801b690:	60a6      	str	r6, [r4, #8]
 801b692:	2e00      	cmp	r6, #0
 801b694:	db05      	blt.n	801b6a2 <_printf_i+0x10e>
 801b696:	6821      	ldr	r1, [r4, #0]
 801b698:	432e      	orrs	r6, r5
 801b69a:	f021 0104 	bic.w	r1, r1, #4
 801b69e:	6021      	str	r1, [r4, #0]
 801b6a0:	d04b      	beq.n	801b73a <_printf_i+0x1a6>
 801b6a2:	4616      	mov	r6, r2
 801b6a4:	fbb5 f1f3 	udiv	r1, r5, r3
 801b6a8:	fb03 5711 	mls	r7, r3, r1, r5
 801b6ac:	5dc7      	ldrb	r7, [r0, r7]
 801b6ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b6b2:	462f      	mov	r7, r5
 801b6b4:	42bb      	cmp	r3, r7
 801b6b6:	460d      	mov	r5, r1
 801b6b8:	d9f4      	bls.n	801b6a4 <_printf_i+0x110>
 801b6ba:	2b08      	cmp	r3, #8
 801b6bc:	d10b      	bne.n	801b6d6 <_printf_i+0x142>
 801b6be:	6823      	ldr	r3, [r4, #0]
 801b6c0:	07df      	lsls	r7, r3, #31
 801b6c2:	d508      	bpl.n	801b6d6 <_printf_i+0x142>
 801b6c4:	6923      	ldr	r3, [r4, #16]
 801b6c6:	6861      	ldr	r1, [r4, #4]
 801b6c8:	4299      	cmp	r1, r3
 801b6ca:	bfde      	ittt	le
 801b6cc:	2330      	movle	r3, #48	@ 0x30
 801b6ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b6d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801b6d6:	1b92      	subs	r2, r2, r6
 801b6d8:	6122      	str	r2, [r4, #16]
 801b6da:	f8cd a000 	str.w	sl, [sp]
 801b6de:	464b      	mov	r3, r9
 801b6e0:	aa03      	add	r2, sp, #12
 801b6e2:	4621      	mov	r1, r4
 801b6e4:	4640      	mov	r0, r8
 801b6e6:	f7ff fee7 	bl	801b4b8 <_printf_common>
 801b6ea:	3001      	adds	r0, #1
 801b6ec:	d14a      	bne.n	801b784 <_printf_i+0x1f0>
 801b6ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b6f2:	b004      	add	sp, #16
 801b6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6f8:	6823      	ldr	r3, [r4, #0]
 801b6fa:	f043 0320 	orr.w	r3, r3, #32
 801b6fe:	6023      	str	r3, [r4, #0]
 801b700:	4832      	ldr	r0, [pc, #200]	@ (801b7cc <_printf_i+0x238>)
 801b702:	2778      	movs	r7, #120	@ 0x78
 801b704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b708:	6823      	ldr	r3, [r4, #0]
 801b70a:	6831      	ldr	r1, [r6, #0]
 801b70c:	061f      	lsls	r7, r3, #24
 801b70e:	f851 5b04 	ldr.w	r5, [r1], #4
 801b712:	d402      	bmi.n	801b71a <_printf_i+0x186>
 801b714:	065f      	lsls	r7, r3, #25
 801b716:	bf48      	it	mi
 801b718:	b2ad      	uxthmi	r5, r5
 801b71a:	6031      	str	r1, [r6, #0]
 801b71c:	07d9      	lsls	r1, r3, #31
 801b71e:	bf44      	itt	mi
 801b720:	f043 0320 	orrmi.w	r3, r3, #32
 801b724:	6023      	strmi	r3, [r4, #0]
 801b726:	b11d      	cbz	r5, 801b730 <_printf_i+0x19c>
 801b728:	2310      	movs	r3, #16
 801b72a:	e7ad      	b.n	801b688 <_printf_i+0xf4>
 801b72c:	4826      	ldr	r0, [pc, #152]	@ (801b7c8 <_printf_i+0x234>)
 801b72e:	e7e9      	b.n	801b704 <_printf_i+0x170>
 801b730:	6823      	ldr	r3, [r4, #0]
 801b732:	f023 0320 	bic.w	r3, r3, #32
 801b736:	6023      	str	r3, [r4, #0]
 801b738:	e7f6      	b.n	801b728 <_printf_i+0x194>
 801b73a:	4616      	mov	r6, r2
 801b73c:	e7bd      	b.n	801b6ba <_printf_i+0x126>
 801b73e:	6833      	ldr	r3, [r6, #0]
 801b740:	6825      	ldr	r5, [r4, #0]
 801b742:	6961      	ldr	r1, [r4, #20]
 801b744:	1d18      	adds	r0, r3, #4
 801b746:	6030      	str	r0, [r6, #0]
 801b748:	062e      	lsls	r6, r5, #24
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	d501      	bpl.n	801b752 <_printf_i+0x1be>
 801b74e:	6019      	str	r1, [r3, #0]
 801b750:	e002      	b.n	801b758 <_printf_i+0x1c4>
 801b752:	0668      	lsls	r0, r5, #25
 801b754:	d5fb      	bpl.n	801b74e <_printf_i+0x1ba>
 801b756:	8019      	strh	r1, [r3, #0]
 801b758:	2300      	movs	r3, #0
 801b75a:	6123      	str	r3, [r4, #16]
 801b75c:	4616      	mov	r6, r2
 801b75e:	e7bc      	b.n	801b6da <_printf_i+0x146>
 801b760:	6833      	ldr	r3, [r6, #0]
 801b762:	1d1a      	adds	r2, r3, #4
 801b764:	6032      	str	r2, [r6, #0]
 801b766:	681e      	ldr	r6, [r3, #0]
 801b768:	6862      	ldr	r2, [r4, #4]
 801b76a:	2100      	movs	r1, #0
 801b76c:	4630      	mov	r0, r6
 801b76e:	f7e4 fdcf 	bl	8000310 <memchr>
 801b772:	b108      	cbz	r0, 801b778 <_printf_i+0x1e4>
 801b774:	1b80      	subs	r0, r0, r6
 801b776:	6060      	str	r0, [r4, #4]
 801b778:	6863      	ldr	r3, [r4, #4]
 801b77a:	6123      	str	r3, [r4, #16]
 801b77c:	2300      	movs	r3, #0
 801b77e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b782:	e7aa      	b.n	801b6da <_printf_i+0x146>
 801b784:	6923      	ldr	r3, [r4, #16]
 801b786:	4632      	mov	r2, r6
 801b788:	4649      	mov	r1, r9
 801b78a:	4640      	mov	r0, r8
 801b78c:	47d0      	blx	sl
 801b78e:	3001      	adds	r0, #1
 801b790:	d0ad      	beq.n	801b6ee <_printf_i+0x15a>
 801b792:	6823      	ldr	r3, [r4, #0]
 801b794:	079b      	lsls	r3, r3, #30
 801b796:	d413      	bmi.n	801b7c0 <_printf_i+0x22c>
 801b798:	68e0      	ldr	r0, [r4, #12]
 801b79a:	9b03      	ldr	r3, [sp, #12]
 801b79c:	4298      	cmp	r0, r3
 801b79e:	bfb8      	it	lt
 801b7a0:	4618      	movlt	r0, r3
 801b7a2:	e7a6      	b.n	801b6f2 <_printf_i+0x15e>
 801b7a4:	2301      	movs	r3, #1
 801b7a6:	4632      	mov	r2, r6
 801b7a8:	4649      	mov	r1, r9
 801b7aa:	4640      	mov	r0, r8
 801b7ac:	47d0      	blx	sl
 801b7ae:	3001      	adds	r0, #1
 801b7b0:	d09d      	beq.n	801b6ee <_printf_i+0x15a>
 801b7b2:	3501      	adds	r5, #1
 801b7b4:	68e3      	ldr	r3, [r4, #12]
 801b7b6:	9903      	ldr	r1, [sp, #12]
 801b7b8:	1a5b      	subs	r3, r3, r1
 801b7ba:	42ab      	cmp	r3, r5
 801b7bc:	dcf2      	bgt.n	801b7a4 <_printf_i+0x210>
 801b7be:	e7eb      	b.n	801b798 <_printf_i+0x204>
 801b7c0:	2500      	movs	r5, #0
 801b7c2:	f104 0619 	add.w	r6, r4, #25
 801b7c6:	e7f5      	b.n	801b7b4 <_printf_i+0x220>
 801b7c8:	0801ca74 	.word	0x0801ca74
 801b7cc:	0801ca85 	.word	0x0801ca85

0801b7d0 <__sflush_r>:
 801b7d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7d8:	0716      	lsls	r6, r2, #28
 801b7da:	4605      	mov	r5, r0
 801b7dc:	460c      	mov	r4, r1
 801b7de:	d454      	bmi.n	801b88a <__sflush_r+0xba>
 801b7e0:	684b      	ldr	r3, [r1, #4]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	dc02      	bgt.n	801b7ec <__sflush_r+0x1c>
 801b7e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	dd48      	ble.n	801b87e <__sflush_r+0xae>
 801b7ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b7ee:	2e00      	cmp	r6, #0
 801b7f0:	d045      	beq.n	801b87e <__sflush_r+0xae>
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b7f8:	682f      	ldr	r7, [r5, #0]
 801b7fa:	6a21      	ldr	r1, [r4, #32]
 801b7fc:	602b      	str	r3, [r5, #0]
 801b7fe:	d030      	beq.n	801b862 <__sflush_r+0x92>
 801b800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b802:	89a3      	ldrh	r3, [r4, #12]
 801b804:	0759      	lsls	r1, r3, #29
 801b806:	d505      	bpl.n	801b814 <__sflush_r+0x44>
 801b808:	6863      	ldr	r3, [r4, #4]
 801b80a:	1ad2      	subs	r2, r2, r3
 801b80c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b80e:	b10b      	cbz	r3, 801b814 <__sflush_r+0x44>
 801b810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b812:	1ad2      	subs	r2, r2, r3
 801b814:	2300      	movs	r3, #0
 801b816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b818:	6a21      	ldr	r1, [r4, #32]
 801b81a:	4628      	mov	r0, r5
 801b81c:	47b0      	blx	r6
 801b81e:	1c43      	adds	r3, r0, #1
 801b820:	89a3      	ldrh	r3, [r4, #12]
 801b822:	d106      	bne.n	801b832 <__sflush_r+0x62>
 801b824:	6829      	ldr	r1, [r5, #0]
 801b826:	291d      	cmp	r1, #29
 801b828:	d82b      	bhi.n	801b882 <__sflush_r+0xb2>
 801b82a:	4a2a      	ldr	r2, [pc, #168]	@ (801b8d4 <__sflush_r+0x104>)
 801b82c:	40ca      	lsrs	r2, r1
 801b82e:	07d6      	lsls	r6, r2, #31
 801b830:	d527      	bpl.n	801b882 <__sflush_r+0xb2>
 801b832:	2200      	movs	r2, #0
 801b834:	6062      	str	r2, [r4, #4]
 801b836:	04d9      	lsls	r1, r3, #19
 801b838:	6922      	ldr	r2, [r4, #16]
 801b83a:	6022      	str	r2, [r4, #0]
 801b83c:	d504      	bpl.n	801b848 <__sflush_r+0x78>
 801b83e:	1c42      	adds	r2, r0, #1
 801b840:	d101      	bne.n	801b846 <__sflush_r+0x76>
 801b842:	682b      	ldr	r3, [r5, #0]
 801b844:	b903      	cbnz	r3, 801b848 <__sflush_r+0x78>
 801b846:	6560      	str	r0, [r4, #84]	@ 0x54
 801b848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b84a:	602f      	str	r7, [r5, #0]
 801b84c:	b1b9      	cbz	r1, 801b87e <__sflush_r+0xae>
 801b84e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b852:	4299      	cmp	r1, r3
 801b854:	d002      	beq.n	801b85c <__sflush_r+0x8c>
 801b856:	4628      	mov	r0, r5
 801b858:	f7ff fb42 	bl	801aee0 <_free_r>
 801b85c:	2300      	movs	r3, #0
 801b85e:	6363      	str	r3, [r4, #52]	@ 0x34
 801b860:	e00d      	b.n	801b87e <__sflush_r+0xae>
 801b862:	2301      	movs	r3, #1
 801b864:	4628      	mov	r0, r5
 801b866:	47b0      	blx	r6
 801b868:	4602      	mov	r2, r0
 801b86a:	1c50      	adds	r0, r2, #1
 801b86c:	d1c9      	bne.n	801b802 <__sflush_r+0x32>
 801b86e:	682b      	ldr	r3, [r5, #0]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d0c6      	beq.n	801b802 <__sflush_r+0x32>
 801b874:	2b1d      	cmp	r3, #29
 801b876:	d001      	beq.n	801b87c <__sflush_r+0xac>
 801b878:	2b16      	cmp	r3, #22
 801b87a:	d11e      	bne.n	801b8ba <__sflush_r+0xea>
 801b87c:	602f      	str	r7, [r5, #0]
 801b87e:	2000      	movs	r0, #0
 801b880:	e022      	b.n	801b8c8 <__sflush_r+0xf8>
 801b882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b886:	b21b      	sxth	r3, r3
 801b888:	e01b      	b.n	801b8c2 <__sflush_r+0xf2>
 801b88a:	690f      	ldr	r7, [r1, #16]
 801b88c:	2f00      	cmp	r7, #0
 801b88e:	d0f6      	beq.n	801b87e <__sflush_r+0xae>
 801b890:	0793      	lsls	r3, r2, #30
 801b892:	680e      	ldr	r6, [r1, #0]
 801b894:	bf08      	it	eq
 801b896:	694b      	ldreq	r3, [r1, #20]
 801b898:	600f      	str	r7, [r1, #0]
 801b89a:	bf18      	it	ne
 801b89c:	2300      	movne	r3, #0
 801b89e:	eba6 0807 	sub.w	r8, r6, r7
 801b8a2:	608b      	str	r3, [r1, #8]
 801b8a4:	f1b8 0f00 	cmp.w	r8, #0
 801b8a8:	dde9      	ble.n	801b87e <__sflush_r+0xae>
 801b8aa:	6a21      	ldr	r1, [r4, #32]
 801b8ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b8ae:	4643      	mov	r3, r8
 801b8b0:	463a      	mov	r2, r7
 801b8b2:	4628      	mov	r0, r5
 801b8b4:	47b0      	blx	r6
 801b8b6:	2800      	cmp	r0, #0
 801b8b8:	dc08      	bgt.n	801b8cc <__sflush_r+0xfc>
 801b8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8c2:	81a3      	strh	r3, [r4, #12]
 801b8c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8cc:	4407      	add	r7, r0
 801b8ce:	eba8 0800 	sub.w	r8, r8, r0
 801b8d2:	e7e7      	b.n	801b8a4 <__sflush_r+0xd4>
 801b8d4:	20400001 	.word	0x20400001

0801b8d8 <_fflush_r>:
 801b8d8:	b538      	push	{r3, r4, r5, lr}
 801b8da:	690b      	ldr	r3, [r1, #16]
 801b8dc:	4605      	mov	r5, r0
 801b8de:	460c      	mov	r4, r1
 801b8e0:	b913      	cbnz	r3, 801b8e8 <_fflush_r+0x10>
 801b8e2:	2500      	movs	r5, #0
 801b8e4:	4628      	mov	r0, r5
 801b8e6:	bd38      	pop	{r3, r4, r5, pc}
 801b8e8:	b118      	cbz	r0, 801b8f2 <_fflush_r+0x1a>
 801b8ea:	6a03      	ldr	r3, [r0, #32]
 801b8ec:	b90b      	cbnz	r3, 801b8f2 <_fflush_r+0x1a>
 801b8ee:	f7fe ff6f 	bl	801a7d0 <__sinit>
 801b8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d0f3      	beq.n	801b8e2 <_fflush_r+0xa>
 801b8fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b8fc:	07d0      	lsls	r0, r2, #31
 801b8fe:	d404      	bmi.n	801b90a <_fflush_r+0x32>
 801b900:	0599      	lsls	r1, r3, #22
 801b902:	d402      	bmi.n	801b90a <_fflush_r+0x32>
 801b904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b906:	f7ff faa8 	bl	801ae5a <__retarget_lock_acquire_recursive>
 801b90a:	4628      	mov	r0, r5
 801b90c:	4621      	mov	r1, r4
 801b90e:	f7ff ff5f 	bl	801b7d0 <__sflush_r>
 801b912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b914:	07da      	lsls	r2, r3, #31
 801b916:	4605      	mov	r5, r0
 801b918:	d4e4      	bmi.n	801b8e4 <_fflush_r+0xc>
 801b91a:	89a3      	ldrh	r3, [r4, #12]
 801b91c:	059b      	lsls	r3, r3, #22
 801b91e:	d4e1      	bmi.n	801b8e4 <_fflush_r+0xc>
 801b920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b922:	f7ff fa9b 	bl	801ae5c <__retarget_lock_release_recursive>
 801b926:	e7dd      	b.n	801b8e4 <_fflush_r+0xc>

0801b928 <fiprintf>:
 801b928:	b40e      	push	{r1, r2, r3}
 801b92a:	b503      	push	{r0, r1, lr}
 801b92c:	4601      	mov	r1, r0
 801b92e:	ab03      	add	r3, sp, #12
 801b930:	4805      	ldr	r0, [pc, #20]	@ (801b948 <fiprintf+0x20>)
 801b932:	f853 2b04 	ldr.w	r2, [r3], #4
 801b936:	6800      	ldr	r0, [r0, #0]
 801b938:	9301      	str	r3, [sp, #4]
 801b93a:	f7ff fca5 	bl	801b288 <_vfiprintf_r>
 801b93e:	b002      	add	sp, #8
 801b940:	f85d eb04 	ldr.w	lr, [sp], #4
 801b944:	b003      	add	sp, #12
 801b946:	4770      	bx	lr
 801b948:	240004c0 	.word	0x240004c0

0801b94c <__swhatbuf_r>:
 801b94c:	b570      	push	{r4, r5, r6, lr}
 801b94e:	460c      	mov	r4, r1
 801b950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b954:	2900      	cmp	r1, #0
 801b956:	b096      	sub	sp, #88	@ 0x58
 801b958:	4615      	mov	r5, r2
 801b95a:	461e      	mov	r6, r3
 801b95c:	da0d      	bge.n	801b97a <__swhatbuf_r+0x2e>
 801b95e:	89a3      	ldrh	r3, [r4, #12]
 801b960:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b964:	f04f 0100 	mov.w	r1, #0
 801b968:	bf14      	ite	ne
 801b96a:	2340      	movne	r3, #64	@ 0x40
 801b96c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b970:	2000      	movs	r0, #0
 801b972:	6031      	str	r1, [r6, #0]
 801b974:	602b      	str	r3, [r5, #0]
 801b976:	b016      	add	sp, #88	@ 0x58
 801b978:	bd70      	pop	{r4, r5, r6, pc}
 801b97a:	466a      	mov	r2, sp
 801b97c:	f000 f848 	bl	801ba10 <_fstat_r>
 801b980:	2800      	cmp	r0, #0
 801b982:	dbec      	blt.n	801b95e <__swhatbuf_r+0x12>
 801b984:	9901      	ldr	r1, [sp, #4]
 801b986:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b98a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b98e:	4259      	negs	r1, r3
 801b990:	4159      	adcs	r1, r3
 801b992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b996:	e7eb      	b.n	801b970 <__swhatbuf_r+0x24>

0801b998 <__smakebuf_r>:
 801b998:	898b      	ldrh	r3, [r1, #12]
 801b99a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b99c:	079d      	lsls	r5, r3, #30
 801b99e:	4606      	mov	r6, r0
 801b9a0:	460c      	mov	r4, r1
 801b9a2:	d507      	bpl.n	801b9b4 <__smakebuf_r+0x1c>
 801b9a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b9a8:	6023      	str	r3, [r4, #0]
 801b9aa:	6123      	str	r3, [r4, #16]
 801b9ac:	2301      	movs	r3, #1
 801b9ae:	6163      	str	r3, [r4, #20]
 801b9b0:	b003      	add	sp, #12
 801b9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9b4:	ab01      	add	r3, sp, #4
 801b9b6:	466a      	mov	r2, sp
 801b9b8:	f7ff ffc8 	bl	801b94c <__swhatbuf_r>
 801b9bc:	9f00      	ldr	r7, [sp, #0]
 801b9be:	4605      	mov	r5, r0
 801b9c0:	4639      	mov	r1, r7
 801b9c2:	4630      	mov	r0, r6
 801b9c4:	f7fe fcd2 	bl	801a36c <_malloc_r>
 801b9c8:	b948      	cbnz	r0, 801b9de <__smakebuf_r+0x46>
 801b9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9ce:	059a      	lsls	r2, r3, #22
 801b9d0:	d4ee      	bmi.n	801b9b0 <__smakebuf_r+0x18>
 801b9d2:	f023 0303 	bic.w	r3, r3, #3
 801b9d6:	f043 0302 	orr.w	r3, r3, #2
 801b9da:	81a3      	strh	r3, [r4, #12]
 801b9dc:	e7e2      	b.n	801b9a4 <__smakebuf_r+0xc>
 801b9de:	89a3      	ldrh	r3, [r4, #12]
 801b9e0:	6020      	str	r0, [r4, #0]
 801b9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b9e6:	81a3      	strh	r3, [r4, #12]
 801b9e8:	9b01      	ldr	r3, [sp, #4]
 801b9ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b9ee:	b15b      	cbz	r3, 801ba08 <__smakebuf_r+0x70>
 801b9f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b9f4:	4630      	mov	r0, r6
 801b9f6:	f000 f81d 	bl	801ba34 <_isatty_r>
 801b9fa:	b128      	cbz	r0, 801ba08 <__smakebuf_r+0x70>
 801b9fc:	89a3      	ldrh	r3, [r4, #12]
 801b9fe:	f023 0303 	bic.w	r3, r3, #3
 801ba02:	f043 0301 	orr.w	r3, r3, #1
 801ba06:	81a3      	strh	r3, [r4, #12]
 801ba08:	89a3      	ldrh	r3, [r4, #12]
 801ba0a:	431d      	orrs	r5, r3
 801ba0c:	81a5      	strh	r5, [r4, #12]
 801ba0e:	e7cf      	b.n	801b9b0 <__smakebuf_r+0x18>

0801ba10 <_fstat_r>:
 801ba10:	b538      	push	{r3, r4, r5, lr}
 801ba12:	4d07      	ldr	r5, [pc, #28]	@ (801ba30 <_fstat_r+0x20>)
 801ba14:	2300      	movs	r3, #0
 801ba16:	4604      	mov	r4, r0
 801ba18:	4608      	mov	r0, r1
 801ba1a:	4611      	mov	r1, r2
 801ba1c:	602b      	str	r3, [r5, #0]
 801ba1e:	f7e6 f80f 	bl	8001a40 <_fstat>
 801ba22:	1c43      	adds	r3, r0, #1
 801ba24:	d102      	bne.n	801ba2c <_fstat_r+0x1c>
 801ba26:	682b      	ldr	r3, [r5, #0]
 801ba28:	b103      	cbz	r3, 801ba2c <_fstat_r+0x1c>
 801ba2a:	6023      	str	r3, [r4, #0]
 801ba2c:	bd38      	pop	{r3, r4, r5, pc}
 801ba2e:	bf00      	nop
 801ba30:	2400e1e0 	.word	0x2400e1e0

0801ba34 <_isatty_r>:
 801ba34:	b538      	push	{r3, r4, r5, lr}
 801ba36:	4d06      	ldr	r5, [pc, #24]	@ (801ba50 <_isatty_r+0x1c>)
 801ba38:	2300      	movs	r3, #0
 801ba3a:	4604      	mov	r4, r0
 801ba3c:	4608      	mov	r0, r1
 801ba3e:	602b      	str	r3, [r5, #0]
 801ba40:	f7e6 f80e 	bl	8001a60 <_isatty>
 801ba44:	1c43      	adds	r3, r0, #1
 801ba46:	d102      	bne.n	801ba4e <_isatty_r+0x1a>
 801ba48:	682b      	ldr	r3, [r5, #0]
 801ba4a:	b103      	cbz	r3, 801ba4e <_isatty_r+0x1a>
 801ba4c:	6023      	str	r3, [r4, #0]
 801ba4e:	bd38      	pop	{r3, r4, r5, pc}
 801ba50:	2400e1e0 	.word	0x2400e1e0

0801ba54 <abort>:
 801ba54:	b508      	push	{r3, lr}
 801ba56:	2006      	movs	r0, #6
 801ba58:	f000 f82c 	bl	801bab4 <raise>
 801ba5c:	2001      	movs	r0, #1
 801ba5e:	f7e5 ffbb 	bl	80019d8 <_exit>

0801ba62 <_raise_r>:
 801ba62:	291f      	cmp	r1, #31
 801ba64:	b538      	push	{r3, r4, r5, lr}
 801ba66:	4605      	mov	r5, r0
 801ba68:	460c      	mov	r4, r1
 801ba6a:	d904      	bls.n	801ba76 <_raise_r+0x14>
 801ba6c:	2316      	movs	r3, #22
 801ba6e:	6003      	str	r3, [r0, #0]
 801ba70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba74:	bd38      	pop	{r3, r4, r5, pc}
 801ba76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ba78:	b112      	cbz	r2, 801ba80 <_raise_r+0x1e>
 801ba7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ba7e:	b94b      	cbnz	r3, 801ba94 <_raise_r+0x32>
 801ba80:	4628      	mov	r0, r5
 801ba82:	f000 f831 	bl	801bae8 <_getpid_r>
 801ba86:	4622      	mov	r2, r4
 801ba88:	4601      	mov	r1, r0
 801ba8a:	4628      	mov	r0, r5
 801ba8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba90:	f000 b818 	b.w	801bac4 <_kill_r>
 801ba94:	2b01      	cmp	r3, #1
 801ba96:	d00a      	beq.n	801baae <_raise_r+0x4c>
 801ba98:	1c59      	adds	r1, r3, #1
 801ba9a:	d103      	bne.n	801baa4 <_raise_r+0x42>
 801ba9c:	2316      	movs	r3, #22
 801ba9e:	6003      	str	r3, [r0, #0]
 801baa0:	2001      	movs	r0, #1
 801baa2:	e7e7      	b.n	801ba74 <_raise_r+0x12>
 801baa4:	2100      	movs	r1, #0
 801baa6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801baaa:	4620      	mov	r0, r4
 801baac:	4798      	blx	r3
 801baae:	2000      	movs	r0, #0
 801bab0:	e7e0      	b.n	801ba74 <_raise_r+0x12>
	...

0801bab4 <raise>:
 801bab4:	4b02      	ldr	r3, [pc, #8]	@ (801bac0 <raise+0xc>)
 801bab6:	4601      	mov	r1, r0
 801bab8:	6818      	ldr	r0, [r3, #0]
 801baba:	f7ff bfd2 	b.w	801ba62 <_raise_r>
 801babe:	bf00      	nop
 801bac0:	240004c0 	.word	0x240004c0

0801bac4 <_kill_r>:
 801bac4:	b538      	push	{r3, r4, r5, lr}
 801bac6:	4d07      	ldr	r5, [pc, #28]	@ (801bae4 <_kill_r+0x20>)
 801bac8:	2300      	movs	r3, #0
 801baca:	4604      	mov	r4, r0
 801bacc:	4608      	mov	r0, r1
 801bace:	4611      	mov	r1, r2
 801bad0:	602b      	str	r3, [r5, #0]
 801bad2:	f7e5 ff71 	bl	80019b8 <_kill>
 801bad6:	1c43      	adds	r3, r0, #1
 801bad8:	d102      	bne.n	801bae0 <_kill_r+0x1c>
 801bada:	682b      	ldr	r3, [r5, #0]
 801badc:	b103      	cbz	r3, 801bae0 <_kill_r+0x1c>
 801bade:	6023      	str	r3, [r4, #0]
 801bae0:	bd38      	pop	{r3, r4, r5, pc}
 801bae2:	bf00      	nop
 801bae4:	2400e1e0 	.word	0x2400e1e0

0801bae8 <_getpid_r>:
 801bae8:	f7e5 bf5e 	b.w	80019a8 <_getpid>

0801baec <_init>:
 801baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801baee:	bf00      	nop
 801baf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801baf2:	bc08      	pop	{r3}
 801baf4:	469e      	mov	lr, r3
 801baf6:	4770      	bx	lr

0801baf8 <_fini>:
 801baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bafa:	bf00      	nop
 801bafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bafe:	bc08      	pop	{r3}
 801bb00:	469e      	mov	lr, r3
 801bb02:	4770      	bx	lr
